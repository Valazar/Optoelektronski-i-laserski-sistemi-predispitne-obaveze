
Display_and_Touch_Screen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015cc8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007700  08015e98  08015e98  00025e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d598  0801d598  0003035c  2**0
                  CONTENTS
  4 .ARM          00000008  0801d598  0801d598  0002d598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d5a0  0801d5a0  0003035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d5a0  0801d5a0  0002d5a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d5a4  0801d5a4  0002d5a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000035c  20000000  0801d5a8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001b06c  2000035c  0801d904  0003035c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001b3c8  0801d904  0003b3c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003035c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033413  00000000  00000000  0003038a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004fba  00000000  00000000  0006379d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000157a2  00000000  00000000  00068757  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001988  00000000  00000000  0007df00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000017b0  00000000  00000000  0007f888  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0002e59e  00000000  00000000  00081038  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000182ac  00000000  00000000  000af5d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00105639  00000000  00000000  000c7882  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      000000fd  00000000  00000000  001ccebb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004bcc  00000000  00000000  001ccfb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000035c 	.word	0x2000035c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08015e80 	.word	0x08015e80

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000360 	.word	0x20000360
 800020c:	08015e80 	.word	0x08015e80

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2iz>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d215      	bcs.n	8000a92 <__aeabi_d2iz+0x36>
 8000a66:	d511      	bpl.n	8000a8c <__aeabi_d2iz+0x30>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d912      	bls.n	8000a98 <__aeabi_d2iz+0x3c>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a82:	fa23 f002 	lsr.w	r0, r3, r2
 8000a86:	bf18      	it	ne
 8000a88:	4240      	negne	r0, r0
 8000a8a:	4770      	bx	lr
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a96:	d105      	bne.n	8000aa4 <__aeabi_d2iz+0x48>
 8000a98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	bf08      	it	eq
 8000a9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_d2f>:
 8000aac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab4:	bf24      	itt	cs
 8000ab6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000abe:	d90d      	bls.n	8000adc <__aeabi_d2f+0x30>
 8000ac0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ac8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000acc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad4:	bf08      	it	eq
 8000ad6:	f020 0001 	biceq.w	r0, r0, #1
 8000ada:	4770      	bx	lr
 8000adc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae0:	d121      	bne.n	8000b26 <__aeabi_d2f+0x7a>
 8000ae2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ae6:	bfbc      	itt	lt
 8000ae8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aec:	4770      	bxlt	lr
 8000aee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000af6:	f1c2 0218 	rsb	r2, r2, #24
 8000afa:	f1c2 0c20 	rsb	ip, r2, #32
 8000afe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b02:	fa20 f002 	lsr.w	r0, r0, r2
 8000b06:	bf18      	it	ne
 8000b08:	f040 0001 	orrne.w	r0, r0, #1
 8000b0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b18:	ea40 000c 	orr.w	r0, r0, ip
 8000b1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b24:	e7cc      	b.n	8000ac0 <__aeabi_d2f+0x14>
 8000b26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2a:	d107      	bne.n	8000b3c <__aeabi_d2f+0x90>
 8000b2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b30:	bf1e      	ittt	ne
 8000b32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3a:	4770      	bxne	lr
 8000b3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <__aeabi_uldivmod>:
 8000b4c:	b953      	cbnz	r3, 8000b64 <__aeabi_uldivmod+0x18>
 8000b4e:	b94a      	cbnz	r2, 8000b64 <__aeabi_uldivmod+0x18>
 8000b50:	2900      	cmp	r1, #0
 8000b52:	bf08      	it	eq
 8000b54:	2800      	cmpeq	r0, #0
 8000b56:	bf1c      	itt	ne
 8000b58:	f04f 31ff 	movne.w	r1, #4294967295
 8000b5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b60:	f000 b972 	b.w	8000e48 <__aeabi_idiv0>
 8000b64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b6c:	f000 f806 	bl	8000b7c <__udivmoddi4>
 8000b70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b78:	b004      	add	sp, #16
 8000b7a:	4770      	bx	lr

08000b7c <__udivmoddi4>:
 8000b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b80:	9e08      	ldr	r6, [sp, #32]
 8000b82:	4604      	mov	r4, r0
 8000b84:	4688      	mov	r8, r1
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d14b      	bne.n	8000c22 <__udivmoddi4+0xa6>
 8000b8a:	428a      	cmp	r2, r1
 8000b8c:	4615      	mov	r5, r2
 8000b8e:	d967      	bls.n	8000c60 <__udivmoddi4+0xe4>
 8000b90:	fab2 f282 	clz	r2, r2
 8000b94:	b14a      	cbz	r2, 8000baa <__udivmoddi4+0x2e>
 8000b96:	f1c2 0720 	rsb	r7, r2, #32
 8000b9a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b9e:	fa20 f707 	lsr.w	r7, r0, r7
 8000ba2:	4095      	lsls	r5, r2
 8000ba4:	ea47 0803 	orr.w	r8, r7, r3
 8000ba8:	4094      	lsls	r4, r2
 8000baa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bae:	0c23      	lsrs	r3, r4, #16
 8000bb0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bb4:	fa1f fc85 	uxth.w	ip, r5
 8000bb8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bbc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bc0:	fb07 f10c 	mul.w	r1, r7, ip
 8000bc4:	4299      	cmp	r1, r3
 8000bc6:	d909      	bls.n	8000bdc <__udivmoddi4+0x60>
 8000bc8:	18eb      	adds	r3, r5, r3
 8000bca:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bce:	f080 811b 	bcs.w	8000e08 <__udivmoddi4+0x28c>
 8000bd2:	4299      	cmp	r1, r3
 8000bd4:	f240 8118 	bls.w	8000e08 <__udivmoddi4+0x28c>
 8000bd8:	3f02      	subs	r7, #2
 8000bda:	442b      	add	r3, r5
 8000bdc:	1a5b      	subs	r3, r3, r1
 8000bde:	b2a4      	uxth	r4, r4
 8000be0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000be4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000be8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bec:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bf0:	45a4      	cmp	ip, r4
 8000bf2:	d909      	bls.n	8000c08 <__udivmoddi4+0x8c>
 8000bf4:	192c      	adds	r4, r5, r4
 8000bf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bfa:	f080 8107 	bcs.w	8000e0c <__udivmoddi4+0x290>
 8000bfe:	45a4      	cmp	ip, r4
 8000c00:	f240 8104 	bls.w	8000e0c <__udivmoddi4+0x290>
 8000c04:	3802      	subs	r0, #2
 8000c06:	442c      	add	r4, r5
 8000c08:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c0c:	eba4 040c 	sub.w	r4, r4, ip
 8000c10:	2700      	movs	r7, #0
 8000c12:	b11e      	cbz	r6, 8000c1c <__udivmoddi4+0xa0>
 8000c14:	40d4      	lsrs	r4, r2
 8000c16:	2300      	movs	r3, #0
 8000c18:	e9c6 4300 	strd	r4, r3, [r6]
 8000c1c:	4639      	mov	r1, r7
 8000c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0xbe>
 8000c26:	2e00      	cmp	r6, #0
 8000c28:	f000 80eb 	beq.w	8000e02 <__udivmoddi4+0x286>
 8000c2c:	2700      	movs	r7, #0
 8000c2e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c32:	4638      	mov	r0, r7
 8000c34:	4639      	mov	r1, r7
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	fab3 f783 	clz	r7, r3
 8000c3e:	2f00      	cmp	r7, #0
 8000c40:	d147      	bne.n	8000cd2 <__udivmoddi4+0x156>
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d302      	bcc.n	8000c4c <__udivmoddi4+0xd0>
 8000c46:	4282      	cmp	r2, r0
 8000c48:	f200 80fa 	bhi.w	8000e40 <__udivmoddi4+0x2c4>
 8000c4c:	1a84      	subs	r4, r0, r2
 8000c4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c52:	2001      	movs	r0, #1
 8000c54:	4698      	mov	r8, r3
 8000c56:	2e00      	cmp	r6, #0
 8000c58:	d0e0      	beq.n	8000c1c <__udivmoddi4+0xa0>
 8000c5a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c5e:	e7dd      	b.n	8000c1c <__udivmoddi4+0xa0>
 8000c60:	b902      	cbnz	r2, 8000c64 <__udivmoddi4+0xe8>
 8000c62:	deff      	udf	#255	; 0xff
 8000c64:	fab2 f282 	clz	r2, r2
 8000c68:	2a00      	cmp	r2, #0
 8000c6a:	f040 808f 	bne.w	8000d8c <__udivmoddi4+0x210>
 8000c6e:	1b49      	subs	r1, r1, r5
 8000c70:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c74:	fa1f f885 	uxth.w	r8, r5
 8000c78:	2701      	movs	r7, #1
 8000c7a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c7e:	0c23      	lsrs	r3, r4, #16
 8000c80:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c88:	fb08 f10c 	mul.w	r1, r8, ip
 8000c8c:	4299      	cmp	r1, r3
 8000c8e:	d907      	bls.n	8000ca0 <__udivmoddi4+0x124>
 8000c90:	18eb      	adds	r3, r5, r3
 8000c92:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c96:	d202      	bcs.n	8000c9e <__udivmoddi4+0x122>
 8000c98:	4299      	cmp	r1, r3
 8000c9a:	f200 80cd 	bhi.w	8000e38 <__udivmoddi4+0x2bc>
 8000c9e:	4684      	mov	ip, r0
 8000ca0:	1a59      	subs	r1, r3, r1
 8000ca2:	b2a3      	uxth	r3, r4
 8000ca4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ca8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cac:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cb0:	fb08 f800 	mul.w	r8, r8, r0
 8000cb4:	45a0      	cmp	r8, r4
 8000cb6:	d907      	bls.n	8000cc8 <__udivmoddi4+0x14c>
 8000cb8:	192c      	adds	r4, r5, r4
 8000cba:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cbe:	d202      	bcs.n	8000cc6 <__udivmoddi4+0x14a>
 8000cc0:	45a0      	cmp	r8, r4
 8000cc2:	f200 80b6 	bhi.w	8000e32 <__udivmoddi4+0x2b6>
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	eba4 0408 	sub.w	r4, r4, r8
 8000ccc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cd0:	e79f      	b.n	8000c12 <__udivmoddi4+0x96>
 8000cd2:	f1c7 0c20 	rsb	ip, r7, #32
 8000cd6:	40bb      	lsls	r3, r7
 8000cd8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cdc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ce0:	fa01 f407 	lsl.w	r4, r1, r7
 8000ce4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ce8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cec:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cf0:	4325      	orrs	r5, r4
 8000cf2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cf6:	0c2c      	lsrs	r4, r5, #16
 8000cf8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cfc:	fa1f fa8e 	uxth.w	sl, lr
 8000d00:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d04:	fb09 f40a 	mul.w	r4, r9, sl
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d0e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d12:	d90b      	bls.n	8000d2c <__udivmoddi4+0x1b0>
 8000d14:	eb1e 0303 	adds.w	r3, lr, r3
 8000d18:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d1c:	f080 8087 	bcs.w	8000e2e <__udivmoddi4+0x2b2>
 8000d20:	429c      	cmp	r4, r3
 8000d22:	f240 8084 	bls.w	8000e2e <__udivmoddi4+0x2b2>
 8000d26:	f1a9 0902 	sub.w	r9, r9, #2
 8000d2a:	4473      	add	r3, lr
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	b2ad      	uxth	r5, r5
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d3c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d40:	45a2      	cmp	sl, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x1da>
 8000d44:	eb1e 0404 	adds.w	r4, lr, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	d26b      	bcs.n	8000e26 <__udivmoddi4+0x2aa>
 8000d4e:	45a2      	cmp	sl, r4
 8000d50:	d969      	bls.n	8000e26 <__udivmoddi4+0x2aa>
 8000d52:	3802      	subs	r0, #2
 8000d54:	4474      	add	r4, lr
 8000d56:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d5e:	eba4 040a 	sub.w	r4, r4, sl
 8000d62:	454c      	cmp	r4, r9
 8000d64:	46c2      	mov	sl, r8
 8000d66:	464b      	mov	r3, r9
 8000d68:	d354      	bcc.n	8000e14 <__udivmoddi4+0x298>
 8000d6a:	d051      	beq.n	8000e10 <__udivmoddi4+0x294>
 8000d6c:	2e00      	cmp	r6, #0
 8000d6e:	d069      	beq.n	8000e44 <__udivmoddi4+0x2c8>
 8000d70:	ebb1 050a 	subs.w	r5, r1, sl
 8000d74:	eb64 0403 	sbc.w	r4, r4, r3
 8000d78:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d7c:	40fd      	lsrs	r5, r7
 8000d7e:	40fc      	lsrs	r4, r7
 8000d80:	ea4c 0505 	orr.w	r5, ip, r5
 8000d84:	e9c6 5400 	strd	r5, r4, [r6]
 8000d88:	2700      	movs	r7, #0
 8000d8a:	e747      	b.n	8000c1c <__udivmoddi4+0xa0>
 8000d8c:	f1c2 0320 	rsb	r3, r2, #32
 8000d90:	fa20 f703 	lsr.w	r7, r0, r3
 8000d94:	4095      	lsls	r5, r2
 8000d96:	fa01 f002 	lsl.w	r0, r1, r2
 8000d9a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d9e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000da2:	4338      	orrs	r0, r7
 8000da4:	0c01      	lsrs	r1, r0, #16
 8000da6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000daa:	fa1f f885 	uxth.w	r8, r5
 8000dae:	fb0e 3317 	mls	r3, lr, r7, r3
 8000db2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000db6:	fb07 f308 	mul.w	r3, r7, r8
 8000dba:	428b      	cmp	r3, r1
 8000dbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000dc0:	d907      	bls.n	8000dd2 <__udivmoddi4+0x256>
 8000dc2:	1869      	adds	r1, r5, r1
 8000dc4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000dc8:	d22f      	bcs.n	8000e2a <__udivmoddi4+0x2ae>
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d92d      	bls.n	8000e2a <__udivmoddi4+0x2ae>
 8000dce:	3f02      	subs	r7, #2
 8000dd0:	4429      	add	r1, r5
 8000dd2:	1acb      	subs	r3, r1, r3
 8000dd4:	b281      	uxth	r1, r0
 8000dd6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dda:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dde:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de2:	fb00 f308 	mul.w	r3, r0, r8
 8000de6:	428b      	cmp	r3, r1
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x27e>
 8000dea:	1869      	adds	r1, r5, r1
 8000dec:	f100 3cff 	add.w	ip, r0, #4294967295
 8000df0:	d217      	bcs.n	8000e22 <__udivmoddi4+0x2a6>
 8000df2:	428b      	cmp	r3, r1
 8000df4:	d915      	bls.n	8000e22 <__udivmoddi4+0x2a6>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4429      	add	r1, r5
 8000dfa:	1ac9      	subs	r1, r1, r3
 8000dfc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e00:	e73b      	b.n	8000c7a <__udivmoddi4+0xfe>
 8000e02:	4637      	mov	r7, r6
 8000e04:	4630      	mov	r0, r6
 8000e06:	e709      	b.n	8000c1c <__udivmoddi4+0xa0>
 8000e08:	4607      	mov	r7, r0
 8000e0a:	e6e7      	b.n	8000bdc <__udivmoddi4+0x60>
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	e6fb      	b.n	8000c08 <__udivmoddi4+0x8c>
 8000e10:	4541      	cmp	r1, r8
 8000e12:	d2ab      	bcs.n	8000d6c <__udivmoddi4+0x1f0>
 8000e14:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e18:	eb69 020e 	sbc.w	r2, r9, lr
 8000e1c:	3801      	subs	r0, #1
 8000e1e:	4613      	mov	r3, r2
 8000e20:	e7a4      	b.n	8000d6c <__udivmoddi4+0x1f0>
 8000e22:	4660      	mov	r0, ip
 8000e24:	e7e9      	b.n	8000dfa <__udivmoddi4+0x27e>
 8000e26:	4618      	mov	r0, r3
 8000e28:	e795      	b.n	8000d56 <__udivmoddi4+0x1da>
 8000e2a:	4667      	mov	r7, ip
 8000e2c:	e7d1      	b.n	8000dd2 <__udivmoddi4+0x256>
 8000e2e:	4681      	mov	r9, r0
 8000e30:	e77c      	b.n	8000d2c <__udivmoddi4+0x1b0>
 8000e32:	3802      	subs	r0, #2
 8000e34:	442c      	add	r4, r5
 8000e36:	e747      	b.n	8000cc8 <__udivmoddi4+0x14c>
 8000e38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e3c:	442b      	add	r3, r5
 8000e3e:	e72f      	b.n	8000ca0 <__udivmoddi4+0x124>
 8000e40:	4638      	mov	r0, r7
 8000e42:	e708      	b.n	8000c56 <__udivmoddi4+0xda>
 8000e44:	4637      	mov	r7, r6
 8000e46:	e6e9      	b.n	8000c1c <__udivmoddi4+0xa0>

08000e48 <__aeabi_idiv0>:
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop

08000e4c <Init_LCD_GPIO>:

//=============================================================================
// GPIO setup 
//=============================================================================
void Init_LCD_GPIO(void)
{
 8000e4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e50:	b08b      	sub	sp, #44	; 0x2c
	  GPIO_InitTypeDef GPIO_InitStruct;

	  __HAL_RCC_CRC_CLK_ENABLE();
 8000e52:	4b36      	ldr	r3, [pc, #216]	; (8000f2c <Init_LCD_GPIO+0xe0>)
 8000e54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e56:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000e5a:	631a      	str	r2, [r3, #48]	; 0x30
 8000e5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e5e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000e62:	9201      	str	r2, [sp, #4]
 8000e64:	9a01      	ldr	r2, [sp, #4]
	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e68:	f042 0210 	orr.w	r2, r2, #16
 8000e6c:	631a      	str	r2, [r3, #48]	; 0x30
 8000e6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e70:	f002 0210 	and.w	r2, r2, #16
 8000e74:	9202      	str	r2, [sp, #8]
 8000e76:	9a02      	ldr	r2, [sp, #8]
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e7a:	f042 0220 	orr.w	r2, r2, #32
 8000e7e:	631a      	str	r2, [r3, #48]	; 0x30
 8000e80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e82:	f002 0220 	and.w	r2, r2, #32
 8000e86:	9203      	str	r2, [sp, #12]
 8000e88:	9a03      	ldr	r2, [sp, #12]
	  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e90:	631a      	str	r2, [r3, #48]	; 0x30
 8000e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e98:	9304      	str	r3, [sp, #16]
 8000e9a:	9b04      	ldr	r3, [sp, #16]


	  HAL_GPIO_WritePin(GDISP_CMD_PORT, GCMD, GPIO_PIN_RESET);
 8000e9c:	4c24      	ldr	r4, [pc, #144]	; (8000f30 <Init_LCD_GPIO+0xe4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8000ea4:	4620      	mov	r0, r4
 8000ea6:	f000 fc7d 	bl	80017a4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GDISP_DATA_LO_PORT, GDATA_LO, GPIO_PIN_RESET);
 8000eaa:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8000f34 <Init_LCD_GPIO+0xe8>
 8000eae:	2200      	movs	r2, #0
 8000eb0:	21ff      	movs	r1, #255	; 0xff
 8000eb2:	4648      	mov	r0, r9
 8000eb4:	f000 fc76 	bl	80017a4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GDISP_DATA_HI_PORT, GDATA_HI, GPIO_PIN_RESET);
 8000eb8:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8000f38 <Init_LCD_GPIO+0xec>
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000ec2:	4640      	mov	r0, r8
 8000ec4:	f000 fc6e 	bl	80017a4 <HAL_GPIO_WritePin>

	  GPIO_InitStruct.Pin = GCMD;
 8000ec8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000ecc:	9305      	str	r3, [sp, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ece:	2701      	movs	r7, #1
 8000ed0:	9706      	str	r7, [sp, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2600      	movs	r6, #0
 8000ed4:	9607      	str	r6, [sp, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed6:	2503      	movs	r5, #3
 8000ed8:	9508      	str	r5, [sp, #32]
	  HAL_GPIO_Init(GDISP_CMD_PORT, &GPIO_InitStruct);
 8000eda:	a905      	add	r1, sp, #20
 8000edc:	4620      	mov	r0, r4
 8000ede:	f000 fb6d 	bl	80015bc <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GDATA_LO;
 8000ee2:	23ff      	movs	r3, #255	; 0xff
 8000ee4:	9305      	str	r3, [sp, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee6:	9706      	str	r7, [sp, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	9607      	str	r6, [sp, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eea:	9508      	str	r5, [sp, #32]
	  HAL_GPIO_Init(GDISP_DATA_LO_PORT, &GPIO_InitStruct);
 8000eec:	a905      	add	r1, sp, #20
 8000eee:	4648      	mov	r0, r9
 8000ef0:	f000 fb64 	bl	80015bc <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GDATA_HI;
 8000ef4:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000ef8:	9305      	str	r3, [sp, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efa:	9706      	str	r7, [sp, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	9607      	str	r6, [sp, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efe:	9508      	str	r5, [sp, #32]
	  HAL_GPIO_Init(GDISP_DATA_HI_PORT, &GPIO_InitStruct);
 8000f00:	a905      	add	r1, sp, #20
 8000f02:	4640      	mov	r0, r8
 8000f04:	f000 fb5a 	bl	80015bc <HAL_GPIO_Init>

	  SET_CS; SET_WR; SET_RD; SET_DC; SET_RST;
 8000f08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f0c:	61a3      	str	r3, [r4, #24]
 8000f0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f12:	61a3      	str	r3, [r4, #24]
 8000f14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f18:	61a3      	str	r3, [r4, #24]
 8000f1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f1e:	61a3      	str	r3, [r4, #24]
 8000f20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f24:	61a3      	str	r3, [r4, #24]
}
 8000f26:	b00b      	add	sp, #44	; 0x2c
 8000f28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40021400 	.word	0x40021400
 8000f34:	40021800 	.word	0x40021800
 8000f38:	40021000 	.word	0x40021000

08000f3c <SSD1963_WriteCommand>:
//=============================================================================
// Write command to display
//=============================================================================
void SSD1963_WriteCommand(uint16_t Data)
{
 8000f3c:	b410      	push	{r4}
	uint16_t _Data=~Data;
 8000f3e:	43c3      	mvns	r3, r0

	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8000f40:	4911      	ldr	r1, [pc, #68]	; (8000f88 <SSD1963_WriteCommand+0x4c>)
 8000f42:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000f46:	618a      	str	r2, [r1, #24]

	CLR_CS;
 8000f48:	4a10      	ldr	r2, [pc, #64]	; (8000f8c <SSD1963_WriteCommand+0x50>)
 8000f4a:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
 8000f4e:	6194      	str	r4, [r2, #24]
	CLR_DC;
 8000f50:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8000f54:	6194      	str	r4, [r2, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8000f56:	041b      	lsls	r3, r3, #16
 8000f58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000f5c:	b2c4      	uxtb	r4, r0
 8000f5e:	4323      	orrs	r3, r4
 8000f60:	4c0b      	ldr	r4, [pc, #44]	; (8000f90 <SSD1963_WriteCommand+0x54>)
 8000f62:	61a3      	str	r3, [r4, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8000f64:	694b      	ldr	r3, [r1, #20]
 8000f66:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8000f6a:	4318      	orrs	r0, r3
 8000f6c:	6148      	str	r0, [r1, #20]
	writeStrobe;
 8000f6e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000f72:	6193      	str	r3, [r2, #24]
 8000f74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f78:	6193      	str	r3, [r2, #24]
	SET_CS;
 8000f7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f7e:	6193      	str	r3, [r2, #24]
}
 8000f80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	40021400 	.word	0x40021400
 8000f90:	40021800 	.word	0x40021800

08000f94 <SSD1963_WriteData>:
//=============================================================================
// Write data to display
//=============================================================================

void SSD1963_WriteData(uint16_t Data)
{
 8000f94:	b410      	push	{r4}
	uint16_t _Data=~Data;
 8000f96:	43c3      	mvns	r3, r0

	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8000f98:	4911      	ldr	r1, [pc, #68]	; (8000fe0 <SSD1963_WriteData+0x4c>)
 8000f9a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000f9e:	618a      	str	r2, [r1, #24]

	CLR_CS;
 8000fa0:	4a10      	ldr	r2, [pc, #64]	; (8000fe4 <SSD1963_WriteData+0x50>)
 8000fa2:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
 8000fa6:	6194      	str	r4, [r2, #24]
	SET_DC;
 8000fa8:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 8000fac:	6194      	str	r4, [r2, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8000fae:	041b      	lsls	r3, r3, #16
 8000fb0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000fb4:	b2c4      	uxtb	r4, r0
 8000fb6:	4323      	orrs	r3, r4
 8000fb8:	4c0b      	ldr	r4, [pc, #44]	; (8000fe8 <SSD1963_WriteData+0x54>)
 8000fba:	61a3      	str	r3, [r4, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8000fbc:	694b      	ldr	r3, [r1, #20]
 8000fbe:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8000fc2:	4318      	orrs	r0, r3
 8000fc4:	6148      	str	r0, [r1, #20]
	writeStrobe;
 8000fc6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000fca:	6193      	str	r3, [r2, #24]
 8000fcc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fd0:	6193      	str	r3, [r2, #24]
	SET_CS;
 8000fd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fd6:	6193      	str	r3, [r2, #24]

}
 8000fd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	40021400 	.word	0x40021400
 8000fe8:	40021800 	.word	0x40021800

08000fec <SSD1963_WriteDataMultiple>:
//=============================================================================
// Write multiple data to display
//=============================================================================
void SSD1963_WriteDataMultiple(uint16_t * Data, int NumItems)
{
 8000fec:	b538      	push	{r3, r4, r5, lr}
 8000fee:	4605      	mov	r5, r0
 8000ff0:	460c      	mov	r4, r1
  while (NumItems)
 8000ff2:	e004      	b.n	8000ffe <SSD1963_WriteDataMultiple+0x12>
  {
	  SSD1963_WriteData(*Data);
 8000ff4:	f835 0b02 	ldrh.w	r0, [r5], #2
 8000ff8:	f7ff ffcc 	bl	8000f94 <SSD1963_WriteData>
	  Data++;
	  NumItems--;
 8000ffc:	3c01      	subs	r4, #1
  while (NumItems)
 8000ffe:	2c00      	cmp	r4, #0
 8001000:	d1f8      	bne.n	8000ff4 <SSD1963_WriteDataMultiple+0x8>
  }
}
 8001002:	bd38      	pop	{r3, r4, r5, pc}

08001004 <SSD1963_Init>:
//=============================================================================
// Display initialization
//=============================================================================

void SSD1963_Init (void)
{
 8001004:	b510      	push	{r4, lr}
	CLR_RST;  // reset
 8001006:	4c54      	ldr	r4, [pc, #336]	; (8001158 <SSD1963_Init+0x154>)
 8001008:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800100c:	61a3      	str	r3, [r4, #24]
	HAL_Delay(500);
 800100e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001012:	f000 fa53 	bl	80014bc <HAL_Delay>
	SET_RST;
 8001016:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800101a:	61a3      	str	r3, [r4, #24]
	HAL_Delay(100);
 800101c:	2064      	movs	r0, #100	; 0x64
 800101e:	f000 fa4d 	bl	80014bc <HAL_Delay>

	SSD1963_WriteCommand(SSD1963_SOFT_RESET);
 8001022:	2001      	movs	r0, #1
 8001024:	f7ff ff8a 	bl	8000f3c <SSD1963_WriteCommand>
	HAL_Delay(10);
 8001028:	200a      	movs	r0, #10
 800102a:	f000 fa47 	bl	80014bc <HAL_Delay>
	SSD1963_WriteCommand(SSD1963_SET_PLL_MN);
 800102e:	20e2      	movs	r0, #226	; 0xe2
 8001030:	f7ff ff84 	bl	8000f3c <SSD1963_WriteCommand>
	SSD1963_WriteData(29);	// PLLclk = REFclk * 30 (300MHz)
 8001034:	201d      	movs	r0, #29
 8001036:	f7ff ffad 	bl	8000f94 <SSD1963_WriteData>
	SSD1963_WriteData(2);	// SYSclk = PLLclk / 3  (100MHz)
 800103a:	2002      	movs	r0, #2
 800103c:	f7ff ffaa 	bl	8000f94 <SSD1963_WriteData>
	SSD1963_WriteData(4);  	// dummy
 8001040:	2004      	movs	r0, #4
 8001042:	f7ff ffa7 	bl	8000f94 <SSD1963_WriteData>

	SSD1963_WriteCommand(SSD1963_SET_PLL);
 8001046:	20e0      	movs	r0, #224	; 0xe0
 8001048:	f7ff ff78 	bl	8000f3c <SSD1963_WriteCommand>
	SSD1963_WriteData(0x0001);
 800104c:	2001      	movs	r0, #1
 800104e:	f7ff ffa1 	bl	8000f94 <SSD1963_WriteData>

	HAL_Delay(100);
 8001052:	2064      	movs	r0, #100	; 0x64
 8001054:	f000 fa32 	bl	80014bc <HAL_Delay>

	SSD1963_WriteCommand(SSD1963_SET_PLL);
 8001058:	20e0      	movs	r0, #224	; 0xe0
 800105a:	f7ff ff6f 	bl	8000f3c <SSD1963_WriteCommand>
	SSD1963_WriteData(0x0003);
 800105e:	2003      	movs	r0, #3
 8001060:	f7ff ff98 	bl	8000f94 <SSD1963_WriteData>

	SSD1963_WriteCommand(SSD1963_SET_LCD_MODE);
 8001064:	20b0      	movs	r0, #176	; 0xb0
 8001066:	f7ff ff69 	bl	8000f3c <SSD1963_WriteCommand>
	SSD1963_WriteData(0x0020);
 800106a:	2020      	movs	r0, #32
 800106c:	f7ff ff92 	bl	8000f94 <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);
 8001070:	2000      	movs	r0, #0
 8001072:	f7ff ff8f 	bl	8000f94 <SSD1963_WriteData>
	SSD1963_WriteData(mHIGH((TFT_WIDTH-1)));
 8001076:	2001      	movs	r0, #1
 8001078:	f7ff ff8c 	bl	8000f94 <SSD1963_WriteData>
	SSD1963_WriteData(mLOW((TFT_WIDTH-1)));
 800107c:	20df      	movs	r0, #223	; 0xdf
 800107e:	f7ff ff89 	bl	8000f94 <SSD1963_WriteData>
	SSD1963_WriteData(mHIGH((TFT_HEIGHT-1)));
 8001082:	2001      	movs	r0, #1
 8001084:	f7ff ff86 	bl	8000f94 <SSD1963_WriteData>
	SSD1963_WriteData(mLOW((TFT_HEIGHT-1)));
 8001088:	200f      	movs	r0, #15
 800108a:	f7ff ff83 	bl	8000f94 <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);
 800108e:	2000      	movs	r0, #0
 8001090:	f7ff ff80 	bl	8000f94 <SSD1963_WriteData>

	SSD1963_WriteCommand(SSD1963_SET_PIXEL_DATA_INTERFACE);
 8001094:	20f0      	movs	r0, #240	; 0xf0
 8001096:	f7ff ff51 	bl	8000f3c <SSD1963_WriteCommand>
	SSD1963_WriteData(SSD1963_PDI_16BIT565);
 800109a:	2003      	movs	r0, #3
 800109c:	f7ff ff7a 	bl	8000f94 <SSD1963_WriteData>

	SSD1963_WriteCommand(SSD1963_SET_LSHIFT_FREQ);
 80010a0:	20e6      	movs	r0, #230	; 0xe6
 80010a2:	f7ff ff4b 	bl	8000f3c <SSD1963_WriteCommand>
	SSD1963_WriteData((LCD_FPR >> 16) & 0x00FF);
 80010a6:	2001      	movs	r0, #1
 80010a8:	f7ff ff74 	bl	8000f94 <SSD1963_WriteData>
	SSD1963_WriteData((LCD_FPR >> 8) & 0x00FF);
 80010ac:	2075      	movs	r0, #117	; 0x75
 80010ae:	f7ff ff71 	bl	8000f94 <SSD1963_WriteData>
	SSD1963_WriteData(LCD_FPR & 0x00FF);
 80010b2:	20ed      	movs	r0, #237	; 0xed
 80010b4:	f7ff ff6e 	bl	8000f94 <SSD1963_WriteData>

	SSD1963_WriteCommand(SSD1963_SET_HORI_PERIOD);
 80010b8:	20b4      	movs	r0, #180	; 0xb4
 80010ba:	f7ff ff3f 	bl	8000f3c <SSD1963_WriteCommand>
	SSD1963_WriteData(mHIGH(TFT_HSYNC_PERIOD));
 80010be:	2002      	movs	r0, #2
 80010c0:	f7ff ff68 	bl	8000f94 <SSD1963_WriteData>
	SSD1963_WriteData(mLOW(TFT_HSYNC_PERIOD));
 80010c4:	2014      	movs	r0, #20
 80010c6:	f7ff ff65 	bl	8000f94 <SSD1963_WriteData>
	SSD1963_WriteData(mHIGH((TFT_HSYNC_PULSE + TFT_HSYNC_BACK_PORCH)));
 80010ca:	2000      	movs	r0, #0
 80010cc:	f7ff ff62 	bl	8000f94 <SSD1963_WriteData>
	SSD1963_WriteData(mLOW((TFT_HSYNC_PULSE + TFT_HSYNC_BACK_PORCH)));
 80010d0:	202c      	movs	r0, #44	; 0x2c
 80010d2:	f7ff ff5f 	bl	8000f94 <SSD1963_WriteData>
	SSD1963_WriteData(TFT_HSYNC_PULSE);
 80010d6:	2002      	movs	r0, #2
 80010d8:	f7ff ff5c 	bl	8000f94 <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);
 80010dc:	2000      	movs	r0, #0
 80010de:	f7ff ff59 	bl	8000f94 <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);
 80010e2:	2000      	movs	r0, #0
 80010e4:	f7ff ff56 	bl	8000f94 <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);
 80010e8:	2000      	movs	r0, #0
 80010ea:	f7ff ff53 	bl	8000f94 <SSD1963_WriteData>

	SSD1963_WriteCommand(SSD1963_SET_VERT_PERIOD);
 80010ee:	20b6      	movs	r0, #182	; 0xb6
 80010f0:	f7ff ff24 	bl	8000f3c <SSD1963_WriteCommand>
	SSD1963_WriteData(mHIGH(TFT_VSYNC_PERIOD));
 80010f4:	2001      	movs	r0, #1
 80010f6:	f7ff ff4d 	bl	8000f94 <SSD1963_WriteData>
	SSD1963_WriteData(mLOW(TFT_VSYNC_PERIOD));
 80010fa:	201e      	movs	r0, #30
 80010fc:	f7ff ff4a 	bl	8000f94 <SSD1963_WriteData>
	SSD1963_WriteData(mHIGH((TFT_VSYNC_PULSE + TFT_VSYNC_BACK_PORCH)));
 8001100:	2000      	movs	r0, #0
 8001102:	f7ff ff47 	bl	8000f94 <SSD1963_WriteData>
	SSD1963_WriteData(mLOW((TFT_VSYNC_PULSE + TFT_VSYNC_BACK_PORCH)));
 8001106:	200c      	movs	r0, #12
 8001108:	f7ff ff44 	bl	8000f94 <SSD1963_WriteData>
	SSD1963_WriteData(TFT_VSYNC_PULSE);
 800110c:	2006      	movs	r0, #6
 800110e:	f7ff ff41 	bl	8000f94 <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);
 8001112:	2000      	movs	r0, #0
 8001114:	f7ff ff3e 	bl	8000f94 <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);
 8001118:	2000      	movs	r0, #0
 800111a:	f7ff ff3b 	bl	8000f94 <SSD1963_WriteData>

	SSD1963_WriteCommand(SSD1963_SET_DISPLAY_ON);//SET display on
 800111e:	2029      	movs	r0, #41	; 0x29
 8001120:	f7ff ff0c 	bl	8000f3c <SSD1963_WriteCommand>

	HAL_Delay(10);
 8001124:	200a      	movs	r0, #10
 8001126:	f000 f9c9 	bl	80014bc <HAL_Delay>
	SSD1963_WriteCommand(SSD1963_SET_PWM_CONF); //set PWM for Backlight. Manual p.53
 800112a:	20be      	movs	r0, #190	; 0xbe
 800112c:	f7ff ff06 	bl	8000f3c <SSD1963_WriteCommand>
	// 6 parameters to be set
	SSD1963_WriteData(0x0004); 					// PWM Freq =100MHz/(256*(PWMF[7:0]+1))/256  PWMF[7:0]=4 PWM Freq=305Hz
 8001130:	2004      	movs	r0, #4
 8001132:	f7ff ff2f 	bl	8000f94 <SSD1963_WriteData>
	SSD1963_WriteData(0x00C0); 					// PWM duty cycle(50%)
 8001136:	20c0      	movs	r0, #192	; 0xc0
 8001138:	f7ff ff2c 	bl	8000f94 <SSD1963_WriteData>
	SSD1963_WriteData(0x0001); 					// PWM controlled by host, PWM enabled
 800113c:	2001      	movs	r0, #1
 800113e:	f7ff ff29 	bl	8000f94 <SSD1963_WriteData>
	SSD1963_WriteData(0x0040); 					// brightness level 0x00 - 0xFF
 8001142:	2040      	movs	r0, #64	; 0x40
 8001144:	f7ff ff26 	bl	8000f94 <SSD1963_WriteData>
	SSD1963_WriteData(0x0000); 					// minimum brightness level =  0x00 - 0xFF
 8001148:	2000      	movs	r0, #0
 800114a:	f7ff ff23 	bl	8000f94 <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);					// brightness prescalar 0x0 - 0xF
 800114e:	2000      	movs	r0, #0
 8001150:	f7ff ff20 	bl	8000f94 <SSD1963_WriteData>


}
 8001154:	bd10      	pop	{r4, pc}
 8001156:	bf00      	nop
 8001158:	40021400 	.word	0x40021400

0800115c <Init_TOUCH_GPIO>:

I2C_HandleTypeDef hi2c;


void Init_TOUCH_GPIO(I2C_HandleTypeDef i2c_handle)
{
 800115c:	b084      	sub	sp, #16
 800115e:	b508      	push	{r3, lr}
 8001160:	f10d 0c08 	add.w	ip, sp, #8
 8001164:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hi2c=i2c_handle;
 8001168:	224c      	movs	r2, #76	; 0x4c
 800116a:	4661      	mov	r1, ip
 800116c:	4803      	ldr	r0, [pc, #12]	; (800117c <Init_TOUCH_GPIO+0x20>)
 800116e:	f014 fa70 	bl	8015652 <memcpy>
}
 8001172:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001176:	b004      	add	sp, #16
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	20019710 	.word	0x20019710

08001180 <STMPE610_Write>:
		return FALSE;
}


void STMPE610_Write(uint8_t reg, uint8_t val)
{
 8001180:	b500      	push	{lr}
 8001182:	b085      	sub	sp, #20
	uint8_t	txbuf[2];

	txbuf[0]=reg;
 8001184:	f88d 000c 	strb.w	r0, [sp, #12]
	txbuf[1]=val;
 8001188:	f88d 100d 	strb.w	r1, [sp, #13]

	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 800118c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	2302      	movs	r3, #2
 8001194:	aa03      	add	r2, sp, #12
 8001196:	2188      	movs	r1, #136	; 0x88
 8001198:	4803      	ldr	r0, [pc, #12]	; (80011a8 <STMPE610_Write+0x28>)
 800119a:	f000 fd07 	bl	8001bac <HAL_I2C_Master_Transmit>
 800119e:	2800      	cmp	r0, #0
 80011a0:	d1f4      	bne.n	800118c <STMPE610_Write+0xc>
}
 80011a2:	b005      	add	sp, #20
 80011a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80011a8:	20019710 	.word	0x20019710

080011ac <STMPE610_ReadByte>:

uint8_t STMPE610_ReadByte(uint8_t reg)
{
 80011ac:	b500      	push	{lr}
 80011ae:	b087      	sub	sp, #28
 80011b0:	f88d 000f 	strb.w	r0, [sp, #15]
	uint8_t rxbuf[1];
	rxbuf[0] = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	f88d 3014 	strb.w	r3, [sp, #20]

	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, &reg, 1, STMPE610_TIMEOUT)!= HAL_OK);
 80011ba:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	2301      	movs	r3, #1
 80011c2:	f10d 020f 	add.w	r2, sp, #15
 80011c6:	2188      	movs	r1, #136	; 0x88
 80011c8:	480a      	ldr	r0, [pc, #40]	; (80011f4 <STMPE610_ReadByte+0x48>)
 80011ca:	f000 fcef 	bl	8001bac <HAL_I2C_Master_Transmit>
 80011ce:	2800      	cmp	r0, #0
 80011d0:	d1f3      	bne.n	80011ba <STMPE610_ReadByte+0xe>
	while(HAL_I2C_Master_Receive(&hi2c, STMPE610_ADDR, (uint8_t *)rxbuf, 1, STMPE610_TIMEOUT) != HAL_OK);
 80011d2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	2301      	movs	r3, #1
 80011da:	aa05      	add	r2, sp, #20
 80011dc:	2188      	movs	r1, #136	; 0x88
 80011de:	4805      	ldr	r0, [pc, #20]	; (80011f4 <STMPE610_ReadByte+0x48>)
 80011e0:	f000 fda2 	bl	8001d28 <HAL_I2C_Master_Receive>
 80011e4:	2800      	cmp	r0, #0
 80011e6:	d1f4      	bne.n	80011d2 <STMPE610_ReadByte+0x26>

	return rxbuf[0];
}
 80011e8:	f89d 0014 	ldrb.w	r0, [sp, #20]
 80011ec:	b007      	add	sp, #28
 80011ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80011f2:	bf00      	nop
 80011f4:	20019710 	.word	0x20019710

080011f8 <STMPE610_ReadWord>:

uint16_t STMPE610_ReadWord(uint8_t reg)
{
 80011f8:	b500      	push	{lr}
 80011fa:	b087      	sub	sp, #28
 80011fc:	f88d 000f 	strb.w	r0, [sp, #15]
	uint8_t	rxbuf[2];
	
	rxbuf[0] = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	f88d 3014 	strb.w	r3, [sp, #20]
	rxbuf[1] = 0;
 8001206:	f88d 3015 	strb.w	r3, [sp, #21]

	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, &reg, 1, 10000)!= HAL_OK);
 800120a:	f242 7310 	movw	r3, #10000	; 0x2710
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2301      	movs	r3, #1
 8001212:	f10d 020f 	add.w	r2, sp, #15
 8001216:	2188      	movs	r1, #136	; 0x88
 8001218:	480c      	ldr	r0, [pc, #48]	; (800124c <STMPE610_ReadWord+0x54>)
 800121a:	f000 fcc7 	bl	8001bac <HAL_I2C_Master_Transmit>
 800121e:	2800      	cmp	r0, #0
 8001220:	d1f3      	bne.n	800120a <STMPE610_ReadWord+0x12>
	while(HAL_I2C_Master_Receive(&hi2c, STMPE610_ADDR, (uint8_t *)rxbuf, 2, 10000) != HAL_OK);
 8001222:	f242 7310 	movw	r3, #10000	; 0x2710
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	2302      	movs	r3, #2
 800122a:	aa05      	add	r2, sp, #20
 800122c:	2188      	movs	r1, #136	; 0x88
 800122e:	4807      	ldr	r0, [pc, #28]	; (800124c <STMPE610_ReadWord+0x54>)
 8001230:	f000 fd7a 	bl	8001d28 <HAL_I2C_Master_Receive>
 8001234:	2800      	cmp	r0, #0
 8001236:	d1f4      	bne.n	8001222 <STMPE610_ReadWord+0x2a>

	return (((uint16_t)rxbuf[0]) << 8) | rxbuf[1];
 8001238:	f89d 0014 	ldrb.w	r0, [sp, #20]
 800123c:	f89d 3015 	ldrb.w	r3, [sp, #21]
}
 8001240:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8001244:	b007      	add	sp, #28
 8001246:	f85d fb04 	ldr.w	pc, [sp], #4
 800124a:	bf00      	nop
 800124c:	20019710 	.word	0x20019710

08001250 <STMPE610_Init>:

void STMPE610_Init(void)
{
 8001250:	b508      	push	{r3, lr}
	STMPE610_Write(STMPE610_REG_SYS_CTRL1, 0x02);		// Software chip reset
 8001252:	2102      	movs	r1, #2
 8001254:	2003      	movs	r0, #3
 8001256:	f7ff ff93 	bl	8001180 <STMPE610_Write>
	HAL_Delay(10);
 800125a:	200a      	movs	r0, #10
 800125c:	f000 f92e 	bl	80014bc <HAL_Delay>
	
	STMPE610_Write(STMPE610_REG_SYS_CTRL2, 0x04);		// Temperature sensor clock off, GPIO clock off, touch clock on, ADC clock on
 8001260:	2104      	movs	r1, #4
 8001262:	4608      	mov	r0, r1
 8001264:	f7ff ff8c 	bl	8001180 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_INT_EN, 0x03);			// Interrupt on INT pin when there is a sample or a touch transition.
 8001268:	2103      	movs	r1, #3
 800126a:	200a      	movs	r0, #10
 800126c:	f7ff ff88 	bl	8001180 <STMPE610_Write>
	//STMPE610_write_reg(STMPE610_REG_INT_EN, 0x00);						// Don't Interrupt on INT pin
	STMPE610_Write(STMPE610_REG_ADC_CTRL1, 0x48);		// ADC conversion time = 80 clock ticks, 12-bit ADC, internal voltage refernce
 8001270:	2148      	movs	r1, #72	; 0x48
 8001272:	2020      	movs	r0, #32
 8001274:	f7ff ff84 	bl	8001180 <STMPE610_Write>
	HAL_Delay(2);
 8001278:	2002      	movs	r0, #2
 800127a:	f000 f91f 	bl	80014bc <HAL_Delay>
	
	STMPE610_Write(STMPE610_REG_ADC_CTRL2, 0x01);		// ADC speed 3.25MHz
 800127e:	2101      	movs	r1, #1
 8001280:	2021      	movs	r0, #33	; 0x21
 8001282:	f7ff ff7d 	bl	8001180 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_GPIO_AF, 0x00);			// GPIO alternate function - OFF
 8001286:	2100      	movs	r1, #0
 8001288:	2017      	movs	r0, #23
 800128a:	f7ff ff79 	bl	8001180 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_TSC_CFG, 0xA3);			// Averaging 4, touch detect delay 1ms, panel driver settling time 1ms
 800128e:	21a3      	movs	r1, #163	; 0xa3
 8001290:	2041      	movs	r0, #65	; 0x41
 8001292:	f7ff ff75 	bl	8001180 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_FIFO_TH, 0x01);			// FIFO threshold = 1
 8001296:	2101      	movs	r1, #1
 8001298:	204a      	movs	r0, #74	; 0x4a
 800129a:	f7ff ff71 	bl	8001180 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_FIFO_STA, 0x01);			// FIFO reset enable
 800129e:	2101      	movs	r1, #1
 80012a0:	204b      	movs	r0, #75	; 0x4b
 80012a2:	f7ff ff6d 	bl	8001180 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_FIFO_STA, 0x00);			// FIFO reset disable
 80012a6:	2100      	movs	r1, #0
 80012a8:	204b      	movs	r0, #75	; 0x4b
 80012aa:	f7ff ff69 	bl	8001180 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_TSC_FRACT_XYZ, 0x07);	// Z axis data format
 80012ae:	2107      	movs	r1, #7
 80012b0:	2056      	movs	r0, #86	; 0x56
 80012b2:	f7ff ff65 	bl	8001180 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_TSC_I_DRIVE, 0x01);		// max 50mA touchscreen line current
 80012b6:	2101      	movs	r1, #1
 80012b8:	2058      	movs	r0, #88	; 0x58
 80012ba:	f7ff ff61 	bl	8001180 <STMPE610_Write>

	STMPE610_Write(STMPE610_REG_TSC_CTRL, 0x30);			// X&Y&Z, 16 reading window
 80012be:	2130      	movs	r1, #48	; 0x30
 80012c0:	2040      	movs	r0, #64	; 0x40
 80012c2:	f7ff ff5d 	bl	8001180 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_TSC_CTRL, 0x31);			// X&Y&Z, 16 reading window, TSC enable
 80012c6:	2131      	movs	r1, #49	; 0x31
 80012c8:	2040      	movs	r0, #64	; 0x40
 80012ca:	f7ff ff59 	bl	8001180 <STMPE610_Write>
	//STMPE610_write_reg(STMPE610_REG_TSC_CTRL, 0x32);						// X&Y, 16 reading window
	//STMPE610_write_reg(TMPE610_REG_TSC_CTRL, 0x33);						// X&Y, 16 reading window, TSC enable

	STMPE610_Write(STMPE610_REG_INT_STA, 0xFF);		// Clear all interrupts
 80012ce:	21ff      	movs	r1, #255	; 0xff
 80012d0:	200b      	movs	r0, #11
 80012d2:	f7ff ff55 	bl	8001180 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_INT_CTRL, 0x01);		// Level interrupt, enable interrupts
 80012d6:	2101      	movs	r1, #1
 80012d8:	2009      	movs	r0, #9
 80012da:	f7ff ff51 	bl	8001180 <STMPE610_Write>
}
 80012de:	bd08      	pop	{r3, pc}

080012e0 <STMPE610_read_xyz>:

uint8_t STMPE610_read_xyz(void)
{
 80012e0:	b508      	push	{r3, lr}
	uint8_t	status;

	// Is there something in the fifo
	status = STMPE610_ReadByte(STMPE610_REG_FIFO_STA);
 80012e2:	204b      	movs	r0, #75	; 0x4b
 80012e4:	f7ff ff62 	bl	80011ac <STMPE610_ReadByte>
	if ((status & 0x20))
 80012e8:	f010 0f20 	tst.w	r0, #32
 80012ec:	d012      	beq.n	8001314 <STMPE610_read_xyz+0x34>
	{
		STMPE610_Write(STMPE610_REG_INT_STA, 0xFF);
 80012ee:	21ff      	movs	r1, #255	; 0xff
 80012f0:	200b      	movs	r0, #11
 80012f2:	f7ff ff45 	bl	8001180 <STMPE610_Write>
		if (!(STMPE610_ReadByte(STMPE610_REG_TSC_CTRL) & 0x80))
 80012f6:	2040      	movs	r0, #64	; 0x40
 80012f8:	f7ff ff58 	bl	80011ac <STMPE610_ReadByte>
 80012fc:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001300:	d125      	bne.n	800134e <STMPE610_read_xyz+0x6e>
		{
			x=0;
 8001302:	2300      	movs	r3, #0
 8001304:	4a13      	ldr	r2, [pc, #76]	; (8001354 <STMPE610_read_xyz+0x74>)
 8001306:	8013      	strh	r3, [r2, #0]
			y=0;
 8001308:	4a13      	ldr	r2, [pc, #76]	; (8001358 <STMPE610_read_xyz+0x78>)
 800130a:	8013      	strh	r3, [r2, #0]
			z=0;
 800130c:	4a13      	ldr	r2, [pc, #76]	; (800135c <STMPE610_read_xyz+0x7c>)
 800130e:	8013      	strh	r3, [r2, #0]
	//		UART8_printf("true");
			return TRUE;
 8001310:	2001      	movs	r0, #1
 8001312:	e01b      	b.n	800134c <STMPE610_read_xyz+0x6c>
		return FALSE;

	}

	// Time to get some readings
	x = STMPE610_ReadWord(STMPE610_REG_TSC_DATA_X);
 8001314:	204d      	movs	r0, #77	; 0x4d
 8001316:	f7ff ff6f 	bl	80011f8 <STMPE610_ReadWord>
 800131a:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <STMPE610_read_xyz+0x74>)
 800131c:	8018      	strh	r0, [r3, #0]
	y = STMPE610_ReadWord(STMPE610_REG_TSC_DATA_Y);
 800131e:	204f      	movs	r0, #79	; 0x4f
 8001320:	f7ff ff6a 	bl	80011f8 <STMPE610_ReadWord>
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <STMPE610_read_xyz+0x78>)
 8001326:	8018      	strh	r0, [r3, #0]
	z = STMPE610_ReadByte(STMPE610_REG_TSC_DATA_Z);
 8001328:	2051      	movs	r0, #81	; 0x51
 800132a:	f7ff ff3f 	bl	80011ac <STMPE610_ReadByte>
 800132e:	4b0b      	ldr	r3, [pc, #44]	; (800135c <STMPE610_read_xyz+0x7c>)
 8001330:	8018      	strh	r0, [r3, #0]

//	UART8_printf("%d, %d, %d\n\r", x,y,z );

	STMPE610_Write(STMPE610_REG_FIFO_STA, 0x01);		// FIFO reset enable
 8001332:	2101      	movs	r1, #1
 8001334:	204b      	movs	r0, #75	; 0x4b
 8001336:	f7ff ff23 	bl	8001180 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_FIFO_STA, 0x00);		// FIFO reset disable
 800133a:	2100      	movs	r1, #0
 800133c:	204b      	movs	r0, #75	; 0x4b
 800133e:	f7ff ff1f 	bl	8001180 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_INT_STA, 0xFF);
 8001342:	21ff      	movs	r1, #255	; 0xff
 8001344:	200b      	movs	r0, #11
 8001346:	f7ff ff1b 	bl	8001180 <STMPE610_Write>


	return TRUE;
 800134a:	2001      	movs	r0, #1
}
 800134c:	bd08      	pop	{r3, pc}
		return FALSE;
 800134e:	2000      	movs	r0, #0
 8001350:	e7fc      	b.n	800134c <STMPE610_read_xyz+0x6c>
 8001352:	bf00      	nop
 8001354:	20000378 	.word	0x20000378
 8001358:	2000037a 	.word	0x2000037a
 800135c:	2000037c 	.word	0x2000037c

08001360 <STMPE610_GetX_TOUCH>:

uint16_t STMPE610_GetX_TOUCH(void)
{
 8001360:	b508      	push	{r3, lr}
	float pom=0;

	pom=(float)x;
 8001362:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <STMPE610_GetX_TOUCH+0x50>)
 8001364:	881b      	ldrh	r3, [r3, #0]
 8001366:	ee07 3a90 	vmov	s15, r3
 800136a:	eef8 7a67 	vcvt.f32.u32	s15, s15
	pom=480.0*(pom-GUI_TOUCH_AD_LEFT)/(GUI_TOUCH_AD_RIGHT-GUI_TOUCH_AD_LEFT);
 800136e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80013b4 <STMPE610_GetX_TOUCH+0x54>
 8001372:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001376:	ee17 0a90 	vmov	r0, s15
 800137a:	f7ff f905 	bl	8000588 <__aeabi_f2d>
 800137e:	2200      	movs	r2, #0
 8001380:	4b0d      	ldr	r3, [pc, #52]	; (80013b8 <STMPE610_GetX_TOUCH+0x58>)
 8001382:	f7ff f959 	bl	8000638 <__aeabi_dmul>
 8001386:	a308      	add	r3, pc, #32	; (adr r3, 80013a8 <STMPE610_GetX_TOUCH+0x48>)
 8001388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138c:	f7ff fa7e 	bl	800088c <__aeabi_ddiv>
 8001390:	f7ff fb8c 	bl	8000aac <__aeabi_d2f>
	return (uint16_t)pom;
 8001394:	ee07 0a90 	vmov	s15, r0
 8001398:	eefc 7ae7 	vcvt.u32.f32	s15, s15
}
 800139c:	ee17 3a90 	vmov	r3, s15
 80013a0:	b298      	uxth	r0, r3
 80013a2:	bd08      	pop	{r3, pc}
 80013a4:	f3af 8000 	nop.w
 80013a8:	00000000 	.word	0x00000000
 80013ac:	40adc400 	.word	0x40adc400
 80013b0:	20000378 	.word	0x20000378
 80013b4:	43120000 	.word	0x43120000
 80013b8:	407e0000 	.word	0x407e0000
 80013bc:	00000000 	.word	0x00000000

080013c0 <STMPE610_GetY_TOUCH>:
uint16_t STMPE610_GetY_TOUCH(void)
{
 80013c0:	b508      	push	{r3, lr}
	float pom=0;

	pom=(float)y;
 80013c2:	4b13      	ldr	r3, [pc, #76]	; (8001410 <STMPE610_GetY_TOUCH+0x50>)
 80013c4:	881b      	ldrh	r3, [r3, #0]
 80013c6:	ee07 3a90 	vmov	s15, r3
 80013ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
	pom=272.0*(pom-GUI_TOUCH_AD_TOP)/(GUI_TOUCH_AD_BOTTOM-GUI_TOUCH_AD_TOP);
 80013ce:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001414 <STMPE610_GetY_TOUCH+0x54>
 80013d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013d6:	ee17 0a90 	vmov	r0, s15
 80013da:	f7ff f8d5 	bl	8000588 <__aeabi_f2d>
 80013de:	2200      	movs	r2, #0
 80013e0:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <STMPE610_GetY_TOUCH+0x58>)
 80013e2:	f7ff f929 	bl	8000638 <__aeabi_dmul>
 80013e6:	a308      	add	r3, pc, #32	; (adr r3, 8001408 <STMPE610_GetY_TOUCH+0x48>)
 80013e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ec:	f7ff fa4e 	bl	800088c <__aeabi_ddiv>
 80013f0:	f7ff fb5c 	bl	8000aac <__aeabi_d2f>
	return (uint16_t)pom;
 80013f4:	ee07 0a90 	vmov	s15, r0
 80013f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
}
 80013fc:	ee17 3a90 	vmov	r3, s15
 8001400:	b298      	uxth	r0, r3
 8001402:	bd08      	pop	{r3, pc}
 8001404:	f3af 8000 	nop.w
 8001408:	00000000 	.word	0x00000000
 800140c:	40abea00 	.word	0x40abea00
 8001410:	2000037a 	.word	0x2000037a
 8001414:	43870000 	.word	0x43870000
 8001418:	40710000 	.word	0x40710000

0800141c <STMPE610_GetX_TOUCH_RAW>:
}

uint16_t STMPE610_GetX_TOUCH_RAW(void)
{
	return x;
}
 800141c:	4b01      	ldr	r3, [pc, #4]	; (8001424 <STMPE610_GetX_TOUCH_RAW+0x8>)
 800141e:	8818      	ldrh	r0, [r3, #0]
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	20000378 	.word	0x20000378

08001428 <STMPE610_GetY_TOUCH_RAW>:
uint16_t STMPE610_GetY_TOUCH_RAW(void)
{
	return y;
}
 8001428:	4b01      	ldr	r3, [pc, #4]	; (8001430 <STMPE610_GetY_TOUCH_RAW+0x8>)
 800142a:	8818      	ldrh	r0, [r3, #0]
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	2000037a 	.word	0x2000037a

08001434 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001434:	b510      	push	{r4, lr}
 8001436:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001438:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <HAL_InitTick+0x40>)
 800143a:	7818      	ldrb	r0, [r3, #0]
 800143c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001440:	fbb3 f3f0 	udiv	r3, r3, r0
 8001444:	4a0c      	ldr	r2, [pc, #48]	; (8001478 <HAL_InitTick+0x44>)
 8001446:	6810      	ldr	r0, [r2, #0]
 8001448:	fbb0 f0f3 	udiv	r0, r0, r3
 800144c:	f000 f89c 	bl	8001588 <HAL_SYSTICK_Config>
 8001450:	b968      	cbnz	r0, 800146e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001452:	2c0f      	cmp	r4, #15
 8001454:	d901      	bls.n	800145a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001456:	2001      	movs	r0, #1
 8001458:	e00a      	b.n	8001470 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800145a:	2200      	movs	r2, #0
 800145c:	4621      	mov	r1, r4
 800145e:	f04f 30ff 	mov.w	r0, #4294967295
 8001462:	f000 f851 	bl	8001508 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001466:	4b05      	ldr	r3, [pc, #20]	; (800147c <HAL_InitTick+0x48>)
 8001468:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800146a:	2000      	movs	r0, #0
 800146c:	e000      	b.n	8001470 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800146e:	2001      	movs	r0, #1
}
 8001470:	bd10      	pop	{r4, pc}
 8001472:	bf00      	nop
 8001474:	20000000 	.word	0x20000000
 8001478:	20000118 	.word	0x20000118
 800147c:	20000004 	.word	0x20000004

08001480 <HAL_Init>:
{
 8001480:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001482:	2003      	movs	r0, #3
 8001484:	f000 f82e 	bl	80014e4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001488:	2000      	movs	r0, #0
 800148a:	f7ff ffd3 	bl	8001434 <HAL_InitTick>
  HAL_MspInit();
 800148e:	f006 f85f 	bl	8007550 <HAL_MspInit>
}
 8001492:	2000      	movs	r0, #0
 8001494:	bd08      	pop	{r3, pc}
	...

08001498 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001498:	4a03      	ldr	r2, [pc, #12]	; (80014a8 <HAL_IncTick+0x10>)
 800149a:	6811      	ldr	r1, [r2, #0]
 800149c:	4b03      	ldr	r3, [pc, #12]	; (80014ac <HAL_IncTick+0x14>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	440b      	add	r3, r1
 80014a2:	6013      	str	r3, [r2, #0]
}
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	2001975c 	.word	0x2001975c
 80014ac:	20000000 	.word	0x20000000

080014b0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80014b0:	4b01      	ldr	r3, [pc, #4]	; (80014b8 <HAL_GetTick+0x8>)
 80014b2:	6818      	ldr	r0, [r3, #0]
}
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	2001975c 	.word	0x2001975c

080014bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014bc:	b538      	push	{r3, r4, r5, lr}
 80014be:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80014c0:	f7ff fff6 	bl	80014b0 <HAL_GetTick>
 80014c4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014c6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80014ca:	d002      	beq.n	80014d2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80014cc:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <HAL_Delay+0x24>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014d2:	f7ff ffed 	bl	80014b0 <HAL_GetTick>
 80014d6:	1b40      	subs	r0, r0, r5
 80014d8:	42a0      	cmp	r0, r4
 80014da:	d3fa      	bcc.n	80014d2 <HAL_Delay+0x16>
  {
  }
}
 80014dc:	bd38      	pop	{r3, r4, r5, pc}
 80014de:	bf00      	nop
 80014e0:	20000000 	.word	0x20000000

080014e4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e4:	4906      	ldr	r1, [pc, #24]	; (8001500 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80014e6:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014e8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014ec:	041b      	lsls	r3, r3, #16
 80014ee:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014f0:	0200      	lsls	r0, r0, #8
 80014f2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80014f8:	4a02      	ldr	r2, [pc, #8]	; (8001504 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80014fa:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 80014fc:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80014fe:	4770      	bx	lr
 8001500:	e000ed00 	.word	0xe000ed00
 8001504:	05fa0000 	.word	0x05fa0000

08001508 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001508:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800150a:	4b15      	ldr	r3, [pc, #84]	; (8001560 <HAL_NVIC_SetPriority+0x58>)
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001512:	f1c3 0407 	rsb	r4, r3, #7
 8001516:	2c04      	cmp	r4, #4
 8001518:	bf28      	it	cs
 800151a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151c:	1d1d      	adds	r5, r3, #4
 800151e:	2d06      	cmp	r5, #6
 8001520:	d914      	bls.n	800154c <HAL_NVIC_SetPriority+0x44>
 8001522:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001524:	f04f 35ff 	mov.w	r5, #4294967295
 8001528:	fa05 f404 	lsl.w	r4, r5, r4
 800152c:	ea21 0104 	bic.w	r1, r1, r4
 8001530:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001532:	fa05 f303 	lsl.w	r3, r5, r3
 8001536:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800153a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800153c:	2800      	cmp	r0, #0
 800153e:	db07      	blt.n	8001550 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001540:	0109      	lsls	r1, r1, #4
 8001542:	b2c9      	uxtb	r1, r1
 8001544:	4b07      	ldr	r3, [pc, #28]	; (8001564 <HAL_NVIC_SetPriority+0x5c>)
 8001546:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001548:	bc30      	pop	{r4, r5}
 800154a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800154c:	2300      	movs	r3, #0
 800154e:	e7e9      	b.n	8001524 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001550:	f000 000f 	and.w	r0, r0, #15
 8001554:	0109      	lsls	r1, r1, #4
 8001556:	b2c9      	uxtb	r1, r1
 8001558:	4b03      	ldr	r3, [pc, #12]	; (8001568 <HAL_NVIC_SetPriority+0x60>)
 800155a:	5419      	strb	r1, [r3, r0]
 800155c:	e7f4      	b.n	8001548 <HAL_NVIC_SetPriority+0x40>
 800155e:	bf00      	nop
 8001560:	e000ed00 	.word	0xe000ed00
 8001564:	e000e400 	.word	0xe000e400
 8001568:	e000ed14 	.word	0xe000ed14

0800156c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800156c:	2800      	cmp	r0, #0
 800156e:	db07      	blt.n	8001580 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001570:	f000 021f 	and.w	r2, r0, #31
 8001574:	0940      	lsrs	r0, r0, #5
 8001576:	2301      	movs	r3, #1
 8001578:	4093      	lsls	r3, r2
 800157a:	4a02      	ldr	r2, [pc, #8]	; (8001584 <HAL_NVIC_EnableIRQ+0x18>)
 800157c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	e000e100 	.word	0xe000e100

08001588 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001588:	3801      	subs	r0, #1
 800158a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800158e:	d20a      	bcs.n	80015a6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <HAL_SYSTICK_Config+0x24>)
 8001592:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001594:	4a06      	ldr	r2, [pc, #24]	; (80015b0 <HAL_SYSTICK_Config+0x28>)
 8001596:	21f0      	movs	r1, #240	; 0xf0
 8001598:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800159c:	2000      	movs	r0, #0
 800159e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015a0:	2207      	movs	r2, #7
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80015a6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	e000e010 	.word	0xe000e010
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80015b4:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80015b6:	f004 feb5 	bl	8006324 <HAL_SYSTICK_Callback>
}
 80015ba:	bd08      	pop	{r3, pc}

080015bc <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80015bc:	2300      	movs	r3, #0
 80015be:	2b0f      	cmp	r3, #15
 80015c0:	f200 80e7 	bhi.w	8001792 <HAL_GPIO_Init+0x1d6>
{
 80015c4:	b4f0      	push	{r4, r5, r6, r7}
 80015c6:	b082      	sub	sp, #8
 80015c8:	e05e      	b.n	8001688 <HAL_GPIO_Init+0xcc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015ca:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80015cc:	005f      	lsls	r7, r3, #1
 80015ce:	2403      	movs	r4, #3
 80015d0:	40bc      	lsls	r4, r7
 80015d2:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 80015d6:	68cc      	ldr	r4, [r1, #12]
 80015d8:	40bc      	lsls	r4, r7
 80015da:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 80015dc:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015de:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015e0:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015e4:	684c      	ldr	r4, [r1, #4]
 80015e6:	f3c4 1200 	ubfx	r2, r4, #4, #1
 80015ea:	409a      	lsls	r2, r3
 80015ec:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 80015ee:	6042      	str	r2, [r0, #4]
 80015f0:	e057      	b.n	80016a2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80015f2:	08dc      	lsrs	r4, r3, #3
 80015f4:	3408      	adds	r4, #8
 80015f6:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80015fa:	f003 0207 	and.w	r2, r3, #7
 80015fe:	0096      	lsls	r6, r2, #2
 8001600:	220f      	movs	r2, #15
 8001602:	40b2      	lsls	r2, r6
 8001604:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001608:	690a      	ldr	r2, [r1, #16]
 800160a:	40b2      	lsls	r2, r6
 800160c:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3] = temp;
 800160e:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001612:	e05a      	b.n	80016ca <HAL_GPIO_Init+0x10e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001614:	2209      	movs	r2, #9
 8001616:	e000      	b.n	800161a <HAL_GPIO_Init+0x5e>
 8001618:	2200      	movs	r2, #0
 800161a:	40b2      	lsls	r2, r6
 800161c:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 800161e:	3402      	adds	r4, #2
 8001620:	4e5c      	ldr	r6, [pc, #368]	; (8001794 <HAL_GPIO_Init+0x1d8>)
 8001622:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001626:	4a5c      	ldr	r2, [pc, #368]	; (8001798 <HAL_GPIO_Init+0x1dc>)
 8001628:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800162a:	43ea      	mvns	r2, r5
 800162c:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001630:	684f      	ldr	r7, [r1, #4]
 8001632:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001636:	d001      	beq.n	800163c <HAL_GPIO_Init+0x80>
        {
          temp |= iocurrent;
 8001638:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 800163c:	4c56      	ldr	r4, [pc, #344]	; (8001798 <HAL_GPIO_Init+0x1dc>)
 800163e:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8001640:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001642:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001646:	684f      	ldr	r7, [r1, #4]
 8001648:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 800164c:	d001      	beq.n	8001652 <HAL_GPIO_Init+0x96>
        {
          temp |= iocurrent;
 800164e:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->FTSR = temp;
 8001652:	4c51      	ldr	r4, [pc, #324]	; (8001798 <HAL_GPIO_Init+0x1dc>)
 8001654:	60e6      	str	r6, [r4, #12]

        temp = EXTI->EMR;
 8001656:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001658:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800165c:	684f      	ldr	r7, [r1, #4]
 800165e:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001662:	d001      	beq.n	8001668 <HAL_GPIO_Init+0xac>
        {
          temp |= iocurrent;
 8001664:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8001668:	4c4b      	ldr	r4, [pc, #300]	; (8001798 <HAL_GPIO_Init+0x1dc>)
 800166a:	6066      	str	r6, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800166c:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 800166e:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001670:	684e      	ldr	r6, [r1, #4]
 8001672:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8001676:	d001      	beq.n	800167c <HAL_GPIO_Init+0xc0>
        {
          temp |= iocurrent;
 8001678:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->IMR = temp;
 800167c:	4c46      	ldr	r4, [pc, #280]	; (8001798 <HAL_GPIO_Init+0x1dc>)
 800167e:	6022      	str	r2, [r4, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001680:	3301      	adds	r3, #1
 8001682:	2b0f      	cmp	r3, #15
 8001684:	f200 8082 	bhi.w	800178c <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8001688:	2201      	movs	r2, #1
 800168a:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800168c:	680c      	ldr	r4, [r1, #0]
 800168e:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8001692:	42aa      	cmp	r2, r5
 8001694:	d1f4      	bne.n	8001680 <HAL_GPIO_Init+0xc4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001696:	684c      	ldr	r4, [r1, #4]
 8001698:	f004 0403 	and.w	r4, r4, #3
 800169c:	3c01      	subs	r4, #1
 800169e:	2c01      	cmp	r4, #1
 80016a0:	d993      	bls.n	80015ca <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016a2:	684a      	ldr	r2, [r1, #4]
 80016a4:	f002 0203 	and.w	r2, r2, #3
 80016a8:	2a03      	cmp	r2, #3
 80016aa:	d009      	beq.n	80016c0 <HAL_GPIO_Init+0x104>
        temp = GPIOx->PUPDR;
 80016ac:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80016ae:	005e      	lsls	r6, r3, #1
 80016b0:	2203      	movs	r2, #3
 80016b2:	40b2      	lsls	r2, r6
 80016b4:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80016b8:	688a      	ldr	r2, [r1, #8]
 80016ba:	40b2      	lsls	r2, r6
 80016bc:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80016be:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016c0:	684a      	ldr	r2, [r1, #4]
 80016c2:	f002 0203 	and.w	r2, r2, #3
 80016c6:	2a02      	cmp	r2, #2
 80016c8:	d093      	beq.n	80015f2 <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 80016ca:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80016cc:	005e      	lsls	r6, r3, #1
 80016ce:	2203      	movs	r2, #3
 80016d0:	40b2      	lsls	r2, r6
 80016d2:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80016d6:	684a      	ldr	r2, [r1, #4]
 80016d8:	f002 0203 	and.w	r2, r2, #3
 80016dc:	40b2      	lsls	r2, r6
 80016de:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80016e0:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016e2:	684a      	ldr	r2, [r1, #4]
 80016e4:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 80016e8:	d0ca      	beq.n	8001680 <HAL_GPIO_Init+0xc4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ea:	4a2c      	ldr	r2, [pc, #176]	; (800179c <HAL_GPIO_Init+0x1e0>)
 80016ec:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80016ee:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80016f2:	6454      	str	r4, [r2, #68]	; 0x44
 80016f4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80016f6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80016fa:	9201      	str	r2, [sp, #4]
 80016fc:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 80016fe:	089c      	lsrs	r4, r3, #2
 8001700:	1ca6      	adds	r6, r4, #2
 8001702:	4a24      	ldr	r2, [pc, #144]	; (8001794 <HAL_GPIO_Init+0x1d8>)
 8001704:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001708:	f003 0203 	and.w	r2, r3, #3
 800170c:	0096      	lsls	r6, r2, #2
 800170e:	220f      	movs	r2, #15
 8001710:	40b2      	lsls	r2, r6
 8001712:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001716:	4a22      	ldr	r2, [pc, #136]	; (80017a0 <HAL_GPIO_Init+0x1e4>)
 8001718:	4290      	cmp	r0, r2
 800171a:	f43f af7d 	beq.w	8001618 <HAL_GPIO_Init+0x5c>
 800171e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001722:	4290      	cmp	r0, r2
 8001724:	d022      	beq.n	800176c <HAL_GPIO_Init+0x1b0>
 8001726:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800172a:	4290      	cmp	r0, r2
 800172c:	d020      	beq.n	8001770 <HAL_GPIO_Init+0x1b4>
 800172e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001732:	4290      	cmp	r0, r2
 8001734:	d01e      	beq.n	8001774 <HAL_GPIO_Init+0x1b8>
 8001736:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800173a:	4290      	cmp	r0, r2
 800173c:	d01c      	beq.n	8001778 <HAL_GPIO_Init+0x1bc>
 800173e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001742:	4290      	cmp	r0, r2
 8001744:	d01a      	beq.n	800177c <HAL_GPIO_Init+0x1c0>
 8001746:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800174a:	4290      	cmp	r0, r2
 800174c:	d018      	beq.n	8001780 <HAL_GPIO_Init+0x1c4>
 800174e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001752:	4290      	cmp	r0, r2
 8001754:	d016      	beq.n	8001784 <HAL_GPIO_Init+0x1c8>
 8001756:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800175a:	4290      	cmp	r0, r2
 800175c:	d014      	beq.n	8001788 <HAL_GPIO_Init+0x1cc>
 800175e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001762:	4290      	cmp	r0, r2
 8001764:	f43f af56 	beq.w	8001614 <HAL_GPIO_Init+0x58>
 8001768:	220a      	movs	r2, #10
 800176a:	e756      	b.n	800161a <HAL_GPIO_Init+0x5e>
 800176c:	2201      	movs	r2, #1
 800176e:	e754      	b.n	800161a <HAL_GPIO_Init+0x5e>
 8001770:	2202      	movs	r2, #2
 8001772:	e752      	b.n	800161a <HAL_GPIO_Init+0x5e>
 8001774:	2203      	movs	r2, #3
 8001776:	e750      	b.n	800161a <HAL_GPIO_Init+0x5e>
 8001778:	2204      	movs	r2, #4
 800177a:	e74e      	b.n	800161a <HAL_GPIO_Init+0x5e>
 800177c:	2205      	movs	r2, #5
 800177e:	e74c      	b.n	800161a <HAL_GPIO_Init+0x5e>
 8001780:	2206      	movs	r2, #6
 8001782:	e74a      	b.n	800161a <HAL_GPIO_Init+0x5e>
 8001784:	2207      	movs	r2, #7
 8001786:	e748      	b.n	800161a <HAL_GPIO_Init+0x5e>
 8001788:	2208      	movs	r2, #8
 800178a:	e746      	b.n	800161a <HAL_GPIO_Init+0x5e>
      }
    }
  }
}
 800178c:	b002      	add	sp, #8
 800178e:	bcf0      	pop	{r4, r5, r6, r7}
 8001790:	4770      	bx	lr
 8001792:	4770      	bx	lr
 8001794:	40013800 	.word	0x40013800
 8001798:	40013c00 	.word	0x40013c00
 800179c:	40023800 	.word	0x40023800
 80017a0:	40020000 	.word	0x40020000

080017a4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017a4:	b912      	cbnz	r2, 80017ac <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80017a6:	0409      	lsls	r1, r1, #16
 80017a8:	6181      	str	r1, [r0, #24]
  }
}
 80017aa:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 80017ac:	6181      	str	r1, [r0, #24]
 80017ae:	4770      	bx	lr

080017b0 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017b0:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017b2:	ea01 0203 	and.w	r2, r1, r3
 80017b6:	ea21 0103 	bic.w	r1, r1, r3
 80017ba:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80017be:	6181      	str	r1, [r0, #24]
}
 80017c0:	4770      	bx	lr

080017c2 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80017c2:	6803      	ldr	r3, [r0, #0]
 80017c4:	699a      	ldr	r2, [r3, #24]
 80017c6:	f012 0f02 	tst.w	r2, #2
 80017ca:	d001      	beq.n	80017d0 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 80017cc:	2200      	movs	r2, #0
 80017ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80017d0:	6803      	ldr	r3, [r0, #0]
 80017d2:	699a      	ldr	r2, [r3, #24]
 80017d4:	f012 0f01 	tst.w	r2, #1
 80017d8:	d103      	bne.n	80017e2 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80017da:	699a      	ldr	r2, [r3, #24]
 80017dc:	f042 0201 	orr.w	r2, r2, #1
 80017e0:	619a      	str	r2, [r3, #24]
  }
}
 80017e2:	4770      	bx	lr

080017e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80017e4:	b410      	push	{r4}
 80017e6:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80017e8:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80017ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80017f0:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80017f2:	4321      	orrs	r1, r4
 80017f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80017f8:	6802      	ldr	r2, [r0, #0]
 80017fa:	6853      	ldr	r3, [r2, #4]
 80017fc:	0d64      	lsrs	r4, r4, #21
 80017fe:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8001802:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8001806:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 800180a:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 800180e:	f044 0403 	orr.w	r4, r4, #3
 8001812:	ea23 0404 	bic.w	r4, r3, r4
 8001816:	4321      	orrs	r1, r4
 8001818:	6051      	str	r1, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800181a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800181e:	4770      	bx	lr

08001820 <I2C_IsErrorOccurred>:
{
 8001820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001822:	4604      	mov	r4, r0
 8001824:	4617      	mov	r7, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8001826:	6803      	ldr	r3, [r0, #0]
 8001828:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800182a:	f012 0f10 	tst.w	r2, #16
 800182e:	d04a      	beq.n	80018c6 <I2C_IsErrorOccurred+0xa6>
 8001830:	460e      	mov	r6, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001832:	2210      	movs	r2, #16
 8001834:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8001836:	2500      	movs	r5, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001838:	6823      	ldr	r3, [r4, #0]
 800183a:	699a      	ldr	r2, [r3, #24]
 800183c:	f012 0f20 	tst.w	r2, #32
 8001840:	d13a      	bne.n	80018b8 <I2C_IsErrorOccurred+0x98>
 8001842:	2d00      	cmp	r5, #0
 8001844:	d138      	bne.n	80018b8 <I2C_IsErrorOccurred+0x98>
      if (Timeout != HAL_MAX_DELAY)
 8001846:	f1b6 3fff 	cmp.w	r6, #4294967295
 800184a:	d0f5      	beq.n	8001838 <I2C_IsErrorOccurred+0x18>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800184c:	f7ff fe30 	bl	80014b0 <HAL_GetTick>
 8001850:	1bc0      	subs	r0, r0, r7
 8001852:	42b0      	cmp	r0, r6
 8001854:	d801      	bhi.n	800185a <I2C_IsErrorOccurred+0x3a>
 8001856:	2e00      	cmp	r6, #0
 8001858:	d1ee      	bne.n	8001838 <I2C_IsErrorOccurred+0x18>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800185a:	6821      	ldr	r1, [r4, #0]
 800185c:	684a      	ldr	r2, [r1, #4]
 800185e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 8001862:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8001866:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001868:	6988      	ldr	r0, [r1, #24]
 800186a:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800186e:	d00b      	beq.n	8001888 <I2C_IsErrorOccurred+0x68>
              (tmp2 != HAL_I2C_MODE_SLAVE))
 8001870:	3b20      	subs	r3, #32
 8001872:	bf18      	it	ne
 8001874:	2301      	movne	r3, #1
              (tmp1 != I2C_CR2_STOP) && \
 8001876:	b93a      	cbnz	r2, 8001888 <I2C_IsErrorOccurred+0x68>
 8001878:	b133      	cbz	r3, 8001888 <I2C_IsErrorOccurred+0x68>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800187a:	684b      	ldr	r3, [r1, #4]
 800187c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001880:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 8001882:	f7ff fe15 	bl	80014b0 <HAL_GetTick>
 8001886:	4607      	mov	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001888:	6823      	ldr	r3, [r4, #0]
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	f013 0f20 	tst.w	r3, #32
 8001890:	d1d2      	bne.n	8001838 <I2C_IsErrorOccurred+0x18>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001892:	f7ff fe0d 	bl	80014b0 <HAL_GetTick>
 8001896:	1bc0      	subs	r0, r0, r7
 8001898:	2819      	cmp	r0, #25
 800189a:	d9f5      	bls.n	8001888 <I2C_IsErrorOccurred+0x68>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800189c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800189e:	f043 0320 	orr.w	r3, r3, #32
 80018a2:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80018a4:	2320      	movs	r3, #32
 80018a6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
              __HAL_UNLOCK(hi2c);
 80018b0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
              status = HAL_ERROR;
 80018b4:	2501      	movs	r5, #1
 80018b6:	e7e7      	b.n	8001888 <I2C_IsErrorOccurred+0x68>
    if (status == HAL_OK)
 80018b8:	2d00      	cmp	r5, #0
 80018ba:	d140      	bne.n	800193e <I2C_IsErrorOccurred+0x11e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018bc:	2220      	movs	r2, #32
 80018be:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 80018c0:	2604      	movs	r6, #4
    status = HAL_ERROR;
 80018c2:	2501      	movs	r5, #1
 80018c4:	e001      	b.n	80018ca <I2C_IsErrorOccurred+0xaa>
  uint32_t error_code = 0;
 80018c6:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 80018c8:	4635      	mov	r5, r6
  itflag = hi2c->Instance->ISR;
 80018ca:	6822      	ldr	r2, [r4, #0]
 80018cc:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80018ce:	f413 7f80 	tst.w	r3, #256	; 0x100
 80018d2:	d005      	beq.n	80018e0 <I2C_IsErrorOccurred+0xc0>
    error_code |= HAL_I2C_ERROR_BERR;
 80018d4:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80018d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018dc:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 80018de:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80018e0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80018e4:	d006      	beq.n	80018f4 <I2C_IsErrorOccurred+0xd4>
    error_code |= HAL_I2C_ERROR_OVR;
 80018e6:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80018ea:	6822      	ldr	r2, [r4, #0]
 80018ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018f0:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 80018f2:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80018f4:	f413 7f00 	tst.w	r3, #512	; 0x200
 80018f8:	d023      	beq.n	8001942 <I2C_IsErrorOccurred+0x122>
    error_code |= HAL_I2C_ERROR_ARLO;
 80018fa:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80018fe:	6823      	ldr	r3, [r4, #0]
 8001900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001904:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 8001906:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 8001908:	4620      	mov	r0, r4
 800190a:	f7ff ff5a 	bl	80017c2 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800190e:	6822      	ldr	r2, [r4, #0]
 8001910:	6853      	ldr	r3, [r2, #4]
 8001912:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001916:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800191a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800191e:	f023 0301 	bic.w	r3, r3, #1
 8001922:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8001924:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001926:	431e      	orrs	r6, r3
 8001928:	6466      	str	r6, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800192a:	2320      	movs	r3, #32
 800192c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001930:	2300      	movs	r3, #0
 8001932:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001936:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800193a:	4628      	mov	r0, r5
 800193c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    error_code |= HAL_I2C_ERROR_AF;
 800193e:	2604      	movs	r6, #4
 8001940:	e7c3      	b.n	80018ca <I2C_IsErrorOccurred+0xaa>
  if (status != HAL_OK)
 8001942:	2d00      	cmp	r5, #0
 8001944:	d1e0      	bne.n	8001908 <I2C_IsErrorOccurred+0xe8>
 8001946:	e7f8      	b.n	800193a <I2C_IsErrorOccurred+0x11a>

08001948 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001948:	b570      	push	{r4, r5, r6, lr}
 800194a:	4604      	mov	r4, r0
 800194c:	460d      	mov	r5, r1
 800194e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001950:	6823      	ldr	r3, [r4, #0]
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	f013 0f02 	tst.w	r3, #2
 8001958:	d11d      	bne.n	8001996 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800195a:	4632      	mov	r2, r6
 800195c:	4629      	mov	r1, r5
 800195e:	4620      	mov	r0, r4
 8001960:	f7ff ff5e 	bl	8001820 <I2C_IsErrorOccurred>
 8001964:	b9c8      	cbnz	r0, 800199a <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8001966:	f1b5 3fff 	cmp.w	r5, #4294967295
 800196a:	d0f1      	beq.n	8001950 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800196c:	f7ff fda0 	bl	80014b0 <HAL_GetTick>
 8001970:	1b80      	subs	r0, r0, r6
 8001972:	42a8      	cmp	r0, r5
 8001974:	d801      	bhi.n	800197a <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8001976:	2d00      	cmp	r5, #0
 8001978:	d1ea      	bne.n	8001950 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800197a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800197c:	f043 0320 	orr.w	r3, r3, #32
 8001980:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001982:	2320      	movs	r3, #32
 8001984:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001988:	2300      	movs	r3, #0
 800198a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800198e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8001992:	2001      	movs	r0, #1
 8001994:	e000      	b.n	8001998 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8001996:	2000      	movs	r0, #0
}
 8001998:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800199a:	2001      	movs	r0, #1
 800199c:	e7fc      	b.n	8001998 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

0800199e <I2C_WaitOnFlagUntilTimeout>:
{
 800199e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019a0:	4605      	mov	r5, r0
 80019a2:	460f      	mov	r7, r1
 80019a4:	4616      	mov	r6, r2
 80019a6:	461c      	mov	r4, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019a8:	682b      	ldr	r3, [r5, #0]
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	ea37 0303 	bics.w	r3, r7, r3
 80019b0:	bf0c      	ite	eq
 80019b2:	2301      	moveq	r3, #1
 80019b4:	2300      	movne	r3, #0
 80019b6:	42b3      	cmp	r3, r6
 80019b8:	d118      	bne.n	80019ec <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 80019ba:	f1b4 3fff 	cmp.w	r4, #4294967295
 80019be:	d0f3      	beq.n	80019a8 <I2C_WaitOnFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019c0:	f7ff fd76 	bl	80014b0 <HAL_GetTick>
 80019c4:	9b06      	ldr	r3, [sp, #24]
 80019c6:	1ac0      	subs	r0, r0, r3
 80019c8:	42a0      	cmp	r0, r4
 80019ca:	d801      	bhi.n	80019d0 <I2C_WaitOnFlagUntilTimeout+0x32>
 80019cc:	2c00      	cmp	r4, #0
 80019ce:	d1eb      	bne.n	80019a8 <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019d0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80019d2:	f043 0320 	orr.w	r3, r3, #32
 80019d6:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80019d8:	2320      	movs	r3, #32
 80019da:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019de:	2300      	movs	r3, #0
 80019e0:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80019e4:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 80019e8:	2001      	movs	r0, #1
 80019ea:	e000      	b.n	80019ee <I2C_WaitOnFlagUntilTimeout+0x50>
  return HAL_OK;
 80019ec:	2000      	movs	r0, #0
}
 80019ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080019f0 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80019f0:	b570      	push	{r4, r5, r6, lr}
 80019f2:	4605      	mov	r5, r0
 80019f4:	460c      	mov	r4, r1
 80019f6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019f8:	682b      	ldr	r3, [r5, #0]
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	f013 0f20 	tst.w	r3, #32
 8001a00:	d11a      	bne.n	8001a38 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a02:	4632      	mov	r2, r6
 8001a04:	4621      	mov	r1, r4
 8001a06:	4628      	mov	r0, r5
 8001a08:	f7ff ff0a 	bl	8001820 <I2C_IsErrorOccurred>
 8001a0c:	b9b0      	cbnz	r0, 8001a3c <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a0e:	f7ff fd4f 	bl	80014b0 <HAL_GetTick>
 8001a12:	1b80      	subs	r0, r0, r6
 8001a14:	42a0      	cmp	r0, r4
 8001a16:	d801      	bhi.n	8001a1c <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8001a18:	2c00      	cmp	r4, #0
 8001a1a:	d1ed      	bne.n	80019f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a1c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001a1e:	f043 0320 	orr.w	r3, r3, #32
 8001a22:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001a24:	2320      	movs	r3, #32
 8001a26:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001a30:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8001a34:	2001      	movs	r0, #1
}
 8001a36:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8001a38:	2000      	movs	r0, #0
 8001a3a:	e7fc      	b.n	8001a36 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	e7fa      	b.n	8001a36 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08001a40 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8001a40:	b570      	push	{r4, r5, r6, lr}
 8001a42:	4604      	mov	r4, r0
 8001a44:	460d      	mov	r5, r1
 8001a46:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001a48:	6823      	ldr	r3, [r4, #0]
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	f013 0f04 	tst.w	r3, #4
 8001a50:	d149      	bne.n	8001ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a52:	4632      	mov	r2, r6
 8001a54:	4629      	mov	r1, r5
 8001a56:	4620      	mov	r0, r4
 8001a58:	f7ff fee2 	bl	8001820 <I2C_IsErrorOccurred>
 8001a5c:	4601      	mov	r1, r0
 8001a5e:	2800      	cmp	r0, #0
 8001a60:	d143      	bne.n	8001aea <I2C_WaitOnRXNEFlagUntilTimeout+0xaa>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001a62:	6823      	ldr	r3, [r4, #0]
 8001a64:	699a      	ldr	r2, [r3, #24]
 8001a66:	f012 0f20 	tst.w	r2, #32
 8001a6a:	d113      	bne.n	8001a94 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a6c:	f7ff fd20 	bl	80014b0 <HAL_GetTick>
 8001a70:	1b80      	subs	r0, r0, r6
 8001a72:	42a8      	cmp	r0, r5
 8001a74:	d801      	bhi.n	8001a7a <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 8001a76:	2d00      	cmp	r5, #0
 8001a78:	d1e6      	bne.n	8001a48 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a7a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a7c:	f043 0320 	orr.w	r3, r3, #32
 8001a80:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001a82:	2320      	movs	r3, #32
 8001a84:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001a8e:	2101      	movs	r1, #1
}
 8001a90:	4608      	mov	r0, r1
 8001a92:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001a94:	699a      	ldr	r2, [r3, #24]
 8001a96:	f012 0f04 	tst.w	r2, #4
 8001a9a:	d002      	beq.n	8001aa2 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8001a9c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001a9e:	2a00      	cmp	r2, #0
 8001aa0:	d1f6      	bne.n	8001a90 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001aa2:	699a      	ldr	r2, [r3, #24]
 8001aa4:	f012 0f10 	tst.w	r2, #16
 8001aa8:	d01a      	beq.n	8001ae0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001aaa:	2210      	movs	r2, #16
 8001aac:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001aae:	2304      	movs	r3, #4
 8001ab0:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ab2:	6823      	ldr	r3, [r4, #0]
 8001ab4:	2220      	movs	r2, #32
 8001ab6:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8001ab8:	6821      	ldr	r1, [r4, #0]
 8001aba:	684b      	ldr	r3, [r1, #4]
 8001abc:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001ac0:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001ac4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001ac8:	f023 0301 	bic.w	r3, r3, #1
 8001acc:	604b      	str	r3, [r1, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 8001ace:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001ad8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8001adc:	2101      	movs	r1, #1
 8001ade:	e7d7      	b.n	8001a90 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	6463      	str	r3, [r4, #68]	; 0x44
 8001ae4:	e7e5      	b.n	8001ab2 <I2C_WaitOnRXNEFlagUntilTimeout+0x72>
  return HAL_OK;
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	e7d2      	b.n	8001a90 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
      return HAL_ERROR;
 8001aea:	2101      	movs	r1, #1
 8001aec:	e7d0      	b.n	8001a90 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
	...

08001af0 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001af0:	2800      	cmp	r0, #0
 8001af2:	d057      	beq.n	8001ba4 <HAL_I2C_Init+0xb4>
{
 8001af4:	b510      	push	{r4, lr}
 8001af6:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001af8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d041      	beq.n	8001b84 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b00:	2324      	movs	r3, #36	; 0x24
 8001b02:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001b06:	6822      	ldr	r2, [r4, #0]
 8001b08:	6813      	ldr	r3, [r2, #0]
 8001b0a:	f023 0301 	bic.w	r3, r3, #1
 8001b0e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b10:	6863      	ldr	r3, [r4, #4]
 8001b12:	6822      	ldr	r2, [r4, #0]
 8001b14:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001b18:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b1a:	6822      	ldr	r2, [r4, #0]
 8001b1c:	6893      	ldr	r3, [r2, #8]
 8001b1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001b22:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b24:	68e3      	ldr	r3, [r4, #12]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d031      	beq.n	8001b8e <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b2a:	68a3      	ldr	r3, [r4, #8]
 8001b2c:	6822      	ldr	r2, [r4, #0]
 8001b2e:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8001b32:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b34:	68e3      	ldr	r3, [r4, #12]
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d02f      	beq.n	8001b9a <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b3a:	6822      	ldr	r2, [r4, #0]
 8001b3c:	6851      	ldr	r1, [r2, #4]
 8001b3e:	4b1a      	ldr	r3, [pc, #104]	; (8001ba8 <HAL_I2C_Init+0xb8>)
 8001b40:	430b      	orrs	r3, r1
 8001b42:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b44:	6822      	ldr	r2, [r4, #0]
 8001b46:	68d3      	ldr	r3, [r2, #12]
 8001b48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001b4c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b4e:	6923      	ldr	r3, [r4, #16]
 8001b50:	6962      	ldr	r2, [r4, #20]
 8001b52:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b54:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b56:	6822      	ldr	r2, [r4, #0]
 8001b58:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001b5c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b5e:	69e3      	ldr	r3, [r4, #28]
 8001b60:	6a21      	ldr	r1, [r4, #32]
 8001b62:	6822      	ldr	r2, [r4, #0]
 8001b64:	430b      	orrs	r3, r1
 8001b66:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001b68:	6822      	ldr	r2, [r4, #0]
 8001b6a:	6813      	ldr	r3, [r2, #0]
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b72:	2000      	movs	r0, #0
 8001b74:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b76:	2320      	movs	r3, #32
 8001b78:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b7c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b7e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8001b82:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001b84:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001b88:	f005 fcfa 	bl	8007580 <HAL_I2C_MspInit>
 8001b8c:	e7b8      	b.n	8001b00 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b8e:	68a3      	ldr	r3, [r4, #8]
 8001b90:	6822      	ldr	r2, [r4, #0]
 8001b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b96:	6093      	str	r3, [r2, #8]
 8001b98:	e7cc      	b.n	8001b34 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001b9a:	6823      	ldr	r3, [r4, #0]
 8001b9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	e7ca      	b.n	8001b3a <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8001ba4:	2001      	movs	r0, #1
}
 8001ba6:	4770      	bx	lr
 8001ba8:	02008000 	.word	0x02008000

08001bac <HAL_I2C_Master_Transmit>:
{
 8001bac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001bb0:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bb2:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8001bb6:	b2ed      	uxtb	r5, r5
 8001bb8:	2d20      	cmp	r5, #32
 8001bba:	f040 80a4 	bne.w	8001d06 <HAL_I2C_Master_Transmit+0x15a>
    __HAL_LOCK(hi2c);
 8001bbe:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8001bc2:	2c01      	cmp	r4, #1
 8001bc4:	f000 80a4 	beq.w	8001d10 <HAL_I2C_Master_Transmit+0x164>
 8001bc8:	4698      	mov	r8, r3
 8001bca:	4617      	mov	r7, r2
 8001bcc:	460e      	mov	r6, r1
 8001bce:	4604      	mov	r4, r0
 8001bd0:	f04f 0901 	mov.w	r9, #1
 8001bd4:	f880 9040 	strb.w	r9, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001bd8:	f7ff fc6a 	bl	80014b0 <HAL_GetTick>
 8001bdc:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001bde:	9000      	str	r0, [sp, #0]
 8001be0:	2319      	movs	r3, #25
 8001be2:	464a      	mov	r2, r9
 8001be4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001be8:	4620      	mov	r0, r4
 8001bea:	f7ff fed8 	bl	800199e <I2C_WaitOnFlagUntilTimeout>
 8001bee:	2800      	cmp	r0, #0
 8001bf0:	f040 8090 	bne.w	8001d14 <HAL_I2C_Master_Transmit+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001bf4:	2321      	movs	r3, #33	; 0x21
 8001bf6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001bfa:	2310      	movs	r3, #16
 8001bfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c00:	2300      	movs	r3, #0
 8001c02:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001c04:	6267      	str	r7, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c06:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c0a:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c0c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	2bff      	cmp	r3, #255	; 0xff
 8001c12:	d90a      	bls.n	8001c2a <HAL_I2C_Master_Transmit+0x7e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c14:	22ff      	movs	r2, #255	; 0xff
 8001c16:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c18:	4b42      	ldr	r3, [pc, #264]	; (8001d24 <HAL_I2C_Master_Transmit+0x178>)
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c20:	4631      	mov	r1, r6
 8001c22:	4620      	mov	r0, r4
 8001c24:	f7ff fdde 	bl	80017e4 <I2C_TransferConfig>
 8001c28:	e018      	b.n	8001c5c <HAL_I2C_Master_Transmit+0xb0>
      hi2c->XferSize = hi2c->XferCount;
 8001c2a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001c2c:	b292      	uxth	r2, r2
 8001c2e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c30:	4b3c      	ldr	r3, [pc, #240]	; (8001d24 <HAL_I2C_Master_Transmit+0x178>)
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c38:	b2d2      	uxtb	r2, r2
 8001c3a:	4631      	mov	r1, r6
 8001c3c:	4620      	mov	r0, r4
 8001c3e:	f7ff fdd1 	bl	80017e4 <I2C_TransferConfig>
 8001c42:	e00b      	b.n	8001c5c <HAL_I2C_Master_Transmit+0xb0>
          hi2c->XferSize = hi2c->XferCount;
 8001c44:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001c46:	b292      	uxth	r2, r2
 8001c48:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	4631      	mov	r1, r6
 8001c56:	4620      	mov	r0, r4
 8001c58:	f7ff fdc4 	bl	80017e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001c5c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d033      	beq.n	8001ccc <HAL_I2C_Master_Transmit+0x120>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c64:	462a      	mov	r2, r5
 8001c66:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001c68:	4620      	mov	r0, r4
 8001c6a:	f7ff fe6d 	bl	8001948 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c6e:	2800      	cmp	r0, #0
 8001c70:	d152      	bne.n	8001d18 <HAL_I2C_Master_Transmit+0x16c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c72:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001c74:	6823      	ldr	r3, [r4, #0]
 8001c76:	7812      	ldrb	r2, [r2, #0]
 8001c78:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001c7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001c80:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c82:	3b01      	subs	r3, #1
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001c88:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c90:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001c92:	b292      	uxth	r2, r2
 8001c94:	2a00      	cmp	r2, #0
 8001c96:	d0e1      	beq.n	8001c5c <HAL_I2C_Master_Transmit+0xb0>
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1df      	bne.n	8001c5c <HAL_I2C_Master_Transmit+0xb0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c9c:	9500      	str	r5, [sp, #0]
 8001c9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2180      	movs	r1, #128	; 0x80
 8001ca4:	4620      	mov	r0, r4
 8001ca6:	f7ff fe7a 	bl	800199e <I2C_WaitOnFlagUntilTimeout>
 8001caa:	2800      	cmp	r0, #0
 8001cac:	d136      	bne.n	8001d1c <HAL_I2C_Master_Transmit+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	2bff      	cmp	r3, #255	; 0xff
 8001cb4:	d9c6      	bls.n	8001c44 <HAL_I2C_Master_Transmit+0x98>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cb6:	22ff      	movs	r2, #255	; 0xff
 8001cb8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001cba:	2300      	movs	r3, #0
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cc2:	4631      	mov	r1, r6
 8001cc4:	4620      	mov	r0, r4
 8001cc6:	f7ff fd8d 	bl	80017e4 <I2C_TransferConfig>
 8001cca:	e7c7      	b.n	8001c5c <HAL_I2C_Master_Transmit+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ccc:	462a      	mov	r2, r5
 8001cce:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001cd0:	4620      	mov	r0, r4
 8001cd2:	f7ff fe8d 	bl	80019f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	bb10      	cbnz	r0, 8001d20 <HAL_I2C_Master_Transmit+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cda:	6822      	ldr	r2, [r4, #0]
 8001cdc:	2120      	movs	r1, #32
 8001cde:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8001ce0:	6820      	ldr	r0, [r4, #0]
 8001ce2:	6842      	ldr	r2, [r0, #4]
 8001ce4:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001ce8:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001cec:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001cf0:	f022 0201 	bic.w	r2, r2, #1
 8001cf4:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001cf6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001d00:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8001d04:	e000      	b.n	8001d08 <HAL_I2C_Master_Transmit+0x15c>
    return HAL_BUSY;
 8001d06:	2302      	movs	r3, #2
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	b003      	add	sp, #12
 8001d0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hi2c);
 8001d10:	2302      	movs	r3, #2
 8001d12:	e7f9      	b.n	8001d08 <HAL_I2C_Master_Transmit+0x15c>
      return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e7f7      	b.n	8001d08 <HAL_I2C_Master_Transmit+0x15c>
        return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e7f5      	b.n	8001d08 <HAL_I2C_Master_Transmit+0x15c>
          return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e7f3      	b.n	8001d08 <HAL_I2C_Master_Transmit+0x15c>
      return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e7f1      	b.n	8001d08 <HAL_I2C_Master_Transmit+0x15c>
 8001d24:	80002000 	.word	0x80002000

08001d28 <HAL_I2C_Master_Receive>:
{
 8001d28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d2c:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d2e:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8001d32:	b2ed      	uxtb	r5, r5
 8001d34:	2d20      	cmp	r5, #32
 8001d36:	f040 80a4 	bne.w	8001e82 <HAL_I2C_Master_Receive+0x15a>
    __HAL_LOCK(hi2c);
 8001d3a:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8001d3e:	2c01      	cmp	r4, #1
 8001d40:	f000 80a4 	beq.w	8001e8c <HAL_I2C_Master_Receive+0x164>
 8001d44:	4698      	mov	r8, r3
 8001d46:	4617      	mov	r7, r2
 8001d48:	460e      	mov	r6, r1
 8001d4a:	4604      	mov	r4, r0
 8001d4c:	f04f 0901 	mov.w	r9, #1
 8001d50:	f880 9040 	strb.w	r9, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001d54:	f7ff fbac 	bl	80014b0 <HAL_GetTick>
 8001d58:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d5a:	9000      	str	r0, [sp, #0]
 8001d5c:	2319      	movs	r3, #25
 8001d5e:	464a      	mov	r2, r9
 8001d60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d64:	4620      	mov	r0, r4
 8001d66:	f7ff fe1a 	bl	800199e <I2C_WaitOnFlagUntilTimeout>
 8001d6a:	2800      	cmp	r0, #0
 8001d6c:	f040 8090 	bne.w	8001e90 <HAL_I2C_Master_Receive+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d70:	2322      	movs	r3, #34	; 0x22
 8001d72:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001d76:	2310      	movs	r3, #16
 8001d78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001d80:	6267      	str	r7, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d82:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d86:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d88:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	2bff      	cmp	r3, #255	; 0xff
 8001d8e:	d90a      	bls.n	8001da6 <HAL_I2C_Master_Receive+0x7e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d90:	22ff      	movs	r2, #255	; 0xff
 8001d92:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d94:	4b42      	ldr	r3, [pc, #264]	; (8001ea0 <HAL_I2C_Master_Receive+0x178>)
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d9c:	4631      	mov	r1, r6
 8001d9e:	4620      	mov	r0, r4
 8001da0:	f7ff fd20 	bl	80017e4 <I2C_TransferConfig>
 8001da4:	e018      	b.n	8001dd8 <HAL_I2C_Master_Receive+0xb0>
      hi2c->XferSize = hi2c->XferCount;
 8001da6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001da8:	b292      	uxth	r2, r2
 8001daa:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001dac:	4b3c      	ldr	r3, [pc, #240]	; (8001ea0 <HAL_I2C_Master_Receive+0x178>)
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001db4:	b2d2      	uxtb	r2, r2
 8001db6:	4631      	mov	r1, r6
 8001db8:	4620      	mov	r0, r4
 8001dba:	f7ff fd13 	bl	80017e4 <I2C_TransferConfig>
 8001dbe:	e00b      	b.n	8001dd8 <HAL_I2C_Master_Receive+0xb0>
          hi2c->XferSize = hi2c->XferCount;
 8001dc0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001dc2:	b292      	uxth	r2, r2
 8001dc4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	9300      	str	r3, [sp, #0]
 8001dca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dce:	b2d2      	uxtb	r2, r2
 8001dd0:	4631      	mov	r1, r6
 8001dd2:	4620      	mov	r0, r4
 8001dd4:	f7ff fd06 	bl	80017e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001dd8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d033      	beq.n	8001e48 <HAL_I2C_Master_Receive+0x120>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001de0:	462a      	mov	r2, r5
 8001de2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001de4:	4620      	mov	r0, r4
 8001de6:	f7ff fe2b 	bl	8001a40 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001dea:	2800      	cmp	r0, #0
 8001dec:	d152      	bne.n	8001e94 <HAL_I2C_Master_Receive+0x16c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001dee:	6823      	ldr	r3, [r4, #0]
 8001df0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001df2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001df4:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001df6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001df8:	3301      	adds	r3, #1
 8001dfa:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001dfc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001e04:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001e06:	3a01      	subs	r2, #1
 8001e08:	b292      	uxth	r2, r2
 8001e0a:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e0c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001e0e:	b292      	uxth	r2, r2
 8001e10:	2a00      	cmp	r2, #0
 8001e12:	d0e1      	beq.n	8001dd8 <HAL_I2C_Master_Receive+0xb0>
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1df      	bne.n	8001dd8 <HAL_I2C_Master_Receive+0xb0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e18:	9500      	str	r5, [sp, #0]
 8001e1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2180      	movs	r1, #128	; 0x80
 8001e20:	4620      	mov	r0, r4
 8001e22:	f7ff fdbc 	bl	800199e <I2C_WaitOnFlagUntilTimeout>
 8001e26:	2800      	cmp	r0, #0
 8001e28:	d136      	bne.n	8001e98 <HAL_I2C_Master_Receive+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e2a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	2bff      	cmp	r3, #255	; 0xff
 8001e30:	d9c6      	bls.n	8001dc0 <HAL_I2C_Master_Receive+0x98>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e32:	22ff      	movs	r2, #255	; 0xff
 8001e34:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e36:	2300      	movs	r3, #0
 8001e38:	9300      	str	r3, [sp, #0]
 8001e3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e3e:	4631      	mov	r1, r6
 8001e40:	4620      	mov	r0, r4
 8001e42:	f7ff fccf 	bl	80017e4 <I2C_TransferConfig>
 8001e46:	e7c7      	b.n	8001dd8 <HAL_I2C_Master_Receive+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e48:	462a      	mov	r2, r5
 8001e4a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001e4c:	4620      	mov	r0, r4
 8001e4e:	f7ff fdcf 	bl	80019f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e52:	4603      	mov	r3, r0
 8001e54:	bb10      	cbnz	r0, 8001e9c <HAL_I2C_Master_Receive+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e56:	6822      	ldr	r2, [r4, #0]
 8001e58:	2120      	movs	r1, #32
 8001e5a:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8001e5c:	6820      	ldr	r0, [r4, #0]
 8001e5e:	6842      	ldr	r2, [r0, #4]
 8001e60:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001e64:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001e68:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001e6c:	f022 0201 	bic.w	r2, r2, #1
 8001e70:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001e72:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e76:	2200      	movs	r2, #0
 8001e78:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001e7c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8001e80:	e000      	b.n	8001e84 <HAL_I2C_Master_Receive+0x15c>
    return HAL_BUSY;
 8001e82:	2302      	movs	r3, #2
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	b003      	add	sp, #12
 8001e88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hi2c);
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	e7f9      	b.n	8001e84 <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e7f7      	b.n	8001e84 <HAL_I2C_Master_Receive+0x15c>
        return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e7f5      	b.n	8001e84 <HAL_I2C_Master_Receive+0x15c>
          return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e7f3      	b.n	8001e84 <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e7f1      	b.n	8001e84 <HAL_I2C_Master_Receive+0x15c>
 8001ea0:	80002400 	.word	0x80002400

08001ea4 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ea4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b20      	cmp	r3, #32
 8001eac:	d124      	bne.n	8001ef8 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eae:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d022      	beq.n	8001efc <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ebc:	2324      	movs	r3, #36	; 0x24
 8001ebe:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ec2:	6802      	ldr	r2, [r0, #0]
 8001ec4:	6813      	ldr	r3, [r2, #0]
 8001ec6:	f023 0301 	bic.w	r3, r3, #1
 8001eca:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ecc:	6802      	ldr	r2, [r0, #0]
 8001ece:	6813      	ldr	r3, [r2, #0]
 8001ed0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ed4:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ed6:	6802      	ldr	r2, [r0, #0]
 8001ed8:	6813      	ldr	r3, [r2, #0]
 8001eda:	4319      	orrs	r1, r3
 8001edc:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ede:	6802      	ldr	r2, [r0, #0]
 8001ee0:	6813      	ldr	r3, [r2, #0]
 8001ee2:	f043 0301 	orr.w	r3, r3, #1
 8001ee6:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ee8:	2320      	movs	r3, #32
 8001eea:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8001ef8:	2002      	movs	r0, #2
 8001efa:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001efc:	2002      	movs	r0, #2
  }
}
 8001efe:	4770      	bx	lr

08001f00 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f00:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b20      	cmp	r3, #32
 8001f08:	d122      	bne.n	8001f50 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f0a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d020      	beq.n	8001f54 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8001f12:	2301      	movs	r3, #1
 8001f14:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f18:	2324      	movs	r3, #36	; 0x24
 8001f1a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f1e:	6802      	ldr	r2, [r0, #0]
 8001f20:	6813      	ldr	r3, [r2, #0]
 8001f22:	f023 0301 	bic.w	r3, r3, #1
 8001f26:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f28:	6802      	ldr	r2, [r0, #0]
 8001f2a:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f2c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f30:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f34:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f36:	6802      	ldr	r2, [r0, #0]
 8001f38:	6813      	ldr	r3, [r2, #0]
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f40:	2320      	movs	r3, #32
 8001f42:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f46:	2300      	movs	r3, #0
 8001f48:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8001f50:	2002      	movs	r0, #2
 8001f52:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001f54:	2002      	movs	r0, #2
  }
}
 8001f56:	4770      	bx	lr

08001f58 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f5c:	b082      	sub	sp, #8
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f5e:	6807      	ldr	r7, [r0, #0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8001f60:	00ca      	lsls	r2, r1, #3
 8001f62:	1a52      	subs	r2, r2, r1
 8001f64:	0093      	lsls	r3, r2, #2
 8001f66:	4403      	add	r3, r0
 8001f68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d857      	bhi.n	8002020 <PCD_WriteEmptyTxFifo+0xc8>
 8001f70:	46b8      	mov	r8, r7
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8001f72:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 8001f74:	ebc1 04c1 	rsb	r4, r1, r1, lsl #3
 8001f78:	00a2      	lsls	r2, r4, #2
 8001f7a:	4402      	add	r2, r0
 8001f7c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d300      	bcc.n	8001f84 <PCD_WriteEmptyTxFifo+0x2c>
  len = ep->xfer_len - ep->xfer_count;
 8001f82:	461a      	mov	r2, r3
 8001f84:	460c      	mov	r4, r1
 8001f86:	4606      	mov	r6, r0
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8001f88:	f102 0a03 	add.w	sl, r2, #3
 8001f8c:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f90:	e016      	b.n	8001fc0 <PCD_WriteEmptyTxFifo+0x68>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 8001f92:	f109 0a03 	add.w	sl, r9, #3
 8001f96:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f9a:	00e3      	lsls	r3, r4, #3
 8001f9c:	1b1b      	subs	r3, r3, r4
 8001f9e:	009d      	lsls	r5, r3, #2
 8001fa0:	4435      	add	r5, r6
 8001fa2:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8001fa4:	7c33      	ldrb	r3, [r6, #16]
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	fa1f f389 	uxth.w	r3, r9
 8001fac:	b2e2      	uxtb	r2, r4
 8001fae:	4638      	mov	r0, r7
 8001fb0:	f002 fe92 	bl	8004cd8 <USB_WritePacket>
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 8001fb4:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001fb6:	444b      	add	r3, r9
 8001fb8:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 8001fba:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8001fbc:	444b      	add	r3, r9
 8001fbe:	656b      	str	r3, [r5, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001fc0:	eb08 1344 	add.w	r3, r8, r4, lsl #5
 8001fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	4553      	cmp	r3, sl
 8001fce:	d313      	bcc.n	8001ff8 <PCD_WriteEmptyTxFifo+0xa0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001fd0:	00e3      	lsls	r3, r4, #3
 8001fd2:	1b1b      	subs	r3, r3, r4
 8001fd4:	009a      	lsls	r2, r3, #2
 8001fd6:	4432      	add	r2, r6
 8001fd8:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8001fda:	6d13      	ldr	r3, [r2, #80]	; 0x50
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001fdc:	4299      	cmp	r1, r3
 8001fde:	d20b      	bcs.n	8001ff8 <PCD_WriteEmptyTxFifo+0xa0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001fe0:	b153      	cbz	r3, 8001ff8 <PCD_WriteEmptyTxFifo+0xa0>
    len = ep->xfer_len - ep->xfer_count;
 8001fe2:	1a5b      	subs	r3, r3, r1
    if (len > ep->maxpacket)
 8001fe4:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8001fe8:	008a      	lsls	r2, r1, #2
 8001fea:	4432      	add	r2, r6
 8001fec:	f8d2 9044 	ldr.w	r9, [r2, #68]	; 0x44
 8001ff0:	4599      	cmp	r9, r3
 8001ff2:	d3ce      	bcc.n	8001f92 <PCD_WriteEmptyTxFifo+0x3a>
    len = ep->xfer_len - ep->xfer_count;
 8001ff4:	4699      	mov	r9, r3
 8001ff6:	e7cc      	b.n	8001f92 <PCD_WriteEmptyTxFifo+0x3a>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001ff8:	00e3      	lsls	r3, r4, #3
 8001ffa:	1b1b      	subs	r3, r3, r4
 8001ffc:	0098      	lsls	r0, r3, #2
 8001ffe:	4406      	add	r6, r0
 8002000:	6d32      	ldr	r2, [r6, #80]	; 0x50
 8002002:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8002004:	429a      	cmp	r2, r3
 8002006:	d80f      	bhi.n	8002028 <PCD_WriteEmptyTxFifo+0xd0>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002008:	f004 040f 	and.w	r4, r4, #15
 800200c:	2101      	movs	r1, #1
 800200e:	40a1      	lsls	r1, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002010:	f8d7 4834 	ldr.w	r4, [r7, #2100]	; 0x834
 8002014:	ea24 0401 	bic.w	r4, r4, r1
 8002018:	f8c7 4834 	str.w	r4, [r7, #2100]	; 0x834
  }

  return HAL_OK;
 800201c:	2000      	movs	r0, #0
 800201e:	e000      	b.n	8002022 <PCD_WriteEmptyTxFifo+0xca>
    return HAL_ERROR;
 8002020:	2001      	movs	r0, #1
}
 8002022:	b002      	add	sp, #8
 8002024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return HAL_OK;
 8002028:	2000      	movs	r0, #0
 800202a:	e7fa      	b.n	8002022 <PCD_WriteEmptyTxFifo+0xca>

0800202c <HAL_PCD_Init>:
{
 800202c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800202e:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 8002030:	2800      	cmp	r0, #0
 8002032:	f000 8091 	beq.w	8002158 <HAL_PCD_Init+0x12c>
 8002036:	4604      	mov	r4, r0
  USBx = hpcd->Instance;
 8002038:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800203a:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 800203e:	b323      	cbz	r3, 800208a <HAL_PCD_Init+0x5e>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8002040:	2303      	movs	r3, #3
 8002042:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002046:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8002048:	f413 7f80 	tst.w	r3, #256	; 0x100
 800204c:	d101      	bne.n	8002052 <HAL_PCD_Init+0x26>
    hpcd->Init.dma_enable = 0U;
 800204e:	2300      	movs	r3, #0
 8002050:	6123      	str	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 8002052:	6820      	ldr	r0, [r4, #0]
 8002054:	f002 fbd2 	bl	80047fc <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002058:	4625      	mov	r5, r4
 800205a:	f855 7b10 	ldr.w	r7, [r5], #16
 800205e:	466e      	mov	r6, sp
 8002060:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002062:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002064:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002066:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002068:	e895 0003 	ldmia.w	r5, {r0, r1}
 800206c:	e886 0003 	stmia.w	r6, {r0, r1}
 8002070:	1d23      	adds	r3, r4, #4
 8002072:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002074:	4638      	mov	r0, r7
 8002076:	f002 fb07 	bl	8004688 <USB_CoreInit>
 800207a:	b158      	cbz	r0, 8002094 <HAL_PCD_Init+0x68>
    hpcd->State = HAL_PCD_STATE_ERROR;
 800207c:	2302      	movs	r3, #2
 800207e:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8002082:	2501      	movs	r5, #1
}
 8002084:	4628      	mov	r0, r5
 8002086:	b00b      	add	sp, #44	; 0x2c
 8002088:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 800208a:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 800208e:	f005 fbe1 	bl	8007854 <HAL_PCD_MspInit>
 8002092:	e7d5      	b.n	8002040 <HAL_PCD_Init+0x14>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002094:	2100      	movs	r1, #0
 8002096:	6820      	ldr	r0, [r4, #0]
 8002098:	f003 f821 	bl	80050de <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800209c:	2300      	movs	r3, #0
 800209e:	e015      	b.n	80020cc <HAL_PCD_Init+0xa0>
    hpcd->IN_ep[i].is_in = 1U;
 80020a0:	00d9      	lsls	r1, r3, #3
 80020a2:	1ac8      	subs	r0, r1, r3
 80020a4:	0082      	lsls	r2, r0, #2
 80020a6:	4422      	add	r2, r4
 80020a8:	2001      	movs	r0, #1
 80020aa:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 80020ae:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020b2:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020b6:	2000      	movs	r0, #0
 80020b8:	f882 003f 	strb.w	r0, [r2, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 80020bc:	6450      	str	r0, [r2, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020be:	6490      	str	r0, [r2, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 80020c0:	1aca      	subs	r2, r1, r3
 80020c2:	0091      	lsls	r1, r2, #2
 80020c4:	4421      	add	r1, r4
 80020c6:	6508      	str	r0, [r1, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020c8:	3301      	adds	r3, #1
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	6865      	ldr	r5, [r4, #4]
 80020ce:	42ab      	cmp	r3, r5
 80020d0:	d3e6      	bcc.n	80020a0 <HAL_PCD_Init+0x74>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020d2:	2300      	movs	r3, #0
 80020d4:	e015      	b.n	8002102 <HAL_PCD_Init+0xd6>
    hpcd->OUT_ep[i].is_in = 0U;
 80020d6:	00d8      	lsls	r0, r3, #3
 80020d8:	1ac1      	subs	r1, r0, r3
 80020da:	008a      	lsls	r2, r1, #2
 80020dc:	4422      	add	r2, r4
 80020de:	2100      	movs	r1, #0
 80020e0:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 80020e4:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020e8:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020ec:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020f0:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020f4:	1ac2      	subs	r2, r0, r3
 80020f6:	0090      	lsls	r0, r2, #2
 80020f8:	4420      	add	r0, r4
 80020fa:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020fe:	3301      	adds	r3, #1
 8002100:	b2db      	uxtb	r3, r3
 8002102:	429d      	cmp	r5, r3
 8002104:	d8e7      	bhi.n	80020d6 <HAL_PCD_Init+0xaa>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002106:	4625      	mov	r5, r4
 8002108:	f855 7b10 	ldr.w	r7, [r5], #16
 800210c:	466e      	mov	r6, sp
 800210e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002110:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002112:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002114:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002116:	e895 0003 	ldmia.w	r5, {r0, r1}
 800211a:	e886 0003 	stmia.w	r6, {r0, r1}
 800211e:	1d23      	adds	r3, r4, #4
 8002120:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002122:	4638      	mov	r0, r7
 8002124:	f002 fbc2 	bl	80048ac <USB_DevInit>
 8002128:	4605      	mov	r5, r0
 800212a:	b960      	cbnz	r0, 8002146 <HAL_PCD_Init+0x11a>
  hpcd->USB_Address = 0U;
 800212c:	2300      	movs	r3, #0
 800212e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002132:	2301      	movs	r3, #1
 8002134:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 8002138:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800213a:	2b01      	cmp	r3, #1
 800213c:	d008      	beq.n	8002150 <HAL_PCD_Init+0x124>
  (void)USB_DevDisconnect(hpcd->Instance);
 800213e:	6820      	ldr	r0, [r4, #0]
 8002140:	f002 ff8a 	bl	8005058 <USB_DevDisconnect>
  return HAL_OK;
 8002144:	e79e      	b.n	8002084 <HAL_PCD_Init+0x58>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002146:	2302      	movs	r3, #2
 8002148:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 800214c:	2501      	movs	r5, #1
 800214e:	e799      	b.n	8002084 <HAL_PCD_Init+0x58>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002150:	4620      	mov	r0, r4
 8002152:	f000 fcbd 	bl	8002ad0 <HAL_PCDEx_ActivateLPM>
 8002156:	e7f2      	b.n	800213e <HAL_PCD_Init+0x112>
    return HAL_ERROR;
 8002158:	2501      	movs	r5, #1
 800215a:	e793      	b.n	8002084 <HAL_PCD_Init+0x58>

0800215c <HAL_PCD_Start>:
  __HAL_LOCK(hpcd);
 800215c:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8002160:	2b01      	cmp	r3, #1
 8002162:	d00e      	beq.n	8002182 <HAL_PCD_Start+0x26>
{
 8002164:	b510      	push	{r4, lr}
 8002166:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002168:	2301      	movs	r3, #1
 800216a:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 800216e:	6800      	ldr	r0, [r0, #0]
 8002170:	f002 fb3e 	bl	80047f0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002174:	6820      	ldr	r0, [r4, #0]
 8002176:	f002 ff61 	bl	800503c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800217a:	2000      	movs	r0, #0
 800217c:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8002180:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8002182:	2002      	movs	r0, #2
}
 8002184:	4770      	bx	lr
	...

08002188 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002188:	b570      	push	{r4, r5, r6, lr}
 800218a:	4604      	mov	r4, r0
 800218c:	460d      	mov	r5, r1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800218e:	6800      	ldr	r0, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002190:	6c06      	ldr	r6, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002192:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8002196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800219a:	689a      	ldr	r2, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 800219c:	6921      	ldr	r1, [r4, #16]
 800219e:	2901      	cmp	r1, #1
 80021a0:	d011      	beq.n	80021c6 <PCD_EP_OutXfrComplete_int+0x3e>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80021a2:	4937      	ldr	r1, [pc, #220]	; (8002280 <PCD_EP_OutXfrComplete_int+0xf8>)
 80021a4:	428e      	cmp	r6, r1
 80021a6:	d054      	beq.n	8002252 <PCD_EP_OutXfrComplete_int+0xca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80021a8:	b93d      	cbnz	r5, 80021ba <PCD_EP_OutXfrComplete_int+0x32>
 80021aa:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
 80021ae:	0093      	lsls	r3, r2, #2
 80021b0:	4423      	add	r3, r4
 80021b2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d05c      	beq.n	8002274 <PCD_EP_OutXfrComplete_int+0xec>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021ba:	b2e9      	uxtb	r1, r5
 80021bc:	4620      	mov	r0, r4
 80021be:	f005 fb95 	bl	80078ec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 80021c2:	2000      	movs	r0, #0
 80021c4:	bd70      	pop	{r4, r5, r6, pc}
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80021c6:	f012 0f08 	tst.w	r2, #8
 80021ca:	d009      	beq.n	80021e0 <PCD_EP_OutXfrComplete_int+0x58>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021cc:	492d      	ldr	r1, [pc, #180]	; (8002284 <PCD_EP_OutXfrComplete_int+0xfc>)
 80021ce:	428e      	cmp	r6, r1
 80021d0:	d9f7      	bls.n	80021c2 <PCD_EP_OutXfrComplete_int+0x3a>
 80021d2:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80021d6:	d0f4      	beq.n	80021c2 <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80021dc:	609a      	str	r2, [r3, #8]
 80021de:	e7f0      	b.n	80021c2 <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80021e0:	f012 0f20 	tst.w	r2, #32
 80021e4:	d128      	bne.n	8002238 <PCD_EP_OutXfrComplete_int+0xb0>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80021e6:	f012 0f28 	tst.w	r2, #40	; 0x28
 80021ea:	d1ea      	bne.n	80021c2 <PCD_EP_OutXfrComplete_int+0x3a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021ec:	4925      	ldr	r1, [pc, #148]	; (8002284 <PCD_EP_OutXfrComplete_int+0xfc>)
 80021ee:	428e      	cmp	r6, r1
 80021f0:	d902      	bls.n	80021f8 <PCD_EP_OutXfrComplete_int+0x70>
 80021f2:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80021f6:	d122      	bne.n	800223e <PCD_EP_OutXfrComplete_int+0xb6>
          hpcd->OUT_ep[epnum].maxpacket -
 80021f8:	00e9      	lsls	r1, r5, #3
 80021fa:	1b49      	subs	r1, r1, r5
 80021fc:	008a      	lsls	r2, r1, #2
 80021fe:	4422      	add	r2, r4
 8002200:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800220a:	1ac9      	subs	r1, r1, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800220c:	f8c2 1214 	str.w	r1, [r2, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002210:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 8002214:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 8002218:	440b      	add	r3, r1
 800221a:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800221e:	b935      	cbnz	r5, 800222e <PCD_EP_OutXfrComplete_int+0xa6>
 8002220:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
 8002224:	0093      	lsls	r3, r2, #2
 8002226:	4423      	add	r3, r4
 8002228:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800222c:	b15b      	cbz	r3, 8002246 <PCD_EP_OutXfrComplete_int+0xbe>
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800222e:	b2e9      	uxtb	r1, r5
 8002230:	4620      	mov	r0, r4
 8002232:	f005 fb5b 	bl	80078ec <HAL_PCD_DataOutStageCallback>
 8002236:	e7c4      	b.n	80021c2 <PCD_EP_OutXfrComplete_int+0x3a>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002238:	2220      	movs	r2, #32
 800223a:	609a      	str	r2, [r3, #8]
 800223c:	e7c1      	b.n	80021c2 <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800223e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	e7bd      	b.n	80021c2 <PCD_EP_OutXfrComplete_int+0x3a>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002246:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800224a:	2101      	movs	r1, #1
 800224c:	f002 ff88 	bl	8005160 <USB_EP0_OutStart>
 8002250:	e7ed      	b.n	800222e <PCD_EP_OutXfrComplete_int+0xa6>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002252:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8002256:	d109      	bne.n	800226c <PCD_EP_OutXfrComplete_int+0xe4>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002258:	f012 0f20 	tst.w	r2, #32
 800225c:	d001      	beq.n	8002262 <PCD_EP_OutXfrComplete_int+0xda>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800225e:	2220      	movs	r2, #32
 8002260:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002262:	b2e9      	uxtb	r1, r5
 8002264:	4620      	mov	r0, r4
 8002266:	f005 fb41 	bl	80078ec <HAL_PCD_DataOutStageCallback>
 800226a:	e7aa      	b.n	80021c2 <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800226c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002270:	609a      	str	r2, [r3, #8]
 8002272:	e7a6      	b.n	80021c2 <PCD_EP_OutXfrComplete_int+0x3a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002274:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8002278:	2100      	movs	r1, #0
 800227a:	f002 ff71 	bl	8005160 <USB_EP0_OutStart>
 800227e:	e79c      	b.n	80021ba <PCD_EP_OutXfrComplete_int+0x32>
 8002280:	4f54310a 	.word	0x4f54310a
 8002284:	4f54300a 	.word	0x4f54300a

08002288 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002288:	b538      	push	{r3, r4, r5, lr}
 800228a:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800228c:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800228e:	6c1d      	ldr	r5, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002290:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 8002294:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002298:	4b0e      	ldr	r3, [pc, #56]	; (80022d4 <PCD_EP_OutSetupPacket_int+0x4c>)
 800229a:	429d      	cmp	r5, r3
 800229c:	d907      	bls.n	80022ae <PCD_EP_OutSetupPacket_int+0x26>
 800229e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80022a2:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80022a6:	d002      	beq.n	80022ae <PCD_EP_OutSetupPacket_int+0x26>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022ac:	608b      	str	r3, [r1, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80022ae:	4620      	mov	r0, r4
 80022b0:	f005 fb14 	bl	80078dc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80022b4:	4b07      	ldr	r3, [pc, #28]	; (80022d4 <PCD_EP_OutSetupPacket_int+0x4c>)
 80022b6:	429d      	cmp	r5, r3
 80022b8:	d902      	bls.n	80022c0 <PCD_EP_OutSetupPacket_int+0x38>
 80022ba:	6923      	ldr	r3, [r4, #16]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d001      	beq.n	80022c4 <PCD_EP_OutSetupPacket_int+0x3c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
  }

  return HAL_OK;
}
 80022c0:	2000      	movs	r0, #0
 80022c2:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022c4:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80022c8:	2101      	movs	r1, #1
 80022ca:	6820      	ldr	r0, [r4, #0]
 80022cc:	f002 ff48 	bl	8005160 <USB_EP0_OutStart>
 80022d0:	e7f6      	b.n	80022c0 <PCD_EP_OutSetupPacket_int+0x38>
 80022d2:	bf00      	nop
 80022d4:	4f54300a 	.word	0x4f54300a

080022d8 <HAL_PCD_IRQHandler>:
{
 80022d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022dc:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022de:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80022e0:	4628      	mov	r0, r5
 80022e2:	f002 fef8 	bl	80050d6 <USB_GetMode>
 80022e6:	b108      	cbz	r0, 80022ec <HAL_PCD_IRQHandler+0x14>
}
 80022e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022ec:	462f      	mov	r7, r5
 80022ee:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80022f0:	6820      	ldr	r0, [r4, #0]
 80022f2:	f002 febf 	bl	8005074 <USB_ReadInterrupts>
 80022f6:	2800      	cmp	r0, #0
 80022f8:	d0f6      	beq.n	80022e8 <HAL_PCD_IRQHandler+0x10>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80022fa:	6820      	ldr	r0, [r4, #0]
 80022fc:	f002 feba 	bl	8005074 <USB_ReadInterrupts>
 8002300:	f010 0f02 	tst.w	r0, #2
 8002304:	d004      	beq.n	8002310 <HAL_PCD_IRQHandler+0x38>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002306:	6822      	ldr	r2, [r4, #0]
 8002308:	6953      	ldr	r3, [r2, #20]
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002310:	6820      	ldr	r0, [r4, #0]
 8002312:	f002 feaf 	bl	8005074 <USB_ReadInterrupts>
 8002316:	f010 0f10 	tst.w	r0, #16
 800231a:	d015      	beq.n	8002348 <HAL_PCD_IRQHandler+0x70>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800231c:	6822      	ldr	r2, [r4, #0]
 800231e:	6993      	ldr	r3, [r2, #24]
 8002320:	f023 0310 	bic.w	r3, r3, #16
 8002324:	6193      	str	r3, [r2, #24]
      temp = USBx->GRXSTSP;
 8002326:	f8d5 8020 	ldr.w	r8, [r5, #32]
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800232a:	f008 090f 	and.w	r9, r8, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800232e:	f3c8 4343 	ubfx	r3, r8, #17, #4
 8002332:	2b02      	cmp	r3, #2
 8002334:	f000 8085 	beq.w	8002442 <HAL_PCD_IRQHandler+0x16a>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002338:	2b06      	cmp	r3, #6
 800233a:	f000 80a5 	beq.w	8002488 <HAL_PCD_IRQHandler+0x1b0>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800233e:	6822      	ldr	r2, [r4, #0]
 8002340:	6993      	ldr	r3, [r2, #24]
 8002342:	f043 0310 	orr.w	r3, r3, #16
 8002346:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002348:	6820      	ldr	r0, [r4, #0]
 800234a:	f002 fe93 	bl	8005074 <USB_ReadInterrupts>
 800234e:	f410 2f00 	tst.w	r0, #524288	; 0x80000
 8002352:	f040 80ad 	bne.w	80024b0 <HAL_PCD_IRQHandler+0x1d8>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002356:	6820      	ldr	r0, [r4, #0]
 8002358:	f002 fe8c 	bl	8005074 <USB_ReadInterrupts>
 800235c:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 8002360:	f040 80f1 	bne.w	8002546 <HAL_PCD_IRQHandler+0x26e>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002364:	6820      	ldr	r0, [r4, #0]
 8002366:	f002 fe85 	bl	8005074 <USB_ReadInterrupts>
 800236a:	2800      	cmp	r0, #0
 800236c:	f2c0 815f 	blt.w	800262e <HAL_PCD_IRQHandler+0x356>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002370:	6820      	ldr	r0, [r4, #0]
 8002372:	f002 fe7f 	bl	8005074 <USB_ReadInterrupts>
 8002376:	f410 6f00 	tst.w	r0, #2048	; 0x800
 800237a:	d00a      	beq.n	8002392 <HAL_PCD_IRQHandler+0xba>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800237c:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 8002380:	f013 0f01 	tst.w	r3, #1
 8002384:	f040 816d 	bne.w	8002662 <HAL_PCD_IRQHandler+0x38a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002388:	6822      	ldr	r2, [r4, #0]
 800238a:	6953      	ldr	r3, [r2, #20]
 800238c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002390:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002392:	6820      	ldr	r0, [r4, #0]
 8002394:	f002 fe6e 	bl	8005074 <USB_ReadInterrupts>
 8002398:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 800239c:	d015      	beq.n	80023ca <HAL_PCD_IRQHandler+0xf2>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800239e:	6822      	ldr	r2, [r4, #0]
 80023a0:	6953      	ldr	r3, [r2, #20]
 80023a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023a6:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 80023a8:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f040 815c 	bne.w	800266a <HAL_PCD_IRQHandler+0x392>
        hpcd->LPM_State = LPM_L1;
 80023b2:	2101      	movs	r1, #1
 80023b4:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80023b8:	6823      	ldr	r3, [r4, #0]
 80023ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023bc:	f3c3 0383 	ubfx	r3, r3, #2, #4
 80023c0:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80023c4:	4620      	mov	r0, r4
 80023c6:	f005 fb4d 	bl	8007a64 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80023ca:	6820      	ldr	r0, [r4, #0]
 80023cc:	f002 fe52 	bl	8005074 <USB_ReadInterrupts>
 80023d0:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 80023d4:	f040 814d 	bne.w	8002672 <HAL_PCD_IRQHandler+0x39a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80023d8:	6820      	ldr	r0, [r4, #0]
 80023da:	f002 fe4b 	bl	8005074 <USB_ReadInterrupts>
 80023de:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 80023e2:	f040 81a5 	bne.w	8002730 <HAL_PCD_IRQHandler+0x458>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80023e6:	6820      	ldr	r0, [r4, #0]
 80023e8:	f002 fe44 	bl	8005074 <USB_ReadInterrupts>
 80023ec:	f010 0f08 	tst.w	r0, #8
 80023f0:	f040 81b6 	bne.w	8002760 <HAL_PCD_IRQHandler+0x488>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80023f4:	6820      	ldr	r0, [r4, #0]
 80023f6:	f002 fe3d 	bl	8005074 <USB_ReadInterrupts>
 80023fa:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 80023fe:	f040 81b8 	bne.w	8002772 <HAL_PCD_IRQHandler+0x49a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002402:	6820      	ldr	r0, [r4, #0]
 8002404:	f002 fe36 	bl	8005074 <USB_ReadInterrupts>
 8002408:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 800240c:	f040 81bb 	bne.w	8002786 <HAL_PCD_IRQHandler+0x4ae>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002410:	6820      	ldr	r0, [r4, #0]
 8002412:	f002 fe2f 	bl	8005074 <USB_ReadInterrupts>
 8002416:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800241a:	f040 81be 	bne.w	800279a <HAL_PCD_IRQHandler+0x4c2>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800241e:	6820      	ldr	r0, [r4, #0]
 8002420:	f002 fe28 	bl	8005074 <USB_ReadInterrupts>
 8002424:	f010 0f04 	tst.w	r0, #4
 8002428:	f43f af5e 	beq.w	80022e8 <HAL_PCD_IRQHandler+0x10>
      temp = hpcd->Instance->GOTGINT;
 800242c:	6823      	ldr	r3, [r4, #0]
 800242e:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002430:	f015 0f04 	tst.w	r5, #4
 8002434:	f040 81ba 	bne.w	80027ac <HAL_PCD_IRQHandler+0x4d4>
      hpcd->Instance->GOTGINT |= temp;
 8002438:	6822      	ldr	r2, [r4, #0]
 800243a:	6853      	ldr	r3, [r2, #4]
 800243c:	432b      	orrs	r3, r5
 800243e:	6053      	str	r3, [r2, #4]
 8002440:	e752      	b.n	80022e8 <HAL_PCD_IRQHandler+0x10>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002442:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002446:	ea18 0f03 	tst.w	r8, r3
 800244a:	f43f af78 	beq.w	800233e <HAL_PCD_IRQHandler+0x66>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800244e:	ea4f 0bc9 	mov.w	fp, r9, lsl #3
 8002452:	ebab 0309 	sub.w	r3, fp, r9
 8002456:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800245a:	44a2      	add	sl, r4
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800245c:	ea4f 1818 	mov.w	r8, r8, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002460:	f3c8 020a 	ubfx	r2, r8, #0, #11
 8002464:	f8da 1208 	ldr.w	r1, [sl, #520]	; 0x208
 8002468:	4628      	mov	r0, r5
 800246a:	f002 fd55 	bl	8004f18 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800246e:	f3c8 080a 	ubfx	r8, r8, #0, #11
 8002472:	f8da 3208 	ldr.w	r3, [sl, #520]	; 0x208
 8002476:	4443      	add	r3, r8
 8002478:	f8ca 3208 	str.w	r3, [sl, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800247c:	f8da 3214 	ldr.w	r3, [sl, #532]	; 0x214
 8002480:	4443      	add	r3, r8
 8002482:	f8ca 3214 	str.w	r3, [sl, #532]	; 0x214
 8002486:	e75a      	b.n	800233e <HAL_PCD_IRQHandler+0x66>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002488:	2208      	movs	r2, #8
 800248a:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 800248e:	4628      	mov	r0, r5
 8002490:	f002 fd42 	bl	8004f18 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002494:	f3c8 180a 	ubfx	r8, r8, #4, #11
 8002498:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800249c:	eba3 0109 	sub.w	r1, r3, r9
 80024a0:	008a      	lsls	r2, r1, #2
 80024a2:	4422      	add	r2, r4
 80024a4:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 80024a8:	4443      	add	r3, r8
 80024aa:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 80024ae:	e746      	b.n	800233e <HAL_PCD_IRQHandler+0x66>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80024b0:	6820      	ldr	r0, [r4, #0]
 80024b2:	f002 fde3 	bl	800507c <USB_ReadDevAllOutEpInterrupt>
 80024b6:	4680      	mov	r8, r0
      epnum = 0U;
 80024b8:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 80024ba:	e017      	b.n	80024ec <HAL_PCD_IRQHandler+0x214>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80024bc:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 80024c0:	2201      	movs	r2, #1
 80024c2:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80024c6:	4649      	mov	r1, r9
 80024c8:	4620      	mov	r0, r4
 80024ca:	f7ff fe5d 	bl	8002188 <PCD_EP_OutXfrComplete_int>
 80024ce:	e01d      	b.n	800250c <HAL_PCD_IRQHandler+0x234>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80024d0:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 80024d4:	2208      	movs	r2, #8
 80024d6:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80024da:	4649      	mov	r1, r9
 80024dc:	4620      	mov	r0, r4
 80024de:	f7ff fed3 	bl	8002288 <PCD_EP_OutSetupPacket_int>
 80024e2:	e016      	b.n	8002512 <HAL_PCD_IRQHandler+0x23a>
        epnum++;
 80024e4:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 80024e8:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 80024ec:	f1b8 0f00 	cmp.w	r8, #0
 80024f0:	f43f af31 	beq.w	8002356 <HAL_PCD_IRQHandler+0x7e>
        if ((ep_intr & 0x1U) != 0U)
 80024f4:	f018 0f01 	tst.w	r8, #1
 80024f8:	d0f4      	beq.n	80024e4 <HAL_PCD_IRQHandler+0x20c>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024fa:	fa5f f189 	uxtb.w	r1, r9
 80024fe:	6820      	ldr	r0, [r4, #0]
 8002500:	f002 fdcc 	bl	800509c <USB_ReadDevOutEPInterrupt>
 8002504:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002506:	f010 0f01 	tst.w	r0, #1
 800250a:	d1d7      	bne.n	80024bc <HAL_PCD_IRQHandler+0x1e4>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800250c:	f01a 0f08 	tst.w	sl, #8
 8002510:	d1de      	bne.n	80024d0 <HAL_PCD_IRQHandler+0x1f8>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002512:	f01a 0f10 	tst.w	sl, #16
 8002516:	d004      	beq.n	8002522 <HAL_PCD_IRQHandler+0x24a>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002518:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 800251c:	2210      	movs	r2, #16
 800251e:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002522:	f01a 0f20 	tst.w	sl, #32
 8002526:	d004      	beq.n	8002532 <HAL_PCD_IRQHandler+0x25a>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002528:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 800252c:	2220      	movs	r2, #32
 800252e:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002532:	f41a 5f00 	tst.w	sl, #8192	; 0x2000
 8002536:	d0d5      	beq.n	80024e4 <HAL_PCD_IRQHandler+0x20c>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002538:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 800253c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002540:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
 8002544:	e7ce      	b.n	80024e4 <HAL_PCD_IRQHandler+0x20c>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002546:	6820      	ldr	r0, [r4, #0]
 8002548:	f002 fda0 	bl	800508c <USB_ReadDevAllInEpInterrupt>
 800254c:	4680      	mov	r8, r0
      epnum = 0U;
 800254e:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8002550:	e02a      	b.n	80025a8 <HAL_PCD_IRQHandler+0x2d0>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002552:	4659      	mov	r1, fp
 8002554:	4620      	mov	r0, r4
 8002556:	f005 f9d5 	bl	8007904 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800255a:	f01a 0f08 	tst.w	sl, #8
 800255e:	d004      	beq.n	800256a <HAL_PCD_IRQHandler+0x292>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002560:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002564:	2208      	movs	r2, #8
 8002566:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800256a:	f01a 0f10 	tst.w	sl, #16
 800256e:	d004      	beq.n	800257a <HAL_PCD_IRQHandler+0x2a2>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002570:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002574:	2210      	movs	r2, #16
 8002576:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800257a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800257e:	d004      	beq.n	800258a <HAL_PCD_IRQHandler+0x2b2>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002580:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002584:	2240      	movs	r2, #64	; 0x40
 8002586:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800258a:	f01a 0f02 	tst.w	sl, #2
 800258e:	d004      	beq.n	800259a <HAL_PCD_IRQHandler+0x2c2>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002590:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002594:	2202      	movs	r2, #2
 8002596:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800259a:	f01a 0f80 	tst.w	sl, #128	; 0x80
 800259e:	d141      	bne.n	8002624 <HAL_PCD_IRQHandler+0x34c>
        epnum++;
 80025a0:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 80025a4:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 80025a8:	f1b8 0f00 	cmp.w	r8, #0
 80025ac:	f43f aeda 	beq.w	8002364 <HAL_PCD_IRQHandler+0x8c>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80025b0:	f018 0f01 	tst.w	r8, #1
 80025b4:	d0f4      	beq.n	80025a0 <HAL_PCD_IRQHandler+0x2c8>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80025b6:	fa5f fb89 	uxtb.w	fp, r9
 80025ba:	4659      	mov	r1, fp
 80025bc:	6820      	ldr	r0, [r4, #0]
 80025be:	f002 fd76 	bl	80050ae <USB_ReadDevInEPInterrupt>
 80025c2:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80025c4:	f010 0f01 	tst.w	r0, #1
 80025c8:	d0c7      	beq.n	800255a <HAL_PCD_IRQHandler+0x282>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80025ca:	f009 030f 	and.w	r3, r9, #15
 80025ce:	2101      	movs	r1, #1
 80025d0:	fa01 f203 	lsl.w	r2, r1, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025d4:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 80025d8:	ea23 0302 	bic.w	r3, r3, r2
 80025dc:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80025e0:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 80025e4:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
            if (hpcd->Init.dma_enable == 1U)
 80025e8:	6923      	ldr	r3, [r4, #16]
 80025ea:	428b      	cmp	r3, r1
 80025ec:	d1b1      	bne.n	8002552 <HAL_PCD_IRQHandler+0x27a>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80025ee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80025f2:	eba2 0209 	sub.w	r2, r2, r9
 80025f6:	0093      	lsls	r3, r2, #2
 80025f8:	4423      	add	r3, r4
 80025fa:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80025fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80025fe:	440a      	add	r2, r1
 8002600:	649a      	str	r2, [r3, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002602:	f1b9 0f00 	cmp.w	r9, #0
 8002606:	d1a4      	bne.n	8002552 <HAL_PCD_IRQHandler+0x27a>
 8002608:	ebc9 02c9 	rsb	r2, r9, r9, lsl #3
 800260c:	0093      	lsls	r3, r2, #2
 800260e:	4423      	add	r3, r4
 8002610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002612:	2b00      	cmp	r3, #0
 8002614:	d19d      	bne.n	8002552 <HAL_PCD_IRQHandler+0x27a>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002616:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800261a:	2101      	movs	r1, #1
 800261c:	6820      	ldr	r0, [r4, #0]
 800261e:	f002 fd9f 	bl	8005160 <USB_EP0_OutStart>
 8002622:	e796      	b.n	8002552 <HAL_PCD_IRQHandler+0x27a>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002624:	4649      	mov	r1, r9
 8002626:	4620      	mov	r0, r4
 8002628:	f7ff fc96 	bl	8001f58 <PCD_WriteEmptyTxFifo>
 800262c:	e7b8      	b.n	80025a0 <HAL_PCD_IRQHandler+0x2c8>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800262e:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 8002632:	f023 0301 	bic.w	r3, r3, #1
 8002636:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 800263a:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800263e:	2b01      	cmp	r3, #1
 8002640:	d008      	beq.n	8002654 <HAL_PCD_IRQHandler+0x37c>
        HAL_PCD_ResumeCallback(hpcd);
 8002642:	4620      	mov	r0, r4
 8002644:	f005 f99e 	bl	8007984 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002648:	6822      	ldr	r2, [r4, #0]
 800264a:	6953      	ldr	r3, [r2, #20]
 800264c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002650:	6153      	str	r3, [r2, #20]
 8002652:	e68d      	b.n	8002370 <HAL_PCD_IRQHandler+0x98>
        hpcd->LPM_State = LPM_L0;
 8002654:	2100      	movs	r1, #0
 8002656:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800265a:	4620      	mov	r0, r4
 800265c:	f005 fa02 	bl	8007a64 <HAL_PCDEx_LPM_Callback>
 8002660:	e7f2      	b.n	8002648 <HAL_PCD_IRQHandler+0x370>
        HAL_PCD_SuspendCallback(hpcd);
 8002662:	4620      	mov	r0, r4
 8002664:	f005 f976 	bl	8007954 <HAL_PCD_SuspendCallback>
 8002668:	e68e      	b.n	8002388 <HAL_PCD_IRQHandler+0xb0>
        HAL_PCD_SuspendCallback(hpcd);
 800266a:	4620      	mov	r0, r4
 800266c:	f005 f972 	bl	8007954 <HAL_PCD_SuspendCallback>
 8002670:	e6ab      	b.n	80023ca <HAL_PCD_IRQHandler+0xf2>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002672:	f505 6800 	add.w	r8, r5, #2048	; 0x800
 8002676:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800267a:	f023 0301 	bic.w	r3, r3, #1
 800267e:	f8c8 3004 	str.w	r3, [r8, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002682:	2110      	movs	r1, #16
 8002684:	6820      	ldr	r0, [r4, #0]
 8002686:	f002 f8bf 	bl	8004808 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800268a:	e01a      	b.n	80026c2 <HAL_PCD_IRQHandler+0x3ea>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800268c:	eb07 1346 	add.w	r3, r7, r6, lsl #5
 8002690:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 8002694:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002698:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800269c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80026a0:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80026a4:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80026a8:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80026ac:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80026b0:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80026b4:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80026b8:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80026bc:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026c0:	3601      	adds	r6, #1
 80026c2:	6863      	ldr	r3, [r4, #4]
 80026c4:	42b3      	cmp	r3, r6
 80026c6:	d8e1      	bhi.n	800268c <HAL_PCD_IRQHandler+0x3b4>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80026c8:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80026cc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80026d0:	f8c8 301c 	str.w	r3, [r8, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80026d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80026d6:	b1eb      	cbz	r3, 8002714 <HAL_PCD_IRQHandler+0x43c>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80026d8:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
 80026dc:	f043 030b 	orr.w	r3, r3, #11
 80026e0:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80026e4:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 80026e8:	f043 030b 	orr.w	r3, r3, #11
 80026ec:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80026f0:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 80026f4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80026f8:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80026fc:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8002700:	7c21      	ldrb	r1, [r4, #16]
 8002702:	6820      	ldr	r0, [r4, #0]
 8002704:	f002 fd2c 	bl	8005160 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002708:	6822      	ldr	r2, [r4, #0]
 800270a:	6953      	ldr	r3, [r2, #20]
 800270c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002710:	6153      	str	r3, [r2, #20]
 8002712:	e661      	b.n	80023d8 <HAL_PCD_IRQHandler+0x100>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002714:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8002718:	f242 032b 	movw	r3, #8235	; 0x202b
 800271c:	4313      	orrs	r3, r2
 800271e:	f8c8 3014 	str.w	r3, [r8, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002722:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8002726:	f043 030b 	orr.w	r3, r3, #11
 800272a:	f8c8 3010 	str.w	r3, [r8, #16]
 800272e:	e7df      	b.n	80026f0 <HAL_PCD_IRQHandler+0x418>
      (void)USB_ActivateSetup(hpcd->Instance);
 8002730:	6820      	ldr	r0, [r4, #0]
 8002732:	f002 fd05 	bl	8005140 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002736:	6820      	ldr	r0, [r4, #0]
 8002738:	f002 f97c 	bl	8004a34 <USB_GetDevSpeed>
 800273c:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800273e:	6825      	ldr	r5, [r4, #0]
 8002740:	f000 fd42 	bl	80031c8 <HAL_RCC_GetHCLKFreq>
 8002744:	7b22      	ldrb	r2, [r4, #12]
 8002746:	4601      	mov	r1, r0
 8002748:	4628      	mov	r0, r5
 800274a:	f001 ffdb 	bl	8004704 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 800274e:	4620      	mov	r0, r4
 8002750:	f005 f8e9 	bl	8007926 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002754:	6822      	ldr	r2, [r4, #0]
 8002756:	6953      	ldr	r3, [r2, #20]
 8002758:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800275c:	6153      	str	r3, [r2, #20]
 800275e:	e642      	b.n	80023e6 <HAL_PCD_IRQHandler+0x10e>
      HAL_PCD_SOFCallback(hpcd);
 8002760:	4620      	mov	r0, r4
 8002762:	f005 f8da 	bl	800791a <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002766:	6822      	ldr	r2, [r4, #0]
 8002768:	6953      	ldr	r3, [r2, #20]
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	6153      	str	r3, [r2, #20]
 8002770:	e640      	b.n	80023f4 <HAL_PCD_IRQHandler+0x11c>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002772:	2100      	movs	r1, #0
 8002774:	4620      	mov	r0, r4
 8002776:	f005 f911 	bl	800799c <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800277a:	6822      	ldr	r2, [r4, #0]
 800277c:	6953      	ldr	r3, [r2, #20]
 800277e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002782:	6153      	str	r3, [r2, #20]
 8002784:	e63d      	b.n	8002402 <HAL_PCD_IRQHandler+0x12a>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002786:	2100      	movs	r1, #0
 8002788:	4620      	mov	r0, r4
 800278a:	f005 f901 	bl	8007990 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800278e:	6822      	ldr	r2, [r4, #0]
 8002790:	6953      	ldr	r3, [r2, #20]
 8002792:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002796:	6153      	str	r3, [r2, #20]
 8002798:	e63a      	b.n	8002410 <HAL_PCD_IRQHandler+0x138>
      HAL_PCD_ConnectCallback(hpcd);
 800279a:	4620      	mov	r0, r4
 800279c:	f005 f904 	bl	80079a8 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80027a0:	6822      	ldr	r2, [r4, #0]
 80027a2:	6953      	ldr	r3, [r2, #20]
 80027a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80027a8:	6153      	str	r3, [r2, #20]
 80027aa:	e638      	b.n	800241e <HAL_PCD_IRQHandler+0x146>
        HAL_PCD_DisconnectCallback(hpcd);
 80027ac:	4620      	mov	r0, r4
 80027ae:	f005 f901 	bl	80079b4 <HAL_PCD_DisconnectCallback>
 80027b2:	e641      	b.n	8002438 <HAL_PCD_IRQHandler+0x160>

080027b4 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 80027b4:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d00d      	beq.n	80027d8 <HAL_PCD_SetAddress+0x24>
{
 80027bc:	b510      	push	{r4, lr}
 80027be:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80027c0:	2301      	movs	r3, #1
 80027c2:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80027c6:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80027ca:	6800      	ldr	r0, [r0, #0]
 80027cc:	f002 fc26 	bl	800501c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80027d0:	2000      	movs	r0, #0
 80027d2:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80027d6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80027d8:	2002      	movs	r0, #2
}
 80027da:	4770      	bx	lr

080027dc <HAL_PCD_EP_Open>:
{
 80027dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((ep_addr & 0x80U) == 0x80U)
 80027de:	f011 0f80 	tst.w	r1, #128	; 0x80
 80027e2:	d128      	bne.n	8002836 <HAL_PCD_EP_Open+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027e4:	f001 060f 	and.w	r6, r1, #15
 80027e8:	00f5      	lsls	r5, r6, #3
 80027ea:	1baf      	subs	r7, r5, r6
 80027ec:	00bc      	lsls	r4, r7, #2
 80027ee:	4627      	mov	r7, r4
 80027f0:	f504 74fc 	add.w	r4, r4, #504	; 0x1f8
 80027f4:	4404      	add	r4, r0
 80027f6:	3404      	adds	r4, #4
    ep->is_in = 0U;
 80027f8:	463e      	mov	r6, r7
 80027fa:	4406      	add	r6, r0
 80027fc:	2500      	movs	r5, #0
 80027fe:	f886 51fd 	strb.w	r5, [r6, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8002802:	f001 010f 	and.w	r1, r1, #15
 8002806:	7021      	strb	r1, [r4, #0]
  ep->maxpacket = ep_mps;
 8002808:	60a2      	str	r2, [r4, #8]
  ep->type = ep_type;
 800280a:	70e3      	strb	r3, [r4, #3]
  if (ep->is_in != 0U)
 800280c:	7862      	ldrb	r2, [r4, #1]
 800280e:	b102      	cbz	r2, 8002812 <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 8002810:	80e1      	strh	r1, [r4, #6]
  if (ep_type == EP_TYPE_BULK)
 8002812:	2b02      	cmp	r3, #2
 8002814:	d01e      	beq.n	8002854 <HAL_PCD_EP_Open+0x78>
  __HAL_LOCK(hpcd);
 8002816:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800281a:	2b01      	cmp	r3, #1
 800281c:	d01d      	beq.n	800285a <HAL_PCD_EP_Open+0x7e>
 800281e:	4605      	mov	r5, r0
 8002820:	2301      	movs	r3, #1
 8002822:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002826:	4621      	mov	r1, r4
 8002828:	6800      	ldr	r0, [r0, #0]
 800282a:	f002 f913 	bl	8004a54 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800282e:	2000      	movs	r0, #0
 8002830:	f885 03bc 	strb.w	r0, [r5, #956]	; 0x3bc
}
 8002834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002836:	f001 060f 	and.w	r6, r1, #15
 800283a:	00f5      	lsls	r5, r6, #3
 800283c:	1baf      	subs	r7, r5, r6
 800283e:	00bc      	lsls	r4, r7, #2
 8002840:	4627      	mov	r7, r4
 8002842:	3438      	adds	r4, #56	; 0x38
 8002844:	4404      	add	r4, r0
 8002846:	3404      	adds	r4, #4
    ep->is_in = 1U;
 8002848:	463e      	mov	r6, r7
 800284a:	4406      	add	r6, r0
 800284c:	2501      	movs	r5, #1
 800284e:	f886 503d 	strb.w	r5, [r6, #61]	; 0x3d
 8002852:	e7d6      	b.n	8002802 <HAL_PCD_EP_Open+0x26>
    ep->data_pid_start = 0U;
 8002854:	2300      	movs	r3, #0
 8002856:	7123      	strb	r3, [r4, #4]
 8002858:	e7dd      	b.n	8002816 <HAL_PCD_EP_Open+0x3a>
  __HAL_LOCK(hpcd);
 800285a:	2002      	movs	r0, #2
 800285c:	e7ea      	b.n	8002834 <HAL_PCD_EP_Open+0x58>

0800285e <HAL_PCD_EP_Close>:
{
 800285e:	b538      	push	{r3, r4, r5, lr}
  if ((ep_addr & 0x80U) == 0x80U)
 8002860:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002864:	d121      	bne.n	80028aa <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002866:	f001 050f 	and.w	r5, r1, #15
 800286a:	00ea      	lsls	r2, r5, #3
 800286c:	1b54      	subs	r4, r2, r5
 800286e:	00a3      	lsls	r3, r4, #2
 8002870:	461c      	mov	r4, r3
 8002872:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002876:	4403      	add	r3, r0
 8002878:	3304      	adds	r3, #4
    ep->is_in = 0U;
 800287a:	4625      	mov	r5, r4
 800287c:	4405      	add	r5, r0
 800287e:	2200      	movs	r2, #0
 8002880:	f885 21fd 	strb.w	r2, [r5, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002884:	f001 010f 	and.w	r1, r1, #15
 8002888:	7019      	strb	r1, [r3, #0]
  __HAL_LOCK(hpcd);
 800288a:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 800288e:	2a01      	cmp	r2, #1
 8002890:	d01a      	beq.n	80028c8 <HAL_PCD_EP_Close+0x6a>
 8002892:	4604      	mov	r4, r0
 8002894:	2201      	movs	r2, #1
 8002896:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800289a:	4619      	mov	r1, r3
 800289c:	6800      	ldr	r0, [r0, #0]
 800289e:	f002 f921 	bl	8004ae4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028a2:	2000      	movs	r0, #0
 80028a4:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80028a8:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028aa:	f001 040f 	and.w	r4, r1, #15
 80028ae:	00e2      	lsls	r2, r4, #3
 80028b0:	1b15      	subs	r5, r2, r4
 80028b2:	00ab      	lsls	r3, r5, #2
 80028b4:	461d      	mov	r5, r3
 80028b6:	3338      	adds	r3, #56	; 0x38
 80028b8:	4403      	add	r3, r0
 80028ba:	3304      	adds	r3, #4
    ep->is_in = 1U;
 80028bc:	462c      	mov	r4, r5
 80028be:	4404      	add	r4, r0
 80028c0:	2201      	movs	r2, #1
 80028c2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 80028c6:	e7dd      	b.n	8002884 <HAL_PCD_EP_Close+0x26>
  __HAL_LOCK(hpcd);
 80028c8:	2002      	movs	r0, #2
 80028ca:	e7ed      	b.n	80028a8 <HAL_PCD_EP_Close+0x4a>

080028cc <HAL_PCD_EP_Receive>:
{
 80028cc:	b570      	push	{r4, r5, r6, lr}
 80028ce:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028d2:	00ee      	lsls	r6, r5, #3
 80028d4:	1b71      	subs	r1, r6, r5
 80028d6:	008c      	lsls	r4, r1, #2
 80028d8:	f504 74fc 	add.w	r4, r4, #504	; 0x1f8
 80028dc:	4404      	add	r4, r0
 80028de:	1d21      	adds	r1, r4, #4
  ep->xfer_buff = pBuf;
 80028e0:	1b76      	subs	r6, r6, r5
 80028e2:	00b4      	lsls	r4, r6, #2
 80028e4:	4404      	add	r4, r0
 80028e6:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_len = len;
 80028ea:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 80028f4:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 80028f8:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 80028fc:	6903      	ldr	r3, [r0, #16]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d006      	beq.n	8002910 <HAL_PCD_EP_Receive+0x44>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002902:	b165      	cbz	r5, 800291e <HAL_PCD_EP_Receive+0x52>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002904:	b2da      	uxtb	r2, r3
 8002906:	6800      	ldr	r0, [r0, #0]
 8002908:	f002 f9fa 	bl	8004d00 <USB_EPStartXfer>
}
 800290c:	2000      	movs	r0, #0
 800290e:	bd70      	pop	{r4, r5, r6, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8002910:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
 8002914:	00b4      	lsls	r4, r6, #2
 8002916:	4404      	add	r4, r0
 8002918:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
 800291c:	e7f1      	b.n	8002902 <HAL_PCD_EP_Receive+0x36>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800291e:	b2da      	uxtb	r2, r3
 8002920:	6800      	ldr	r0, [r0, #0]
 8002922:	f002 f94d 	bl	8004bc0 <USB_EP0StartXfer>
 8002926:	e7f1      	b.n	800290c <HAL_PCD_EP_Receive+0x40>

08002928 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002928:	f001 010f 	and.w	r1, r1, #15
 800292c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002930:	008b      	lsls	r3, r1, #2
 8002932:	4418      	add	r0, r3
}
 8002934:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 8002938:	4770      	bx	lr

0800293a <HAL_PCD_EP_Transmit>:
{
 800293a:	b570      	push	{r4, r5, r6, lr}
 800293c:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002940:	00ee      	lsls	r6, r5, #3
 8002942:	1b71      	subs	r1, r6, r5
 8002944:	008c      	lsls	r4, r1, #2
 8002946:	3438      	adds	r4, #56	; 0x38
 8002948:	4404      	add	r4, r0
 800294a:	1d21      	adds	r1, r4, #4
  ep->xfer_buff = pBuf;
 800294c:	1b76      	subs	r6, r6, r5
 800294e:	00b4      	lsls	r4, r6, #2
 8002950:	4404      	add	r4, r0
 8002952:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->xfer_len = len;
 8002954:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 8002956:	2300      	movs	r3, #0
 8002958:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 800295a:	2301      	movs	r3, #1
 800295c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 8002960:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (hpcd->Init.dma_enable == 1U)
 8002964:	6903      	ldr	r3, [r0, #16]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d006      	beq.n	8002978 <HAL_PCD_EP_Transmit+0x3e>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800296a:	b15d      	cbz	r5, 8002984 <HAL_PCD_EP_Transmit+0x4a>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800296c:	b2da      	uxtb	r2, r3
 800296e:	6800      	ldr	r0, [r0, #0]
 8002970:	f002 f9c6 	bl	8004d00 <USB_EPStartXfer>
}
 8002974:	2000      	movs	r0, #0
 8002976:	bd70      	pop	{r4, r5, r6, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8002978:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
 800297c:	00b4      	lsls	r4, r6, #2
 800297e:	4404      	add	r4, r0
 8002980:	64e2      	str	r2, [r4, #76]	; 0x4c
 8002982:	e7f2      	b.n	800296a <HAL_PCD_EP_Transmit+0x30>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002984:	b2da      	uxtb	r2, r3
 8002986:	6800      	ldr	r0, [r0, #0]
 8002988:	f002 f91a 	bl	8004bc0 <USB_EP0StartXfer>
 800298c:	e7f2      	b.n	8002974 <HAL_PCD_EP_Transmit+0x3a>

0800298e <HAL_PCD_EP_SetStall>:
{
 800298e:	b538      	push	{r3, r4, r5, lr}
 8002990:	f001 050f 	and.w	r5, r1, #15
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002994:	6843      	ldr	r3, [r0, #4]
 8002996:	429d      	cmp	r5, r3
 8002998:	d836      	bhi.n	8002a08 <HAL_PCD_EP_SetStall+0x7a>
  if ((0x80U & ep_addr) == 0x80U)
 800299a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800299e:	d120      	bne.n	80029e2 <HAL_PCD_EP_SetStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr];
 80029a0:	00ca      	lsls	r2, r1, #3
 80029a2:	1a54      	subs	r4, r2, r1
 80029a4:	00a3      	lsls	r3, r4, #2
 80029a6:	461c      	mov	r4, r3
 80029a8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80029ac:	4403      	add	r3, r0
 80029ae:	3304      	adds	r3, #4
    ep->is_in = 0U;
 80029b0:	4622      	mov	r2, r4
 80029b2:	4402      	add	r2, r0
 80029b4:	2100      	movs	r1, #0
 80029b6:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
  ep->is_stall = 1U;
 80029ba:	2201      	movs	r2, #1
 80029bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029be:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 80029c0:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 80029c4:	2a01      	cmp	r2, #1
 80029c6:	d021      	beq.n	8002a0c <HAL_PCD_EP_SetStall+0x7e>
 80029c8:	4604      	mov	r4, r0
 80029ca:	2201      	movs	r2, #1
 80029cc:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80029d0:	4619      	mov	r1, r3
 80029d2:	6800      	ldr	r0, [r0, #0]
 80029d4:	f002 fac7 	bl	8004f66 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029d8:	b17d      	cbz	r5, 80029fa <HAL_PCD_EP_SetStall+0x6c>
  __HAL_UNLOCK(hpcd);
 80029da:	2000      	movs	r0, #0
 80029dc:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 80029e0:	e013      	b.n	8002a0a <HAL_PCD_EP_SetStall+0x7c>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029e2:	00ea      	lsls	r2, r5, #3
 80029e4:	1b51      	subs	r1, r2, r5
 80029e6:	008b      	lsls	r3, r1, #2
 80029e8:	4619      	mov	r1, r3
 80029ea:	3338      	adds	r3, #56	; 0x38
 80029ec:	4403      	add	r3, r0
 80029ee:	3304      	adds	r3, #4
    ep->is_in = 1U;
 80029f0:	4401      	add	r1, r0
 80029f2:	2201      	movs	r2, #1
 80029f4:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
 80029f8:	e7df      	b.n	80029ba <HAL_PCD_EP_SetStall+0x2c>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80029fa:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80029fe:	7c21      	ldrb	r1, [r4, #16]
 8002a00:	6820      	ldr	r0, [r4, #0]
 8002a02:	f002 fbad 	bl	8005160 <USB_EP0_OutStart>
 8002a06:	e7e8      	b.n	80029da <HAL_PCD_EP_SetStall+0x4c>
    return HAL_ERROR;
 8002a08:	2001      	movs	r0, #1
}
 8002a0a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8002a0c:	2002      	movs	r0, #2
 8002a0e:	e7fc      	b.n	8002a0a <HAL_PCD_EP_SetStall+0x7c>

08002a10 <HAL_PCD_EP_ClrStall>:
{
 8002a10:	b510      	push	{r4, lr}
 8002a12:	f001 040f 	and.w	r4, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a16:	6843      	ldr	r3, [r0, #4]
 8002a18:	429c      	cmp	r4, r3
 8002a1a:	d82c      	bhi.n	8002a76 <HAL_PCD_EP_ClrStall+0x66>
  if ((0x80U & ep_addr) == 0x80U)
 8002a1c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002a20:	d11d      	bne.n	8002a5e <HAL_PCD_EP_ClrStall+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a22:	00e3      	lsls	r3, r4, #3
 8002a24:	1b1a      	subs	r2, r3, r4
 8002a26:	0091      	lsls	r1, r2, #2
 8002a28:	460a      	mov	r2, r1
 8002a2a:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8002a2e:	4401      	add	r1, r0
 8002a30:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8002a32:	4402      	add	r2, r0
 8002a34:	2300      	movs	r3, #0
 8002a36:	f882 31fd 	strb.w	r3, [r2, #509]	; 0x1fd
  ep->is_stall = 0U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a3e:	700c      	strb	r4, [r1, #0]
  __HAL_LOCK(hpcd);
 8002a40:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d018      	beq.n	8002a7a <HAL_PCD_EP_ClrStall+0x6a>
 8002a48:	4604      	mov	r4, r0
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002a50:	6800      	ldr	r0, [r0, #0]
 8002a52:	f002 fab5 	bl	8004fc0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002a56:	2000      	movs	r0, #0
 8002a58:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8002a5c:	e00c      	b.n	8002a78 <HAL_PCD_EP_ClrStall+0x68>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a5e:	00e3      	lsls	r3, r4, #3
 8002a60:	1b1a      	subs	r2, r3, r4
 8002a62:	0091      	lsls	r1, r2, #2
 8002a64:	460a      	mov	r2, r1
 8002a66:	3138      	adds	r1, #56	; 0x38
 8002a68:	4401      	add	r1, r0
 8002a6a:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8002a6c:	4402      	add	r2, r0
 8002a6e:	2301      	movs	r3, #1
 8002a70:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
 8002a74:	e7e1      	b.n	8002a3a <HAL_PCD_EP_ClrStall+0x2a>
    return HAL_ERROR;
 8002a76:	2001      	movs	r0, #1
}
 8002a78:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8002a7a:	2002      	movs	r0, #2
 8002a7c:	e7fc      	b.n	8002a78 <HAL_PCD_EP_ClrStall+0x68>

08002a7e <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002a7e:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002a80:	6804      	ldr	r4, [r0, #0]
 8002a82:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 8002a84:	b129      	cbz	r1, 8002a92 <HAL_PCDEx_SetTxFiFo+0x14>
 8002a86:	460d      	mov	r5, r1
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002a88:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002a8a:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8002a8e:	2300      	movs	r3, #0
 8002a90:	e00c      	b.n	8002aac <HAL_PCDEx_SetTxFiFo+0x2e>
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002a92:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8002a96:	62a0      	str	r0, [r4, #40]	; 0x28
 8002a98:	e012      	b.n	8002ac0 <HAL_PCDEx_SetTxFiFo+0x42>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002a9a:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8002a9e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8002aa2:	6849      	ldr	r1, [r1, #4]
 8002aa4:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	1e69      	subs	r1, r5, #1
 8002aae:	428b      	cmp	r3, r1
 8002ab0:	d3f3      	bcc.n	8002a9a <HAL_PCDEx_SetTxFiFo+0x1c>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002ab2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8002ab6:	f105 013f 	add.w	r1, r5, #63	; 0x3f
 8002aba:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8002abe:	6048      	str	r0, [r1, #4]
  }

  return HAL_OK;
}
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	bc30      	pop	{r4, r5}
 8002ac4:	4770      	bx	lr

08002ac6 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8002ac6:	6803      	ldr	r3, [r0, #0]
 8002ac8:	6259      	str	r1, [r3, #36]	; 0x24

  return HAL_OK;
}
 8002aca:	2000      	movs	r0, #0
 8002acc:	4770      	bx	lr
	...

08002ad0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002ad0:	4602      	mov	r2, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ad2:	6803      	ldr	r3, [r0, #0]

  hpcd->lpm_active = 1U;
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002ada:	2000      	movs	r0, #0
 8002adc:	f882 03f4 	strb.w	r0, [r2, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002ae0:	699a      	ldr	r2, [r3, #24]
 8002ae2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8002ae6:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002ae8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002aea:	4a02      	ldr	r2, [pc, #8]	; (8002af4 <HAL_PCDEx_ActivateLPM+0x24>)
 8002aec:	430a      	orrs	r2, r1
 8002aee:	655a      	str	r2, [r3, #84]	; 0x54

  return HAL_OK;
}
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	10000003 	.word	0x10000003

08002af8 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002af8:	4a02      	ldr	r2, [pc, #8]	; (8002b04 <HAL_PWR_EnableBkUpAccess+0xc>)
 8002afa:	6813      	ldr	r3, [r2, #0]
 8002afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b00:	6013      	str	r3, [r2, #0]
}
 8002b02:	4770      	bx	lr
 8002b04:	40007000 	.word	0x40007000

08002b08 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002b08:	b510      	push	{r4, lr}
 8002b0a:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b0c:	4b1b      	ldr	r3, [pc, #108]	; (8002b7c <HAL_PWREx_EnableOverDrive+0x74>)
 8002b0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b10:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b14:	641a      	str	r2, [r3, #64]	; 0x40
 8002b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1c:	9301      	str	r3, [sp, #4]
 8002b1e:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002b20:	4a17      	ldr	r2, [pc, #92]	; (8002b80 <HAL_PWREx_EnableOverDrive+0x78>)
 8002b22:	6813      	ldr	r3, [r2, #0]
 8002b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b28:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b2a:	f7fe fcc1 	bl	80014b0 <HAL_GetTick>
 8002b2e:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b30:	4b13      	ldr	r3, [pc, #76]	; (8002b80 <HAL_PWREx_EnableOverDrive+0x78>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002b38:	d108      	bne.n	8002b4c <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b3a:	f7fe fcb9 	bl	80014b0 <HAL_GetTick>
 8002b3e:	1b00      	subs	r0, r0, r4
 8002b40:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002b44:	d9f4      	bls.n	8002b30 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8002b46:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8002b48:	b002      	add	sp, #8
 8002b4a:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b4c:	4a0c      	ldr	r2, [pc, #48]	; (8002b80 <HAL_PWREx_EnableOverDrive+0x78>)
 8002b4e:	6813      	ldr	r3, [r2, #0]
 8002b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b54:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8002b56:	f7fe fcab 	bl	80014b0 <HAL_GetTick>
 8002b5a:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b5c:	4b08      	ldr	r3, [pc, #32]	; (8002b80 <HAL_PWREx_EnableOverDrive+0x78>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002b64:	d107      	bne.n	8002b76 <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b66:	f7fe fca3 	bl	80014b0 <HAL_GetTick>
 8002b6a:	1b00      	subs	r0, r0, r4
 8002b6c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002b70:	d9f4      	bls.n	8002b5c <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8002b72:	2003      	movs	r0, #3
 8002b74:	e7e8      	b.n	8002b48 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8002b76:	2000      	movs	r0, #0
 8002b78:	e7e6      	b.n	8002b48 <HAL_PWREx_EnableOverDrive+0x40>
 8002b7a:	bf00      	nop
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	40007000 	.word	0x40007000

08002b84 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b84:	2800      	cmp	r0, #0
 8002b86:	f000 8209 	beq.w	8002f9c <HAL_RCC_OscConfig+0x418>
{
 8002b8a:	b570      	push	{r4, r5, r6, lr}
 8002b8c:	b082      	sub	sp, #8
 8002b8e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b90:	6803      	ldr	r3, [r0, #0]
 8002b92:	f013 0f01 	tst.w	r3, #1
 8002b96:	d029      	beq.n	8002bec <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b98:	4ba2      	ldr	r3, [pc, #648]	; (8002e24 <HAL_RCC_OscConfig+0x2a0>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f003 030c 	and.w	r3, r3, #12
 8002ba0:	2b04      	cmp	r3, #4
 8002ba2:	d01a      	beq.n	8002bda <HAL_RCC_OscConfig+0x56>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ba4:	4b9f      	ldr	r3, [pc, #636]	; (8002e24 <HAL_RCC_OscConfig+0x2a0>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 030c 	and.w	r3, r3, #12
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	d00f      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bb0:	6863      	ldr	r3, [r4, #4]
 8002bb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb6:	d040      	beq.n	8002c3a <HAL_RCC_OscConfig+0xb6>
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d154      	bne.n	8002c66 <HAL_RCC_OscConfig+0xe2>
 8002bbc:	4b99      	ldr	r3, [pc, #612]	; (8002e24 <HAL_RCC_OscConfig+0x2a0>)
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	e039      	b.n	8002c44 <HAL_RCC_OscConfig+0xc0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bd0:	4b94      	ldr	r3, [pc, #592]	; (8002e24 <HAL_RCC_OscConfig+0x2a0>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002bd8:	d0ea      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bda:	4b92      	ldr	r3, [pc, #584]	; (8002e24 <HAL_RCC_OscConfig+0x2a0>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002be2:	d003      	beq.n	8002bec <HAL_RCC_OscConfig+0x68>
 8002be4:	6863      	ldr	r3, [r4, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f000 81da 	beq.w	8002fa0 <HAL_RCC_OscConfig+0x41c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bec:	6823      	ldr	r3, [r4, #0]
 8002bee:	f013 0f02 	tst.w	r3, #2
 8002bf2:	d075      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x15c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bf4:	4b8b      	ldr	r3, [pc, #556]	; (8002e24 <HAL_RCC_OscConfig+0x2a0>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f013 0f0c 	tst.w	r3, #12
 8002bfc:	d05e      	beq.n	8002cbc <HAL_RCC_OscConfig+0x138>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bfe:	4b89      	ldr	r3, [pc, #548]	; (8002e24 <HAL_RCC_OscConfig+0x2a0>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 030c 	and.w	r3, r3, #12
 8002c06:	2b08      	cmp	r3, #8
 8002c08:	d053      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c0a:	68e3      	ldr	r3, [r4, #12]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 808a 	beq.w	8002d26 <HAL_RCC_OscConfig+0x1a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c12:	4a84      	ldr	r2, [pc, #528]	; (8002e24 <HAL_RCC_OscConfig+0x2a0>)
 8002c14:	6813      	ldr	r3, [r2, #0]
 8002c16:	f043 0301 	orr.w	r3, r3, #1
 8002c1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1c:	f7fe fc48 	bl	80014b0 <HAL_GetTick>
 8002c20:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c22:	4b80      	ldr	r3, [pc, #512]	; (8002e24 <HAL_RCC_OscConfig+0x2a0>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f013 0f02 	tst.w	r3, #2
 8002c2a:	d173      	bne.n	8002d14 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c2c:	f7fe fc40 	bl	80014b0 <HAL_GetTick>
 8002c30:	1b40      	subs	r0, r0, r5
 8002c32:	2802      	cmp	r0, #2
 8002c34:	d9f5      	bls.n	8002c22 <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8002c36:	2003      	movs	r0, #3
 8002c38:	e1b5      	b.n	8002fa6 <HAL_RCC_OscConfig+0x422>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c3a:	4a7a      	ldr	r2, [pc, #488]	; (8002e24 <HAL_RCC_OscConfig+0x2a0>)
 8002c3c:	6813      	ldr	r3, [r2, #0]
 8002c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c42:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c44:	6863      	ldr	r3, [r4, #4]
 8002c46:	b32b      	cbz	r3, 8002c94 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8002c48:	f7fe fc32 	bl	80014b0 <HAL_GetTick>
 8002c4c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c4e:	4b75      	ldr	r3, [pc, #468]	; (8002e24 <HAL_RCC_OscConfig+0x2a0>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002c56:	d1c9      	bne.n	8002bec <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c58:	f7fe fc2a 	bl	80014b0 <HAL_GetTick>
 8002c5c:	1b40      	subs	r0, r0, r5
 8002c5e:	2864      	cmp	r0, #100	; 0x64
 8002c60:	d9f5      	bls.n	8002c4e <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8002c62:	2003      	movs	r0, #3
 8002c64:	e19f      	b.n	8002fa6 <HAL_RCC_OscConfig+0x422>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c66:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c6a:	d009      	beq.n	8002c80 <HAL_RCC_OscConfig+0xfc>
 8002c6c:	4b6d      	ldr	r3, [pc, #436]	; (8002e24 <HAL_RCC_OscConfig+0x2a0>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	e7e1      	b.n	8002c44 <HAL_RCC_OscConfig+0xc0>
 8002c80:	4b68      	ldr	r3, [pc, #416]	; (8002e24 <HAL_RCC_OscConfig+0x2a0>)
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002c90:	601a      	str	r2, [r3, #0]
 8002c92:	e7d7      	b.n	8002c44 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8002c94:	f7fe fc0c 	bl	80014b0 <HAL_GetTick>
 8002c98:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c9a:	4b62      	ldr	r3, [pc, #392]	; (8002e24 <HAL_RCC_OscConfig+0x2a0>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002ca2:	d0a3      	beq.n	8002bec <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca4:	f7fe fc04 	bl	80014b0 <HAL_GetTick>
 8002ca8:	1b40      	subs	r0, r0, r5
 8002caa:	2864      	cmp	r0, #100	; 0x64
 8002cac:	d9f5      	bls.n	8002c9a <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8002cae:	2003      	movs	r0, #3
 8002cb0:	e179      	b.n	8002fa6 <HAL_RCC_OscConfig+0x422>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cb2:	4b5c      	ldr	r3, [pc, #368]	; (8002e24 <HAL_RCC_OscConfig+0x2a0>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002cba:	d1a6      	bne.n	8002c0a <HAL_RCC_OscConfig+0x86>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cbc:	4b59      	ldr	r3, [pc, #356]	; (8002e24 <HAL_RCC_OscConfig+0x2a0>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f013 0f02 	tst.w	r3, #2
 8002cc4:	d004      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x14c>
 8002cc6:	68e3      	ldr	r3, [r4, #12]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d001      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x14c>
        return HAL_ERROR;
 8002ccc:	2001      	movs	r0, #1
 8002cce:	e16a      	b.n	8002fa6 <HAL_RCC_OscConfig+0x422>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd0:	4a54      	ldr	r2, [pc, #336]	; (8002e24 <HAL_RCC_OscConfig+0x2a0>)
 8002cd2:	6813      	ldr	r3, [r2, #0]
 8002cd4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002cd8:	6921      	ldr	r1, [r4, #16]
 8002cda:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002cde:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ce0:	6823      	ldr	r3, [r4, #0]
 8002ce2:	f013 0f08 	tst.w	r3, #8
 8002ce6:	d046      	beq.n	8002d76 <HAL_RCC_OscConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ce8:	6963      	ldr	r3, [r4, #20]
 8002cea:	b383      	cbz	r3, 8002d4e <HAL_RCC_OscConfig+0x1ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cec:	4a4d      	ldr	r2, [pc, #308]	; (8002e24 <HAL_RCC_OscConfig+0x2a0>)
 8002cee:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8002cf0:	f043 0301 	orr.w	r3, r3, #1
 8002cf4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf6:	f7fe fbdb 	bl	80014b0 <HAL_GetTick>
 8002cfa:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cfc:	4b49      	ldr	r3, [pc, #292]	; (8002e24 <HAL_RCC_OscConfig+0x2a0>)
 8002cfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d00:	f013 0f02 	tst.w	r3, #2
 8002d04:	d137      	bne.n	8002d76 <HAL_RCC_OscConfig+0x1f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d06:	f7fe fbd3 	bl	80014b0 <HAL_GetTick>
 8002d0a:	1b40      	subs	r0, r0, r5
 8002d0c:	2802      	cmp	r0, #2
 8002d0e:	d9f5      	bls.n	8002cfc <HAL_RCC_OscConfig+0x178>
        {
          return HAL_TIMEOUT;
 8002d10:	2003      	movs	r0, #3
 8002d12:	e148      	b.n	8002fa6 <HAL_RCC_OscConfig+0x422>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d14:	4a43      	ldr	r2, [pc, #268]	; (8002e24 <HAL_RCC_OscConfig+0x2a0>)
 8002d16:	6813      	ldr	r3, [r2, #0]
 8002d18:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002d1c:	6921      	ldr	r1, [r4, #16]
 8002d1e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002d22:	6013      	str	r3, [r2, #0]
 8002d24:	e7dc      	b.n	8002ce0 <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 8002d26:	4a3f      	ldr	r2, [pc, #252]	; (8002e24 <HAL_RCC_OscConfig+0x2a0>)
 8002d28:	6813      	ldr	r3, [r2, #0]
 8002d2a:	f023 0301 	bic.w	r3, r3, #1
 8002d2e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002d30:	f7fe fbbe 	bl	80014b0 <HAL_GetTick>
 8002d34:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d36:	4b3b      	ldr	r3, [pc, #236]	; (8002e24 <HAL_RCC_OscConfig+0x2a0>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f013 0f02 	tst.w	r3, #2
 8002d3e:	d0cf      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x15c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d40:	f7fe fbb6 	bl	80014b0 <HAL_GetTick>
 8002d44:	1b40      	subs	r0, r0, r5
 8002d46:	2802      	cmp	r0, #2
 8002d48:	d9f5      	bls.n	8002d36 <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 8002d4a:	2003      	movs	r0, #3
 8002d4c:	e12b      	b.n	8002fa6 <HAL_RCC_OscConfig+0x422>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d4e:	4a35      	ldr	r2, [pc, #212]	; (8002e24 <HAL_RCC_OscConfig+0x2a0>)
 8002d50:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8002d52:	f023 0301 	bic.w	r3, r3, #1
 8002d56:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d58:	f7fe fbaa 	bl	80014b0 <HAL_GetTick>
 8002d5c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d5e:	4b31      	ldr	r3, [pc, #196]	; (8002e24 <HAL_RCC_OscConfig+0x2a0>)
 8002d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d62:	f013 0f02 	tst.w	r3, #2
 8002d66:	d006      	beq.n	8002d76 <HAL_RCC_OscConfig+0x1f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d68:	f7fe fba2 	bl	80014b0 <HAL_GetTick>
 8002d6c:	1b40      	subs	r0, r0, r5
 8002d6e:	2802      	cmp	r0, #2
 8002d70:	d9f5      	bls.n	8002d5e <HAL_RCC_OscConfig+0x1da>
        {
          return HAL_TIMEOUT;
 8002d72:	2003      	movs	r0, #3
 8002d74:	e117      	b.n	8002fa6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d76:	6823      	ldr	r3, [r4, #0]
 8002d78:	f013 0f04 	tst.w	r3, #4
 8002d7c:	d07e      	beq.n	8002e7c <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d7e:	4b29      	ldr	r3, [pc, #164]	; (8002e24 <HAL_RCC_OscConfig+0x2a0>)
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002d86:	d11e      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x242>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d88:	4b26      	ldr	r3, [pc, #152]	; (8002e24 <HAL_RCC_OscConfig+0x2a0>)
 8002d8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d8c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002d90:	641a      	str	r2, [r3, #64]	; 0x40
 8002d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d98:	9301      	str	r3, [sp, #4]
 8002d9a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002d9c:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d9e:	4b22      	ldr	r3, [pc, #136]	; (8002e28 <HAL_RCC_OscConfig+0x2a4>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002da6:	d010      	beq.n	8002dca <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002da8:	68a3      	ldr	r3, [r4, #8]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d021      	beq.n	8002df2 <HAL_RCC_OscConfig+0x26e>
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d13c      	bne.n	8002e2c <HAL_RCC_OscConfig+0x2a8>
 8002db2:	4b1c      	ldr	r3, [pc, #112]	; (8002e24 <HAL_RCC_OscConfig+0x2a0>)
 8002db4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002db6:	f022 0201 	bic.w	r2, r2, #1
 8002dba:	671a      	str	r2, [r3, #112]	; 0x70
 8002dbc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002dbe:	f022 0204 	bic.w	r2, r2, #4
 8002dc2:	671a      	str	r2, [r3, #112]	; 0x70
 8002dc4:	e01a      	b.n	8002dfc <HAL_RCC_OscConfig+0x278>
  FlagStatus pwrclkchanged = RESET;
 8002dc6:	2500      	movs	r5, #0
 8002dc8:	e7e9      	b.n	8002d9e <HAL_RCC_OscConfig+0x21a>
      PWR->CR1 |= PWR_CR1_DBP;
 8002dca:	4a17      	ldr	r2, [pc, #92]	; (8002e28 <HAL_RCC_OscConfig+0x2a4>)
 8002dcc:	6813      	ldr	r3, [r2, #0]
 8002dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002dd4:	f7fe fb6c 	bl	80014b0 <HAL_GetTick>
 8002dd8:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dda:	4b13      	ldr	r3, [pc, #76]	; (8002e28 <HAL_RCC_OscConfig+0x2a4>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002de2:	d1e1      	bne.n	8002da8 <HAL_RCC_OscConfig+0x224>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002de4:	f7fe fb64 	bl	80014b0 <HAL_GetTick>
 8002de8:	1b80      	subs	r0, r0, r6
 8002dea:	2864      	cmp	r0, #100	; 0x64
 8002dec:	d9f5      	bls.n	8002dda <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8002dee:	2003      	movs	r0, #3
 8002df0:	e0d9      	b.n	8002fa6 <HAL_RCC_OscConfig+0x422>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002df2:	4a0c      	ldr	r2, [pc, #48]	; (8002e24 <HAL_RCC_OscConfig+0x2a0>)
 8002df4:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002df6:	f043 0301 	orr.w	r3, r3, #1
 8002dfa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dfc:	68a3      	ldr	r3, [r4, #8]
 8002dfe:	b35b      	cbz	r3, 8002e58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e00:	f7fe fb56 	bl	80014b0 <HAL_GetTick>
 8002e04:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e06:	4b07      	ldr	r3, [pc, #28]	; (8002e24 <HAL_RCC_OscConfig+0x2a0>)
 8002e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0a:	f013 0f02 	tst.w	r3, #2
 8002e0e:	d134      	bne.n	8002e7a <HAL_RCC_OscConfig+0x2f6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e10:	f7fe fb4e 	bl	80014b0 <HAL_GetTick>
 8002e14:	1b80      	subs	r0, r0, r6
 8002e16:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e1a:	4298      	cmp	r0, r3
 8002e1c:	d9f3      	bls.n	8002e06 <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 8002e1e:	2003      	movs	r0, #3
 8002e20:	e0c1      	b.n	8002fa6 <HAL_RCC_OscConfig+0x422>
 8002e22:	bf00      	nop
 8002e24:	40023800 	.word	0x40023800
 8002e28:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e2c:	2b05      	cmp	r3, #5
 8002e2e:	d009      	beq.n	8002e44 <HAL_RCC_OscConfig+0x2c0>
 8002e30:	4b60      	ldr	r3, [pc, #384]	; (8002fb4 <HAL_RCC_OscConfig+0x430>)
 8002e32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e34:	f022 0201 	bic.w	r2, r2, #1
 8002e38:	671a      	str	r2, [r3, #112]	; 0x70
 8002e3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e3c:	f022 0204 	bic.w	r2, r2, #4
 8002e40:	671a      	str	r2, [r3, #112]	; 0x70
 8002e42:	e7db      	b.n	8002dfc <HAL_RCC_OscConfig+0x278>
 8002e44:	4b5b      	ldr	r3, [pc, #364]	; (8002fb4 <HAL_RCC_OscConfig+0x430>)
 8002e46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e48:	f042 0204 	orr.w	r2, r2, #4
 8002e4c:	671a      	str	r2, [r3, #112]	; 0x70
 8002e4e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e50:	f042 0201 	orr.w	r2, r2, #1
 8002e54:	671a      	str	r2, [r3, #112]	; 0x70
 8002e56:	e7d1      	b.n	8002dfc <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e58:	f7fe fb2a 	bl	80014b0 <HAL_GetTick>
 8002e5c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e5e:	4b55      	ldr	r3, [pc, #340]	; (8002fb4 <HAL_RCC_OscConfig+0x430>)
 8002e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e62:	f013 0f02 	tst.w	r3, #2
 8002e66:	d008      	beq.n	8002e7a <HAL_RCC_OscConfig+0x2f6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e68:	f7fe fb22 	bl	80014b0 <HAL_GetTick>
 8002e6c:	1b80      	subs	r0, r0, r6
 8002e6e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e72:	4298      	cmp	r0, r3
 8002e74:	d9f3      	bls.n	8002e5e <HAL_RCC_OscConfig+0x2da>
        {
          return HAL_TIMEOUT;
 8002e76:	2003      	movs	r0, #3
 8002e78:	e095      	b.n	8002fa6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e7a:	b9fd      	cbnz	r5, 8002ebc <HAL_RCC_OscConfig+0x338>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e7c:	69a3      	ldr	r3, [r4, #24]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f000 8090 	beq.w	8002fa4 <HAL_RCC_OscConfig+0x420>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e84:	4a4b      	ldr	r2, [pc, #300]	; (8002fb4 <HAL_RCC_OscConfig+0x430>)
 8002e86:	6892      	ldr	r2, [r2, #8]
 8002e88:	f002 020c 	and.w	r2, r2, #12
 8002e8c:	2a08      	cmp	r2, #8
 8002e8e:	d058      	beq.n	8002f42 <HAL_RCC_OscConfig+0x3be>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d019      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x344>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e94:	4a47      	ldr	r2, [pc, #284]	; (8002fb4 <HAL_RCC_OscConfig+0x430>)
 8002e96:	6813      	ldr	r3, [r2, #0]
 8002e98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e9e:	f7fe fb07 	bl	80014b0 <HAL_GetTick>
 8002ea2:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea4:	4b43      	ldr	r3, [pc, #268]	; (8002fb4 <HAL_RCC_OscConfig+0x430>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002eac:	d047      	beq.n	8002f3e <HAL_RCC_OscConfig+0x3ba>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eae:	f7fe faff 	bl	80014b0 <HAL_GetTick>
 8002eb2:	1b00      	subs	r0, r0, r4
 8002eb4:	2802      	cmp	r0, #2
 8002eb6:	d9f5      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x320>
          {
            return HAL_TIMEOUT;
 8002eb8:	2003      	movs	r0, #3
 8002eba:	e074      	b.n	8002fa6 <HAL_RCC_OscConfig+0x422>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ebc:	4a3d      	ldr	r2, [pc, #244]	; (8002fb4 <HAL_RCC_OscConfig+0x430>)
 8002ebe:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002ec0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ec6:	e7d9      	b.n	8002e7c <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 8002ec8:	4a3a      	ldr	r2, [pc, #232]	; (8002fb4 <HAL_RCC_OscConfig+0x430>)
 8002eca:	6813      	ldr	r3, [r2, #0]
 8002ecc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ed0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002ed2:	f7fe faed 	bl	80014b0 <HAL_GetTick>
 8002ed6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ed8:	4b36      	ldr	r3, [pc, #216]	; (8002fb4 <HAL_RCC_OscConfig+0x430>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002ee0:	d006      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x36c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ee2:	f7fe fae5 	bl	80014b0 <HAL_GetTick>
 8002ee6:	1b40      	subs	r0, r0, r5
 8002ee8:	2802      	cmp	r0, #2
 8002eea:	d9f5      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x354>
            return HAL_TIMEOUT;
 8002eec:	2003      	movs	r0, #3
 8002eee:	e05a      	b.n	8002fa6 <HAL_RCC_OscConfig+0x422>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ef0:	69e3      	ldr	r3, [r4, #28]
 8002ef2:	6a22      	ldr	r2, [r4, #32]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002ef8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002efc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002efe:	0852      	lsrs	r2, r2, #1
 8002f00:	3a01      	subs	r2, #1
 8002f02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002f06:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002f08:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002f0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002f10:	4a28      	ldr	r2, [pc, #160]	; (8002fb4 <HAL_RCC_OscConfig+0x430>)
 8002f12:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002f14:	6813      	ldr	r3, [r2, #0]
 8002f16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f1a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002f1c:	f7fe fac8 	bl	80014b0 <HAL_GetTick>
 8002f20:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f22:	4b24      	ldr	r3, [pc, #144]	; (8002fb4 <HAL_RCC_OscConfig+0x430>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002f2a:	d106      	bne.n	8002f3a <HAL_RCC_OscConfig+0x3b6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f2c:	f7fe fac0 	bl	80014b0 <HAL_GetTick>
 8002f30:	1b00      	subs	r0, r0, r4
 8002f32:	2802      	cmp	r0, #2
 8002f34:	d9f5      	bls.n	8002f22 <HAL_RCC_OscConfig+0x39e>
            return HAL_TIMEOUT;
 8002f36:	2003      	movs	r0, #3
 8002f38:	e035      	b.n	8002fa6 <HAL_RCC_OscConfig+0x422>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8002f3a:	2000      	movs	r0, #0
 8002f3c:	e033      	b.n	8002fa6 <HAL_RCC_OscConfig+0x422>
 8002f3e:	2000      	movs	r0, #0
 8002f40:	e031      	b.n	8002fa6 <HAL_RCC_OscConfig+0x422>
      pll_config = RCC->PLLCFGR;
 8002f42:	4a1c      	ldr	r2, [pc, #112]	; (8002fb4 <HAL_RCC_OscConfig+0x430>)
 8002f44:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d02f      	beq.n	8002faa <HAL_RCC_OscConfig+0x426>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f4a:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002f4e:	69e1      	ldr	r1, [r4, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f50:	428b      	cmp	r3, r1
 8002f52:	d001      	beq.n	8002f58 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8002f54:	2001      	movs	r0, #1
 8002f56:	e026      	b.n	8002fa6 <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f58:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8002f5c:	6a21      	ldr	r1, [r4, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5e:	428b      	cmp	r3, r1
 8002f60:	d001      	beq.n	8002f66 <HAL_RCC_OscConfig+0x3e2>
        return HAL_ERROR;
 8002f62:	2001      	movs	r0, #1
 8002f64:	e01f      	b.n	8002fa6 <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f66:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8002f72:	d001      	beq.n	8002f78 <HAL_RCC_OscConfig+0x3f4>
        return HAL_ERROR;
 8002f74:	2001      	movs	r0, #1
 8002f76:	e016      	b.n	8002fa6 <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f78:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 8002f7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002f7e:	085b      	lsrs	r3, r3, #1
 8002f80:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f82:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8002f86:	d001      	beq.n	8002f8c <HAL_RCC_OscConfig+0x408>
        return HAL_ERROR;
 8002f88:	2001      	movs	r0, #1
 8002f8a:	e00c      	b.n	8002fa6 <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f8c:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8002f90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f92:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
 8002f96:	d00a      	beq.n	8002fae <HAL_RCC_OscConfig+0x42a>
        return HAL_ERROR;
 8002f98:	2001      	movs	r0, #1
 8002f9a:	e004      	b.n	8002fa6 <HAL_RCC_OscConfig+0x422>
    return HAL_ERROR;
 8002f9c:	2001      	movs	r0, #1
}
 8002f9e:	4770      	bx	lr
        return HAL_ERROR;
 8002fa0:	2001      	movs	r0, #1
 8002fa2:	e000      	b.n	8002fa6 <HAL_RCC_OscConfig+0x422>
  return HAL_OK;
 8002fa4:	2000      	movs	r0, #0
}
 8002fa6:	b002      	add	sp, #8
 8002fa8:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002faa:	2001      	movs	r0, #1
 8002fac:	e7fb      	b.n	8002fa6 <HAL_RCC_OscConfig+0x422>
  return HAL_OK;
 8002fae:	2000      	movs	r0, #0
 8002fb0:	e7f9      	b.n	8002fa6 <HAL_RCC_OscConfig+0x422>
 8002fb2:	bf00      	nop
 8002fb4:	40023800 	.word	0x40023800

08002fb8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fb8:	4b26      	ldr	r3, [pc, #152]	; (8003054 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f003 030c 	and.w	r3, r3, #12
 8002fc0:	2b04      	cmp	r3, #4
 8002fc2:	d044      	beq.n	800304e <HAL_RCC_GetSysClockFreq+0x96>
 8002fc4:	2b08      	cmp	r3, #8
 8002fc6:	d001      	beq.n	8002fcc <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fc8:	4823      	ldr	r0, [pc, #140]	; (8003058 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002fca:	4770      	bx	lr
{
 8002fcc:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fd0:	4b20      	ldr	r3, [pc, #128]	; (8003054 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002fde:	d013      	beq.n	8003008 <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fe0:	4b1c      	ldr	r3, [pc, #112]	; (8003054 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002fe2:	6859      	ldr	r1, [r3, #4]
 8002fe4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002fe8:	2300      	movs	r3, #0
 8002fea:	481c      	ldr	r0, [pc, #112]	; (800305c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002fec:	fba1 0100 	umull	r0, r1, r1, r0
 8002ff0:	f7fd fdac 	bl	8000b4c <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002ff4:	4b17      	ldr	r3, [pc, #92]	; (8003054 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8003000:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003004:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003008:	4b12      	ldr	r3, [pc, #72]	; (8003054 <HAL_RCC_GetSysClockFreq+0x9c>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8003010:	461e      	mov	r6, r3
 8003012:	2700      	movs	r7, #0
 8003014:	015c      	lsls	r4, r3, #5
 8003016:	2500      	movs	r5, #0
 8003018:	1ae4      	subs	r4, r4, r3
 800301a:	eb65 0507 	sbc.w	r5, r5, r7
 800301e:	01a9      	lsls	r1, r5, #6
 8003020:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8003024:	01a0      	lsls	r0, r4, #6
 8003026:	1b00      	subs	r0, r0, r4
 8003028:	eb61 0105 	sbc.w	r1, r1, r5
 800302c:	00cb      	lsls	r3, r1, #3
 800302e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003032:	00c4      	lsls	r4, r0, #3
 8003034:	19a0      	adds	r0, r4, r6
 8003036:	eb43 0107 	adc.w	r1, r3, r7
 800303a:	028b      	lsls	r3, r1, #10
 800303c:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8003040:	0284      	lsls	r4, r0, #10
 8003042:	4620      	mov	r0, r4
 8003044:	4619      	mov	r1, r3
 8003046:	2300      	movs	r3, #0
 8003048:	f7fd fd80 	bl	8000b4c <__aeabi_uldivmod>
 800304c:	e7d2      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 800304e:	4803      	ldr	r0, [pc, #12]	; (800305c <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	40023800 	.word	0x40023800
 8003058:	00f42400 	.word	0x00f42400
 800305c:	017d7840 	.word	0x017d7840

08003060 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003060:	2800      	cmp	r0, #0
 8003062:	f000 80a3 	beq.w	80031ac <HAL_RCC_ClockConfig+0x14c>
{
 8003066:	b570      	push	{r4, r5, r6, lr}
 8003068:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800306a:	4b52      	ldr	r3, [pc, #328]	; (80031b4 <HAL_RCC_ClockConfig+0x154>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 030f 	and.w	r3, r3, #15
 8003072:	428b      	cmp	r3, r1
 8003074:	d20c      	bcs.n	8003090 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003076:	4a4f      	ldr	r2, [pc, #316]	; (80031b4 <HAL_RCC_ClockConfig+0x154>)
 8003078:	6813      	ldr	r3, [r2, #0]
 800307a:	f023 030f 	bic.w	r3, r3, #15
 800307e:	430b      	orrs	r3, r1
 8003080:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003082:	6813      	ldr	r3, [r2, #0]
 8003084:	f003 030f 	and.w	r3, r3, #15
 8003088:	428b      	cmp	r3, r1
 800308a:	d001      	beq.n	8003090 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 800308c:	2001      	movs	r0, #1
}
 800308e:	bd70      	pop	{r4, r5, r6, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003090:	6823      	ldr	r3, [r4, #0]
 8003092:	f013 0f02 	tst.w	r3, #2
 8003096:	d017      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003098:	f013 0f04 	tst.w	r3, #4
 800309c:	d004      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800309e:	4a46      	ldr	r2, [pc, #280]	; (80031b8 <HAL_RCC_ClockConfig+0x158>)
 80030a0:	6893      	ldr	r3, [r2, #8]
 80030a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030a6:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a8:	6823      	ldr	r3, [r4, #0]
 80030aa:	f013 0f08 	tst.w	r3, #8
 80030ae:	d004      	beq.n	80030ba <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030b0:	4a41      	ldr	r2, [pc, #260]	; (80031b8 <HAL_RCC_ClockConfig+0x158>)
 80030b2:	6893      	ldr	r3, [r2, #8]
 80030b4:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030b8:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030ba:	4a3f      	ldr	r2, [pc, #252]	; (80031b8 <HAL_RCC_ClockConfig+0x158>)
 80030bc:	6893      	ldr	r3, [r2, #8]
 80030be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030c2:	68a0      	ldr	r0, [r4, #8]
 80030c4:	4303      	orrs	r3, r0
 80030c6:	6093      	str	r3, [r2, #8]
 80030c8:	460d      	mov	r5, r1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ca:	6823      	ldr	r3, [r4, #0]
 80030cc:	f013 0f01 	tst.w	r3, #1
 80030d0:	d031      	beq.n	8003136 <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030d2:	6863      	ldr	r3, [r4, #4]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d020      	beq.n	800311a <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d025      	beq.n	8003128 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030dc:	4a36      	ldr	r2, [pc, #216]	; (80031b8 <HAL_RCC_ClockConfig+0x158>)
 80030de:	6812      	ldr	r2, [r2, #0]
 80030e0:	f012 0f02 	tst.w	r2, #2
 80030e4:	d064      	beq.n	80031b0 <HAL_RCC_ClockConfig+0x150>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030e6:	4934      	ldr	r1, [pc, #208]	; (80031b8 <HAL_RCC_ClockConfig+0x158>)
 80030e8:	688a      	ldr	r2, [r1, #8]
 80030ea:	f022 0203 	bic.w	r2, r2, #3
 80030ee:	4313      	orrs	r3, r2
 80030f0:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80030f2:	f7fe f9dd 	bl	80014b0 <HAL_GetTick>
 80030f6:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f8:	4b2f      	ldr	r3, [pc, #188]	; (80031b8 <HAL_RCC_ClockConfig+0x158>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f003 030c 	and.w	r3, r3, #12
 8003100:	6862      	ldr	r2, [r4, #4]
 8003102:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003106:	d016      	beq.n	8003136 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003108:	f7fe f9d2 	bl	80014b0 <HAL_GetTick>
 800310c:	1b80      	subs	r0, r0, r6
 800310e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003112:	4298      	cmp	r0, r3
 8003114:	d9f0      	bls.n	80030f8 <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 8003116:	2003      	movs	r0, #3
 8003118:	e7b9      	b.n	800308e <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800311a:	4a27      	ldr	r2, [pc, #156]	; (80031b8 <HAL_RCC_ClockConfig+0x158>)
 800311c:	6812      	ldr	r2, [r2, #0]
 800311e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003122:	d1e0      	bne.n	80030e6 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8003124:	2001      	movs	r0, #1
 8003126:	e7b2      	b.n	800308e <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003128:	4a23      	ldr	r2, [pc, #140]	; (80031b8 <HAL_RCC_ClockConfig+0x158>)
 800312a:	6812      	ldr	r2, [r2, #0]
 800312c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003130:	d1d9      	bne.n	80030e6 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8003132:	2001      	movs	r0, #1
 8003134:	e7ab      	b.n	800308e <HAL_RCC_ClockConfig+0x2e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003136:	4b1f      	ldr	r3, [pc, #124]	; (80031b4 <HAL_RCC_ClockConfig+0x154>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	42ab      	cmp	r3, r5
 8003140:	d90c      	bls.n	800315c <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003142:	4a1c      	ldr	r2, [pc, #112]	; (80031b4 <HAL_RCC_ClockConfig+0x154>)
 8003144:	6813      	ldr	r3, [r2, #0]
 8003146:	f023 030f 	bic.w	r3, r3, #15
 800314a:	432b      	orrs	r3, r5
 800314c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800314e:	6813      	ldr	r3, [r2, #0]
 8003150:	f003 030f 	and.w	r3, r3, #15
 8003154:	42ab      	cmp	r3, r5
 8003156:	d001      	beq.n	800315c <HAL_RCC_ClockConfig+0xfc>
      return HAL_ERROR;
 8003158:	2001      	movs	r0, #1
 800315a:	e798      	b.n	800308e <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800315c:	6823      	ldr	r3, [r4, #0]
 800315e:	f013 0f04 	tst.w	r3, #4
 8003162:	d006      	beq.n	8003172 <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003164:	4a14      	ldr	r2, [pc, #80]	; (80031b8 <HAL_RCC_ClockConfig+0x158>)
 8003166:	6893      	ldr	r3, [r2, #8]
 8003168:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800316c:	68e1      	ldr	r1, [r4, #12]
 800316e:	430b      	orrs	r3, r1
 8003170:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003172:	6823      	ldr	r3, [r4, #0]
 8003174:	f013 0f08 	tst.w	r3, #8
 8003178:	d007      	beq.n	800318a <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800317a:	4a0f      	ldr	r2, [pc, #60]	; (80031b8 <HAL_RCC_ClockConfig+0x158>)
 800317c:	6893      	ldr	r3, [r2, #8]
 800317e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003182:	6921      	ldr	r1, [r4, #16]
 8003184:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003188:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800318a:	f7ff ff15 	bl	8002fb8 <HAL_RCC_GetSysClockFreq>
 800318e:	4b0a      	ldr	r3, [pc, #40]	; (80031b8 <HAL_RCC_ClockConfig+0x158>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003196:	4a09      	ldr	r2, [pc, #36]	; (80031bc <HAL_RCC_ClockConfig+0x15c>)
 8003198:	5cd3      	ldrb	r3, [r2, r3]
 800319a:	40d8      	lsrs	r0, r3
 800319c:	4b08      	ldr	r3, [pc, #32]	; (80031c0 <HAL_RCC_ClockConfig+0x160>)
 800319e:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80031a0:	4b08      	ldr	r3, [pc, #32]	; (80031c4 <HAL_RCC_ClockConfig+0x164>)
 80031a2:	6818      	ldr	r0, [r3, #0]
 80031a4:	f7fe f946 	bl	8001434 <HAL_InitTick>
  return HAL_OK;
 80031a8:	2000      	movs	r0, #0
 80031aa:	e770      	b.n	800308e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80031ac:	2001      	movs	r0, #1
}
 80031ae:	4770      	bx	lr
        return HAL_ERROR;
 80031b0:	2001      	movs	r0, #1
 80031b2:	e76c      	b.n	800308e <HAL_RCC_ClockConfig+0x2e>
 80031b4:	40023c00 	.word	0x40023c00
 80031b8:	40023800 	.word	0x40023800
 80031bc:	08015f24 	.word	0x08015f24
 80031c0:	20000118 	.word	0x20000118
 80031c4:	20000004 	.word	0x20000004

080031c8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80031c8:	4b01      	ldr	r3, [pc, #4]	; (80031d0 <HAL_RCC_GetHCLKFreq+0x8>)
 80031ca:	6818      	ldr	r0, [r3, #0]
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	20000118 	.word	0x20000118

080031d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031d6:	b083      	sub	sp, #12
 80031d8:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80031da:	6803      	ldr	r3, [r0, #0]
 80031dc:	f013 0f01 	tst.w	r3, #1
 80031e0:	d00c      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80031e2:	4bb6      	ldr	r3, [pc, #728]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80031e4:	689a      	ldr	r2, [r3, #8]
 80031e6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80031ea:	609a      	str	r2, [r3, #8]
 80031ec:	689a      	ldr	r2, [r3, #8]
 80031ee:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80031f0:	430a      	orrs	r2, r1
 80031f2:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80031f4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80031f6:	b1c3      	cbz	r3, 800322a <HAL_RCCEx_PeriphCLKConfig+0x56>
  uint32_t plli2sused = 0;
 80031f8:	2600      	movs	r6, #0
 80031fa:	e000      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x2a>
 80031fc:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80031fe:	6823      	ldr	r3, [r4, #0]
 8003200:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003204:	d015      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003206:	4aad      	ldr	r2, [pc, #692]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003208:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800320c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003210:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003212:	430b      	orrs	r3, r1
 8003214:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003218:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800321a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800321e:	d006      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 8129 	beq.w	8003478 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
  uint32_t pllsaiused = 0;
 8003226:	2500      	movs	r5, #0
 8003228:	e004      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 800322a:	2601      	movs	r6, #1
 800322c:	e7e7      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 800322e:	2601      	movs	r6, #1
 8003230:	e7f6      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  uint32_t pllsaiused = 0;
 8003232:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003234:	6823      	ldr	r3, [r4, #0]
 8003236:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800323a:	d00f      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800323c:	4a9f      	ldr	r2, [pc, #636]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800323e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003242:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003246:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003248:	430b      	orrs	r3, r1
 800324a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800324e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003250:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003254:	f000 8112 	beq.w	800347c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003258:	b903      	cbnz	r3, 800325c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      pllsaiused = 1;
 800325a:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800325c:	6823      	ldr	r3, [r4, #0]
 800325e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003262:	d000      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
      plli2sused = 1;
 8003264:	2601      	movs	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003266:	f013 0f20 	tst.w	r3, #32
 800326a:	f040 8109 	bne.w	8003480 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800326e:	6823      	ldr	r3, [r4, #0]
 8003270:	f013 0f10 	tst.w	r3, #16
 8003274:	d00c      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003276:	4b91      	ldr	r3, [pc, #580]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003278:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800327c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003280:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8003284:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003288:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800328a:	430a      	orrs	r2, r1
 800328c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003290:	6823      	ldr	r3, [r4, #0]
 8003292:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003296:	d008      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003298:	4a88      	ldr	r2, [pc, #544]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800329a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800329e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80032a2:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80032a4:	430b      	orrs	r3, r1
 80032a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032aa:	6823      	ldr	r3, [r4, #0]
 80032ac:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80032b0:	d008      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032b2:	4a82      	ldr	r2, [pc, #520]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80032b4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80032b8:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80032bc:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80032be:	430b      	orrs	r3, r1
 80032c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032c4:	6823      	ldr	r3, [r4, #0]
 80032c6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80032ca:	d008      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032cc:	4a7b      	ldr	r2, [pc, #492]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80032ce:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80032d2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80032d6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80032d8:	430b      	orrs	r3, r1
 80032da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80032de:	6823      	ldr	r3, [r4, #0]
 80032e0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80032e4:	d008      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80032e6:	4a75      	ldr	r2, [pc, #468]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80032e8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80032ec:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80032f0:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80032f2:	430b      	orrs	r3, r1
 80032f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032f8:	6823      	ldr	r3, [r4, #0]
 80032fa:	f013 0f40 	tst.w	r3, #64	; 0x40
 80032fe:	d008      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003300:	4a6e      	ldr	r2, [pc, #440]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003302:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003306:	f023 0303 	bic.w	r3, r3, #3
 800330a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800330c:	430b      	orrs	r3, r1
 800330e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003312:	6823      	ldr	r3, [r4, #0]
 8003314:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003318:	d008      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800331a:	4a68      	ldr	r2, [pc, #416]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800331c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003320:	f023 030c 	bic.w	r3, r3, #12
 8003324:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003326:	430b      	orrs	r3, r1
 8003328:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800332c:	6823      	ldr	r3, [r4, #0]
 800332e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003332:	d008      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x172>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003334:	4a61      	ldr	r2, [pc, #388]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003336:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800333a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800333e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8003340:	430b      	orrs	r3, r1
 8003342:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003346:	6823      	ldr	r3, [r4, #0]
 8003348:	f413 7f00 	tst.w	r3, #512	; 0x200
 800334c:	d008      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800334e:	4a5b      	ldr	r2, [pc, #364]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003350:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003354:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003358:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800335a:	430b      	orrs	r3, r1
 800335c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003360:	6823      	ldr	r3, [r4, #0]
 8003362:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003366:	d008      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003368:	4a54      	ldr	r2, [pc, #336]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800336a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800336e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003372:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003374:	430b      	orrs	r3, r1
 8003376:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800337a:	6823      	ldr	r3, [r4, #0]
 800337c:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003380:	d008      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003382:	4a4e      	ldr	r2, [pc, #312]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003384:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003388:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800338c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800338e:	430b      	orrs	r3, r1
 8003390:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003394:	6823      	ldr	r3, [r4, #0]
 8003396:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800339a:	d008      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800339c:	4a47      	ldr	r2, [pc, #284]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800339e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80033a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80033a6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80033a8:	430b      	orrs	r3, r1
 80033aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80033ae:	6823      	ldr	r3, [r4, #0]
 80033b0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80033b4:	d008      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80033b6:	4a41      	ldr	r2, [pc, #260]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033b8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80033bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80033c0:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80033c2:	430b      	orrs	r3, r1
 80033c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80033c8:	6823      	ldr	r3, [r4, #0]
 80033ca:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80033ce:	d008      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80033d0:	4a3a      	ldr	r2, [pc, #232]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033d2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80033d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80033da:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80033dc:	430b      	orrs	r3, r1
 80033de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80033e2:	6823      	ldr	r3, [r4, #0]
 80033e4:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80033e8:	d00d      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80033ea:	4a34      	ldr	r2, [pc, #208]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033ec:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80033f0:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80033f4:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80033f6:	430b      	orrs	r3, r1
 80033f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80033fc:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80033fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003402:	f000 80a7 	beq.w	8003554 <HAL_RCCEx_PeriphCLKConfig+0x380>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003406:	6823      	ldr	r3, [r4, #0]
 8003408:	f013 0f08 	tst.w	r3, #8
 800340c:	d000      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    pllsaiused = 1;
 800340e:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003410:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003414:	d008      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003416:	4a29      	ldr	r2, [pc, #164]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003418:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800341c:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003420:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8003422:	430b      	orrs	r3, r1
 8003424:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003428:	6823      	ldr	r3, [r4, #0]
 800342a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800342e:	d009      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003430:	4a22      	ldr	r2, [pc, #136]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003432:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003436:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800343a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800343e:	430b      	orrs	r3, r1
 8003440:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003444:	b926      	cbnz	r6, 8003450 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003446:	6823      	ldr	r3, [r4, #0]
 8003448:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800344c:	f000 8102 	beq.w	8003654 <HAL_RCCEx_PeriphCLKConfig+0x480>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003450:	4a1a      	ldr	r2, [pc, #104]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003452:	6813      	ldr	r3, [r2, #0]
 8003454:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003458:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800345a:	f7fe f829 	bl	80014b0 <HAL_GetTick>
 800345e:	4606      	mov	r6, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003460:	4b16      	ldr	r3, [pc, #88]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003468:	d076      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x384>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800346a:	f7fe f821 	bl	80014b0 <HAL_GetTick>
 800346e:	1b80      	subs	r0, r0, r6
 8003470:	2864      	cmp	r0, #100	; 0x64
 8003472:	d9f5      	bls.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003474:	2003      	movs	r0, #3
 8003476:	e0ef      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x484>
      pllsaiused = 1;
 8003478:	2501      	movs	r5, #1
 800347a:	e6db      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 800347c:	2601      	movs	r6, #1
 800347e:	e6eb      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x84>
    __HAL_RCC_PWR_CLK_ENABLE();
 8003480:	4b0e      	ldr	r3, [pc, #56]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003482:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003484:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003488:	641a      	str	r2, [r3, #64]	; 0x40
 800348a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003490:	9301      	str	r3, [sp, #4]
 8003492:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8003494:	4a0a      	ldr	r2, [pc, #40]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003496:	6813      	ldr	r3, [r2, #0]
 8003498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800349c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800349e:	f7fe f807 	bl	80014b0 <HAL_GetTick>
 80034a2:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80034a4:	4b06      	ldr	r3, [pc, #24]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80034ac:	d10a      	bne.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ae:	f7fd ffff 	bl	80014b0 <HAL_GetTick>
 80034b2:	1bc0      	subs	r0, r0, r7
 80034b4:	2864      	cmp	r0, #100	; 0x64
 80034b6:	d9f5      	bls.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
        return HAL_TIMEOUT;
 80034b8:	2003      	movs	r0, #3
 80034ba:	e0cd      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80034bc:	40023800 	.word	0x40023800
 80034c0:	40007000 	.word	0x40007000
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034c4:	4baa      	ldr	r3, [pc, #680]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 80034c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034c8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80034cc:	d015      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x326>
 80034ce:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80034d0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d010      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x326>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034d8:	4ba5      	ldr	r3, [pc, #660]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 80034da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034dc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80034e0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80034e2:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80034e6:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034e8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80034ea:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80034ee:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 80034f0:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80034f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f4:	f013 0f01 	tst.w	r3, #1
 80034f8:	d112      	bne.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x34c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80034fc:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003500:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003504:	d01d      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003506:	4a9a      	ldr	r2, [pc, #616]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8003508:	6893      	ldr	r3, [r2, #8]
 800350a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800350e:	6093      	str	r3, [r2, #8]
 8003510:	4997      	ldr	r1, [pc, #604]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8003512:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8003514:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003516:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800351a:	4313      	orrs	r3, r2
 800351c:	670b      	str	r3, [r1, #112]	; 0x70
 800351e:	e6a6      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        tickstart = HAL_GetTick();
 8003520:	f7fd ffc6 	bl	80014b0 <HAL_GetTick>
 8003524:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003526:	4b92      	ldr	r3, [pc, #584]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8003528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352a:	f013 0f02 	tst.w	r3, #2
 800352e:	d1e4      	bne.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x326>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003530:	f7fd ffbe 	bl	80014b0 <HAL_GetTick>
 8003534:	1bc0      	subs	r0, r0, r7
 8003536:	f241 3388 	movw	r3, #5000	; 0x1388
 800353a:	4298      	cmp	r0, r3
 800353c:	d9f3      	bls.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x352>
            return HAL_TIMEOUT;
 800353e:	2003      	movs	r0, #3
 8003540:	e08a      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x484>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003542:	488b      	ldr	r0, [pc, #556]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8003544:	6882      	ldr	r2, [r0, #8]
 8003546:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800354a:	498a      	ldr	r1, [pc, #552]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 800354c:	4019      	ands	r1, r3
 800354e:	430a      	orrs	r2, r1
 8003550:	6082      	str	r2, [r0, #8]
 8003552:	e7dd      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      pllsaiused = 1;
 8003554:	2501      	movs	r5, #1
 8003556:	e756      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x232>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003558:	6823      	ldr	r3, [r4, #0]
 800355a:	f013 0f01 	tst.w	r3, #1
 800355e:	d013      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 8003560:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003562:	b98b      	cbnz	r3, 8003588 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003564:	4a82      	ldr	r2, [pc, #520]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8003566:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800356a:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800356e:	6860      	ldr	r0, [r4, #4]
 8003570:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003574:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003578:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800357c:	430b      	orrs	r3, r1
 800357e:	68a1      	ldr	r1, [r4, #8]
 8003580:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8003584:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003588:	6823      	ldr	r3, [r4, #0]
 800358a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800358e:	d003      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003590:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003592:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8003596:	d006      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8003598:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800359c:	d01e      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x408>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800359e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80035a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035a4:	d11a      	bne.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x408>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80035a6:	4a72      	ldr	r2, [pc, #456]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 80035a8:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80035ac:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80035b0:	6860      	ldr	r0, [r4, #4]
 80035b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035b6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80035ba:	68e0      	ldr	r0, [r4, #12]
 80035bc:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80035c0:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80035c4:	430b      	orrs	r3, r1
 80035c6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80035ca:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80035ce:	f023 031f 	bic.w	r3, r3, #31
 80035d2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80035d4:	3901      	subs	r1, #1
 80035d6:	430b      	orrs	r3, r1
 80035d8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035dc:	6823      	ldr	r3, [r4, #0]
 80035de:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80035e2:	d011      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80035e4:	4a62      	ldr	r2, [pc, #392]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 80035e6:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80035ea:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80035ee:	6866      	ldr	r6, [r4, #4]
 80035f0:	6923      	ldr	r3, [r4, #16]
 80035f2:	041b      	lsls	r3, r3, #16
 80035f4:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 80035f8:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 80035fc:	4303      	orrs	r3, r0
 80035fe:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003602:	430b      	orrs	r3, r1
 8003604:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003608:	6823      	ldr	r3, [r4, #0]
 800360a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800360e:	d00d      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x458>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003610:	6862      	ldr	r2, [r4, #4]
 8003612:	6923      	ldr	r3, [r4, #16]
 8003614:	041b      	lsls	r3, r3, #16
 8003616:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800361a:	68e2      	ldr	r2, [r4, #12]
 800361c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003620:	68a2      	ldr	r2, [r4, #8]
 8003622:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8003626:	4a52      	ldr	r2, [pc, #328]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8003628:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800362c:	4a50      	ldr	r2, [pc, #320]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 800362e:	6813      	ldr	r3, [r2, #0]
 8003630:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003634:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003636:	f7fd ff3b 	bl	80014b0 <HAL_GetTick>
 800363a:	4606      	mov	r6, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800363c:	4b4c      	ldr	r3, [pc, #304]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003644:	d106      	bne.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x480>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003646:	f7fd ff33 	bl	80014b0 <HAL_GetTick>
 800364a:	1b80      	subs	r0, r0, r6
 800364c:	2864      	cmp	r0, #100	; 0x64
 800364e:	d9f5      	bls.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x468>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003650:	2003      	movs	r0, #3
 8003652:	e001      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x484>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003654:	b915      	cbnz	r5, 800365c <HAL_RCCEx_PeriphCLKConfig+0x488>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003656:	2000      	movs	r0, #0
}
 8003658:	b003      	add	sp, #12
 800365a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 800365c:	4a44      	ldr	r2, [pc, #272]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 800365e:	6813      	ldr	r3, [r2, #0]
 8003660:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003664:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003666:	f7fd ff23 	bl	80014b0 <HAL_GetTick>
 800366a:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800366c:	4b40      	ldr	r3, [pc, #256]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003674:	d006      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003676:	f7fd ff1b 	bl	80014b0 <HAL_GetTick>
 800367a:	1b40      	subs	r0, r0, r5
 800367c:	2864      	cmp	r0, #100	; 0x64
 800367e:	d9f5      	bls.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x498>
        return HAL_TIMEOUT;
 8003680:	2003      	movs	r0, #3
 8003682:	e7e9      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x484>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003684:	6823      	ldr	r3, [r4, #0]
 8003686:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800368a:	d001      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800368c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800368e:	b122      	cbz	r2, 800369a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8003690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003694:	d01d      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003696:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003698:	b9db      	cbnz	r3, 80036d2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800369a:	4a35      	ldr	r2, [pc, #212]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 800369c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80036a0:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80036a4:	6960      	ldr	r0, [r4, #20]
 80036a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036aa:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80036ae:	69a0      	ldr	r0, [r4, #24]
 80036b0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80036b4:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80036b8:	430b      	orrs	r3, r1
 80036ba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80036be:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80036c2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80036c6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80036c8:	3901      	subs	r1, #1
 80036ca:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80036ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80036d2:	6823      	ldr	r3, [r4, #0]
 80036d4:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80036d8:	d003      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
 80036da:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80036dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036e0:	d031      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x572>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80036e2:	6823      	ldr	r3, [r4, #0]
 80036e4:	f013 0f08 	tst.w	r3, #8
 80036e8:	d019      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x54a>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80036ea:	4a21      	ldr	r2, [pc, #132]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 80036ec:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80036f0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80036f4:	6960      	ldr	r0, [r4, #20]
 80036f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036fa:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80036fe:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8003702:	430b      	orrs	r3, r1
 8003704:	69e1      	ldr	r1, [r4, #28]
 8003706:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800370a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800370e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003712:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003716:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003718:	430b      	orrs	r3, r1
 800371a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 800371e:	4a14      	ldr	r2, [pc, #80]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8003720:	6813      	ldr	r3, [r2, #0]
 8003722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003726:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003728:	f7fd fec2 	bl	80014b0 <HAL_GetTick>
 800372c:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800372e:	4b10      	ldr	r3, [pc, #64]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003736:	d119      	bne.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x598>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003738:	f7fd feba 	bl	80014b0 <HAL_GetTick>
 800373c:	1b00      	subs	r0, r0, r4
 800373e:	2864      	cmp	r0, #100	; 0x64
 8003740:	d9f5      	bls.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x55a>
        return HAL_TIMEOUT;
 8003742:	2003      	movs	r0, #3
 8003744:	e788      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x484>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003746:	4a0a      	ldr	r2, [pc, #40]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8003748:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800374c:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003750:	6965      	ldr	r5, [r4, #20]
 8003752:	6a23      	ldr	r3, [r4, #32]
 8003754:	041b      	lsls	r3, r3, #16
 8003756:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800375a:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 800375e:	4303      	orrs	r3, r0
 8003760:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003764:	430b      	orrs	r3, r1
 8003766:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800376a:	e7ba      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  return HAL_OK;
 800376c:	2000      	movs	r0, #0
 800376e:	e773      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8003770:	40023800 	.word	0x40023800
 8003774:	0ffffcff 	.word	0x0ffffcff

08003778 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8003778:	b510      	push	{r4, lr}
 800377a:	4604      	mov	r4, r0
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 800377c:	6803      	ldr	r3, [r0, #0]
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8003784:	d003      	beq.n	800378e <HAL_RTC_AlarmIRQHandler+0x16>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f413 7f80 	tst.w	r3, #256	; 0x100
 800378c:	d10f      	bne.n	80037ae <HAL_RTC_AlarmIRQHandler+0x36>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 800378e:	6823      	ldr	r3, [r4, #0]
 8003790:	689a      	ldr	r2, [r3, #8]
 8003792:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8003796:	d003      	beq.n	80037a0 <HAL_RTC_AlarmIRQHandler+0x28>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800379e:	d10f      	bne.n	80037c0 <HAL_RTC_AlarmIRQHandler+0x48>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80037a0:	4b0c      	ldr	r3, [pc, #48]	; (80037d4 <HAL_RTC_AlarmIRQHandler+0x5c>)
 80037a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037a6:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80037a8:	2301      	movs	r3, #1
 80037aa:	7763      	strb	r3, [r4, #29]
}
 80037ac:	bd10      	pop	{r4, pc}
      HAL_RTC_AlarmAEventCallback(hrtc);
 80037ae:	f003 fa1f 	bl	8006bf0 <HAL_RTC_AlarmAEventCallback>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 80037b2:	6822      	ldr	r2, [r4, #0]
 80037b4:	68d3      	ldr	r3, [r2, #12]
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	f463 73c0 	orn	r3, r3, #384	; 0x180
 80037bc:	60d3      	str	r3, [r2, #12]
 80037be:	e7e6      	b.n	800378e <HAL_RTC_AlarmIRQHandler+0x16>
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80037c0:	4620      	mov	r0, r4
 80037c2:	f000 facf 	bl	8003d64 <HAL_RTCEx_AlarmBEventCallback>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 80037c6:	6822      	ldr	r2, [r4, #0]
 80037c8:	68d3      	ldr	r3, [r2, #12]
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	f463 7320 	orn	r3, r3, #640	; 0x280
 80037d0:	60d3      	str	r3, [r2, #12]
 80037d2:	e7e5      	b.n	80037a0 <HAL_RTC_AlarmIRQHandler+0x28>
 80037d4:	40013c00 	.word	0x40013c00

080037d8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80037d8:	b538      	push	{r3, r4, r5, lr}
 80037da:	4604      	mov	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80037dc:	6802      	ldr	r2, [r0, #0]
 80037de:	68d3      	ldr	r3, [r2, #12]
 80037e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037e4:	60d3      	str	r3, [r2, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80037e6:	f7fd fe63 	bl	80014b0 <HAL_GetTick>
 80037ea:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80037ec:	6823      	ldr	r3, [r4, #0]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f013 0f20 	tst.w	r3, #32
 80037f4:	d107      	bne.n	8003806 <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80037f6:	f7fd fe5b 	bl	80014b0 <HAL_GetTick>
 80037fa:	1b40      	subs	r0, r0, r5
 80037fc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003800:	d9f4      	bls.n	80037ec <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 8003802:	2003      	movs	r0, #3
 8003804:	e000      	b.n	8003808 <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 8003806:	2000      	movs	r0, #0
}
 8003808:	bd38      	pop	{r3, r4, r5, pc}

0800380a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800380a:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800380c:	6803      	ldr	r3, [r0, #0]
 800380e:	68da      	ldr	r2, [r3, #12]
 8003810:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003814:	d001      	beq.n	800381a <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8003816:	2000      	movs	r0, #0
}
 8003818:	bd38      	pop	{r3, r4, r5, pc}
 800381a:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800381c:	f04f 32ff 	mov.w	r2, #4294967295
 8003820:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8003822:	f7fd fe45 	bl	80014b0 <HAL_GetTick>
 8003826:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003828:	6823      	ldr	r3, [r4, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003830:	d107      	bne.n	8003842 <RTC_EnterInitMode+0x38>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003832:	f7fd fe3d 	bl	80014b0 <HAL_GetTick>
 8003836:	1b40      	subs	r0, r0, r5
 8003838:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800383c:	d9f4      	bls.n	8003828 <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 800383e:	2003      	movs	r0, #3
 8003840:	e7ea      	b.n	8003818 <RTC_EnterInitMode+0xe>
  return HAL_OK;
 8003842:	2000      	movs	r0, #0
 8003844:	e7e8      	b.n	8003818 <RTC_EnterInitMode+0xe>
	...

08003848 <HAL_RTC_Init>:
{
 8003848:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 800384a:	2800      	cmp	r0, #0
 800384c:	d05a      	beq.n	8003904 <HAL_RTC_Init+0xbc>
 800384e:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003850:	7f43      	ldrb	r3, [r0, #29]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d03e      	beq.n	80038d4 <HAL_RTC_Init+0x8c>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003856:	2302      	movs	r3, #2
 8003858:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800385a:	6823      	ldr	r3, [r4, #0]
 800385c:	22ca      	movs	r2, #202	; 0xca
 800385e:	625a      	str	r2, [r3, #36]	; 0x24
 8003860:	6823      	ldr	r3, [r4, #0]
 8003862:	2253      	movs	r2, #83	; 0x53
 8003864:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003866:	4620      	mov	r0, r4
 8003868:	f7ff ffcf 	bl	800380a <RTC_EnterInitMode>
 800386c:	4605      	mov	r5, r0
 800386e:	2800      	cmp	r0, #0
 8003870:	d134      	bne.n	80038dc <HAL_RTC_Init+0x94>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003872:	6822      	ldr	r2, [r4, #0]
 8003874:	6891      	ldr	r1, [r2, #8]
 8003876:	4b24      	ldr	r3, [pc, #144]	; (8003908 <HAL_RTC_Init+0xc0>)
 8003878:	400b      	ands	r3, r1
 800387a:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800387c:	6821      	ldr	r1, [r4, #0]
 800387e:	688a      	ldr	r2, [r1, #8]
 8003880:	6863      	ldr	r3, [r4, #4]
 8003882:	6920      	ldr	r0, [r4, #16]
 8003884:	4303      	orrs	r3, r0
 8003886:	6960      	ldr	r0, [r4, #20]
 8003888:	4303      	orrs	r3, r0
 800388a:	4313      	orrs	r3, r2
 800388c:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800388e:	6823      	ldr	r3, [r4, #0]
 8003890:	68e2      	ldr	r2, [r4, #12]
 8003892:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8003894:	6822      	ldr	r2, [r4, #0]
 8003896:	6913      	ldr	r3, [r2, #16]
 8003898:	68a1      	ldr	r1, [r4, #8]
 800389a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800389e:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80038a0:	6822      	ldr	r2, [r4, #0]
 80038a2:	68d3      	ldr	r3, [r2, #12]
 80038a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038a8:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80038aa:	6823      	ldr	r3, [r4, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f013 0f20 	tst.w	r3, #32
 80038b2:	d01b      	beq.n	80038ec <HAL_RTC_Init+0xa4>
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80038b4:	6822      	ldr	r2, [r4, #0]
 80038b6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80038b8:	f023 0308 	bic.w	r3, r3, #8
 80038bc:	64d3      	str	r3, [r2, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80038be:	6822      	ldr	r2, [r4, #0]
 80038c0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80038c2:	69a1      	ldr	r1, [r4, #24]
 80038c4:	430b      	orrs	r3, r1
 80038c6:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038c8:	6823      	ldr	r3, [r4, #0]
 80038ca:	22ff      	movs	r2, #255	; 0xff
 80038cc:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80038ce:	2301      	movs	r3, #1
 80038d0:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 80038d2:	e009      	b.n	80038e8 <HAL_RTC_Init+0xa0>
    hrtc->Lock = HAL_UNLOCKED;
 80038d4:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80038d6:	f003 fe89 	bl	80075ec <HAL_RTC_MspInit>
 80038da:	e7bc      	b.n	8003856 <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038dc:	6823      	ldr	r3, [r4, #0]
 80038de:	22ff      	movs	r2, #255	; 0xff
 80038e0:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80038e2:	2304      	movs	r3, #4
 80038e4:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 80038e6:	2501      	movs	r5, #1
}
 80038e8:	4628      	mov	r0, r5
 80038ea:	bd38      	pop	{r3, r4, r5, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80038ec:	4620      	mov	r0, r4
 80038ee:	f7ff ff73 	bl	80037d8 <HAL_RTC_WaitForSynchro>
 80038f2:	2800      	cmp	r0, #0
 80038f4:	d0de      	beq.n	80038b4 <HAL_RTC_Init+0x6c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038f6:	6823      	ldr	r3, [r4, #0]
 80038f8:	22ff      	movs	r2, #255	; 0xff
 80038fa:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80038fc:	2304      	movs	r3, #4
 80038fe:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8003900:	2501      	movs	r5, #1
 8003902:	e7f1      	b.n	80038e8 <HAL_RTC_Init+0xa0>
     return HAL_ERROR;
 8003904:	2501      	movs	r5, #1
 8003906:	e7ef      	b.n	80038e8 <HAL_RTC_Init+0xa0>
 8003908:	ff8fffbf 	.word	0xff8fffbf

0800390c <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 800390c:	2300      	movs	r3, #0

  while(Value >= 10)
 800390e:	e002      	b.n	8003916 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8003910:	3301      	adds	r3, #1
    Value -= 10;
 8003912:	380a      	subs	r0, #10
 8003914:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 8003916:	2809      	cmp	r0, #9
 8003918:	d8fa      	bhi.n	8003910 <RTC_ByteToBcd2+0x4>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800391a:	011b      	lsls	r3, r3, #4
 800391c:	b2db      	uxtb	r3, r3
}
 800391e:	4318      	orrs	r0, r3
 8003920:	4770      	bx	lr
	...

08003924 <HAL_RTC_SetTime>:
{
 8003924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8003926:	7f03      	ldrb	r3, [r0, #28]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d076      	beq.n	8003a1a <HAL_RTC_SetTime+0xf6>
 800392c:	460d      	mov	r5, r1
 800392e:	4604      	mov	r4, r0
 8003930:	2301      	movs	r3, #1
 8003932:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003934:	2302      	movs	r3, #2
 8003936:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8003938:	2a00      	cmp	r2, #0
 800393a:	d144      	bne.n	80039c6 <HAL_RTC_SetTime+0xa2>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800393c:	6803      	ldr	r3, [r0, #0]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003944:	d101      	bne.n	800394a <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00;
 8003946:	2300      	movs	r3, #0
 8003948:	730b      	strb	r3, [r1, #12]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800394a:	7828      	ldrb	r0, [r5, #0]
 800394c:	f7ff ffde 	bl	800390c <RTC_ByteToBcd2>
 8003950:	0406      	lsls	r6, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8003952:	7868      	ldrb	r0, [r5, #1]
 8003954:	f7ff ffda 	bl	800390c <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8003958:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800395c:	78a8      	ldrb	r0, [r5, #2]
 800395e:	f7ff ffd5 	bl	800390c <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8003962:	4306      	orrs	r6, r0
                        (((uint32_t)sTime->TimeFormat) << 16));
 8003964:	7b28      	ldrb	r0, [r5, #12]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8003966:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800396a:	6823      	ldr	r3, [r4, #0]
 800396c:	22ca      	movs	r2, #202	; 0xca
 800396e:	625a      	str	r2, [r3, #36]	; 0x24
 8003970:	6823      	ldr	r3, [r4, #0]
 8003972:	2253      	movs	r2, #83	; 0x53
 8003974:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003976:	4620      	mov	r0, r4
 8003978:	f7ff ff47 	bl	800380a <RTC_EnterInitMode>
 800397c:	4607      	mov	r7, r0
 800397e:	2800      	cmp	r0, #0
 8003980:	d133      	bne.n	80039ea <HAL_RTC_SetTime+0xc6>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003982:	6822      	ldr	r2, [r4, #0]
 8003984:	4b26      	ldr	r3, [pc, #152]	; (8003a20 <HAL_RTC_SetTime+0xfc>)
 8003986:	4033      	ands	r3, r6
 8003988:	6013      	str	r3, [r2, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800398a:	6822      	ldr	r2, [r4, #0]
 800398c:	6893      	ldr	r3, [r2, #8]
 800398e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003992:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003994:	6821      	ldr	r1, [r4, #0]
 8003996:	688b      	ldr	r3, [r1, #8]
 8003998:	692a      	ldr	r2, [r5, #16]
 800399a:	6968      	ldr	r0, [r5, #20]
 800399c:	4302      	orrs	r2, r0
 800399e:	4313      	orrs	r3, r2
 80039a0:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80039a2:	6822      	ldr	r2, [r4, #0]
 80039a4:	68d3      	ldr	r3, [r2, #12]
 80039a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039aa:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80039ac:	6823      	ldr	r3, [r4, #0]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f013 0f20 	tst.w	r3, #32
 80039b4:	d023      	beq.n	80039fe <HAL_RTC_SetTime+0xda>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039b6:	6823      	ldr	r3, [r4, #0]
 80039b8:	22ff      	movs	r2, #255	; 0xff
 80039ba:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 80039bc:	2301      	movs	r3, #1
 80039be:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc);
 80039c0:	2300      	movs	r3, #0
 80039c2:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 80039c4:	e019      	b.n	80039fa <HAL_RTC_SetTime+0xd6>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80039c6:	6803      	ldr	r3, [r0, #0]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f013 0f40 	tst.w	r3, #64	; 0x40
 80039ce:	d101      	bne.n	80039d4 <HAL_RTC_SetTime+0xb0>
      sTime->TimeFormat = 0x00;
 80039d0:	2300      	movs	r3, #0
 80039d2:	730b      	strb	r3, [r1, #12]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80039d4:	7828      	ldrb	r0, [r5, #0]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80039d6:	786e      	ldrb	r6, [r5, #1]
 80039d8:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80039da:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
              ((uint32_t)sTime->Seconds) | \
 80039de:	78a8      	ldrb	r0, [r5, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80039e0:	4306      	orrs	r6, r0
              ((uint32_t)(sTime->TimeFormat) << 16));
 80039e2:	7b28      	ldrb	r0, [r5, #12]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80039e4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80039e8:	e7bf      	b.n	800396a <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039ea:	6823      	ldr	r3, [r4, #0]
 80039ec:	22ff      	movs	r2, #255	; 0xff
 80039ee:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80039f0:	2304      	movs	r3, #4
 80039f2:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80039f4:	2300      	movs	r3, #0
 80039f6:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 80039f8:	2701      	movs	r7, #1
}
 80039fa:	4638      	mov	r0, r7
 80039fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80039fe:	4620      	mov	r0, r4
 8003a00:	f7ff feea 	bl	80037d8 <HAL_RTC_WaitForSynchro>
 8003a04:	2800      	cmp	r0, #0
 8003a06:	d0d6      	beq.n	80039b6 <HAL_RTC_SetTime+0x92>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a08:	6823      	ldr	r3, [r4, #0]
 8003a0a:	22ff      	movs	r2, #255	; 0xff
 8003a0c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003a0e:	2304      	movs	r3, #4
 8003a10:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8003a12:	2300      	movs	r3, #0
 8003a14:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8003a16:	2701      	movs	r7, #1
 8003a18:	e7ef      	b.n	80039fa <HAL_RTC_SetTime+0xd6>
  __HAL_LOCK(hrtc);
 8003a1a:	2702      	movs	r7, #2
 8003a1c:	e7ed      	b.n	80039fa <HAL_RTC_SetTime+0xd6>
 8003a1e:	bf00      	nop
 8003a20:	007f7f7f 	.word	0x007f7f7f

08003a24 <HAL_RTC_SetDate>:
{
 8003a24:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 8003a26:	7f03      	ldrb	r3, [r0, #28]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d064      	beq.n	8003af6 <HAL_RTC_SetDate+0xd2>
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a30:	2302      	movs	r3, #2
 8003a32:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003a34:	b93a      	cbnz	r2, 8003a46 <HAL_RTC_SetDate+0x22>
 8003a36:	784b      	ldrb	r3, [r1, #1]
 8003a38:	f013 0f10 	tst.w	r3, #16
 8003a3c:	d003      	beq.n	8003a46 <HAL_RTC_SetDate+0x22>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003a3e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8003a42:	330a      	adds	r3, #10
 8003a44:	704b      	strb	r3, [r1, #1]
 8003a46:	460e      	mov	r6, r1
 8003a48:	4604      	mov	r4, r0
  if(Format == RTC_FORMAT_BIN)
 8003a4a:	2a00      	cmp	r2, #0
 8003a4c:	d130      	bne.n	8003ab0 <HAL_RTC_SetDate+0x8c>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8003a4e:	78c8      	ldrb	r0, [r1, #3]
 8003a50:	f7ff ff5c 	bl	800390c <RTC_ByteToBcd2>
 8003a54:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8003a56:	7870      	ldrb	r0, [r6, #1]
 8003a58:	f7ff ff58 	bl	800390c <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8003a5c:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003a60:	78b0      	ldrb	r0, [r6, #2]
 8003a62:	f7ff ff53 	bl	800390c <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8003a66:	4305      	orrs	r5, r0
                 ((uint32_t)sDate->WeekDay << 13));
 8003a68:	7830      	ldrb	r0, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8003a6a:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a6e:	6823      	ldr	r3, [r4, #0]
 8003a70:	22ca      	movs	r2, #202	; 0xca
 8003a72:	625a      	str	r2, [r3, #36]	; 0x24
 8003a74:	6823      	ldr	r3, [r4, #0]
 8003a76:	2253      	movs	r2, #83	; 0x53
 8003a78:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003a7a:	4620      	mov	r0, r4
 8003a7c:	f7ff fec5 	bl	800380a <RTC_EnterInitMode>
 8003a80:	4606      	mov	r6, r0
 8003a82:	bb00      	cbnz	r0, 8003ac6 <HAL_RTC_SetDate+0xa2>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003a84:	6822      	ldr	r2, [r4, #0]
 8003a86:	4b1d      	ldr	r3, [pc, #116]	; (8003afc <HAL_RTC_SetDate+0xd8>)
 8003a88:	402b      	ands	r3, r5
 8003a8a:	6053      	str	r3, [r2, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003a8c:	6822      	ldr	r2, [r4, #0]
 8003a8e:	68d3      	ldr	r3, [r2, #12]
 8003a90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a94:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003a96:	6823      	ldr	r3, [r4, #0]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f013 0f20 	tst.w	r3, #32
 8003a9e:	d01c      	beq.n	8003ada <HAL_RTC_SetDate+0xb6>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003aa0:	6823      	ldr	r3, [r4, #0]
 8003aa2:	22ff      	movs	r2, #255	; 0xff
 8003aa4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8003aaa:	2300      	movs	r3, #0
 8003aac:	7723      	strb	r3, [r4, #28]
    return HAL_OK;
 8003aae:	e012      	b.n	8003ad6 <HAL_RTC_SetDate+0xb2>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8003ab0:	78c8      	ldrb	r0, [r1, #3]
                  (((uint32_t)sDate->Month) << 8) | \
 8003ab2:	784d      	ldrb	r5, [r1, #1]
 8003ab4:	022d      	lsls	r5, r5, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8003ab6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
                  ((uint32_t)sDate->Date) | \
 8003aba:	7888      	ldrb	r0, [r1, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8003abc:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13));
 8003abe:	7808      	ldrb	r0, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8003ac0:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
 8003ac4:	e7d3      	b.n	8003a6e <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ac6:	6823      	ldr	r3, [r4, #0]
 8003ac8:	22ff      	movs	r2, #255	; 0xff
 8003aca:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003acc:	2304      	movs	r3, #4
 8003ace:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8003ad4:	2601      	movs	r6, #1
}
 8003ad6:	4630      	mov	r0, r6
 8003ad8:	bd70      	pop	{r4, r5, r6, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003ada:	4620      	mov	r0, r4
 8003adc:	f7ff fe7c 	bl	80037d8 <HAL_RTC_WaitForSynchro>
 8003ae0:	2800      	cmp	r0, #0
 8003ae2:	d0dd      	beq.n	8003aa0 <HAL_RTC_SetDate+0x7c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ae4:	6823      	ldr	r3, [r4, #0]
 8003ae6:	22ff      	movs	r2, #255	; 0xff
 8003ae8:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003aea:	2304      	movs	r3, #4
 8003aec:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8003aee:	2300      	movs	r3, #0
 8003af0:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8003af2:	2601      	movs	r6, #1
 8003af4:	e7ef      	b.n	8003ad6 <HAL_RTC_SetDate+0xb2>
 __HAL_LOCK(hrtc);
 8003af6:	2602      	movs	r6, #2
 8003af8:	e7ed      	b.n	8003ad6 <HAL_RTC_SetDate+0xb2>
 8003afa:	bf00      	nop
 8003afc:	00ffff3f 	.word	0x00ffff3f

08003b00 <HAL_RTC_SetAlarm_IT>:
{
 8003b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b02:	b083      	sub	sp, #12
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8003b04:	4b63      	ldr	r3, [pc, #396]	; (8003c94 <HAL_RTC_SetAlarm_IT+0x194>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4c63      	ldr	r4, [pc, #396]	; (8003c98 <HAL_RTC_SetAlarm_IT+0x198>)
 8003b0a:	fba4 4303 	umull	r4, r3, r4, r3
 8003b0e:	0adb      	lsrs	r3, r3, #11
 8003b10:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8003b14:	fb06 f303 	mul.w	r3, r6, r3
 8003b18:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hrtc);
 8003b1a:	7f03      	ldrb	r3, [r0, #28]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	f000 80b6 	beq.w	8003c8e <HAL_RTC_SetAlarm_IT+0x18e>
 8003b22:	460d      	mov	r5, r1
 8003b24:	4604      	mov	r4, r0
 8003b26:	2301      	movs	r3, #1
 8003b28:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8003b2e:	2a00      	cmp	r2, #0
 8003b30:	d161      	bne.n	8003bf6 <HAL_RTC_SetAlarm_IT+0xf6>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003b32:	6803      	ldr	r3, [r0, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003b3a:	d101      	bne.n	8003b40 <HAL_RTC_SetAlarm_IT+0x40>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	730b      	strb	r3, [r1, #12]
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8003b40:	6a2f      	ldr	r7, [r5, #32]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003b42:	7828      	ldrb	r0, [r5, #0]
 8003b44:	f7ff fee2 	bl	800390c <RTC_ByteToBcd2>
 8003b48:	0406      	lsls	r6, r0, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003b4a:	7868      	ldrb	r0, [r5, #1]
 8003b4c:	f7ff fede 	bl	800390c <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003b50:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003b54:	78a8      	ldrb	r0, [r5, #2]
 8003b56:	f7ff fed9 	bl	800390c <RTC_ByteToBcd2>
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003b5a:	4306      	orrs	r6, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003b5c:	7b28      	ldrb	r0, [r5, #12]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003b5e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003b62:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
 8003b66:	f7ff fed1 	bl	800390c <RTC_ByteToBcd2>
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003b6a:	ea46 6000 	orr.w	r0, r6, r0, lsl #24
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003b6e:	4338      	orrs	r0, r7
              ((uint32_t)sAlarm->AlarmMask));
 8003b70:	69ab      	ldr	r3, [r5, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003b72:	4318      	orrs	r0, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003b74:	6869      	ldr	r1, [r5, #4]
 8003b76:	69eb      	ldr	r3, [r5, #28]
 8003b78:	4319      	orrs	r1, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b7a:	6823      	ldr	r3, [r4, #0]
 8003b7c:	22ca      	movs	r2, #202	; 0xca
 8003b7e:	625a      	str	r2, [r3, #36]	; 0x24
 8003b80:	6823      	ldr	r3, [r4, #0]
 8003b82:	2253      	movs	r2, #83	; 0x53
 8003b84:	625a      	str	r2, [r3, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 8003b86:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003b88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b8c:	d04d      	beq.n	8003c2a <HAL_RTC_SetAlarm_IT+0x12a>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003b8e:	6822      	ldr	r2, [r4, #0]
 8003b90:	6893      	ldr	r3, [r2, #8]
 8003b92:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b96:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003b98:	6822      	ldr	r2, [r4, #0]
 8003b9a:	68d3      	ldr	r3, [r2, #12]
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	f463 7320 	orn	r3, r3, #640	; 0x280
 8003ba2:	60d3      	str	r3, [r2, #12]
      if (count-- == 0U)
 8003ba4:	9b01      	ldr	r3, [sp, #4]
 8003ba6:	1e5a      	subs	r2, r3, #1
 8003ba8:	9201      	str	r2, [sp, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d067      	beq.n	8003c7e <HAL_RTC_SetAlarm_IT+0x17e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8003bae:	6823      	ldr	r3, [r4, #0]
 8003bb0:	68da      	ldr	r2, [r3, #12]
 8003bb2:	f012 0f02 	tst.w	r2, #2
 8003bb6:	d0f5      	beq.n	8003ba4 <HAL_RTC_SetAlarm_IT+0xa4>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003bb8:	6218      	str	r0, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003bba:	6823      	ldr	r3, [r4, #0]
 8003bbc:	6499      	str	r1, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003bbe:	6822      	ldr	r2, [r4, #0]
 8003bc0:	6893      	ldr	r3, [r2, #8]
 8003bc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bc6:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003bc8:	6822      	ldr	r2, [r4, #0]
 8003bca:	6893      	ldr	r3, [r2, #8]
 8003bcc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003bd0:	6093      	str	r3, [r2, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003bd2:	4b32      	ldr	r3, [pc, #200]	; (8003c9c <HAL_RTC_SetAlarm_IT+0x19c>)
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003bda:	601a      	str	r2, [r3, #0]
  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8003bdc:	689a      	ldr	r2, [r3, #8]
 8003bde:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003be2:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003be4:	6823      	ldr	r3, [r4, #0]
 8003be6:	22ff      	movs	r2, #255	; 0xff
 8003be8:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8003bea:	2301      	movs	r3, #1
 8003bec:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hrtc);
 8003bee:	2000      	movs	r0, #0
 8003bf0:	7720      	strb	r0, [r4, #28]
}
 8003bf2:	b003      	add	sp, #12
 8003bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003bf6:	6803      	ldr	r3, [r0, #0]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003bfe:	d101      	bne.n	8003c04 <HAL_RTC_SetAlarm_IT+0x104>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003c00:	2300      	movs	r3, #0
 8003c02:	730b      	strb	r3, [r1, #12]
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8003c04:	6a2a      	ldr	r2, [r5, #32]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003c06:	7829      	ldrb	r1, [r5, #0]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003c08:	786b      	ldrb	r3, [r5, #1]
 8003c0a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003c0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003c10:	78a9      	ldrb	r1, [r5, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003c12:	430b      	orrs	r3, r1
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003c14:	7b29      	ldrb	r1, [r5, #12]
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003c16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003c1a:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003c1e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003c22:	4313      	orrs	r3, r2
              ((uint32_t)sAlarm->AlarmMask));
 8003c24:	69a8      	ldr	r0, [r5, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003c26:	4318      	orrs	r0, r3
 8003c28:	e7a4      	b.n	8003b74 <HAL_RTC_SetAlarm_IT+0x74>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003c2a:	6822      	ldr	r2, [r4, #0]
 8003c2c:	6893      	ldr	r3, [r2, #8]
 8003c2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c32:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003c34:	6822      	ldr	r2, [r4, #0]
 8003c36:	68d3      	ldr	r3, [r2, #12]
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	f463 73c0 	orn	r3, r3, #384	; 0x180
 8003c3e:	60d3      	str	r3, [r2, #12]
      if (count-- == 0U)
 8003c40:	9b01      	ldr	r3, [sp, #4]
 8003c42:	1e5a      	subs	r2, r3, #1
 8003c44:	9201      	str	r2, [sp, #4]
 8003c46:	b193      	cbz	r3, 8003c6e <HAL_RTC_SetAlarm_IT+0x16e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8003c48:	6823      	ldr	r3, [r4, #0]
 8003c4a:	68da      	ldr	r2, [r3, #12]
 8003c4c:	f012 0f01 	tst.w	r2, #1
 8003c50:	d0f6      	beq.n	8003c40 <HAL_RTC_SetAlarm_IT+0x140>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003c52:	61d8      	str	r0, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003c54:	6823      	ldr	r3, [r4, #0]
 8003c56:	6459      	str	r1, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003c58:	6822      	ldr	r2, [r4, #0]
 8003c5a:	6893      	ldr	r3, [r2, #8]
 8003c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c60:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8003c62:	6822      	ldr	r2, [r4, #0]
 8003c64:	6893      	ldr	r3, [r2, #8]
 8003c66:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c6a:	6093      	str	r3, [r2, #8]
 8003c6c:	e7b1      	b.n	8003bd2 <HAL_RTC_SetAlarm_IT+0xd2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c6e:	6823      	ldr	r3, [r4, #0]
 8003c70:	22ff      	movs	r2, #255	; 0xff
 8003c72:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003c74:	2003      	movs	r0, #3
 8003c76:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8003c78:	2300      	movs	r3, #0
 8003c7a:	7723      	strb	r3, [r4, #28]
        return HAL_TIMEOUT;
 8003c7c:	e7b9      	b.n	8003bf2 <HAL_RTC_SetAlarm_IT+0xf2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c7e:	6823      	ldr	r3, [r4, #0]
 8003c80:	22ff      	movs	r2, #255	; 0xff
 8003c82:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003c84:	2003      	movs	r0, #3
 8003c86:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8003c88:	2300      	movs	r3, #0
 8003c8a:	7723      	strb	r3, [r4, #28]
        return HAL_TIMEOUT;
 8003c8c:	e7b1      	b.n	8003bf2 <HAL_RTC_SetAlarm_IT+0xf2>
  __HAL_LOCK(hrtc);
 8003c8e:	2002      	movs	r0, #2
 8003c90:	e7af      	b.n	8003bf2 <HAL_RTC_SetAlarm_IT+0xf2>
 8003c92:	bf00      	nop
 8003c94:	20000118 	.word	0x20000118
 8003c98:	10624dd3 	.word	0x10624dd3
 8003c9c:	40013c00 	.word	0x40013c00

08003ca0 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003ca0:	0903      	lsrs	r3, r0, #4
 8003ca2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003ca6:	005a      	lsls	r2, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8003ca8:	f000 000f 	and.w	r0, r0, #15
 8003cac:	4410      	add	r0, r2
}
 8003cae:	b2c0      	uxtb	r0, r0
 8003cb0:	4770      	bx	lr
	...

08003cb4 <HAL_RTC_GetTime>:
{
 8003cb4:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003cb6:	6803      	ldr	r3, [r0, #0]
 8003cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cba:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003cbc:	6803      	ldr	r3, [r0, #0]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003cc4:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003cc6:	6803      	ldr	r3, [r0, #0]
 8003cc8:	6818      	ldr	r0, [r3, #0]
 8003cca:	4d0f      	ldr	r5, [pc, #60]	; (8003d08 <HAL_RTC_GetTime+0x54>)
 8003ccc:	4005      	ands	r5, r0
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8003cce:	0c2c      	lsrs	r4, r5, #16
 8003cd0:	f004 003f 	and.w	r0, r4, #63	; 0x3f
 8003cd4:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8003cd6:	f3c5 2606 	ubfx	r6, r5, #8, #7
 8003cda:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003cdc:	f005 057f 	and.w	r5, r5, #127	; 0x7f
 8003ce0:	708d      	strb	r5, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 8003ce2:	f004 0440 	and.w	r4, r4, #64	; 0x40
 8003ce6:	730c      	strb	r4, [r1, #12]
  if(Format == RTC_FORMAT_BIN)
 8003ce8:	b95a      	cbnz	r2, 8003d02 <HAL_RTC_GetTime+0x4e>
 8003cea:	460c      	mov	r4, r1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003cec:	f7ff ffd8 	bl	8003ca0 <RTC_Bcd2ToByte>
 8003cf0:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003cf2:	4630      	mov	r0, r6
 8003cf4:	f7ff ffd4 	bl	8003ca0 <RTC_Bcd2ToByte>
 8003cf8:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003cfa:	4628      	mov	r0, r5
 8003cfc:	f7ff ffd0 	bl	8003ca0 <RTC_Bcd2ToByte>
 8003d00:	70a0      	strb	r0, [r4, #2]
}
 8003d02:	2000      	movs	r0, #0
 8003d04:	bd70      	pop	{r4, r5, r6, pc}
 8003d06:	bf00      	nop
 8003d08:	007f7f7f 	.word	0x007f7f7f

08003d0c <HAL_RTC_GetDate>:
{
 8003d0c:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003d0e:	6803      	ldr	r3, [r0, #0]
 8003d10:	6858      	ldr	r0, [r3, #4]
 8003d12:	4b0e      	ldr	r3, [pc, #56]	; (8003d4c <HAL_RTC_GetDate+0x40>)
 8003d14:	4003      	ands	r3, r0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8003d16:	0c18      	lsrs	r0, r3, #16
 8003d18:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8003d1a:	f3c3 2604 	ubfx	r6, r3, #8, #5
 8003d1e:	704e      	strb	r6, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003d20:	f003 053f 	and.w	r5, r3, #63	; 0x3f
 8003d24:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 8003d26:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003d2a:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 8003d2c:	b95a      	cbnz	r2, 8003d46 <HAL_RTC_GetDate+0x3a>
 8003d2e:	460c      	mov	r4, r1
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003d30:	f7ff ffb6 	bl	8003ca0 <RTC_Bcd2ToByte>
 8003d34:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003d36:	4630      	mov	r0, r6
 8003d38:	f7ff ffb2 	bl	8003ca0 <RTC_Bcd2ToByte>
 8003d3c:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003d3e:	4628      	mov	r0, r5
 8003d40:	f7ff ffae 	bl	8003ca0 <RTC_Bcd2ToByte>
 8003d44:	70a0      	strb	r0, [r4, #2]
}
 8003d46:	2000      	movs	r0, #0
 8003d48:	bd70      	pop	{r4, r5, r6, pc}
 8003d4a:	bf00      	nop
 8003d4c:	00ffff3f 	.word	0x00ffff3f

08003d50 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8003d50:	6803      	ldr	r3, [r0, #0]
 8003d52:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8003d54:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8003d58:	4770      	bx	lr

08003d5a <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8003d5a:	6803      	ldr	r3, [r0, #0]
 8003d5c:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8003d5e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 8003d62:	4770      	bx	lr

08003d64 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8003d64:	4770      	bx	lr
	...

08003d68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d68:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d6a:	6a03      	ldr	r3, [r0, #32]
 8003d6c:	f023 0301 	bic.w	r3, r3, #1
 8003d70:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d72:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d74:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d76:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d78:	4c12      	ldr	r4, [pc, #72]	; (8003dc4 <TIM_OC1_SetConfig+0x5c>)
 8003d7a:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d7c:	680d      	ldr	r5, [r1, #0]
 8003d7e:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d80:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d84:	688b      	ldr	r3, [r1, #8]
 8003d86:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d88:	4c0f      	ldr	r4, [pc, #60]	; (8003dc8 <TIM_OC1_SetConfig+0x60>)
 8003d8a:	4e10      	ldr	r6, [pc, #64]	; (8003dcc <TIM_OC1_SetConfig+0x64>)
 8003d8c:	42b0      	cmp	r0, r6
 8003d8e:	bf18      	it	ne
 8003d90:	42a0      	cmpne	r0, r4
 8003d92:	bf0c      	ite	eq
 8003d94:	2401      	moveq	r4, #1
 8003d96:	2400      	movne	r4, #0
 8003d98:	d105      	bne.n	8003da6 <TIM_OC1_SetConfig+0x3e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d9a:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d9e:	68ce      	ldr	r6, [r1, #12]
 8003da0:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003da2:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003da6:	b12c      	cbz	r4, 8003db4 <TIM_OC1_SetConfig+0x4c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003da8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003dac:	694c      	ldr	r4, [r1, #20]
 8003dae:	4314      	orrs	r4, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003db0:	698a      	ldr	r2, [r1, #24]
 8003db2:	4322      	orrs	r2, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003db4:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003db6:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003db8:	684a      	ldr	r2, [r1, #4]
 8003dba:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dbc:	6203      	str	r3, [r0, #32]
}
 8003dbe:	bc70      	pop	{r4, r5, r6}
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	fffeff8c 	.word	0xfffeff8c
 8003dc8:	40010000 	.word	0x40010000
 8003dcc:	40010400 	.word	0x40010400

08003dd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003dd0:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003dd2:	6a03      	ldr	r3, [r0, #32]
 8003dd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dd8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dda:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ddc:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dde:	69c5      	ldr	r5, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003de0:	4c14      	ldr	r4, [pc, #80]	; (8003e34 <TIM_OC3_SetConfig+0x64>)
 8003de2:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003de4:	680e      	ldr	r6, [r1, #0]
 8003de6:	4326      	orrs	r6, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003de8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003dec:	688c      	ldr	r4, [r1, #8]
 8003dee:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003df2:	4c11      	ldr	r4, [pc, #68]	; (8003e38 <TIM_OC3_SetConfig+0x68>)
 8003df4:	4d11      	ldr	r5, [pc, #68]	; (8003e3c <TIM_OC3_SetConfig+0x6c>)
 8003df6:	42a8      	cmp	r0, r5
 8003df8:	bf18      	it	ne
 8003dfa:	42a0      	cmpne	r0, r4
 8003dfc:	bf0c      	ite	eq
 8003dfe:	2401      	moveq	r4, #1
 8003e00:	2400      	movne	r4, #0
 8003e02:	d106      	bne.n	8003e12 <TIM_OC3_SetConfig+0x42>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e08:	68cd      	ldr	r5, [r1, #12]
 8003e0a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e12:	b13c      	cbz	r4, 8003e24 <TIM_OC3_SetConfig+0x54>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e14:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e18:	694c      	ldr	r4, [r1, #20]
 8003e1a:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e1e:	698c      	ldr	r4, [r1, #24]
 8003e20:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e24:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e26:	61c6      	str	r6, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e28:	684a      	ldr	r2, [r1, #4]
 8003e2a:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e2c:	6203      	str	r3, [r0, #32]
}
 8003e2e:	bc70      	pop	{r4, r5, r6}
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	fffeff8c 	.word	0xfffeff8c
 8003e38:	40010000 	.word	0x40010000
 8003e3c:	40010400 	.word	0x40010400

08003e40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e40:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e42:	6a03      	ldr	r3, [r0, #32]
 8003e44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e48:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e4a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e4c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e4e:	69c5      	ldr	r5, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e50:	4a0d      	ldr	r2, [pc, #52]	; (8003e88 <TIM_OC4_SetConfig+0x48>)
 8003e52:	402a      	ands	r2, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e54:	680d      	ldr	r5, [r1, #0]
 8003e56:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e5e:	688d      	ldr	r5, [r1, #8]
 8003e60:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e64:	4e09      	ldr	r6, [pc, #36]	; (8003e8c <TIM_OC4_SetConfig+0x4c>)
 8003e66:	4d0a      	ldr	r5, [pc, #40]	; (8003e90 <TIM_OC4_SetConfig+0x50>)
 8003e68:	42a8      	cmp	r0, r5
 8003e6a:	bf18      	it	ne
 8003e6c:	42b0      	cmpne	r0, r6
 8003e6e:	d104      	bne.n	8003e7a <TIM_OC4_SetConfig+0x3a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e70:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e74:	694d      	ldr	r5, [r1, #20]
 8003e76:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e7a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e7c:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e7e:	684a      	ldr	r2, [r1, #4]
 8003e80:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e82:	6203      	str	r3, [r0, #32]
}
 8003e84:	bc70      	pop	{r4, r5, r6}
 8003e86:	4770      	bx	lr
 8003e88:	feff8cff 	.word	0xfeff8cff
 8003e8c:	40010000 	.word	0x40010000
 8003e90:	40010400 	.word	0x40010400

08003e94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003e94:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003e96:	6a03      	ldr	r3, [r0, #32]
 8003e98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e9c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e9e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ea0:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ea2:	6d44      	ldr	r4, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ea4:	4d0d      	ldr	r5, [pc, #52]	; (8003edc <TIM_OC5_SetConfig+0x48>)
 8003ea6:	4025      	ands	r5, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ea8:	680c      	ldr	r4, [r1, #0]
 8003eaa:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003eac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003eb0:	688d      	ldr	r5, [r1, #8]
 8003eb2:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eb6:	4e0a      	ldr	r6, [pc, #40]	; (8003ee0 <TIM_OC5_SetConfig+0x4c>)
 8003eb8:	4d0a      	ldr	r5, [pc, #40]	; (8003ee4 <TIM_OC5_SetConfig+0x50>)
 8003eba:	42a8      	cmp	r0, r5
 8003ebc:	bf18      	it	ne
 8003ebe:	42b0      	cmpne	r0, r6
 8003ec0:	d104      	bne.n	8003ecc <TIM_OC5_SetConfig+0x38>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003ec2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003ec6:	694d      	ldr	r5, [r1, #20]
 8003ec8:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ecc:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ece:	6544      	str	r4, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003ed0:	684a      	ldr	r2, [r1, #4]
 8003ed2:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ed4:	6203      	str	r3, [r0, #32]
}
 8003ed6:	bc70      	pop	{r4, r5, r6}
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	fffeff8f 	.word	0xfffeff8f
 8003ee0:	40010000 	.word	0x40010000
 8003ee4:	40010400 	.word	0x40010400

08003ee8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003ee8:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003eea:	6a03      	ldr	r3, [r0, #32]
 8003eec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003ef0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ef2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ef4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ef6:	6d45      	ldr	r5, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003ef8:	4a0d      	ldr	r2, [pc, #52]	; (8003f30 <TIM_OC6_SetConfig+0x48>)
 8003efa:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003efc:	680d      	ldr	r5, [r1, #0]
 8003efe:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003f02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003f06:	688d      	ldr	r5, [r1, #8]
 8003f08:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f0c:	4e09      	ldr	r6, [pc, #36]	; (8003f34 <TIM_OC6_SetConfig+0x4c>)
 8003f0e:	4d0a      	ldr	r5, [pc, #40]	; (8003f38 <TIM_OC6_SetConfig+0x50>)
 8003f10:	42a8      	cmp	r0, r5
 8003f12:	bf18      	it	ne
 8003f14:	42b0      	cmpne	r0, r6
 8003f16:	d104      	bne.n	8003f22 <TIM_OC6_SetConfig+0x3a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003f18:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003f1c:	694d      	ldr	r5, [r1, #20]
 8003f1e:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f22:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f24:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003f26:	684a      	ldr	r2, [r1, #4]
 8003f28:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f2a:	6203      	str	r3, [r0, #32]
}
 8003f2c:	bc70      	pop	{r4, r5, r6}
 8003f2e:	4770      	bx	lr
 8003f30:	feff8fff 	.word	0xfeff8fff
 8003f34:	40010000 	.word	0x40010000
 8003f38:	40010400 	.word	0x40010400

08003f3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f3c:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f3e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f40:	6a04      	ldr	r4, [r0, #32]
 8003f42:	f024 0401 	bic.w	r4, r4, #1
 8003f46:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f48:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f4a:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f4e:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f52:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8003f56:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f58:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003f5a:	6203      	str	r3, [r0, #32]
}
 8003f5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f60:	4770      	bx	lr

08003f62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f62:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f64:	6a03      	ldr	r3, [r0, #32]
 8003f66:	f023 0310 	bic.w	r3, r3, #16
 8003f6a:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f6c:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003f6e:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f70:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f74:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f78:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f7c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f80:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003f82:	6203      	str	r3, [r0, #32]
}
 8003f84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f8a:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f90:	4319      	orrs	r1, r3
 8003f92:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f96:	6081      	str	r1, [r0, #8]
}
 8003f98:	4770      	bx	lr

08003f9a <HAL_TIM_PWM_MspInit>:
}
 8003f9a:	4770      	bx	lr

08003f9c <TIM_Base_SetConfig>:
{
 8003f9c:	b470      	push	{r4, r5, r6}
  tmpcr1 = TIMx->CR1;
 8003f9e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fa0:	4c3a      	ldr	r4, [pc, #232]	; (800408c <TIM_Base_SetConfig+0xf0>)
 8003fa2:	42a0      	cmp	r0, r4
 8003fa4:	bf14      	ite	ne
 8003fa6:	2400      	movne	r4, #0
 8003fa8:	2401      	moveq	r4, #1
 8003faa:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003fae:	bf14      	ite	ne
 8003fb0:	4622      	movne	r2, r4
 8003fb2:	f044 0201 	orreq.w	r2, r4, #1
 8003fb6:	b9aa      	cbnz	r2, 8003fe4 <TIM_Base_SetConfig+0x48>
 8003fb8:	4d35      	ldr	r5, [pc, #212]	; (8004090 <TIM_Base_SetConfig+0xf4>)
 8003fba:	42a8      	cmp	r0, r5
 8003fbc:	bf14      	ite	ne
 8003fbe:	2500      	movne	r5, #0
 8003fc0:	2501      	moveq	r5, #1
 8003fc2:	4e34      	ldr	r6, [pc, #208]	; (8004094 <TIM_Base_SetConfig+0xf8>)
 8003fc4:	42b0      	cmp	r0, r6
 8003fc6:	d00d      	beq.n	8003fe4 <TIM_Base_SetConfig+0x48>
 8003fc8:	b965      	cbnz	r5, 8003fe4 <TIM_Base_SetConfig+0x48>
 8003fca:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8003fce:	f505 3582 	add.w	r5, r5, #66560	; 0x10400
 8003fd2:	42a8      	cmp	r0, r5
 8003fd4:	bf14      	ite	ne
 8003fd6:	2500      	movne	r5, #0
 8003fd8:	2501      	moveq	r5, #1
 8003fda:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8003fde:	42b0      	cmp	r0, r6
 8003fe0:	d000      	beq.n	8003fe4 <TIM_Base_SetConfig+0x48>
 8003fe2:	b11d      	cbz	r5, 8003fec <TIM_Base_SetConfig+0x50>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003fe8:	684d      	ldr	r5, [r1, #4]
 8003fea:	432b      	orrs	r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fec:	2a00      	cmp	r2, #0
 8003fee:	d133      	bne.n	8004058 <TIM_Base_SetConfig+0xbc>
 8003ff0:	4a27      	ldr	r2, [pc, #156]	; (8004090 <TIM_Base_SetConfig+0xf4>)
 8003ff2:	4290      	cmp	r0, r2
 8003ff4:	bf14      	ite	ne
 8003ff6:	2200      	movne	r2, #0
 8003ff8:	2201      	moveq	r2, #1
 8003ffa:	4d26      	ldr	r5, [pc, #152]	; (8004094 <TIM_Base_SetConfig+0xf8>)
 8003ffc:	42a8      	cmp	r0, r5
 8003ffe:	d02b      	beq.n	8004058 <TIM_Base_SetConfig+0xbc>
 8004000:	bb52      	cbnz	r2, 8004058 <TIM_Base_SetConfig+0xbc>
 8004002:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004006:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 800400a:	4290      	cmp	r0, r2
 800400c:	bf14      	ite	ne
 800400e:	2200      	movne	r2, #0
 8004010:	2201      	moveq	r2, #1
 8004012:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004016:	42a8      	cmp	r0, r5
 8004018:	d01e      	beq.n	8004058 <TIM_Base_SetConfig+0xbc>
 800401a:	b9ea      	cbnz	r2, 8004058 <TIM_Base_SetConfig+0xbc>
 800401c:	4a1e      	ldr	r2, [pc, #120]	; (8004098 <TIM_Base_SetConfig+0xfc>)
 800401e:	4290      	cmp	r0, r2
 8004020:	bf14      	ite	ne
 8004022:	2200      	movne	r2, #0
 8004024:	2201      	moveq	r2, #1
 8004026:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 800402a:	42a8      	cmp	r0, r5
 800402c:	d014      	beq.n	8004058 <TIM_Base_SetConfig+0xbc>
 800402e:	b99a      	cbnz	r2, 8004058 <TIM_Base_SetConfig+0xbc>
 8004030:	4a1a      	ldr	r2, [pc, #104]	; (800409c <TIM_Base_SetConfig+0x100>)
 8004032:	4290      	cmp	r0, r2
 8004034:	bf14      	ite	ne
 8004036:	2200      	movne	r2, #0
 8004038:	2201      	moveq	r2, #1
 800403a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800403e:	42a8      	cmp	r0, r5
 8004040:	d00a      	beq.n	8004058 <TIM_Base_SetConfig+0xbc>
 8004042:	b94a      	cbnz	r2, 8004058 <TIM_Base_SetConfig+0xbc>
 8004044:	4a16      	ldr	r2, [pc, #88]	; (80040a0 <TIM_Base_SetConfig+0x104>)
 8004046:	4290      	cmp	r0, r2
 8004048:	bf14      	ite	ne
 800404a:	2200      	movne	r2, #0
 800404c:	2201      	moveq	r2, #1
 800404e:	f5a5 3596 	sub.w	r5, r5, #76800	; 0x12c00
 8004052:	42a8      	cmp	r0, r5
 8004054:	d000      	beq.n	8004058 <TIM_Base_SetConfig+0xbc>
 8004056:	b11a      	cbz	r2, 8004060 <TIM_Base_SetConfig+0xc4>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800405c:	68ca      	ldr	r2, [r1, #12]
 800405e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004060:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004064:	694a      	ldr	r2, [r1, #20]
 8004066:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004068:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800406a:	688a      	ldr	r2, [r1, #8]
 800406c:	62c2      	str	r2, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800406e:	680a      	ldr	r2, [r1, #0]
 8004070:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004072:	4b0c      	ldr	r3, [pc, #48]	; (80040a4 <TIM_Base_SetConfig+0x108>)
 8004074:	4298      	cmp	r0, r3
 8004076:	bf14      	ite	ne
 8004078:	4623      	movne	r3, r4
 800407a:	f044 0301 	orreq.w	r3, r4, #1
 800407e:	b10b      	cbz	r3, 8004084 <TIM_Base_SetConfig+0xe8>
    TIMx->RCR = Structure->RepetitionCounter;
 8004080:	690b      	ldr	r3, [r1, #16]
 8004082:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004084:	2301      	movs	r3, #1
 8004086:	6143      	str	r3, [r0, #20]
}
 8004088:	bc70      	pop	{r4, r5, r6}
 800408a:	4770      	bx	lr
 800408c:	40010000 	.word	0x40010000
 8004090:	40000800 	.word	0x40000800
 8004094:	40000400 	.word	0x40000400
 8004098:	40014400 	.word	0x40014400
 800409c:	40001800 	.word	0x40001800
 80040a0:	40002000 	.word	0x40002000
 80040a4:	40010400 	.word	0x40010400

080040a8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80040a8:	b358      	cbz	r0, 8004102 <HAL_TIM_Base_Init+0x5a>
{
 80040aa:	b510      	push	{r4, lr}
 80040ac:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80040ae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80040b2:	b30b      	cbz	r3, 80040f8 <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 80040b4:	2302      	movs	r3, #2
 80040b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040ba:	1d21      	adds	r1, r4, #4
 80040bc:	6820      	ldr	r0, [r4, #0]
 80040be:	f7ff ff6d 	bl	8003f9c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040c2:	2301      	movs	r3, #1
 80040c4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040c8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80040cc:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80040d0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80040d4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80040d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040e0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80040e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80040e8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80040ec:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80040f0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80040f4:	2000      	movs	r0, #0
}
 80040f6:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80040f8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80040fc:	f003 fa8e 	bl	800761c <HAL_TIM_Base_MspInit>
 8004100:	e7d8      	b.n	80040b4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8004102:	2001      	movs	r0, #1
}
 8004104:	4770      	bx	lr

08004106 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8004106:	b358      	cbz	r0, 8004160 <HAL_TIM_PWM_Init+0x5a>
{
 8004108:	b510      	push	{r4, lr}
 800410a:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800410c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004110:	b30b      	cbz	r3, 8004156 <HAL_TIM_PWM_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8004112:	2302      	movs	r3, #2
 8004114:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004118:	1d21      	adds	r1, r4, #4
 800411a:	6820      	ldr	r0, [r4, #0]
 800411c:	f7ff ff3e 	bl	8003f9c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004120:	2301      	movs	r3, #1
 8004122:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004126:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800412a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800412e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004132:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004136:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800413a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800413e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004142:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004146:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800414a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800414e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004152:	2000      	movs	r0, #0
}
 8004154:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004156:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800415a:	f7ff ff1e 	bl	8003f9a <HAL_TIM_PWM_MspInit>
 800415e:	e7d8      	b.n	8004112 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8004160:	2001      	movs	r0, #1
}
 8004162:	4770      	bx	lr

08004164 <TIM_OC2_SetConfig>:
{
 8004164:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004166:	6a03      	ldr	r3, [r0, #32]
 8004168:	f023 0310 	bic.w	r3, r3, #16
 800416c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800416e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004170:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004172:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004174:	4c14      	ldr	r4, [pc, #80]	; (80041c8 <TIM_OC2_SetConfig+0x64>)
 8004176:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004178:	680d      	ldr	r5, [r1, #0]
 800417a:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800417e:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004182:	688c      	ldr	r4, [r1, #8]
 8004184:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004188:	4c10      	ldr	r4, [pc, #64]	; (80041cc <TIM_OC2_SetConfig+0x68>)
 800418a:	4e11      	ldr	r6, [pc, #68]	; (80041d0 <TIM_OC2_SetConfig+0x6c>)
 800418c:	42b0      	cmp	r0, r6
 800418e:	bf18      	it	ne
 8004190:	42a0      	cmpne	r0, r4
 8004192:	bf0c      	ite	eq
 8004194:	2401      	moveq	r4, #1
 8004196:	2400      	movne	r4, #0
 8004198:	d106      	bne.n	80041a8 <TIM_OC2_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC2NP;
 800419a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800419e:	68ce      	ldr	r6, [r1, #12]
 80041a0:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80041a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041a8:	b13c      	cbz	r4, 80041ba <TIM_OC2_SetConfig+0x56>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041aa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041ae:	694c      	ldr	r4, [r1, #20]
 80041b0:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041b4:	698c      	ldr	r4, [r1, #24]
 80041b6:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 80041ba:	6042      	str	r2, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80041bc:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80041be:	684a      	ldr	r2, [r1, #4]
 80041c0:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80041c2:	6203      	str	r3, [r0, #32]
}
 80041c4:	bc70      	pop	{r4, r5, r6}
 80041c6:	4770      	bx	lr
 80041c8:	feff8cff 	.word	0xfeff8cff
 80041cc:	40010000 	.word	0x40010000
 80041d0:	40010400 	.word	0x40010400

080041d4 <HAL_TIM_PWM_ConfigChannel>:
{
 80041d4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80041d6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80041da:	2b01      	cmp	r3, #1
 80041dc:	f000 8095 	beq.w	800430a <HAL_TIM_PWM_ConfigChannel+0x136>
 80041e0:	460d      	mov	r5, r1
 80041e2:	4604      	mov	r4, r0
 80041e4:	2301      	movs	r3, #1
 80041e6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80041ea:	2a14      	cmp	r2, #20
 80041ec:	f200 808b 	bhi.w	8004306 <HAL_TIM_PWM_ConfigChannel+0x132>
 80041f0:	e8df f002 	tbb	[pc, r2]
 80041f4:	8989890b 	.word	0x8989890b
 80041f8:	89898922 	.word	0x89898922
 80041fc:	89898937 	.word	0x89898937
 8004200:	8989894b 	.word	0x8989894b
 8004204:	89898960 	.word	0x89898960
 8004208:	74          	.byte	0x74
 8004209:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800420a:	6800      	ldr	r0, [r0, #0]
 800420c:	f7ff fdac 	bl	8003d68 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004210:	6822      	ldr	r2, [r4, #0]
 8004212:	6993      	ldr	r3, [r2, #24]
 8004214:	f043 0308 	orr.w	r3, r3, #8
 8004218:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800421a:	6822      	ldr	r2, [r4, #0]
 800421c:	6993      	ldr	r3, [r2, #24]
 800421e:	f023 0304 	bic.w	r3, r3, #4
 8004222:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004224:	6822      	ldr	r2, [r4, #0]
 8004226:	6993      	ldr	r3, [r2, #24]
 8004228:	6929      	ldr	r1, [r5, #16]
 800422a:	430b      	orrs	r3, r1
 800422c:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800422e:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8004230:	2300      	movs	r3, #0
 8004232:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004236:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004238:	6800      	ldr	r0, [r0, #0]
 800423a:	f7ff ff93 	bl	8004164 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800423e:	6822      	ldr	r2, [r4, #0]
 8004240:	6993      	ldr	r3, [r2, #24]
 8004242:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004246:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004248:	6822      	ldr	r2, [r4, #0]
 800424a:	6993      	ldr	r3, [r2, #24]
 800424c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004250:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004252:	6822      	ldr	r2, [r4, #0]
 8004254:	6993      	ldr	r3, [r2, #24]
 8004256:	6929      	ldr	r1, [r5, #16]
 8004258:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800425c:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800425e:	2000      	movs	r0, #0
      break;
 8004260:	e7e6      	b.n	8004230 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004262:	6800      	ldr	r0, [r0, #0]
 8004264:	f7ff fdb4 	bl	8003dd0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004268:	6822      	ldr	r2, [r4, #0]
 800426a:	69d3      	ldr	r3, [r2, #28]
 800426c:	f043 0308 	orr.w	r3, r3, #8
 8004270:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004272:	6822      	ldr	r2, [r4, #0]
 8004274:	69d3      	ldr	r3, [r2, #28]
 8004276:	f023 0304 	bic.w	r3, r3, #4
 800427a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800427c:	6822      	ldr	r2, [r4, #0]
 800427e:	69d3      	ldr	r3, [r2, #28]
 8004280:	6929      	ldr	r1, [r5, #16]
 8004282:	430b      	orrs	r3, r1
 8004284:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004286:	2000      	movs	r0, #0
      break;
 8004288:	e7d2      	b.n	8004230 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800428a:	6800      	ldr	r0, [r0, #0]
 800428c:	f7ff fdd8 	bl	8003e40 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004290:	6822      	ldr	r2, [r4, #0]
 8004292:	69d3      	ldr	r3, [r2, #28]
 8004294:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004298:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800429a:	6822      	ldr	r2, [r4, #0]
 800429c:	69d3      	ldr	r3, [r2, #28]
 800429e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042a2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042a4:	6822      	ldr	r2, [r4, #0]
 80042a6:	69d3      	ldr	r3, [r2, #28]
 80042a8:	6929      	ldr	r1, [r5, #16]
 80042aa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80042ae:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80042b0:	2000      	movs	r0, #0
      break;
 80042b2:	e7bd      	b.n	8004230 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80042b4:	6800      	ldr	r0, [r0, #0]
 80042b6:	f7ff fded 	bl	8003e94 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80042ba:	6822      	ldr	r2, [r4, #0]
 80042bc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80042be:	f043 0308 	orr.w	r3, r3, #8
 80042c2:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80042c4:	6822      	ldr	r2, [r4, #0]
 80042c6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80042c8:	f023 0304 	bic.w	r3, r3, #4
 80042cc:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80042ce:	6822      	ldr	r2, [r4, #0]
 80042d0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80042d2:	6929      	ldr	r1, [r5, #16]
 80042d4:	430b      	orrs	r3, r1
 80042d6:	6553      	str	r3, [r2, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 80042d8:	2000      	movs	r0, #0
      break;
 80042da:	e7a9      	b.n	8004230 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80042dc:	6800      	ldr	r0, [r0, #0]
 80042de:	f7ff fe03 	bl	8003ee8 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80042e2:	6822      	ldr	r2, [r4, #0]
 80042e4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80042e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80042ea:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80042ec:	6822      	ldr	r2, [r4, #0]
 80042ee:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80042f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042f4:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80042f6:	6822      	ldr	r2, [r4, #0]
 80042f8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80042fa:	6929      	ldr	r1, [r5, #16]
 80042fc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004300:	6553      	str	r3, [r2, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8004302:	2000      	movs	r0, #0
      break;
 8004304:	e794      	b.n	8004230 <HAL_TIM_PWM_ConfigChannel+0x5c>
      status = HAL_ERROR;
 8004306:	2001      	movs	r0, #1
 8004308:	e792      	b.n	8004230 <HAL_TIM_PWM_ConfigChannel+0x5c>
  __HAL_LOCK(htim);
 800430a:	2002      	movs	r0, #2
 800430c:	e793      	b.n	8004236 <HAL_TIM_PWM_ConfigChannel+0x62>

0800430e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800430e:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004310:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004312:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004316:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800431a:	430b      	orrs	r3, r1
 800431c:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800431e:	6083      	str	r3, [r0, #8]
}
 8004320:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004324:	4770      	bx	lr
	...

08004328 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004328:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800432c:	2b01      	cmp	r3, #1
 800432e:	d071      	beq.n	8004414 <HAL_TIM_ConfigClockSource+0xec>
{
 8004330:	b510      	push	{r4, lr}
 8004332:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004334:	2301      	movs	r3, #1
 8004336:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800433a:	2302      	movs	r3, #2
 800433c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004340:	6802      	ldr	r2, [r0, #0]
 8004342:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004344:	4b34      	ldr	r3, [pc, #208]	; (8004418 <HAL_TIM_ConfigClockSource+0xf0>)
 8004346:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8004348:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800434a:	680b      	ldr	r3, [r1, #0]
 800434c:	2b40      	cmp	r3, #64	; 0x40
 800434e:	d056      	beq.n	80043fe <HAL_TIM_ConfigClockSource+0xd6>
 8004350:	d911      	bls.n	8004376 <HAL_TIM_ConfigClockSource+0x4e>
 8004352:	2b70      	cmp	r3, #112	; 0x70
 8004354:	d03b      	beq.n	80043ce <HAL_TIM_ConfigClockSource+0xa6>
 8004356:	d81f      	bhi.n	8004398 <HAL_TIM_ConfigClockSource+0x70>
 8004358:	2b50      	cmp	r3, #80	; 0x50
 800435a:	d045      	beq.n	80043e8 <HAL_TIM_ConfigClockSource+0xc0>
 800435c:	2b60      	cmp	r3, #96	; 0x60
 800435e:	d119      	bne.n	8004394 <HAL_TIM_ConfigClockSource+0x6c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004360:	68ca      	ldr	r2, [r1, #12]
 8004362:	6849      	ldr	r1, [r1, #4]
 8004364:	6820      	ldr	r0, [r4, #0]
 8004366:	f7ff fdfc 	bl	8003f62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800436a:	2160      	movs	r1, #96	; 0x60
 800436c:	6820      	ldr	r0, [r4, #0]
 800436e:	f7ff fe0c 	bl	8003f8a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004372:	2000      	movs	r0, #0
      break;
 8004374:	e024      	b.n	80043c0 <HAL_TIM_ConfigClockSource+0x98>
  switch (sClockSourceConfig->ClockSource)
 8004376:	2b10      	cmp	r3, #16
 8004378:	d004      	beq.n	8004384 <HAL_TIM_ConfigClockSource+0x5c>
 800437a:	d909      	bls.n	8004390 <HAL_TIM_ConfigClockSource+0x68>
 800437c:	2b20      	cmp	r3, #32
 800437e:	d001      	beq.n	8004384 <HAL_TIM_ConfigClockSource+0x5c>
 8004380:	2b30      	cmp	r3, #48	; 0x30
 8004382:	d107      	bne.n	8004394 <HAL_TIM_ConfigClockSource+0x6c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004384:	4619      	mov	r1, r3
 8004386:	6820      	ldr	r0, [r4, #0]
 8004388:	f7ff fdff 	bl	8003f8a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800438c:	2000      	movs	r0, #0
      break;
 800438e:	e017      	b.n	80043c0 <HAL_TIM_ConfigClockSource+0x98>
  switch (sClockSourceConfig->ClockSource)
 8004390:	2b00      	cmp	r3, #0
 8004392:	d0f7      	beq.n	8004384 <HAL_TIM_ConfigClockSource+0x5c>
      status = HAL_ERROR;
 8004394:	2001      	movs	r0, #1
 8004396:	e013      	b.n	80043c0 <HAL_TIM_ConfigClockSource+0x98>
  switch (sClockSourceConfig->ClockSource)
 8004398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800439c:	d00f      	beq.n	80043be <HAL_TIM_ConfigClockSource+0x96>
 800439e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043a2:	d1f7      	bne.n	8004394 <HAL_TIM_ConfigClockSource+0x6c>
      TIM_ETR_SetConfig(htim->Instance,
 80043a4:	68cb      	ldr	r3, [r1, #12]
 80043a6:	684a      	ldr	r2, [r1, #4]
 80043a8:	6889      	ldr	r1, [r1, #8]
 80043aa:	6820      	ldr	r0, [r4, #0]
 80043ac:	f7ff ffaf 	bl	800430e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043b0:	6822      	ldr	r2, [r4, #0]
 80043b2:	6893      	ldr	r3, [r2, #8]
 80043b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043b8:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80043ba:	2000      	movs	r0, #0
      break;
 80043bc:	e000      	b.n	80043c0 <HAL_TIM_ConfigClockSource+0x98>
  HAL_StatusTypeDef status = HAL_OK;
 80043be:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80043c0:	2301      	movs	r3, #1
 80043c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80043c6:	2300      	movs	r3, #0
 80043c8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80043cc:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 80043ce:	68cb      	ldr	r3, [r1, #12]
 80043d0:	684a      	ldr	r2, [r1, #4]
 80043d2:	6889      	ldr	r1, [r1, #8]
 80043d4:	6820      	ldr	r0, [r4, #0]
 80043d6:	f7ff ff9a 	bl	800430e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80043da:	6822      	ldr	r2, [r4, #0]
 80043dc:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043de:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80043e2:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80043e4:	2000      	movs	r0, #0
      break;
 80043e6:	e7eb      	b.n	80043c0 <HAL_TIM_ConfigClockSource+0x98>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043e8:	68ca      	ldr	r2, [r1, #12]
 80043ea:	6849      	ldr	r1, [r1, #4]
 80043ec:	6820      	ldr	r0, [r4, #0]
 80043ee:	f7ff fda5 	bl	8003f3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043f2:	2150      	movs	r1, #80	; 0x50
 80043f4:	6820      	ldr	r0, [r4, #0]
 80043f6:	f7ff fdc8 	bl	8003f8a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80043fa:	2000      	movs	r0, #0
      break;
 80043fc:	e7e0      	b.n	80043c0 <HAL_TIM_ConfigClockSource+0x98>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043fe:	68ca      	ldr	r2, [r1, #12]
 8004400:	6849      	ldr	r1, [r1, #4]
 8004402:	6820      	ldr	r0, [r4, #0]
 8004404:	f7ff fd9a 	bl	8003f3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004408:	2140      	movs	r1, #64	; 0x40
 800440a:	6820      	ldr	r0, [r4, #0]
 800440c:	f7ff fdbd 	bl	8003f8a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004410:	2000      	movs	r0, #0
      break;
 8004412:	e7d5      	b.n	80043c0 <HAL_TIM_ConfigClockSource+0x98>
  __HAL_LOCK(htim);
 8004414:	2002      	movs	r0, #2
}
 8004416:	4770      	bx	lr
 8004418:	fffe0088 	.word	0xfffe0088

0800441c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800441c:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800441e:	f001 011f 	and.w	r1, r1, #31
 8004422:	2301      	movs	r3, #1
 8004424:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004428:	6a03      	ldr	r3, [r0, #32]
 800442a:	ea23 0304 	bic.w	r3, r3, r4
 800442e:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004430:	6a03      	ldr	r3, [r0, #32]
 8004432:	408a      	lsls	r2, r1
 8004434:	4313      	orrs	r3, r2
 8004436:	6203      	str	r3, [r0, #32]
}
 8004438:	f85d 4b04 	ldr.w	r4, [sp], #4
 800443c:	4770      	bx	lr
	...

08004440 <HAL_TIM_PWM_Start>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004440:	460a      	mov	r2, r1
 8004442:	2900      	cmp	r1, #0
 8004444:	d145      	bne.n	80044d2 <HAL_TIM_PWM_Start+0x92>
 8004446:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800444a:	b2db      	uxtb	r3, r3
 800444c:	f113 33ff 	adds.w	r3, r3, #4294967295
 8004450:	bf18      	it	ne
 8004452:	2301      	movne	r3, #1
 8004454:	2b00      	cmp	r3, #0
 8004456:	f040 8096 	bne.w	8004586 <HAL_TIM_PWM_Start+0x146>
{
 800445a:	b510      	push	{r4, lr}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800445c:	2a00      	cmp	r2, #0
 800445e:	d168      	bne.n	8004532 <HAL_TIM_PWM_Start+0xf2>
 8004460:	2302      	movs	r3, #2
 8004462:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8004466:	4611      	mov	r1, r2
 8004468:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800446a:	2201      	movs	r2, #1
 800446c:	6800      	ldr	r0, [r0, #0]
 800446e:	f7ff ffd5 	bl	800441c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004472:	6823      	ldr	r3, [r4, #0]
 8004474:	4946      	ldr	r1, [pc, #280]	; (8004590 <HAL_TIM_PWM_Start+0x150>)
 8004476:	4a47      	ldr	r2, [pc, #284]	; (8004594 <HAL_TIM_PWM_Start+0x154>)
 8004478:	4293      	cmp	r3, r2
 800447a:	bf18      	it	ne
 800447c:	428b      	cmpne	r3, r1
 800447e:	d103      	bne.n	8004488 <HAL_TIM_PWM_Start+0x48>
    __HAL_TIM_MOE_ENABLE(htim);
 8004480:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004482:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004486:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004488:	6823      	ldr	r3, [r4, #0]
 800448a:	4a41      	ldr	r2, [pc, #260]	; (8004590 <HAL_TIM_PWM_Start+0x150>)
 800448c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004490:	bf18      	it	ne
 8004492:	4293      	cmpne	r3, r2
 8004494:	d069      	beq.n	800456a <HAL_TIM_PWM_Start+0x12a>
 8004496:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800449a:	4293      	cmp	r3, r2
 800449c:	d065      	beq.n	800456a <HAL_TIM_PWM_Start+0x12a>
 800449e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d061      	beq.n	800456a <HAL_TIM_PWM_Start+0x12a>
 80044a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d05d      	beq.n	800456a <HAL_TIM_PWM_Start+0x12a>
 80044ae:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d059      	beq.n	800456a <HAL_TIM_PWM_Start+0x12a>
 80044b6:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d055      	beq.n	800456a <HAL_TIM_PWM_Start+0x12a>
 80044be:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d051      	beq.n	800456a <HAL_TIM_PWM_Start+0x12a>
    __HAL_TIM_ENABLE(htim);
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	f042 0201 	orr.w	r2, r2, #1
 80044cc:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80044ce:	2000      	movs	r0, #0
 80044d0:	e058      	b.n	8004584 <HAL_TIM_PWM_Start+0x144>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044d2:	2904      	cmp	r1, #4
 80044d4:	d00d      	beq.n	80044f2 <HAL_TIM_PWM_Start+0xb2>
 80044d6:	2908      	cmp	r1, #8
 80044d8:	d013      	beq.n	8004502 <HAL_TIM_PWM_Start+0xc2>
 80044da:	290c      	cmp	r1, #12
 80044dc:	d019      	beq.n	8004512 <HAL_TIM_PWM_Start+0xd2>
 80044de:	2910      	cmp	r1, #16
 80044e0:	d01f      	beq.n	8004522 <HAL_TIM_PWM_Start+0xe2>
 80044e2:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	f113 33ff 	adds.w	r3, r3, #4294967295
 80044ec:	bf18      	it	ne
 80044ee:	2301      	movne	r3, #1
 80044f0:	e7b0      	b.n	8004454 <HAL_TIM_PWM_Start+0x14>
 80044f2:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	f113 33ff 	adds.w	r3, r3, #4294967295
 80044fc:	bf18      	it	ne
 80044fe:	2301      	movne	r3, #1
 8004500:	e7a8      	b.n	8004454 <HAL_TIM_PWM_Start+0x14>
 8004502:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004506:	b2db      	uxtb	r3, r3
 8004508:	f113 33ff 	adds.w	r3, r3, #4294967295
 800450c:	bf18      	it	ne
 800450e:	2301      	movne	r3, #1
 8004510:	e7a0      	b.n	8004454 <HAL_TIM_PWM_Start+0x14>
 8004512:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004516:	b2db      	uxtb	r3, r3
 8004518:	f113 33ff 	adds.w	r3, r3, #4294967295
 800451c:	bf18      	it	ne
 800451e:	2301      	movne	r3, #1
 8004520:	e798      	b.n	8004454 <HAL_TIM_PWM_Start+0x14>
 8004522:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8004526:	b2db      	uxtb	r3, r3
 8004528:	f113 33ff 	adds.w	r3, r3, #4294967295
 800452c:	bf18      	it	ne
 800452e:	2301      	movne	r3, #1
 8004530:	e790      	b.n	8004454 <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004532:	2a04      	cmp	r2, #4
 8004534:	d009      	beq.n	800454a <HAL_TIM_PWM_Start+0x10a>
 8004536:	2a08      	cmp	r2, #8
 8004538:	d00b      	beq.n	8004552 <HAL_TIM_PWM_Start+0x112>
 800453a:	2a0c      	cmp	r2, #12
 800453c:	d00d      	beq.n	800455a <HAL_TIM_PWM_Start+0x11a>
 800453e:	2a10      	cmp	r2, #16
 8004540:	d00f      	beq.n	8004562 <HAL_TIM_PWM_Start+0x122>
 8004542:	2302      	movs	r3, #2
 8004544:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8004548:	e78d      	b.n	8004466 <HAL_TIM_PWM_Start+0x26>
 800454a:	2302      	movs	r3, #2
 800454c:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8004550:	e789      	b.n	8004466 <HAL_TIM_PWM_Start+0x26>
 8004552:	2302      	movs	r3, #2
 8004554:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8004558:	e785      	b.n	8004466 <HAL_TIM_PWM_Start+0x26>
 800455a:	2302      	movs	r3, #2
 800455c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8004560:	e781      	b.n	8004466 <HAL_TIM_PWM_Start+0x26>
 8004562:	2302      	movs	r3, #2
 8004564:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8004568:	e77d      	b.n	8004466 <HAL_TIM_PWM_Start+0x26>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800456a:	6899      	ldr	r1, [r3, #8]
 800456c:	4a0a      	ldr	r2, [pc, #40]	; (8004598 <HAL_TIM_PWM_Start+0x158>)
 800456e:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004570:	2a06      	cmp	r2, #6
 8004572:	bf18      	it	ne
 8004574:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 8004578:	d007      	beq.n	800458a <HAL_TIM_PWM_Start+0x14a>
      __HAL_TIM_ENABLE(htim);
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	f042 0201 	orr.w	r2, r2, #1
 8004580:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004582:	2000      	movs	r0, #0
}
 8004584:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004586:	2001      	movs	r0, #1
}
 8004588:	4770      	bx	lr
  return HAL_OK;
 800458a:	2000      	movs	r0, #0
 800458c:	e7fa      	b.n	8004584 <HAL_TIM_PWM_Start+0x144>
 800458e:	bf00      	nop
 8004590:	40010000 	.word	0x40010000
 8004594:	40010400 	.word	0x40010400
 8004598:	00010007 	.word	0x00010007

0800459c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800459c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d045      	beq.n	8004630 <HAL_TIMEx_MasterConfigSynchronization+0x94>
{
 80045a4:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 80045a6:	2301      	movs	r3, #1
 80045a8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ac:	2302      	movs	r3, #2
 80045ae:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045b2:	6803      	ldr	r3, [r0, #0]
 80045b4:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045b6:	689d      	ldr	r5, [r3, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80045b8:	4e1e      	ldr	r6, [pc, #120]	; (8004634 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 80045ba:	4c1f      	ldr	r4, [pc, #124]	; (8004638 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 80045bc:	42a3      	cmp	r3, r4
 80045be:	bf18      	it	ne
 80045c0:	42b3      	cmpne	r3, r6
 80045c2:	d103      	bne.n	80045cc <HAL_TIMEx_MasterConfigSynchronization+0x30>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80045c4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80045c8:	684c      	ldr	r4, [r1, #4]
 80045ca:	4322      	orrs	r2, r4
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045cc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045d0:	680c      	ldr	r4, [r1, #0]
 80045d2:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045d6:	6803      	ldr	r3, [r0, #0]
 80045d8:	4a16      	ldr	r2, [pc, #88]	; (8004634 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 80045da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045de:	bf18      	it	ne
 80045e0:	4293      	cmpne	r3, r2
 80045e2:	d017      	beq.n	8004614 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 80045e4:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d013      	beq.n	8004614 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 80045ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d00f      	beq.n	8004614 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 80045f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d00b      	beq.n	8004614 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 80045fc:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004600:	4293      	cmp	r3, r2
 8004602:	d007      	beq.n	8004614 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8004604:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8004608:	4293      	cmp	r3, r2
 800460a:	d003      	beq.n	8004614 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800460c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004610:	4293      	cmp	r3, r2
 8004612:	d104      	bne.n	800461e <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004614:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004618:	688a      	ldr	r2, [r1, #8]
 800461a:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800461c:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800461e:	2301      	movs	r3, #1
 8004620:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004624:	2300      	movs	r3, #0
 8004626:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800462a:	4618      	mov	r0, r3
}
 800462c:	bc70      	pop	{r4, r5, r6}
 800462e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004630:	2002      	movs	r0, #2
}
 8004632:	4770      	bx	lr
 8004634:	40010000 	.word	0x40010000
 8004638:	40010400 	.word	0x40010400

0800463c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800463c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800463e:	2300      	movs	r3, #0
 8004640:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004642:	9b01      	ldr	r3, [sp, #4]
 8004644:	3301      	adds	r3, #1
 8004646:	9301      	str	r3, [sp, #4]
 8004648:	4a0e      	ldr	r2, [pc, #56]	; (8004684 <USB_CoreReset+0x48>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d814      	bhi.n	8004678 <USB_CoreReset+0x3c>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800464e:	6903      	ldr	r3, [r0, #16]
 8004650:	2b00      	cmp	r3, #0
 8004652:	daf6      	bge.n	8004642 <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 8004654:	2300      	movs	r3, #0
 8004656:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004658:	6903      	ldr	r3, [r0, #16]
 800465a:	f043 0301 	orr.w	r3, r3, #1
 800465e:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8004660:	9b01      	ldr	r3, [sp, #4]
 8004662:	3301      	adds	r3, #1
 8004664:	9301      	str	r3, [sp, #4]
 8004666:	4a07      	ldr	r2, [pc, #28]	; (8004684 <USB_CoreReset+0x48>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d808      	bhi.n	800467e <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800466c:	6903      	ldr	r3, [r0, #16]
 800466e:	f013 0f01 	tst.w	r3, #1
 8004672:	d1f5      	bne.n	8004660 <USB_CoreReset+0x24>

  return HAL_OK;
 8004674:	2000      	movs	r0, #0
 8004676:	e000      	b.n	800467a <USB_CoreReset+0x3e>
      return HAL_TIMEOUT;
 8004678:	2003      	movs	r0, #3
}
 800467a:	b002      	add	sp, #8
 800467c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800467e:	2003      	movs	r0, #3
 8004680:	e7fb      	b.n	800467a <USB_CoreReset+0x3e>
 8004682:	bf00      	nop
 8004684:	00030d40 	.word	0x00030d40

08004688 <USB_CoreInit>:
{
 8004688:	b084      	sub	sp, #16
 800468a:	b510      	push	{r4, lr}
 800468c:	4604      	mov	r4, r0
 800468e:	a803      	add	r0, sp, #12
 8004690:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004694:	9b08      	ldr	r3, [sp, #32]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d11d      	bne.n	80046d6 <USB_CoreInit+0x4e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800469a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800469c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046a0:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80046a2:	68e2      	ldr	r2, [r4, #12]
 80046a4:	4b16      	ldr	r3, [pc, #88]	; (8004700 <USB_CoreInit+0x78>)
 80046a6:	4013      	ands	r3, r2
 80046a8:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80046aa:	68e3      	ldr	r3, [r4, #12]
 80046ac:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80046b0:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 80046b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d009      	beq.n	80046cc <USB_CoreInit+0x44>
    ret = USB_CoreReset(USBx);
 80046b8:	4620      	mov	r0, r4
 80046ba:	f7ff ffbf 	bl	800463c <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 80046be:	9b06      	ldr	r3, [sp, #24]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d014      	beq.n	80046ee <USB_CoreInit+0x66>
}
 80046c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046c8:	b004      	add	sp, #16
 80046ca:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80046cc:	68e3      	ldr	r3, [r4, #12]
 80046ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046d2:	60e3      	str	r3, [r4, #12]
 80046d4:	e7f0      	b.n	80046b8 <USB_CoreInit+0x30>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80046d6:	68e3      	ldr	r3, [r4, #12]
 80046d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046dc:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 80046de:	4620      	mov	r0, r4
 80046e0:	f7ff ffac 	bl	800463c <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80046e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80046e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046ea:	63a3      	str	r3, [r4, #56]	; 0x38
 80046ec:	e7e7      	b.n	80046be <USB_CoreInit+0x36>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80046ee:	68a3      	ldr	r3, [r4, #8]
 80046f0:	f043 0306 	orr.w	r3, r3, #6
 80046f4:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80046f6:	68a3      	ldr	r3, [r4, #8]
 80046f8:	f043 0320 	orr.w	r3, r3, #32
 80046fc:	60a3      	str	r3, [r4, #8]
 80046fe:	e7e1      	b.n	80046c4 <USB_CoreInit+0x3c>
 8004700:	ffbdffbf 	.word	0xffbdffbf

08004704 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8004704:	2a02      	cmp	r2, #2
 8004706:	d00a      	beq.n	800471e <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004708:	2109      	movs	r1, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800470a:	68c2      	ldr	r2, [r0, #12]
 800470c:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8004710:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004712:	68c3      	ldr	r3, [r0, #12]
 8004714:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8004718:	60c3      	str	r3, [r0, #12]
}
 800471a:	2000      	movs	r0, #0
 800471c:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800471e:	4b27      	ldr	r3, [pc, #156]	; (80047bc <USB_SetTurnaroundTime+0xb8>)
 8004720:	440b      	add	r3, r1
 8004722:	4a27      	ldr	r2, [pc, #156]	; (80047c0 <USB_SetTurnaroundTime+0xbc>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d939      	bls.n	800479c <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004728:	4b26      	ldr	r3, [pc, #152]	; (80047c4 <USB_SetTurnaroundTime+0xc0>)
 800472a:	440b      	add	r3, r1
 800472c:	4a26      	ldr	r2, [pc, #152]	; (80047c8 <USB_SetTurnaroundTime+0xc4>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d936      	bls.n	80047a0 <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004732:	4b26      	ldr	r3, [pc, #152]	; (80047cc <USB_SetTurnaroundTime+0xc8>)
 8004734:	440b      	add	r3, r1
 8004736:	4a26      	ldr	r2, [pc, #152]	; (80047d0 <USB_SetTurnaroundTime+0xcc>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d933      	bls.n	80047a4 <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800473c:	4b25      	ldr	r3, [pc, #148]	; (80047d4 <USB_SetTurnaroundTime+0xd0>)
 800473e:	440b      	add	r3, r1
 8004740:	f502 32c3 	add.w	r2, r2, #99840	; 0x18600
 8004744:	32a0      	adds	r2, #160	; 0xa0
 8004746:	4293      	cmp	r3, r2
 8004748:	d92e      	bls.n	80047a8 <USB_SetTurnaroundTime+0xa4>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800474a:	4b23      	ldr	r3, [pc, #140]	; (80047d8 <USB_SetTurnaroundTime+0xd4>)
 800474c:	440b      	add	r3, r1
 800474e:	4a23      	ldr	r2, [pc, #140]	; (80047dc <USB_SetTurnaroundTime+0xd8>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d92b      	bls.n	80047ac <USB_SetTurnaroundTime+0xa8>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004754:	4b22      	ldr	r3, [pc, #136]	; (80047e0 <USB_SetTurnaroundTime+0xdc>)
 8004756:	440b      	add	r3, r1
 8004758:	f502 2292 	add.w	r2, r2, #299008	; 0x49000
 800475c:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 8004760:	4293      	cmp	r3, r2
 8004762:	d925      	bls.n	80047b0 <USB_SetTurnaroundTime+0xac>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004764:	4b1f      	ldr	r3, [pc, #124]	; (80047e4 <USB_SetTurnaroundTime+0xe0>)
 8004766:	440b      	add	r3, r1
 8004768:	f502 22c3 	add.w	r2, r2, #399360	; 0x61800
 800476c:	f502 7220 	add.w	r2, r2, #640	; 0x280
 8004770:	4293      	cmp	r3, r2
 8004772:	d91f      	bls.n	80047b4 <USB_SetTurnaroundTime+0xb0>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004774:	4b1c      	ldr	r3, [pc, #112]	; (80047e8 <USB_SetTurnaroundTime+0xe4>)
 8004776:	440b      	add	r3, r1
 8004778:	f502 12b7 	add.w	r2, r2, #1499136	; 0x16e000
 800477c:	f502 7258 	add.w	r2, r2, #864	; 0x360
 8004780:	4293      	cmp	r3, r2
 8004782:	d919      	bls.n	80047b8 <USB_SetTurnaroundTime+0xb4>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004784:	4b19      	ldr	r3, [pc, #100]	; (80047ec <USB_SetTurnaroundTime+0xe8>)
 8004786:	440b      	add	r3, r1
 8004788:	f502 2212 	add.w	r2, r2, #598016	; 0x92000
 800478c:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 8004790:	4293      	cmp	r3, r2
 8004792:	d901      	bls.n	8004798 <USB_SetTurnaroundTime+0x94>
      UsbTrd = 0x6U;
 8004794:	2106      	movs	r1, #6
 8004796:	e7b8      	b.n	800470a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x7U;
 8004798:	2107      	movs	r1, #7
 800479a:	e7b6      	b.n	800470a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 800479c:	210f      	movs	r1, #15
 800479e:	e7b4      	b.n	800470a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 80047a0:	210e      	movs	r1, #14
 80047a2:	e7b2      	b.n	800470a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 80047a4:	210d      	movs	r1, #13
 80047a6:	e7b0      	b.n	800470a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 80047a8:	210c      	movs	r1, #12
 80047aa:	e7ae      	b.n	800470a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 80047ac:	210b      	movs	r1, #11
 80047ae:	e7ac      	b.n	800470a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 80047b0:	210a      	movs	r1, #10
 80047b2:	e7aa      	b.n	800470a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 80047b4:	2109      	movs	r1, #9
 80047b6:	e7a8      	b.n	800470a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 80047b8:	2108      	movs	r1, #8
 80047ba:	e7a6      	b.n	800470a <USB_SetTurnaroundTime+0x6>
 80047bc:	ff275340 	.word	0xff275340
 80047c0:	000c34ff 	.word	0x000c34ff
 80047c4:	ff1b1e40 	.word	0xff1b1e40
 80047c8:	000f423f 	.word	0x000f423f
 80047cc:	ff0bdc00 	.word	0xff0bdc00
 80047d0:	00124f7f 	.word	0x00124f7f
 80047d4:	fef98c80 	.word	0xfef98c80
 80047d8:	fee5b660 	.word	0xfee5b660
 80047dc:	0016e35f 	.word	0x0016e35f
 80047e0:	feced300 	.word	0xfeced300
 80047e4:	feb35bc0 	.word	0xfeb35bc0
 80047e8:	fe91ca00 	.word	0xfe91ca00
 80047ec:	fe5954e0 	.word	0xfe5954e0

080047f0 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80047f0:	6883      	ldr	r3, [r0, #8]
 80047f2:	f043 0301 	orr.w	r3, r3, #1
 80047f6:	6083      	str	r3, [r0, #8]
}
 80047f8:	2000      	movs	r0, #0
 80047fa:	4770      	bx	lr

080047fc <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80047fc:	6883      	ldr	r3, [r0, #8]
 80047fe:	f023 0301 	bic.w	r3, r3, #1
 8004802:	6083      	str	r3, [r0, #8]
}
 8004804:	2000      	movs	r0, #0
 8004806:	4770      	bx	lr

08004808 <USB_FlushTxFifo>:
{
 8004808:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800480a:	2300      	movs	r3, #0
 800480c:	9301      	str	r3, [sp, #4]
    if (++count > 200000U)
 800480e:	9b01      	ldr	r3, [sp, #4]
 8004810:	3301      	adds	r3, #1
 8004812:	9301      	str	r3, [sp, #4]
 8004814:	4a0e      	ldr	r2, [pc, #56]	; (8004850 <USB_FlushTxFifo+0x48>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d814      	bhi.n	8004844 <USB_FlushTxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800481a:	6903      	ldr	r3, [r0, #16]
 800481c:	2b00      	cmp	r3, #0
 800481e:	daf6      	bge.n	800480e <USB_FlushTxFifo+0x6>
  count = 0U;
 8004820:	2300      	movs	r3, #0
 8004822:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004824:	0189      	lsls	r1, r1, #6
 8004826:	f041 0120 	orr.w	r1, r1, #32
 800482a:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 800482c:	9b01      	ldr	r3, [sp, #4]
 800482e:	3301      	adds	r3, #1
 8004830:	9301      	str	r3, [sp, #4]
 8004832:	4a07      	ldr	r2, [pc, #28]	; (8004850 <USB_FlushTxFifo+0x48>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d808      	bhi.n	800484a <USB_FlushTxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004838:	6903      	ldr	r3, [r0, #16]
 800483a:	f013 0f20 	tst.w	r3, #32
 800483e:	d1f5      	bne.n	800482c <USB_FlushTxFifo+0x24>
  return HAL_OK;
 8004840:	2000      	movs	r0, #0
 8004842:	e000      	b.n	8004846 <USB_FlushTxFifo+0x3e>
      return HAL_TIMEOUT;
 8004844:	2003      	movs	r0, #3
}
 8004846:	b002      	add	sp, #8
 8004848:	4770      	bx	lr
      return HAL_TIMEOUT;
 800484a:	2003      	movs	r0, #3
 800484c:	e7fb      	b.n	8004846 <USB_FlushTxFifo+0x3e>
 800484e:	bf00      	nop
 8004850:	00030d40 	.word	0x00030d40

08004854 <USB_FlushRxFifo>:
{
 8004854:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8004856:	2300      	movs	r3, #0
 8004858:	9301      	str	r3, [sp, #4]
    if (++count > 200000U)
 800485a:	9b01      	ldr	r3, [sp, #4]
 800485c:	3301      	adds	r3, #1
 800485e:	9301      	str	r3, [sp, #4]
 8004860:	4a0d      	ldr	r2, [pc, #52]	; (8004898 <USB_FlushRxFifo+0x44>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d812      	bhi.n	800488c <USB_FlushRxFifo+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004866:	6903      	ldr	r3, [r0, #16]
 8004868:	2b00      	cmp	r3, #0
 800486a:	daf6      	bge.n	800485a <USB_FlushRxFifo+0x6>
  count = 0U;
 800486c:	2300      	movs	r3, #0
 800486e:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004870:	2310      	movs	r3, #16
 8004872:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8004874:	9b01      	ldr	r3, [sp, #4]
 8004876:	3301      	adds	r3, #1
 8004878:	9301      	str	r3, [sp, #4]
 800487a:	4a07      	ldr	r2, [pc, #28]	; (8004898 <USB_FlushRxFifo+0x44>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d808      	bhi.n	8004892 <USB_FlushRxFifo+0x3e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004880:	6903      	ldr	r3, [r0, #16]
 8004882:	f013 0f10 	tst.w	r3, #16
 8004886:	d1f5      	bne.n	8004874 <USB_FlushRxFifo+0x20>
  return HAL_OK;
 8004888:	2000      	movs	r0, #0
 800488a:	e000      	b.n	800488e <USB_FlushRxFifo+0x3a>
      return HAL_TIMEOUT;
 800488c:	2003      	movs	r0, #3
}
 800488e:	b002      	add	sp, #8
 8004890:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004892:	2003      	movs	r0, #3
 8004894:	e7fb      	b.n	800488e <USB_FlushRxFifo+0x3a>
 8004896:	bf00      	nop
 8004898:	00030d40 	.word	0x00030d40

0800489c <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 800489c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80048a0:	4319      	orrs	r1, r3
 80048a2:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 80048a6:	2000      	movs	r0, #0
 80048a8:	4770      	bx	lr
	...

080048ac <USB_DevInit>:
{
 80048ac:	b084      	sub	sp, #16
 80048ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048b2:	4604      	mov	r4, r0
 80048b4:	a807      	add	r0, sp, #28
 80048b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ba:	4625      	mov	r5, r4
  for (i = 0U; i < 15U; i++)
 80048bc:	2300      	movs	r3, #0
 80048be:	e006      	b.n	80048ce <USB_DevInit+0x22>
    USBx->DIEPTXF[i] = 0U;
 80048c0:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80048c4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80048c8:	2100      	movs	r1, #0
 80048ca:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 80048cc:	3301      	adds	r3, #1
 80048ce:	2b0e      	cmp	r3, #14
 80048d0:	d9f6      	bls.n	80048c0 <USB_DevInit+0x14>
  if (cfg.vbus_sensing_enable == 0U)
 80048d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80048d4:	bb23      	cbnz	r3, 8004920 <USB_DevInit+0x74>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80048d6:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 80048da:	f043 0302 	orr.w	r3, r3, #2
 80048de:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80048e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80048e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80048e8:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80048ea:	6823      	ldr	r3, [r4, #0]
 80048ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048f0:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80048f2:	6823      	ldr	r3, [r4, #0]
 80048f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048f8:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 80048fa:	2300      	movs	r3, #0
 80048fc:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004900:	f504 6600 	add.w	r6, r4, #2048	; 0x800
 8004904:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8004908:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800490c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800490e:	2b01      	cmp	r3, #1
 8004910:	d110      	bne.n	8004934 <USB_DevInit+0x88>
    if (cfg.speed == USBD_HS_SPEED)
 8004912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004914:	b94b      	cbnz	r3, 800492a <USB_DevInit+0x7e>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004916:	2100      	movs	r1, #0
 8004918:	4620      	mov	r0, r4
 800491a:	f7ff ffbf 	bl	800489c <USB_SetDevSpeed>
 800491e:	e00d      	b.n	800493c <USB_DevInit+0x90>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004920:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004922:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004926:	63a3      	str	r3, [r4, #56]	; 0x38
 8004928:	e7e7      	b.n	80048fa <USB_DevInit+0x4e>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800492a:	2101      	movs	r1, #1
 800492c:	4620      	mov	r0, r4
 800492e:	f7ff ffb5 	bl	800489c <USB_SetDevSpeed>
 8004932:	e003      	b.n	800493c <USB_DevInit+0x90>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004934:	2103      	movs	r1, #3
 8004936:	4620      	mov	r0, r4
 8004938:	f7ff ffb0 	bl	800489c <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800493c:	2110      	movs	r1, #16
 800493e:	4620      	mov	r0, r4
 8004940:	f7ff ff62 	bl	8004808 <USB_FlushTxFifo>
 8004944:	4680      	mov	r8, r0
 8004946:	b108      	cbz	r0, 800494c <USB_DevInit+0xa0>
    ret = HAL_ERROR;
 8004948:	f04f 0801 	mov.w	r8, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800494c:	4620      	mov	r0, r4
 800494e:	f7ff ff81 	bl	8004854 <USB_FlushRxFifo>
 8004952:	b108      	cbz	r0, 8004958 <USB_DevInit+0xac>
    ret = HAL_ERROR;
 8004954:	f04f 0801 	mov.w	r8, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8004958:	2300      	movs	r3, #0
 800495a:	6133      	str	r3, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800495c:	6173      	str	r3, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800495e:	61f3      	str	r3, [r6, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004960:	e00a      	b.n	8004978 <USB_DevInit+0xcc>
      if (i == 0U)
 8004962:	b9c3      	cbnz	r3, 8004996 <USB_DevInit+0xea>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004964:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8004968:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800496c:	2200      	movs	r2, #0
 800496e:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004970:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 8004974:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004976:	3301      	adds	r3, #1
 8004978:	9907      	ldr	r1, [sp, #28]
 800497a:	4299      	cmp	r1, r3
 800497c:	d910      	bls.n	80049a0 <USB_DevInit+0xf4>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800497e:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8004982:	f502 6110 	add.w	r1, r2, #2304	; 0x900
 8004986:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 800498a:	2800      	cmp	r0, #0
 800498c:	dbe9      	blt.n	8004962 <USB_DevInit+0xb6>
      USBx_INEP(i)->DIEPCTL = 0U;
 800498e:	2000      	movs	r0, #0
 8004990:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 8004994:	e7ea      	b.n	800496c <USB_DevInit+0xc0>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004996:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800499a:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 800499e:	e7e5      	b.n	800496c <USB_DevInit+0xc0>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049a0:	2300      	movs	r3, #0
 80049a2:	e00a      	b.n	80049ba <USB_DevInit+0x10e>
      if (i == 0U)
 80049a4:	b1bb      	cbz	r3, 80049d6 <USB_DevInit+0x12a>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80049a6:	f04f 4790 	mov.w	r7, #1207959552	; 0x48000000
 80049aa:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80049ae:	2200      	movs	r2, #0
 80049b0:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80049b2:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 80049b6:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049b8:	3301      	adds	r3, #1
 80049ba:	4299      	cmp	r1, r3
 80049bc:	d910      	bls.n	80049e0 <USB_DevInit+0x134>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049be:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 80049c2:	f502 6030 	add.w	r0, r2, #2816	; 0xb00
 80049c6:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	; 0xb00
 80049ca:	2f00      	cmp	r7, #0
 80049cc:	dbea      	blt.n	80049a4 <USB_DevInit+0xf8>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80049ce:	2700      	movs	r7, #0
 80049d0:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
 80049d4:	e7eb      	b.n	80049ae <USB_DevInit+0x102>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80049d6:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
 80049da:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
 80049de:	e7e6      	b.n	80049ae <USB_DevInit+0x102>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80049e0:	6933      	ldr	r3, [r6, #16]
 80049e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049e6:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 80049e8:	2300      	movs	r3, #0
 80049ea:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80049ec:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 80049f0:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 80049f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049f4:	b91b      	cbnz	r3, 80049fe <USB_DevInit+0x152>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80049f6:	69a3      	ldr	r3, [r4, #24]
 80049f8:	f043 0310 	orr.w	r3, r3, #16
 80049fc:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80049fe:	69a2      	ldr	r2, [r4, #24]
 8004a00:	4b0a      	ldr	r3, [pc, #40]	; (8004a2c <USB_DevInit+0x180>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8004a06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a08:	b11b      	cbz	r3, 8004a12 <USB_DevInit+0x166>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004a0a:	69a3      	ldr	r3, [r4, #24]
 8004a0c:	f043 0308 	orr.w	r3, r3, #8
 8004a10:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8004a12:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d004      	beq.n	8004a22 <USB_DevInit+0x176>
}
 8004a18:	4640      	mov	r0, r8
 8004a1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a1e:	b004      	add	sp, #16
 8004a20:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004a22:	69a2      	ldr	r2, [r4, #24]
 8004a24:	4b02      	ldr	r3, [pc, #8]	; (8004a30 <USB_DevInit+0x184>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	61a3      	str	r3, [r4, #24]
 8004a2a:	e7f5      	b.n	8004a18 <USB_DevInit+0x16c>
 8004a2c:	803c3800 	.word	0x803c3800
 8004a30:	40000004 	.word	0x40000004

08004a34 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004a34:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004a38:	f013 0306 	ands.w	r3, r3, #6
 8004a3c:	d005      	beq.n	8004a4a <USB_GetDevSpeed+0x16>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004a3e:	2b06      	cmp	r3, #6
 8004a40:	bf18      	it	ne
 8004a42:	2b02      	cmpne	r3, #2
 8004a44:	d103      	bne.n	8004a4e <USB_GetDevSpeed+0x1a>
    speed = USBD_FS_SPEED;
 8004a46:	2002      	movs	r0, #2
 8004a48:	4770      	bx	lr
    speed = USBD_HS_SPEED;
 8004a4a:	2000      	movs	r0, #0
 8004a4c:	4770      	bx	lr
    speed = 0xFU;
 8004a4e:	200f      	movs	r0, #15
}
 8004a50:	4770      	bx	lr
	...

08004a54 <USB_ActivateEndpoint>:
{
 8004a54:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 8004a56:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8004a58:	784a      	ldrb	r2, [r1, #1]
 8004a5a:	2a01      	cmp	r2, #1
 8004a5c:	d020      	beq.n	8004aa0 <USB_ActivateEndpoint+0x4c>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004a5e:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8004a62:	f003 060f 	and.w	r6, r3, #15
 8004a66:	2401      	movs	r4, #1
 8004a68:	40b4      	lsls	r4, r6
 8004a6a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8004a6e:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004a72:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8004a76:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8004a7a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004a7e:	d10c      	bne.n	8004a9a <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a80:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8004a84:	688b      	ldr	r3, [r1, #8]
 8004a86:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004a8a:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a8c:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8004a90:	4313      	orrs	r3, r2
 8004a92:	4a13      	ldr	r2, [pc, #76]	; (8004ae0 <USB_ActivateEndpoint+0x8c>)
 8004a94:	431a      	orrs	r2, r3
 8004a96:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
}
 8004a9a:	2000      	movs	r0, #0
 8004a9c:	bc70      	pop	{r4, r5, r6}
 8004a9e:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004aa0:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
 8004aa4:	f003 060f 	and.w	r6, r3, #15
 8004aa8:	40b2      	lsls	r2, r6
 8004aaa:	b292      	uxth	r2, r2
 8004aac:	4322      	orrs	r2, r4
 8004aae:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004ab2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8004ab6:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8004aba:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8004abe:	d1ec      	bne.n	8004a9a <USB_ActivateEndpoint+0x46>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ac0:	f8d0 4900 	ldr.w	r4, [r0, #2304]	; 0x900
 8004ac4:	688a      	ldr	r2, [r1, #8]
 8004ac6:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004aca:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004acc:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004ad0:	ea42 5383 	orr.w	r3, r2, r3, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ad4:	4323      	orrs	r3, r4
 8004ad6:	4a02      	ldr	r2, [pc, #8]	; (8004ae0 <USB_ActivateEndpoint+0x8c>)
 8004ad8:	431a      	orrs	r2, r3
 8004ada:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
 8004ade:	e7dc      	b.n	8004a9a <USB_ActivateEndpoint+0x46>
 8004ae0:	10008000 	.word	0x10008000

08004ae4 <USB_DeactivateEndpoint>:
{
 8004ae4:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 8004ae6:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8004ae8:	784a      	ldrb	r2, [r1, #1]
 8004aea:	2a01      	cmp	r2, #1
 8004aec:	d024      	beq.n	8004b38 <USB_DeactivateEndpoint+0x54>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004aee:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8004af2:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8004af6:	2a00      	cmp	r2, #0
 8004af8:	db50      	blt.n	8004b9c <USB_DeactivateEndpoint+0xb8>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004afa:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 8004afe:	780a      	ldrb	r2, [r1, #0]
 8004b00:	f002 020f 	and.w	r2, r2, #15
 8004b04:	2401      	movs	r4, #1
 8004b06:	fa04 f202 	lsl.w	r2, r4, r2
 8004b0a:	ea25 4202 	bic.w	r2, r5, r2, lsl #16
 8004b0e:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004b12:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8004b16:	7809      	ldrb	r1, [r1, #0]
 8004b18:	f001 010f 	and.w	r1, r1, #15
 8004b1c:	408c      	lsls	r4, r1
 8004b1e:	ea22 4404 	bic.w	r4, r2, r4, lsl #16
 8004b22:	f8c0 481c 	str.w	r4, [r0, #2076]	; 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004b26:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 8004b2a:	4a23      	ldr	r2, [pc, #140]	; (8004bb8 <USB_DeactivateEndpoint+0xd4>)
 8004b2c:	400a      	ands	r2, r1
 8004b2e:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 8004b32:	2000      	movs	r0, #0
 8004b34:	bc30      	pop	{r4, r5}
 8004b36:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b38:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8004b3c:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8004b40:	2a00      	cmp	r2, #0
 8004b42:	db1e      	blt.n	8004b82 <USB_DeactivateEndpoint+0x9e>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b44:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 8004b48:	780a      	ldrb	r2, [r1, #0]
 8004b4a:	f002 020f 	and.w	r2, r2, #15
 8004b4e:	2401      	movs	r4, #1
 8004b50:	fa04 f202 	lsl.w	r2, r4, r2
 8004b54:	b292      	uxth	r2, r2
 8004b56:	ea25 0202 	bic.w	r2, r5, r2
 8004b5a:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b5e:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8004b62:	7809      	ldrb	r1, [r1, #0]
 8004b64:	f001 010f 	and.w	r1, r1, #15
 8004b68:	408c      	lsls	r4, r1
 8004b6a:	b2a4      	uxth	r4, r4
 8004b6c:	ea22 0404 	bic.w	r4, r2, r4
 8004b70:	f8c0 481c 	str.w	r4, [r0, #2076]	; 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004b74:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 8004b78:	4a10      	ldr	r2, [pc, #64]	; (8004bbc <USB_DeactivateEndpoint+0xd8>)
 8004b7a:	400a      	ands	r2, r1
 8004b7c:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8004b80:	e7d7      	b.n	8004b32 <USB_DeactivateEndpoint+0x4e>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004b82:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8004b86:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8004b8a:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004b8e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8004b92:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004b96:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8004b9a:	e7d3      	b.n	8004b44 <USB_DeactivateEndpoint+0x60>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004b9c:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8004ba0:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8004ba4:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004ba8:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8004bac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004bb0:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8004bb4:	e7a1      	b.n	8004afa <USB_DeactivateEndpoint+0x16>
 8004bb6:	bf00      	nop
 8004bb8:	eff37800 	.word	0xeff37800
 8004bbc:	ec337800 	.word	0xec337800

08004bc0 <USB_EP0StartXfer>:
{
 8004bc0:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 8004bc2:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8004bc4:	784c      	ldrb	r4, [r1, #1]
 8004bc6:	2c01      	cmp	r4, #1
 8004bc8:	d024      	beq.n	8004c14 <USB_EP0StartXfer+0x54>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004bca:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8004bce:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8004bd2:	691d      	ldr	r5, [r3, #16]
 8004bd4:	4c3e      	ldr	r4, [pc, #248]	; (8004cd0 <USB_EP0StartXfer+0x110>)
 8004bd6:	402c      	ands	r4, r5
 8004bd8:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004bda:	691d      	ldr	r5, [r3, #16]
 8004bdc:	4c3d      	ldr	r4, [pc, #244]	; (8004cd4 <USB_EP0StartXfer+0x114>)
 8004bde:	402c      	ands	r4, r5
 8004be0:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len > 0U)
 8004be2:	694c      	ldr	r4, [r1, #20]
 8004be4:	b10c      	cbz	r4, 8004bea <USB_EP0StartXfer+0x2a>
      ep->xfer_len = ep->maxpacket;
 8004be6:	688c      	ldr	r4, [r1, #8]
 8004be8:	614c      	str	r4, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004bea:	691c      	ldr	r4, [r3, #16]
 8004bec:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8004bf0:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004bf2:	691c      	ldr	r4, [r3, #16]
 8004bf4:	688d      	ldr	r5, [r1, #8]
 8004bf6:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8004bfa:	432c      	orrs	r4, r5
 8004bfc:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8004bfe:	2a01      	cmp	r2, #1
 8004c00:	d061      	beq.n	8004cc6 <USB_EP0StartXfer+0x106>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004c02:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8004c06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c0a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8004c0e:	2000      	movs	r0, #0
 8004c10:	bc70      	pop	{r4, r5, r6}
 8004c12:	4770      	bx	lr
    if (ep->xfer_len == 0U)
 8004c14:	694c      	ldr	r4, [r1, #20]
 8004c16:	bb5c      	cbnz	r4, 8004c70 <USB_EP0StartXfer+0xb0>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c18:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8004c1c:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8004c20:	4d2c      	ldr	r5, [pc, #176]	; (8004cd4 <USB_EP0StartXfer+0x114>)
 8004c22:	4035      	ands	r5, r6
 8004c24:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c28:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8004c2c:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8004c30:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c34:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8004c38:	4d25      	ldr	r5, [pc, #148]	; (8004cd0 <USB_EP0StartXfer+0x110>)
 8004c3a:	4035      	ands	r5, r6
 8004c3c:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 8004c40:	2a01      	cmp	r2, #1
 8004c42:	d031      	beq.n	8004ca8 <USB_EP0StartXfer+0xe8>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c44:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8004c48:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8004c4c:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8004c50:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 8004c54:	694b      	ldr	r3, [r1, #20]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d0d9      	beq.n	8004c0e <USB_EP0StartXfer+0x4e>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004c5a:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8004c5e:	7809      	ldrb	r1, [r1, #0]
 8004c60:	f001 040f 	and.w	r4, r1, #15
 8004c64:	2101      	movs	r1, #1
 8004c66:	40a1      	lsls	r1, r4
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
 8004c6e:	e7ce      	b.n	8004c0e <USB_EP0StartXfer+0x4e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c70:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8004c74:	f504 6410 	add.w	r4, r4, #2304	; 0x900
 8004c78:	6926      	ldr	r6, [r4, #16]
 8004c7a:	4d15      	ldr	r5, [pc, #84]	; (8004cd0 <USB_EP0StartXfer+0x110>)
 8004c7c:	4035      	ands	r5, r6
 8004c7e:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c80:	6926      	ldr	r6, [r4, #16]
 8004c82:	4d14      	ldr	r5, [pc, #80]	; (8004cd4 <USB_EP0StartXfer+0x114>)
 8004c84:	4035      	ands	r5, r6
 8004c86:	6125      	str	r5, [r4, #16]
      if (ep->xfer_len > ep->maxpacket)
 8004c88:	694e      	ldr	r6, [r1, #20]
 8004c8a:	688d      	ldr	r5, [r1, #8]
 8004c8c:	42ae      	cmp	r6, r5
 8004c8e:	d900      	bls.n	8004c92 <USB_EP0StartXfer+0xd2>
        ep->xfer_len = ep->maxpacket;
 8004c90:	614d      	str	r5, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c92:	6925      	ldr	r5, [r4, #16]
 8004c94:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8004c98:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004c9a:	6925      	ldr	r5, [r4, #16]
 8004c9c:	694e      	ldr	r6, [r1, #20]
 8004c9e:	f3c6 0612 	ubfx	r6, r6, #0, #19
 8004ca2:	4335      	orrs	r5, r6
 8004ca4:	6125      	str	r5, [r4, #16]
 8004ca6:	e7cb      	b.n	8004c40 <USB_EP0StartXfer+0x80>
      if ((uint32_t)ep->dma_addr != 0U)
 8004ca8:	690a      	ldr	r2, [r1, #16]
 8004caa:	b11a      	cbz	r2, 8004cb4 <USB_EP0StartXfer+0xf4>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004cac:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 8004cb0:	f8c1 2914 	str.w	r2, [r1, #2324]	; 0x914
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004cb4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8004cb8:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8004cbc:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8004cc0:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
 8004cc4:	e7a3      	b.n	8004c0e <USB_EP0StartXfer+0x4e>
      if ((uint32_t)ep->xfer_buff != 0U)
 8004cc6:	68ca      	ldr	r2, [r1, #12]
 8004cc8:	2a00      	cmp	r2, #0
 8004cca:	d09a      	beq.n	8004c02 <USB_EP0StartXfer+0x42>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004ccc:	615a      	str	r2, [r3, #20]
 8004cce:	e798      	b.n	8004c02 <USB_EP0StartXfer+0x42>
 8004cd0:	fff80000 	.word	0xfff80000
 8004cd4:	e007ffff 	.word	0xe007ffff

08004cd8 <USB_WritePacket>:
{
 8004cd8:	b470      	push	{r4, r5, r6}
 8004cda:	f89d 400c 	ldrb.w	r4, [sp, #12]
  if (dma == 0U)
 8004cde:	b964      	cbnz	r4, 8004cfa <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 8004ce0:	3303      	adds	r3, #3
 8004ce2:	089d      	lsrs	r5, r3, #2
    for (i = 0U; i < count32b; i++)
 8004ce4:	e007      	b.n	8004cf6 <USB_WritePacket+0x1e>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004ce6:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 8004cea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cee:	f851 6b04 	ldr.w	r6, [r1], #4
 8004cf2:	601e      	str	r6, [r3, #0]
    for (i = 0U; i < count32b; i++)
 8004cf4:	3401      	adds	r4, #1
 8004cf6:	42ac      	cmp	r4, r5
 8004cf8:	d3f5      	bcc.n	8004ce6 <USB_WritePacket+0xe>
}
 8004cfa:	2000      	movs	r0, #0
 8004cfc:	bc70      	pop	{r4, r5, r6}
 8004cfe:	4770      	bx	lr

08004d00 <USB_EPStartXfer>:
{
 8004d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d02:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 8004d04:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8004d06:	784c      	ldrb	r4, [r1, #1]
 8004d08:	2c01      	cmp	r4, #1
 8004d0a:	d029      	beq.n	8004d60 <USB_EPStartXfer+0x60>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d0c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8004d10:	f503 6430 	add.w	r4, r3, #2816	; 0xb00
 8004d14:	6926      	ldr	r6, [r4, #16]
 8004d16:	4d7d      	ldr	r5, [pc, #500]	; (8004f0c <USB_EPStartXfer+0x20c>)
 8004d18:	4035      	ands	r5, r6
 8004d1a:	6125      	str	r5, [r4, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004d1c:	6926      	ldr	r6, [r4, #16]
 8004d1e:	4d7c      	ldr	r5, [pc, #496]	; (8004f10 <USB_EPStartXfer+0x210>)
 8004d20:	4035      	ands	r5, r6
 8004d22:	6125      	str	r5, [r4, #16]
    if (ep->xfer_len == 0U)
 8004d24:	694d      	ldr	r5, [r1, #20]
 8004d26:	2d00      	cmp	r5, #0
 8004d28:	f040 80c1 	bne.w	8004eae <USB_EPStartXfer+0x1ae>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004d2c:	6925      	ldr	r5, [r4, #16]
 8004d2e:	688e      	ldr	r6, [r1, #8]
 8004d30:	f3c6 0612 	ubfx	r6, r6, #0, #19
 8004d34:	4335      	orrs	r5, r6
 8004d36:	6125      	str	r5, [r4, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d38:	6925      	ldr	r5, [r4, #16]
 8004d3a:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8004d3e:	6125      	str	r5, [r4, #16]
    if (dma == 1U)
 8004d40:	2a01      	cmp	r2, #1
 8004d42:	f000 80c9 	beq.w	8004ed8 <USB_EPStartXfer+0x1d8>
    if (ep->type == EP_TYPE_ISOC)
 8004d46:	78ca      	ldrb	r2, [r1, #3]
 8004d48:	2a01      	cmp	r2, #1
 8004d4a:	f000 80cb 	beq.w	8004ee4 <USB_EPStartXfer+0x1e4>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004d4e:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8004d52:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8004d56:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 8004d5a:	2000      	movs	r0, #0
 8004d5c:	b003      	add	sp, #12
 8004d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 8004d60:	694c      	ldr	r4, [r1, #20]
 8004d62:	bb74      	cbnz	r4, 8004dc2 <USB_EPStartXfer+0xc2>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d64:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8004d68:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8004d6c:	4d68      	ldr	r5, [pc, #416]	; (8004f10 <USB_EPStartXfer+0x210>)
 8004d6e:	4035      	ands	r5, r6
 8004d70:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d74:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8004d78:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8004d7c:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d80:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8004d84:	4d61      	ldr	r5, [pc, #388]	; (8004f0c <USB_EPStartXfer+0x20c>)
 8004d86:	4035      	ands	r5, r6
 8004d88:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 8004d8c:	2a01      	cmp	r2, #1
 8004d8e:	d04a      	beq.n	8004e26 <USB_EPStartXfer+0x126>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d90:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8004d94:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8004d98:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8004d9c:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8004da0:	78cc      	ldrb	r4, [r1, #3]
 8004da2:	2c01      	cmp	r4, #1
 8004da4:	d068      	beq.n	8004e78 <USB_EPStartXfer+0x178>
        if (ep->xfer_len > 0U)
 8004da6:	694b      	ldr	r3, [r1, #20]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d0d6      	beq.n	8004d5a <USB_EPStartXfer+0x5a>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004dac:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8004db0:	7809      	ldrb	r1, [r1, #0]
 8004db2:	f001 040f 	and.w	r4, r1, #15
 8004db6:	2101      	movs	r1, #1
 8004db8:	40a1      	lsls	r1, r4
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
 8004dc0:	e7cb      	b.n	8004d5a <USB_EPStartXfer+0x5a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004dc2:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8004dc6:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8004dca:	4d50      	ldr	r5, [pc, #320]	; (8004f0c <USB_EPStartXfer+0x20c>)
 8004dcc:	4035      	ands	r5, r6
 8004dce:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004dd2:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8004dd6:	4d4e      	ldr	r5, [pc, #312]	; (8004f10 <USB_EPStartXfer+0x210>)
 8004dd8:	4035      	ands	r5, r6
 8004dda:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004dde:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004de2:	694d      	ldr	r5, [r1, #20]
 8004de4:	688f      	ldr	r7, [r1, #8]
 8004de6:	443d      	add	r5, r7
 8004de8:	3d01      	subs	r5, #1
 8004dea:	fbb5 f5f7 	udiv	r5, r5, r7
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004dee:	4f49      	ldr	r7, [pc, #292]	; (8004f14 <USB_EPStartXfer+0x214>)
 8004df0:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
 8004df4:	4335      	orrs	r5, r6
 8004df6:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004dfa:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8004dfe:	694e      	ldr	r6, [r1, #20]
 8004e00:	f3c6 0612 	ubfx	r6, r6, #0, #19
 8004e04:	4335      	orrs	r5, r6
 8004e06:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e0a:	f504 6410 	add.w	r4, r4, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 8004e0e:	78cd      	ldrb	r5, [r1, #3]
 8004e10:	2d01      	cmp	r5, #1
 8004e12:	d1bb      	bne.n	8004d8c <USB_EPStartXfer+0x8c>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004e14:	6925      	ldr	r5, [r4, #16]
 8004e16:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 8004e1a:	6125      	str	r5, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004e1c:	6925      	ldr	r5, [r4, #16]
 8004e1e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004e22:	6125      	str	r5, [r4, #16]
 8004e24:	e7b2      	b.n	8004d8c <USB_EPStartXfer+0x8c>
      if ((uint32_t)ep->dma_addr != 0U)
 8004e26:	690a      	ldr	r2, [r1, #16]
 8004e28:	b11a      	cbz	r2, 8004e32 <USB_EPStartXfer+0x132>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004e2a:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8004e2e:	f8c4 2914 	str.w	r2, [r4, #2324]	; 0x914
      if (ep->type == EP_TYPE_ISOC)
 8004e32:	78ca      	ldrb	r2, [r1, #3]
 8004e34:	2a01      	cmp	r2, #1
 8004e36:	d008      	beq.n	8004e4a <USB_EPStartXfer+0x14a>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e38:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8004e3c:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8004e40:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8004e44:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8004e48:	e787      	b.n	8004d5a <USB_EPStartXfer+0x5a>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e4a:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8004e4e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004e52:	d108      	bne.n	8004e66 <USB_EPStartXfer+0x166>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e54:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 8004e58:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 8004e5c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004e60:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
 8004e64:	e7e8      	b.n	8004e38 <USB_EPStartXfer+0x138>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e66:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 8004e6a:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 8004e6e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004e72:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
 8004e76:	e7df      	b.n	8004e38 <USB_EPStartXfer+0x138>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e78:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8004e7c:	f414 7f80 	tst.w	r4, #256	; 0x100
 8004e80:	d10e      	bne.n	8004ea0 <USB_EPStartXfer+0x1a0>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e82:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8004e86:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 8004e8a:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
 8004e8e:	4614      	mov	r4, r2
 8004e90:	460b      	mov	r3, r1
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004e92:	68c9      	ldr	r1, [r1, #12]
 8004e94:	781a      	ldrb	r2, [r3, #0]
 8004e96:	8a9b      	ldrh	r3, [r3, #20]
 8004e98:	9400      	str	r4, [sp, #0]
 8004e9a:	f7ff ff1d 	bl	8004cd8 <USB_WritePacket>
 8004e9e:	e75c      	b.n	8004d5a <USB_EPStartXfer+0x5a>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004ea0:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8004ea4:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8004ea8:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
 8004eac:	e7ef      	b.n	8004e8e <USB_EPStartXfer+0x18e>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004eae:	688e      	ldr	r6, [r1, #8]
 8004eb0:	4435      	add	r5, r6
 8004eb2:	3d01      	subs	r5, #1
 8004eb4:	fbb5 f5f6 	udiv	r5, r5, r6
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004eb8:	6926      	ldr	r6, [r4, #16]
 8004eba:	4f16      	ldr	r7, [pc, #88]	; (8004f14 <USB_EPStartXfer+0x214>)
 8004ebc:	ea07 47c5 	and.w	r7, r7, r5, lsl #19
 8004ec0:	433e      	orrs	r6, r7
 8004ec2:	6126      	str	r6, [r4, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004ec4:	6927      	ldr	r7, [r4, #16]
 8004ec6:	688e      	ldr	r6, [r1, #8]
 8004ec8:	b2ad      	uxth	r5, r5
 8004eca:	fb06 f505 	mul.w	r5, r6, r5
 8004ece:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8004ed2:	433d      	orrs	r5, r7
 8004ed4:	6125      	str	r5, [r4, #16]
 8004ed6:	e733      	b.n	8004d40 <USB_EPStartXfer+0x40>
      if ((uint32_t)ep->xfer_buff != 0U)
 8004ed8:	68ca      	ldr	r2, [r1, #12]
 8004eda:	2a00      	cmp	r2, #0
 8004edc:	f43f af33 	beq.w	8004d46 <USB_EPStartXfer+0x46>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004ee0:	6162      	str	r2, [r4, #20]
 8004ee2:	e730      	b.n	8004d46 <USB_EPStartXfer+0x46>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ee4:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8004ee8:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004eec:	d106      	bne.n	8004efc <USB_EPStartXfer+0x1fc>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004eee:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8004ef2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004ef6:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8004efa:	e728      	b.n	8004d4e <USB_EPStartXfer+0x4e>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004efc:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8004f00:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004f04:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8004f08:	e721      	b.n	8004d4e <USB_EPStartXfer+0x4e>
 8004f0a:	bf00      	nop
 8004f0c:	fff80000 	.word	0xfff80000
 8004f10:	e007ffff 	.word	0xe007ffff
 8004f14:	1ff80000 	.word	0x1ff80000

08004f18 <USB_ReadPacket>:
{
 8004f18:	b470      	push	{r4, r5, r6}
 8004f1a:	b083      	sub	sp, #12
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f1c:	4606      	mov	r6, r0
  uint32_t count32b = (uint32_t)len >> 2U;
 8004f1e:	0895      	lsrs	r5, r2, #2
  uint16_t remaining_bytes = len % 4U;
 8004f20:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 8004f24:	2300      	movs	r3, #0
 8004f26:	e005      	b.n	8004f34 <USB_ReadPacket+0x1c>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004f28:	f506 5480 	add.w	r4, r6, #4096	; 0x1000
 8004f2c:	6824      	ldr	r4, [r4, #0]
 8004f2e:	f841 4b04 	str.w	r4, [r1], #4
  for (i = 0U; i < count32b; i++)
 8004f32:	3301      	adds	r3, #1
 8004f34:	42ab      	cmp	r3, r5
 8004f36:	d3f7      	bcc.n	8004f28 <USB_ReadPacket+0x10>
  if (remaining_bytes != 0U)
 8004f38:	b19a      	cbz	r2, 8004f62 <USB_ReadPacket+0x4a>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004f3a:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8004f3e:	6803      	ldr	r3, [r0, #0]
 8004f40:	9301      	str	r3, [sp, #4]
 8004f42:	4608      	mov	r0, r1
    i = 0U;
 8004f44:	2400      	movs	r4, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004f46:	b2e3      	uxtb	r3, r4
 8004f48:	00d9      	lsls	r1, r3, #3
 8004f4a:	9b01      	ldr	r3, [sp, #4]
 8004f4c:	40cb      	lsrs	r3, r1
 8004f4e:	f800 3b01 	strb.w	r3, [r0], #1
      i++;
 8004f52:	3401      	adds	r4, #1
      remaining_bytes--;
 8004f54:	3a01      	subs	r2, #1
 8004f56:	b292      	uxth	r2, r2
    } while (remaining_bytes != 0U);
 8004f58:	2a00      	cmp	r2, #0
 8004f5a:	d1f4      	bne.n	8004f46 <USB_ReadPacket+0x2e>
}
 8004f5c:	b003      	add	sp, #12
 8004f5e:	bc70      	pop	{r4, r5, r6}
 8004f60:	4770      	bx	lr
 8004f62:	4608      	mov	r0, r1
  return ((void *)pDest);
 8004f64:	e7fa      	b.n	8004f5c <USB_ReadPacket+0x44>

08004f66 <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8004f66:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8004f68:	784a      	ldrb	r2, [r1, #1]
 8004f6a:	2a01      	cmp	r2, #1
 8004f6c:	d014      	beq.n	8004f98 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004f6e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8004f72:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8004f76:	2a00      	cmp	r2, #0
 8004f78:	db06      	blt.n	8004f88 <USB_EPSetStall+0x22>
 8004f7a:	b12b      	cbz	r3, 8004f88 <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004f7c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8004f80:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f84:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004f88:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8004f8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f90:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8004f94:	2000      	movs	r0, #0
 8004f96:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004f98:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8004f9c:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8004fa0:	2a00      	cmp	r2, #0
 8004fa2:	db06      	blt.n	8004fb2 <USB_EPSetStall+0x4c>
 8004fa4:	b12b      	cbz	r3, 8004fb2 <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004fa6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8004faa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004fae:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004fb2:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8004fb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004fba:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8004fbe:	e7e9      	b.n	8004f94 <USB_EPSetStall+0x2e>

08004fc0 <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8004fc0:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8004fc2:	784a      	ldrb	r2, [r1, #1]
 8004fc4:	2a01      	cmp	r2, #1
 8004fc6:	d00e      	beq.n	8004fe6 <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004fc8:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8004fcc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8004fd0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004fd4:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004fd8:	78cb      	ldrb	r3, [r1, #3]
 8004fda:	3b02      	subs	r3, #2
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d915      	bls.n	800500e <USB_EPClearStall+0x4e>
}
 8004fe2:	2000      	movs	r0, #0
 8004fe4:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004fe6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8004fea:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8004fee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ff2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004ff6:	78cb      	ldrb	r3, [r1, #3]
 8004ff8:	3b02      	subs	r3, #2
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d8f0      	bhi.n	8004fe2 <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005000:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8005004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005008:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800500c:	e7e9      	b.n	8004fe2 <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800500e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8005012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005016:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800501a:	e7e2      	b.n	8004fe2 <USB_EPClearStall+0x22>

0800501c <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800501c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8005020:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005024:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005028:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800502c:	0109      	lsls	r1, r1, #4
 800502e:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8005032:	430b      	orrs	r3, r1
 8005034:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
}
 8005038:	2000      	movs	r0, #0
 800503a:	4770      	bx	lr

0800503c <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800503c:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8005040:	f023 0303 	bic.w	r3, r3, #3
 8005044:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005048:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800504c:	f023 0302 	bic.w	r3, r3, #2
 8005050:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8005054:	2000      	movs	r0, #0
 8005056:	4770      	bx	lr

08005058 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005058:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 800505c:	f023 0303 	bic.w	r3, r3, #3
 8005060:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005064:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8005068:	f043 0302 	orr.w	r3, r3, #2
 800506c:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8005070:	2000      	movs	r0, #0
 8005072:	4770      	bx	lr

08005074 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8005074:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8005076:	6980      	ldr	r0, [r0, #24]
}
 8005078:	4010      	ands	r0, r2
 800507a:	4770      	bx	lr

0800507c <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800507c:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8005080:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005084:	69c0      	ldr	r0, [r0, #28]
 8005086:	4018      	ands	r0, r3
}
 8005088:	0c00      	lsrs	r0, r0, #16
 800508a:	4770      	bx	lr

0800508c <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800508c:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8005090:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005094:	69c0      	ldr	r0, [r0, #28]
 8005096:	4018      	ands	r0, r3
}
 8005098:	b280      	uxth	r0, r0
 800509a:	4770      	bx	lr

0800509c <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800509c:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 80050a0:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80050a4:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80050a8:	6940      	ldr	r0, [r0, #20]
}
 80050aa:	4010      	ands	r0, r2
 80050ac:	4770      	bx	lr

080050ae <USB_ReadDevInEPInterrupt>:
{
 80050ae:	b410      	push	{r4}
  msk = USBx_DEVICE->DIEPMSK;
 80050b0:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 80050b4:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80050b8:	f001 020f 	and.w	r2, r1, #15
 80050bc:	40d3      	lsrs	r3, r2
 80050be:	01db      	lsls	r3, r3, #7
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	4323      	orrs	r3, r4
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80050c4:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 80050c8:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 80050cc:	6880      	ldr	r0, [r0, #8]
}
 80050ce:	4018      	ands	r0, r3
 80050d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050d4:	4770      	bx	lr

080050d6 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 80050d6:	6940      	ldr	r0, [r0, #20]
}
 80050d8:	f000 0001 	and.w	r0, r0, #1
 80050dc:	4770      	bx	lr

080050de <USB_SetCurrentMode>:
{
 80050de:	b538      	push	{r3, r4, r5, lr}
 80050e0:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80050e2:	68c3      	ldr	r3, [r0, #12]
 80050e4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80050e8:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80050ea:	2901      	cmp	r1, #1
 80050ec:	d013      	beq.n	8005116 <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 80050ee:	bb29      	cbnz	r1, 800513c <USB_SetCurrentMode+0x5e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80050f0:	68c3      	ldr	r3, [r0, #12]
 80050f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050f6:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 80050f8:	2400      	movs	r4, #0
      HAL_Delay(1U);
 80050fa:	2001      	movs	r0, #1
 80050fc:	f7fc f9de 	bl	80014bc <HAL_Delay>
      ms++;
 8005100:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005102:	4628      	mov	r0, r5
 8005104:	f7ff ffe7 	bl	80050d6 <USB_GetMode>
 8005108:	b108      	cbz	r0, 800510e <USB_SetCurrentMode+0x30>
 800510a:	2c31      	cmp	r4, #49	; 0x31
 800510c:	d9f5      	bls.n	80050fa <USB_SetCurrentMode+0x1c>
  if (ms == 50U)
 800510e:	2c32      	cmp	r4, #50	; 0x32
 8005110:	d012      	beq.n	8005138 <USB_SetCurrentMode+0x5a>
  return HAL_OK;
 8005112:	2000      	movs	r0, #0
}
 8005114:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005116:	68c3      	ldr	r3, [r0, #12]
 8005118:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800511c:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 800511e:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8005120:	2001      	movs	r0, #1
 8005122:	f7fc f9cb 	bl	80014bc <HAL_Delay>
      ms++;
 8005126:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005128:	4628      	mov	r0, r5
 800512a:	f7ff ffd4 	bl	80050d6 <USB_GetMode>
 800512e:	2801      	cmp	r0, #1
 8005130:	d0ed      	beq.n	800510e <USB_SetCurrentMode+0x30>
 8005132:	2c31      	cmp	r4, #49	; 0x31
 8005134:	d9f4      	bls.n	8005120 <USB_SetCurrentMode+0x42>
 8005136:	e7ea      	b.n	800510e <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 8005138:	2001      	movs	r0, #1
 800513a:	e7eb      	b.n	8005114 <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 800513c:	2001      	movs	r0, #1
 800513e:	e7e9      	b.n	8005114 <USB_SetCurrentMode+0x36>

08005140 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005140:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8005144:	4b05      	ldr	r3, [pc, #20]	; (800515c <USB_ActivateSetup+0x1c>)
 8005146:	4013      	ands	r3, r2
 8005148:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800514c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8005150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005154:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8005158:	2000      	movs	r0, #0
 800515a:	4770      	bx	lr
 800515c:	fffff800 	.word	0xfffff800

08005160 <USB_EP0_OutStart>:
{
 8005160:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005162:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005164:	4b15      	ldr	r3, [pc, #84]	; (80051bc <USB_EP0_OutStart+0x5c>)
 8005166:	429c      	cmp	r4, r3
 8005168:	d903      	bls.n	8005172 <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800516a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800516e:	2b00      	cmp	r3, #0
 8005170:	db16      	blt.n	80051a0 <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005172:	2400      	movs	r4, #0
 8005174:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005178:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 800517c:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8005180:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005184:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8005188:	f044 0418 	orr.w	r4, r4, #24
 800518c:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005190:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8005194:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 8005198:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  if (dma == 1U)
 800519c:	2901      	cmp	r1, #1
 800519e:	d003      	beq.n	80051a8 <USB_EP0_OutStart+0x48>
}
 80051a0:	2000      	movs	r0, #0
 80051a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051a6:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80051a8:	f8c0 2b14 	str.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80051ac:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80051b0:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80051b4:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 80051b8:	e7f2      	b.n	80051a0 <USB_EP0_OutStart+0x40>
 80051ba:	bf00      	nop
 80051bc:	4f54300a 	.word	0x4f54300a

080051c0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80051c0:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80051c2:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80051c6:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 80051ca:	b15b      	cbz	r3, 80051e4 <USBD_CDC_EP0_RxReady+0x24>
 80051cc:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80051d0:	28ff      	cmp	r0, #255	; 0xff
 80051d2:	d007      	beq.n	80051e4 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80051da:	4621      	mov	r1, r4
 80051dc:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 80051de:	23ff      	movs	r3, #255	; 0xff
 80051e0:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
}
 80051e4:	2000      	movs	r0, #0
 80051e6:	bd10      	pop	{r4, pc}

080051e8 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80051e8:	2343      	movs	r3, #67	; 0x43
 80051ea:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 80051ec:	4800      	ldr	r0, [pc, #0]	; (80051f0 <USBD_CDC_GetFSCfgDesc+0x8>)
 80051ee:	4770      	bx	lr
 80051f0:	20000040 	.word	0x20000040

080051f4 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80051f4:	2343      	movs	r3, #67	; 0x43
 80051f6:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 80051f8:	4800      	ldr	r0, [pc, #0]	; (80051fc <USBD_CDC_GetHSCfgDesc+0x8>)
 80051fa:	4770      	bx	lr
 80051fc:	20000084 	.word	0x20000084

08005200 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005200:	2343      	movs	r3, #67	; 0x43
 8005202:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 8005204:	4800      	ldr	r0, [pc, #0]	; (8005208 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8005206:	4770      	bx	lr
 8005208:	200000d4 	.word	0x200000d4

0800520c <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800520c:	230a      	movs	r3, #10
 800520e:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 8005210:	4800      	ldr	r0, [pc, #0]	; (8005214 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8005212:	4770      	bx	lr
 8005214:	200000c8 	.word	0x200000c8

08005218 <USBD_CDC_DataOut>:
{
 8005218:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800521a:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 800521e:	b175      	cbz	r5, 800523e <USBD_CDC_DataOut+0x26>
 8005220:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005222:	f002 fc18 	bl	8007a56 <USBD_LL_GetRxDataSize>
 8005226:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800522a:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8005234:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8005238:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800523a:	2000      	movs	r0, #0
}
 800523c:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800523e:	2003      	movs	r0, #3
 8005240:	e7fc      	b.n	800523c <USBD_CDC_DataOut+0x24>

08005242 <USBD_CDC_DataIn>:
{
 8005242:	b570      	push	{r4, r5, r6, lr}
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005244:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
  if (pdev->pClassData == NULL)
 8005248:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
 800524c:	b355      	cbz	r5, 80052a4 <USBD_CDC_DataIn+0x62>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800524e:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8005252:	0093      	lsls	r3, r2, #2
 8005254:	4403      	add	r3, r0
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	b96b      	cbnz	r3, 8005276 <USBD_CDC_DataIn+0x34>
    hcdc->TxState = 0U;
 800525a:	2400      	movs	r4, #0
 800525c:	f8c5 4214 	str.w	r4, [r5, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005260:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	460a      	mov	r2, r1
 8005268:	f505 7104 	add.w	r1, r5, #528	; 0x210
 800526c:	f8d5 0208 	ldr.w	r0, [r5, #520]	; 0x208
 8005270:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8005272:	4620      	mov	r0, r4
}
 8005274:	bd70      	pop	{r4, r5, r6, pc}
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005276:	ebc1 06c1 	rsb	r6, r1, r1, lsl #3
 800527a:	00b2      	lsls	r2, r6, #2
 800527c:	4414      	add	r4, r2
 800527e:	6c64      	ldr	r4, [r4, #68]	; 0x44
 8005280:	fbb3 f2f4 	udiv	r2, r3, r4
 8005284:	fb04 3312 	mls	r3, r4, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1e6      	bne.n	800525a <USBD_CDC_DataIn+0x18>
    pdev->ep_in[epnum].total_length = 0U;
 800528c:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8005290:	0093      	lsls	r3, r2, #2
 8005292:	4403      	add	r3, r0
 8005294:	2400      	movs	r4, #0
 8005296:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005298:	4623      	mov	r3, r4
 800529a:	4622      	mov	r2, r4
 800529c:	f002 fc50 	bl	8007b40 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 80052a0:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80052a2:	e7e7      	b.n	8005274 <USBD_CDC_DataIn+0x32>
    return (uint8_t)USBD_FAIL;
 80052a4:	2003      	movs	r0, #3
 80052a6:	e7e5      	b.n	8005274 <USBD_CDC_DataIn+0x32>

080052a8 <USBD_CDC_Setup>:
{
 80052a8:	b570      	push	{r4, r5, r6, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	4605      	mov	r5, r0
 80052ae:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80052b0:	f8d0 62bc 	ldr.w	r6, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 80052b4:	2300      	movs	r3, #0
 80052b6:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 80052ba:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80052be:	780b      	ldrb	r3, [r1, #0]
 80052c0:	f013 0260 	ands.w	r2, r3, #96	; 0x60
 80052c4:	d027      	beq.n	8005316 <USBD_CDC_Setup+0x6e>
 80052c6:	2a20      	cmp	r2, #32
 80052c8:	d15b      	bne.n	8005382 <USBD_CDC_Setup+0xda>
    if (req->wLength != 0U)
 80052ca:	88ca      	ldrh	r2, [r1, #6]
 80052cc:	b93a      	cbnz	r2, 80052de <USBD_CDC_Setup+0x36>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80052ce:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	2200      	movs	r2, #0
 80052d6:	7848      	ldrb	r0, [r1, #1]
 80052d8:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 80052da:	2000      	movs	r0, #0
 80052dc:	e054      	b.n	8005388 <USBD_CDC_Setup+0xe0>
      if ((req->bmRequest & 0x80U) != 0U)
 80052de:	f013 0f80 	tst.w	r3, #128	; 0x80
 80052e2:	d00c      	beq.n	80052fe <USBD_CDC_Setup+0x56>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80052e4:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	4631      	mov	r1, r6
 80052ec:	7860      	ldrb	r0, [r4, #1]
 80052ee:	4798      	blx	r3
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80052f0:	88e2      	ldrh	r2, [r4, #6]
 80052f2:	4631      	mov	r1, r6
 80052f4:	4628      	mov	r0, r5
 80052f6:	f000 fe01 	bl	8005efc <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80052fa:	2000      	movs	r0, #0
 80052fc:	e044      	b.n	8005388 <USBD_CDC_Setup+0xe0>
        hcdc->CmdOpCode = req->bRequest;
 80052fe:	784b      	ldrb	r3, [r1, #1]
 8005300:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005304:	798b      	ldrb	r3, [r1, #6]
 8005306:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800530a:	88ca      	ldrh	r2, [r1, #6]
 800530c:	4631      	mov	r1, r6
 800530e:	f000 fe0a 	bl	8005f26 <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 8005312:	2000      	movs	r0, #0
 8005314:	e038      	b.n	8005388 <USBD_CDC_Setup+0xe0>
    switch (req->bRequest)
 8005316:	784b      	ldrb	r3, [r1, #1]
 8005318:	2b0b      	cmp	r3, #11
 800531a:	d82e      	bhi.n	800537a <USBD_CDC_Setup+0xd2>
 800531c:	e8df f003 	tbb	[pc, r3]
 8005320:	2d2d3606 	.word	0x2d2d3606
 8005324:	2d2d2d2d 	.word	0x2d2d2d2d
 8005328:	23142d2d 	.word	0x23142d2d
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800532c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005330:	2b03      	cmp	r3, #3
 8005332:	d105      	bne.n	8005340 <USBD_CDC_Setup+0x98>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005334:	2202      	movs	r2, #2
 8005336:	a901      	add	r1, sp, #4
 8005338:	f000 fde0 	bl	8005efc <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800533c:	2000      	movs	r0, #0
 800533e:	e023      	b.n	8005388 <USBD_CDC_Setup+0xe0>
        USBD_CtlError(pdev, req);
 8005340:	f000 fa80 	bl	8005844 <USBD_CtlError>
        ret = USBD_FAIL;
 8005344:	2003      	movs	r0, #3
 8005346:	e01f      	b.n	8005388 <USBD_CDC_Setup+0xe0>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005348:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800534c:	2b03      	cmp	r3, #3
 800534e:	d106      	bne.n	800535e <USBD_CDC_Setup+0xb6>
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005350:	2201      	movs	r2, #1
 8005352:	f10d 0107 	add.w	r1, sp, #7
 8005356:	f000 fdd1 	bl	8005efc <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800535a:	2000      	movs	r0, #0
 800535c:	e014      	b.n	8005388 <USBD_CDC_Setup+0xe0>
        USBD_CtlError(pdev, req);
 800535e:	f000 fa71 	bl	8005844 <USBD_CtlError>
        ret = USBD_FAIL;
 8005362:	2003      	movs	r0, #3
 8005364:	e010      	b.n	8005388 <USBD_CDC_Setup+0xe0>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005366:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800536a:	2b03      	cmp	r3, #3
 800536c:	d101      	bne.n	8005372 <USBD_CDC_Setup+0xca>
  USBD_StatusTypeDef ret = USBD_OK;
 800536e:	2000      	movs	r0, #0
 8005370:	e00a      	b.n	8005388 <USBD_CDC_Setup+0xe0>
        USBD_CtlError(pdev, req);
 8005372:	f000 fa67 	bl	8005844 <USBD_CtlError>
        ret = USBD_FAIL;
 8005376:	2003      	movs	r0, #3
 8005378:	e006      	b.n	8005388 <USBD_CDC_Setup+0xe0>
      USBD_CtlError(pdev, req);
 800537a:	f000 fa63 	bl	8005844 <USBD_CtlError>
      ret = USBD_FAIL;
 800537e:	2003      	movs	r0, #3
      break;
 8005380:	e002      	b.n	8005388 <USBD_CDC_Setup+0xe0>
    USBD_CtlError(pdev, req);
 8005382:	f000 fa5f 	bl	8005844 <USBD_CtlError>
    ret = USBD_FAIL;
 8005386:	2003      	movs	r0, #3
}
 8005388:	b002      	add	sp, #8
 800538a:	bd70      	pop	{r4, r5, r6, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 800538c:	2000      	movs	r0, #0
 800538e:	e7fb      	b.n	8005388 <USBD_CDC_Setup+0xe0>

08005390 <USBD_CDC_DeInit>:
{
 8005390:	b538      	push	{r3, r4, r5, lr}
 8005392:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005394:	2181      	movs	r1, #129	; 0x81
 8005396:	f002 fbb3 	bl	8007b00 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800539a:	2500      	movs	r5, #0
 800539c:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800539e:	2101      	movs	r1, #1
 80053a0:	4620      	mov	r0, r4
 80053a2:	f002 fbad 	bl	8007b00 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80053a6:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80053aa:	2182      	movs	r1, #130	; 0x82
 80053ac:	4620      	mov	r0, r4
 80053ae:	f002 fba7 	bl	8007b00 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80053b2:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80053b6:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
  if (pdev->pClassData != NULL)
 80053ba:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80053be:	b14b      	cbz	r3, 80053d4 <USBD_CDC_DeInit+0x44>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80053c0:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80053c8:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 80053cc:	f010 f92a 	bl	8015624 <free>
    pdev->pClassData = NULL;
 80053d0:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 80053d4:	2000      	movs	r0, #0
 80053d6:	bd38      	pop	{r3, r4, r5, pc}

080053d8 <USBD_CDC_Init>:
{
 80053d8:	b570      	push	{r4, r5, r6, lr}
 80053da:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80053dc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80053e0:	f010 f918 	bl	8015614 <malloc>
  if (hcdc == NULL)
 80053e4:	b3b0      	cbz	r0, 8005454 <USBD_CDC_Init+0x7c>
 80053e6:	4605      	mov	r5, r0
  pdev->pClassData = (void *)hcdc;
 80053e8:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053ec:	7c23      	ldrb	r3, [r4, #16]
 80053ee:	bbb3      	cbnz	r3, 800545e <USBD_CDC_Init+0x86>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80053f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053f4:	2202      	movs	r2, #2
 80053f6:	2181      	movs	r1, #129	; 0x81
 80053f8:	4620      	mov	r0, r4
 80053fa:	f002 fb76 	bl	8007aea <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80053fe:	2601      	movs	r6, #1
 8005400:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005402:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005406:	2202      	movs	r2, #2
 8005408:	4631      	mov	r1, r6
 800540a:	4620      	mov	r0, r4
 800540c:	f002 fb6d 	bl	8007aea <USBD_LL_OpenEP>
      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005410:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005414:	2310      	movs	r3, #16
 8005416:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800541a:	2308      	movs	r3, #8
 800541c:	2203      	movs	r2, #3
 800541e:	2182      	movs	r1, #130	; 0x82
 8005420:	4620      	mov	r0, r4
 8005422:	f002 fb62 	bl	8007aea <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005426:	2301      	movs	r3, #1
 8005428:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800542c:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4798      	blx	r3
  hcdc->TxState = 0U;
 8005434:	2300      	movs	r3, #0
 8005436:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 800543a:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800543e:	7c23      	ldrb	r3, [r4, #16]
 8005440:	b30b      	cbz	r3, 8005486 <USBD_CDC_Init+0xae>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005442:	2340      	movs	r3, #64	; 0x40
 8005444:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8005448:	2101      	movs	r1, #1
 800544a:	4620      	mov	r0, r4
 800544c:	f002 fb80 	bl	8007b50 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8005450:	2000      	movs	r0, #0
}
 8005452:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassData = NULL;
 8005454:	2300      	movs	r3, #0
 8005456:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800545a:	2002      	movs	r0, #2
 800545c:	e7f9      	b.n	8005452 <USBD_CDC_Init+0x7a>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800545e:	2340      	movs	r3, #64	; 0x40
 8005460:	2202      	movs	r2, #2
 8005462:	2181      	movs	r1, #129	; 0x81
 8005464:	4620      	mov	r0, r4
 8005466:	f002 fb40 	bl	8007aea <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800546a:	2601      	movs	r6, #1
 800546c:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800546e:	2340      	movs	r3, #64	; 0x40
 8005470:	2202      	movs	r2, #2
 8005472:	4631      	mov	r1, r6
 8005474:	4620      	mov	r0, r4
 8005476:	f002 fb38 	bl	8007aea <USBD_LL_OpenEP>
      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800547a:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800547e:	2310      	movs	r3, #16
 8005480:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8005484:	e7c9      	b.n	800541a <USBD_CDC_Init+0x42>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005486:	f44f 7300 	mov.w	r3, #512	; 0x200
 800548a:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800548e:	2101      	movs	r1, #1
 8005490:	4620      	mov	r0, r4
 8005492:	f002 fb5d 	bl	8007b50 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8005496:	2000      	movs	r0, #0
 8005498:	e7db      	b.n	8005452 <USBD_CDC_Init+0x7a>

0800549a <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 800549a:	b119      	cbz	r1, 80054a4 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 800549c:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80054a0:	2000      	movs	r0, #0
 80054a2:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 80054a4:	2003      	movs	r0, #3
}
 80054a6:	4770      	bx	lr

080054a8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80054a8:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  hcdc->TxBuffer = pbuff;
 80054ac:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80054b0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
}
 80054b4:	2000      	movs	r0, #0
 80054b6:	4770      	bx	lr

080054b8 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80054b8:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  hcdc->RxBuffer = pbuff;
 80054bc:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
}
 80054c0:	2000      	movs	r0, #0
 80054c2:	4770      	bx	lr

080054c4 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80054c4:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 80054c8:	b1a2      	cbz	r2, 80054f4 <USBD_CDC_TransmitPacket+0x30>
{
 80054ca:	b508      	push	{r3, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 80054cc:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 80054d0:	b10b      	cbz	r3, 80054d6 <USBD_CDC_TransmitPacket+0x12>
  USBD_StatusTypeDef ret = USBD_BUSY;
 80054d2:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 80054d4:	bd08      	pop	{r3, pc}
    hcdc->TxState = 1U;
 80054d6:	2301      	movs	r3, #1
 80054d8:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80054dc:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 80054e0:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80054e2:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 80054e6:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 80054ea:	2181      	movs	r1, #129	; 0x81
 80054ec:	f002 fb28 	bl	8007b40 <USBD_LL_Transmit>
    ret = USBD_OK;
 80054f0:	2000      	movs	r0, #0
 80054f2:	e7ef      	b.n	80054d4 <USBD_CDC_TransmitPacket+0x10>
    return (uint8_t)USBD_FAIL;
 80054f4:	2003      	movs	r0, #3
}
 80054f6:	4770      	bx	lr

080054f8 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80054f8:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 80054fc:	b19a      	cbz	r2, 8005526 <USBD_CDC_ReceivePacket+0x2e>
{
 80054fe:	b508      	push	{r3, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005500:	7c03      	ldrb	r3, [r0, #16]
 8005502:	b13b      	cbz	r3, 8005514 <USBD_CDC_ReceivePacket+0x1c>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005504:	2340      	movs	r3, #64	; 0x40
 8005506:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800550a:	2101      	movs	r1, #1
 800550c:	f002 fb20 	bl	8007b50 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005510:	2000      	movs	r0, #0
}
 8005512:	bd08      	pop	{r3, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005514:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005518:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800551c:	2101      	movs	r1, #1
 800551e:	f002 fb17 	bl	8007b50 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8005522:	2000      	movs	r0, #0
 8005524:	e7f5      	b.n	8005512 <USBD_CDC_ReceivePacket+0x1a>
    return (uint8_t)USBD_FAIL;
 8005526:	2003      	movs	r0, #3
}
 8005528:	4770      	bx	lr

0800552a <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800552a:	b1c0      	cbz	r0, 800555e <USBD_Init+0x34>
{
 800552c:	b508      	push	{r3, lr}
 800552e:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8005530:	f8d0 02b8 	ldr.w	r0, [r0, #696]	; 0x2b8
 8005534:	b110      	cbz	r0, 800553c <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 8005536:	2000      	movs	r0, #0
 8005538:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800553c:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
 8005540:	b110      	cbz	r0, 8005548 <USBD_Init+0x1e>
  {
    pdev->pConfDesc = NULL;
 8005542:	2000      	movs	r0, #0
 8005544:	f8c3 02cc 	str.w	r0, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005548:	b109      	cbz	r1, 800554e <USBD_Init+0x24>
  {
    pdev->pDesc = pdesc;
 800554a:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
 800554e:	4618      	mov	r0, r3
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005550:	2301      	movs	r3, #1
 8005552:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->id = id;
 8005556:	7002      	strb	r2, [r0, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005558:	f002 fa32 	bl	80079c0 <USBD_LL_Init>

  return ret;
}
 800555c:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800555e:	2003      	movs	r0, #3
}
 8005560:	4770      	bx	lr

08005562 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005562:	b510      	push	{r4, lr}
 8005564:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8005566:	2300      	movs	r3, #0
 8005568:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 800556c:	b159      	cbz	r1, 8005586 <USBD_RegisterClass+0x24>
 800556e:	4604      	mov	r4, r0
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005570:	f8c4 12b8 	str.w	r1, [r4, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005574:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8005576:	f10d 0006 	add.w	r0, sp, #6
 800557a:	4798      	blx	r3
 800557c:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8005580:	2000      	movs	r0, #0
}
 8005582:	b002      	add	sp, #8
 8005584:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8005586:	2003      	movs	r0, #3
 8005588:	e7fb      	b.n	8005582 <USBD_RegisterClass+0x20>

0800558a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800558a:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800558c:	f002 faa5 	bl	8007ada <USBD_LL_Start>
}
 8005590:	bd08      	pop	{r3, pc}

08005592 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005592:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8005594:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005598:	b113      	cbz	r3, 80055a0 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4798      	blx	r3
  }

  return ret;
}
 800559e:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 80055a0:	2003      	movs	r0, #3
 80055a2:	e7fc      	b.n	800559e <USBD_SetClassConfig+0xc>

080055a4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80055a4:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80055a6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80055aa:	b10b      	cbz	r3, 80055b0 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	4798      	blx	r3
  }

  return USBD_OK;
}
 80055b0:	2000      	movs	r0, #0
 80055b2:	bd08      	pop	{r3, pc}

080055b4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80055b4:	b538      	push	{r3, r4, r5, lr}
 80055b6:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80055b8:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 80055bc:	4628      	mov	r0, r5
 80055be:	f000 f92d 	bl	800581c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80055c2:	2301      	movs	r3, #1
 80055c4:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80055c8:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 80055cc:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80055d0:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
 80055d4:	f001 031f 	and.w	r3, r1, #31
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d00d      	beq.n	80055f8 <USBD_LL_SetupStage+0x44>
 80055dc:	b13b      	cbz	r3, 80055ee <USBD_LL_SetupStage+0x3a>
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d00f      	beq.n	8005602 <USBD_LL_SetupStage+0x4e>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80055e2:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80055e6:	4620      	mov	r0, r4
 80055e8:	f002 fa92 	bl	8007b10 <USBD_LL_StallEP>
      break;
 80055ec:	e003      	b.n	80055f6 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80055ee:	4629      	mov	r1, r5
 80055f0:	4620      	mov	r0, r4
 80055f2:	f000 fae0 	bl	8005bb6 <USBD_StdDevReq>
  }

  return ret;
}
 80055f6:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80055f8:	4629      	mov	r1, r5
 80055fa:	4620      	mov	r0, r4
 80055fc:	f000 fb16 	bl	8005c2c <USBD_StdItfReq>
      break;
 8005600:	e7f9      	b.n	80055f6 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005602:	4629      	mov	r1, r5
 8005604:	4620      	mov	r0, r4
 8005606:	f000 fb45 	bl	8005c94 <USBD_StdEPReq>
      break;
 800560a:	e7f4      	b.n	80055f6 <USBD_LL_SetupStage+0x42>

0800560c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800560c:	b510      	push	{r4, lr}
 800560e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005610:	bb29      	cbnz	r1, 800565e <USBD_LL_DataOutStage+0x52>
 8005612:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005614:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8005618:	2a03      	cmp	r2, #3
 800561a:	d001      	beq.n	8005620 <USBD_LL_DataOutStage+0x14>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800561c:	2000      	movs	r0, #0
 800561e:	e029      	b.n	8005674 <USBD_LL_DataOutStage+0x68>
      if (pep->rem_length > pep->maxpacket)
 8005620:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
 8005624:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 8005628:	4291      	cmp	r1, r2
 800562a:	d80d      	bhi.n	8005648 <USBD_LL_DataOutStage+0x3c>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800562c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	b123      	cbz	r3, 800563e <USBD_LL_DataOutStage+0x32>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005634:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005638:	2a03      	cmp	r2, #3
 800563a:	d100      	bne.n	800563e <USBD_LL_DataOutStage+0x32>
          pdev->pClass->EP0_RxReady(pdev);
 800563c:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 800563e:	4620      	mov	r0, r4
 8005640:	f000 fc88 	bl	8005f54 <USBD_CtlSendStatus>
  return USBD_OK;
 8005644:	2000      	movs	r0, #0
 8005646:	e015      	b.n	8005674 <USBD_LL_DataOutStage+0x68>
        pep->rem_length -= pep->maxpacket;
 8005648:	1a89      	subs	r1, r1, r2
 800564a:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800564e:	428a      	cmp	r2, r1
 8005650:	bf28      	it	cs
 8005652:	460a      	movcs	r2, r1
 8005654:	4619      	mov	r1, r3
 8005656:	f000 fc75 	bl	8005f44 <USBD_CtlContinueRx>
  return USBD_OK;
 800565a:	2000      	movs	r0, #0
 800565c:	e00a      	b.n	8005674 <USBD_LL_DataOutStage+0x68>
 800565e:	460a      	mov	r2, r1
  else if ((pdev->pClass->DataOut != NULL) &&
 8005660:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	b133      	cbz	r3, 8005676 <USBD_LL_DataOutStage+0x6a>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005668:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800566c:	2903      	cmp	r1, #3
 800566e:	d104      	bne.n	800567a <USBD_LL_DataOutStage+0x6e>
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005670:	4611      	mov	r1, r2
 8005672:	4798      	blx	r3
}
 8005674:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8005676:	2003      	movs	r0, #3
 8005678:	e7fc      	b.n	8005674 <USBD_LL_DataOutStage+0x68>
 800567a:	2003      	movs	r0, #3
 800567c:	e7fa      	b.n	8005674 <USBD_LL_DataOutStage+0x68>

0800567e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800567e:	b510      	push	{r4, lr}
 8005680:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005682:	2900      	cmp	r1, #0
 8005684:	d146      	bne.n	8005714 <USBD_LL_DataInStage+0x96>
 8005686:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005688:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800568c:	2a02      	cmp	r2, #2
 800568e:	d005      	beq.n	800569c <USBD_LL_DataInStage+0x1e>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005690:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8005694:	2b01      	cmp	r3, #1
 8005696:	d039      	beq.n	800570c <USBD_LL_DataInStage+0x8e>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8005698:	2000      	movs	r0, #0
 800569a:	e046      	b.n	800572a <USBD_LL_DataInStage+0xac>
      if (pep->rem_length > pep->maxpacket)
 800569c:	69c2      	ldr	r2, [r0, #28]
 800569e:	6a01      	ldr	r1, [r0, #32]
 80056a0:	428a      	cmp	r2, r1
 80056a2:	d813      	bhi.n	80056cc <USBD_LL_DataInStage+0x4e>
        if ((pep->maxpacket == pep->rem_length) &&
 80056a4:	428a      	cmp	r2, r1
 80056a6:	d01d      	beq.n	80056e4 <USBD_LL_DataInStage+0x66>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80056a8:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	b12b      	cbz	r3, 80056bc <USBD_LL_DataInStage+0x3e>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80056b0:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80056b4:	2a03      	cmp	r2, #3
 80056b6:	d101      	bne.n	80056bc <USBD_LL_DataInStage+0x3e>
            pdev->pClass->EP0_TxSent(pdev);
 80056b8:	4620      	mov	r0, r4
 80056ba:	4798      	blx	r3
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80056bc:	2180      	movs	r1, #128	; 0x80
 80056be:	4620      	mov	r0, r4
 80056c0:	f002 fa26 	bl	8007b10 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80056c4:	4620      	mov	r0, r4
 80056c6:	f000 fc50 	bl	8005f6a <USBD_CtlReceiveStatus>
 80056ca:	e7e1      	b.n	8005690 <USBD_LL_DataInStage+0x12>
        pep->rem_length -= pep->maxpacket;
 80056cc:	1a52      	subs	r2, r2, r1
 80056ce:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80056d0:	4619      	mov	r1, r3
 80056d2:	f000 fc20 	bl	8005f16 <USBD_CtlContinueSendData>
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80056d6:	2300      	movs	r3, #0
 80056d8:	461a      	mov	r2, r3
 80056da:	4619      	mov	r1, r3
 80056dc:	4620      	mov	r0, r4
 80056de:	f002 fa37 	bl	8007b50 <USBD_LL_PrepareReceive>
 80056e2:	e7d5      	b.n	8005690 <USBD_LL_DataInStage+0x12>
            (pep->total_length >= pep->maxpacket) &&
 80056e4:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 80056e6:	4299      	cmp	r1, r3
 80056e8:	d8de      	bhi.n	80056a8 <USBD_LL_DataInStage+0x2a>
            (pep->total_length < pdev->ep0_data_len))
 80056ea:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d2da      	bcs.n	80056a8 <USBD_LL_DataInStage+0x2a>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80056f2:	2200      	movs	r2, #0
 80056f4:	4611      	mov	r1, r2
 80056f6:	f000 fc0e 	bl	8005f16 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80056fa:	2100      	movs	r1, #0
 80056fc:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005700:	460b      	mov	r3, r1
 8005702:	460a      	mov	r2, r1
 8005704:	4620      	mov	r0, r4
 8005706:	f002 fa23 	bl	8007b50 <USBD_LL_PrepareReceive>
 800570a:	e7c1      	b.n	8005690 <USBD_LL_DataInStage+0x12>
      pdev->dev_test_mode = 0U;
 800570c:	2000      	movs	r0, #0
 800570e:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
 8005712:	e00a      	b.n	800572a <USBD_LL_DataInStage+0xac>
 8005714:	460a      	mov	r2, r1
  else if ((pdev->pClass->DataIn != NULL) &&
 8005716:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	b133      	cbz	r3, 800572c <USBD_LL_DataInStage+0xae>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800571e:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005722:	2903      	cmp	r1, #3
 8005724:	d104      	bne.n	8005730 <USBD_LL_DataInStage+0xb2>
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005726:	4611      	mov	r1, r2
 8005728:	4798      	blx	r3
}
 800572a:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800572c:	2003      	movs	r0, #3
 800572e:	e7fc      	b.n	800572a <USBD_LL_DataInStage+0xac>
 8005730:	2003      	movs	r0, #3
 8005732:	e7fa      	b.n	800572a <USBD_LL_DataInStage+0xac>

08005734 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005734:	b570      	push	{r4, r5, r6, lr}
 8005736:	4604      	mov	r4, r0
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005738:	2301      	movs	r3, #1
 800573a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800573e:	2300      	movs	r3, #0
 8005740:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8005744:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8005746:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800574a:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 800574e:	b123      	cbz	r3, 800575a <USBD_LL_Reset+0x26>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005750:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	2100      	movs	r1, #0
 8005758:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800575a:	2340      	movs	r3, #64	; 0x40
 800575c:	2200      	movs	r2, #0
 800575e:	4611      	mov	r1, r2
 8005760:	4620      	mov	r0, r4
 8005762:	f002 f9c2 	bl	8007aea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005766:	2601      	movs	r6, #1
 8005768:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800576c:	2540      	movs	r5, #64	; 0x40
 800576e:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005772:	462b      	mov	r3, r5
 8005774:	2200      	movs	r2, #0
 8005776:	2180      	movs	r1, #128	; 0x80
 8005778:	4620      	mov	r0, r4
 800577a:	f002 f9b6 	bl	8007aea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800577e:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005780:	6225      	str	r5, [r4, #32]

  return USBD_OK;
}
 8005782:	2000      	movs	r0, #0
 8005784:	bd70      	pop	{r4, r5, r6, pc}

08005786 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8005786:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8005788:	2000      	movs	r0, #0
 800578a:	4770      	bx	lr

0800578c <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 800578c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005790:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005794:	2304      	movs	r3, #4
 8005796:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 800579a:	2000      	movs	r0, #0
 800579c:	4770      	bx	lr

0800579e <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800579e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80057a2:	2b04      	cmp	r3, #4
 80057a4:	d001      	beq.n	80057aa <USBD_LL_Resume+0xc>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 80057a6:	2000      	movs	r0, #0
 80057a8:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 80057aa:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 80057ae:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 80057b2:	e7f8      	b.n	80057a6 <USBD_LL_Resume+0x8>

080057b4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80057b4:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057b6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80057ba:	2b03      	cmp	r3, #3
 80057bc:	d001      	beq.n	80057c2 <USBD_LL_SOF+0xe>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 80057be:	2000      	movs	r0, #0
 80057c0:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 80057c2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80057c6:	69db      	ldr	r3, [r3, #28]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d0f8      	beq.n	80057be <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 80057cc:	4798      	blx	r3
 80057ce:	e7f6      	b.n	80057be <USBD_LL_SOF+0xa>

080057d0 <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 80057d0:	2000      	movs	r0, #0
 80057d2:	4770      	bx	lr

080057d4 <USBD_LL_IsoOUTIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 80057d4:	2000      	movs	r0, #0
 80057d6:	4770      	bx	lr

080057d8 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 80057d8:	2000      	movs	r0, #0
 80057da:	4770      	bx	lr

080057dc <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80057dc:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80057de:	2301      	movs	r3, #1
 80057e0:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80057e4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80057e8:	b113      	cbz	r3, 80057f0 <USBD_LL_DevDisconnected+0x14>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	7901      	ldrb	r1, [r0, #4]
 80057ee:	4798      	blx	r3
  }

  return USBD_OK;
}
 80057f0:	2000      	movs	r0, #0
 80057f2:	bd08      	pop	{r3, pc}

080057f4 <USBD_GetLen>:
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
 80057f4:	2300      	movs	r3, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 80057f6:	e002      	b.n	80057fe <USBD_GetLen+0xa>
  {
    len++;
 80057f8:	3301      	adds	r3, #1
 80057fa:	b2db      	uxtb	r3, r3
    pbuff++;
 80057fc:	3001      	adds	r0, #1
  while (*pbuff != (uint8_t)'\0')
 80057fe:	7802      	ldrb	r2, [r0, #0]
 8005800:	2a00      	cmp	r2, #0
 8005802:	d1f9      	bne.n	80057f8 <USBD_GetLen+0x4>
  }

  return len;
}
 8005804:	4618      	mov	r0, r3
 8005806:	4770      	bx	lr

08005808 <USBD_SetFeature>:
{
 8005808:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800580a:	884b      	ldrh	r3, [r1, #2]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d000      	beq.n	8005812 <USBD_SetFeature+0xa>
}
 8005810:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 8005812:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005816:	f000 fb9d 	bl	8005f54 <USBD_CtlSendStatus>
}
 800581a:	e7f9      	b.n	8005810 <USBD_SetFeature+0x8>

0800581c <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800581c:	780b      	ldrb	r3, [r1, #0]
 800581e:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8005820:	784b      	ldrb	r3, [r1, #1]
 8005822:	7043      	strb	r3, [r0, #1]
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 8005824:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 8005826:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005828:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 800582c:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 800582e:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 8005830:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005832:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 8005836:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 8005838:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 800583a:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800583c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 8005840:	80c3      	strh	r3, [r0, #6]
}
 8005842:	4770      	bx	lr

08005844 <USBD_CtlError>:
{
 8005844:	b510      	push	{r4, lr}
 8005846:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005848:	2180      	movs	r1, #128	; 0x80
 800584a:	f002 f961 	bl	8007b10 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800584e:	2100      	movs	r1, #0
 8005850:	4620      	mov	r0, r4
 8005852:	f002 f95d 	bl	8007b10 <USBD_LL_StallEP>
}
 8005856:	bd10      	pop	{r4, pc}

08005858 <USBD_GetDescriptor>:
{
 8005858:	b530      	push	{r4, r5, lr}
 800585a:	b083      	sub	sp, #12
 800585c:	4604      	mov	r4, r0
 800585e:	460d      	mov	r5, r1
  uint16_t len = 0U;
 8005860:	2300      	movs	r3, #0
 8005862:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8005866:	884a      	ldrh	r2, [r1, #2]
 8005868:	0a13      	lsrs	r3, r2, #8
 800586a:	3b01      	subs	r3, #1
 800586c:	2b0e      	cmp	r3, #14
 800586e:	f200 80bc 	bhi.w	80059ea <USBD_GetDescriptor+0x192>
 8005872:	e8df f003 	tbb	[pc, r3]
 8005876:	3015      	.short	0x3015
 8005878:	9ebaba44 	.word	0x9ebaba44
 800587c:	bababaab 	.word	0xbababaab
 8005880:	babababa 	.word	0xbabababa
 8005884:	08          	.byte	0x08
 8005885:	00          	.byte	0x00
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8005886:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800588a:	69db      	ldr	r3, [r3, #28]
 800588c:	b123      	cbz	r3, 8005898 <USBD_GetDescriptor+0x40>
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800588e:	f10d 0106 	add.w	r1, sp, #6
 8005892:	7c00      	ldrb	r0, [r0, #16]
 8005894:	4798      	blx	r3
 8005896:	e00a      	b.n	80058ae <USBD_GetDescriptor+0x56>
      USBD_CtlError(pdev, req);
 8005898:	4629      	mov	r1, r5
 800589a:	f7ff ffd3 	bl	8005844 <USBD_CtlError>
 800589e:	e018      	b.n	80058d2 <USBD_GetDescriptor+0x7a>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80058a0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f10d 0106 	add.w	r1, sp, #6
 80058aa:	7c00      	ldrb	r0, [r0, #16]
 80058ac:	4798      	blx	r3
    if (req->wLength != 0U)
 80058ae:	88ea      	ldrh	r2, [r5, #6]
 80058b0:	2a00      	cmp	r2, #0
 80058b2:	f000 80a3 	beq.w	80059fc <USBD_GetDescriptor+0x1a4>
      if (len != 0U)
 80058b6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f000 8099 	beq.w	80059f2 <USBD_GetDescriptor+0x19a>
        len = MIN(len, req->wLength);
 80058c0:	429a      	cmp	r2, r3
 80058c2:	bf28      	it	cs
 80058c4:	461a      	movcs	r2, r3
 80058c6:	f8ad 2006 	strh.w	r2, [sp, #6]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80058ca:	4601      	mov	r1, r0
 80058cc:	4620      	mov	r0, r4
 80058ce:	f000 fb15 	bl	8005efc <USBD_CtlSendData>
}
 80058d2:	b003      	add	sp, #12
 80058d4:	bd30      	pop	{r4, r5, pc}
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058d6:	7c03      	ldrb	r3, [r0, #16]
 80058d8:	b943      	cbnz	r3, 80058ec <USBD_GetDescriptor+0x94>
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80058da:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80058de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e0:	f10d 0006 	add.w	r0, sp, #6
 80058e4:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80058e6:	2302      	movs	r3, #2
 80058e8:	7043      	strb	r3, [r0, #1]
 80058ea:	e7e0      	b.n	80058ae <USBD_GetDescriptor+0x56>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80058ec:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80058f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f2:	f10d 0006 	add.w	r0, sp, #6
 80058f6:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80058f8:	2302      	movs	r3, #2
 80058fa:	7043      	strb	r3, [r0, #1]
 80058fc:	e7d7      	b.n	80058ae <USBD_GetDescriptor+0x56>
    switch ((uint8_t)(req->wValue))
 80058fe:	b2d2      	uxtb	r2, r2
 8005900:	2a05      	cmp	r2, #5
 8005902:	d852      	bhi.n	80059aa <USBD_GetDescriptor+0x152>
 8005904:	e8df f002 	tbb	[pc, r2]
 8005908:	2a1d1003 	.word	0x2a1d1003
 800590c:	4437      	.short	0x4437
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800590e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	b123      	cbz	r3, 8005920 <USBD_GetDescriptor+0xc8>
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005916:	f10d 0106 	add.w	r1, sp, #6
 800591a:	7c00      	ldrb	r0, [r0, #16]
 800591c:	4798      	blx	r3
 800591e:	e7c6      	b.n	80058ae <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 8005920:	4629      	mov	r1, r5
 8005922:	f7ff ff8f 	bl	8005844 <USBD_CtlError>
 8005926:	e7d4      	b.n	80058d2 <USBD_GetDescriptor+0x7a>
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005928:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	b123      	cbz	r3, 800593a <USBD_GetDescriptor+0xe2>
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005930:	f10d 0106 	add.w	r1, sp, #6
 8005934:	7c00      	ldrb	r0, [r0, #16]
 8005936:	4798      	blx	r3
 8005938:	e7b9      	b.n	80058ae <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 800593a:	4629      	mov	r1, r5
 800593c:	f7ff ff82 	bl	8005844 <USBD_CtlError>
 8005940:	e7c7      	b.n	80058d2 <USBD_GetDescriptor+0x7a>
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005942:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	b123      	cbz	r3, 8005954 <USBD_GetDescriptor+0xfc>
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800594a:	f10d 0106 	add.w	r1, sp, #6
 800594e:	7c00      	ldrb	r0, [r0, #16]
 8005950:	4798      	blx	r3
 8005952:	e7ac      	b.n	80058ae <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 8005954:	4629      	mov	r1, r5
 8005956:	f7ff ff75 	bl	8005844 <USBD_CtlError>
 800595a:	e7ba      	b.n	80058d2 <USBD_GetDescriptor+0x7a>
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800595c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	b123      	cbz	r3, 800596e <USBD_GetDescriptor+0x116>
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005964:	f10d 0106 	add.w	r1, sp, #6
 8005968:	7c00      	ldrb	r0, [r0, #16]
 800596a:	4798      	blx	r3
 800596c:	e79f      	b.n	80058ae <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 800596e:	4629      	mov	r1, r5
 8005970:	f7ff ff68 	bl	8005844 <USBD_CtlError>
 8005974:	e7ad      	b.n	80058d2 <USBD_GetDescriptor+0x7a>
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005976:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800597a:	695b      	ldr	r3, [r3, #20]
 800597c:	b123      	cbz	r3, 8005988 <USBD_GetDescriptor+0x130>
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800597e:	f10d 0106 	add.w	r1, sp, #6
 8005982:	7c00      	ldrb	r0, [r0, #16]
 8005984:	4798      	blx	r3
 8005986:	e792      	b.n	80058ae <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 8005988:	4629      	mov	r1, r5
 800598a:	f7ff ff5b 	bl	8005844 <USBD_CtlError>
 800598e:	e7a0      	b.n	80058d2 <USBD_GetDescriptor+0x7a>
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005990:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	b123      	cbz	r3, 80059a2 <USBD_GetDescriptor+0x14a>
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005998:	f10d 0106 	add.w	r1, sp, #6
 800599c:	7c00      	ldrb	r0, [r0, #16]
 800599e:	4798      	blx	r3
 80059a0:	e785      	b.n	80058ae <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 80059a2:	4629      	mov	r1, r5
 80059a4:	f7ff ff4e 	bl	8005844 <USBD_CtlError>
 80059a8:	e793      	b.n	80058d2 <USBD_GetDescriptor+0x7a>
      USBD_CtlError(pdev, req);
 80059aa:	4629      	mov	r1, r5
 80059ac:	f7ff ff4a 	bl	8005844 <USBD_CtlError>
 80059b0:	e78f      	b.n	80058d2 <USBD_GetDescriptor+0x7a>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059b2:	7c03      	ldrb	r3, [r0, #16]
 80059b4:	b933      	cbnz	r3, 80059c4 <USBD_GetDescriptor+0x16c>
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80059b6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80059ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059bc:	f10d 0006 	add.w	r0, sp, #6
 80059c0:	4798      	blx	r3
 80059c2:	e774      	b.n	80058ae <USBD_GetDescriptor+0x56>
      USBD_CtlError(pdev, req);
 80059c4:	4629      	mov	r1, r5
 80059c6:	f7ff ff3d 	bl	8005844 <USBD_CtlError>
 80059ca:	e782      	b.n	80058d2 <USBD_GetDescriptor+0x7a>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059cc:	7c03      	ldrb	r3, [r0, #16]
 80059ce:	b943      	cbnz	r3, 80059e2 <USBD_GetDescriptor+0x18a>
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80059d0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80059d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d6:	f10d 0006 	add.w	r0, sp, #6
 80059da:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80059dc:	2307      	movs	r3, #7
 80059de:	7043      	strb	r3, [r0, #1]
 80059e0:	e765      	b.n	80058ae <USBD_GetDescriptor+0x56>
      USBD_CtlError(pdev, req);
 80059e2:	4629      	mov	r1, r5
 80059e4:	f7ff ff2e 	bl	8005844 <USBD_CtlError>
 80059e8:	e773      	b.n	80058d2 <USBD_GetDescriptor+0x7a>
    USBD_CtlError(pdev, req);
 80059ea:	4629      	mov	r1, r5
 80059ec:	f7ff ff2a 	bl	8005844 <USBD_CtlError>
 80059f0:	e76f      	b.n	80058d2 <USBD_GetDescriptor+0x7a>
        USBD_CtlError(pdev, req);
 80059f2:	4629      	mov	r1, r5
 80059f4:	4620      	mov	r0, r4
 80059f6:	f7ff ff25 	bl	8005844 <USBD_CtlError>
 80059fa:	e76a      	b.n	80058d2 <USBD_GetDescriptor+0x7a>
      (void)USBD_CtlSendStatus(pdev);
 80059fc:	4620      	mov	r0, r4
 80059fe:	f000 faa9 	bl	8005f54 <USBD_CtlSendStatus>
 8005a02:	e766      	b.n	80058d2 <USBD_GetDescriptor+0x7a>

08005a04 <USBD_SetAddress>:
{
 8005a04:	b538      	push	{r3, r4, r5, lr}
 8005a06:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005a08:	888b      	ldrh	r3, [r1, #4]
 8005a0a:	b9f3      	cbnz	r3, 8005a4a <USBD_SetAddress+0x46>
 8005a0c:	88cb      	ldrh	r3, [r1, #6]
 8005a0e:	b9e3      	cbnz	r3, 8005a4a <USBD_SetAddress+0x46>
 8005a10:	884b      	ldrh	r3, [r1, #2]
 8005a12:	2b7f      	cmp	r3, #127	; 0x7f
 8005a14:	d819      	bhi.n	8005a4a <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005a16:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a1a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005a1e:	2b03      	cmp	r3, #3
 8005a20:	d00c      	beq.n	8005a3c <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 8005a22:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005a26:	4629      	mov	r1, r5
 8005a28:	f002 f882 	bl	8007b30 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005a2c:	4620      	mov	r0, r4
 8005a2e:	f000 fa91 	bl	8005f54 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8005a32:	b135      	cbz	r5, 8005a42 <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005a34:	2302      	movs	r3, #2
 8005a36:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8005a3a:	e009      	b.n	8005a50 <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 8005a3c:	f7ff ff02 	bl	8005844 <USBD_CtlError>
 8005a40:	e006      	b.n	8005a50 <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005a42:	2301      	movs	r3, #1
 8005a44:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8005a48:	e002      	b.n	8005a50 <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 8005a4a:	4620      	mov	r0, r4
 8005a4c:	f7ff fefa 	bl	8005844 <USBD_CtlError>
}
 8005a50:	bd38      	pop	{r3, r4, r5, pc}
	...

08005a54 <USBD_SetConfig>:
{
 8005a54:	b570      	push	{r4, r5, r6, lr}
 8005a56:	4604      	mov	r4, r0
 8005a58:	460d      	mov	r5, r1
  cfgidx = (uint8_t)(req->wValue);
 8005a5a:	7889      	ldrb	r1, [r1, #2]
 8005a5c:	4b2e      	ldr	r3, [pc, #184]	; (8005b18 <USBD_SetConfig+0xc4>)
 8005a5e:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005a60:	2901      	cmp	r1, #1
 8005a62:	d80f      	bhi.n	8005a84 <USBD_SetConfig+0x30>
  switch (pdev->dev_state)
 8005a64:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d011      	beq.n	8005a90 <USBD_SetConfig+0x3c>
 8005a6c:	2b03      	cmp	r3, #3
 8005a6e:	d025      	beq.n	8005abc <USBD_SetConfig+0x68>
    USBD_CtlError(pdev, req);
 8005a70:	4629      	mov	r1, r5
 8005a72:	f7ff fee7 	bl	8005844 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005a76:	4b28      	ldr	r3, [pc, #160]	; (8005b18 <USBD_SetConfig+0xc4>)
 8005a78:	7819      	ldrb	r1, [r3, #0]
 8005a7a:	4620      	mov	r0, r4
 8005a7c:	f7ff fd92 	bl	80055a4 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8005a80:	2603      	movs	r6, #3
    break;
 8005a82:	e003      	b.n	8005a8c <USBD_SetConfig+0x38>
    USBD_CtlError(pdev, req);
 8005a84:	4629      	mov	r1, r5
 8005a86:	f7ff fedd 	bl	8005844 <USBD_CtlError>
    return USBD_FAIL;
 8005a8a:	2603      	movs	r6, #3
}
 8005a8c:	4630      	mov	r0, r6
 8005a8e:	bd70      	pop	{r4, r5, r6, pc}
    if (cfgidx != 0U)
 8005a90:	b181      	cbz	r1, 8005ab4 <USBD_SetConfig+0x60>
      pdev->dev_config = cfgidx;
 8005a92:	6041      	str	r1, [r0, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005a94:	f7ff fd7d 	bl	8005592 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 8005a98:	4606      	mov	r6, r0
 8005a9a:	b120      	cbz	r0, 8005aa6 <USBD_SetConfig+0x52>
        USBD_CtlError(pdev, req);
 8005a9c:	4629      	mov	r1, r5
 8005a9e:	4620      	mov	r0, r4
 8005aa0:	f7ff fed0 	bl	8005844 <USBD_CtlError>
 8005aa4:	e7f2      	b.n	8005a8c <USBD_SetConfig+0x38>
        (void)USBD_CtlSendStatus(pdev);
 8005aa6:	4620      	mov	r0, r4
 8005aa8:	f000 fa54 	bl	8005f54 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005aac:	2303      	movs	r3, #3
 8005aae:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8005ab2:	e7eb      	b.n	8005a8c <USBD_SetConfig+0x38>
      (void)USBD_CtlSendStatus(pdev);
 8005ab4:	f000 fa4e 	bl	8005f54 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8005ab8:	2600      	movs	r6, #0
 8005aba:	e7e7      	b.n	8005a8c <USBD_SetConfig+0x38>
    if (cfgidx == 0U)
 8005abc:	b1c9      	cbz	r1, 8005af2 <USBD_SetConfig+0x9e>
    else if (cfgidx != pdev->dev_config)
 8005abe:	6843      	ldr	r3, [r0, #4]
 8005ac0:	4299      	cmp	r1, r3
 8005ac2:	d025      	beq.n	8005b10 <USBD_SetConfig+0xbc>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005ac4:	b2d9      	uxtb	r1, r3
 8005ac6:	f7ff fd6d 	bl	80055a4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8005aca:	4b13      	ldr	r3, [pc, #76]	; (8005b18 <USBD_SetConfig+0xc4>)
 8005acc:	7819      	ldrb	r1, [r3, #0]
 8005ace:	6061      	str	r1, [r4, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	f7ff fd5e 	bl	8005592 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 8005ad6:	4606      	mov	r6, r0
 8005ad8:	b1b0      	cbz	r0, 8005b08 <USBD_SetConfig+0xb4>
        USBD_CtlError(pdev, req);
 8005ada:	4629      	mov	r1, r5
 8005adc:	4620      	mov	r0, r4
 8005ade:	f7ff feb1 	bl	8005844 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005ae2:	7921      	ldrb	r1, [r4, #4]
 8005ae4:	4620      	mov	r0, r4
 8005ae6:	f7ff fd5d 	bl	80055a4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005aea:	2302      	movs	r3, #2
 8005aec:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8005af0:	e7cc      	b.n	8005a8c <USBD_SetConfig+0x38>
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8005af2:	2302      	movs	r3, #2
 8005af4:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8005af8:	6041      	str	r1, [r0, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005afa:	f7ff fd53 	bl	80055a4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8005afe:	4620      	mov	r0, r4
 8005b00:	f000 fa28 	bl	8005f54 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8005b04:	2600      	movs	r6, #0
 8005b06:	e7c1      	b.n	8005a8c <USBD_SetConfig+0x38>
        (void)USBD_CtlSendStatus(pdev);
 8005b08:	4620      	mov	r0, r4
 8005b0a:	f000 fa23 	bl	8005f54 <USBD_CtlSendStatus>
 8005b0e:	e7bd      	b.n	8005a8c <USBD_SetConfig+0x38>
      (void)USBD_CtlSendStatus(pdev);
 8005b10:	f000 fa20 	bl	8005f54 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8005b14:	2600      	movs	r6, #0
 8005b16:	e7b9      	b.n	8005a8c <USBD_SetConfig+0x38>
 8005b18:	2000037e 	.word	0x2000037e

08005b1c <USBD_GetConfig>:
{
 8005b1c:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 8005b1e:	88cb      	ldrh	r3, [r1, #6]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d10b      	bne.n	8005b3c <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 8005b24:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005b28:	b19b      	cbz	r3, 8005b52 <USBD_GetConfig+0x36>
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	d909      	bls.n	8005b42 <USBD_GetConfig+0x26>
 8005b2e:	2b03      	cmp	r3, #3
 8005b30:	d10f      	bne.n	8005b52 <USBD_GetConfig+0x36>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005b32:	2201      	movs	r2, #1
 8005b34:	1d01      	adds	r1, r0, #4
 8005b36:	f000 f9e1 	bl	8005efc <USBD_CtlSendData>
      break;
 8005b3a:	e001      	b.n	8005b40 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 8005b3c:	f7ff fe82 	bl	8005844 <USBD_CtlError>
}
 8005b40:	bd08      	pop	{r3, pc}
      pdev->dev_default_config = 0U;
 8005b42:	4601      	mov	r1, r0
 8005b44:	2300      	movs	r3, #0
 8005b46:	f841 3f08 	str.w	r3, [r1, #8]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f000 f9d6 	bl	8005efc <USBD_CtlSendData>
      break;
 8005b50:	e7f6      	b.n	8005b40 <USBD_GetConfig+0x24>
      USBD_CtlError(pdev, req);
 8005b52:	f7ff fe77 	bl	8005844 <USBD_CtlError>
}
 8005b56:	e7f3      	b.n	8005b40 <USBD_GetConfig+0x24>

08005b58 <USBD_GetStatus>:
{
 8005b58:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8005b5a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d812      	bhi.n	8005b8a <USBD_GetStatus+0x32>
    if (req->wLength != 0x2U)
 8005b64:	88cb      	ldrh	r3, [r1, #6]
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d10c      	bne.n	8005b84 <USBD_GetStatus+0x2c>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup != 0U)
 8005b6e:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8005b72:	b10b      	cbz	r3, 8005b78 <USBD_GetStatus+0x20>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005b74:	2303      	movs	r3, #3
 8005b76:	60c3      	str	r3, [r0, #12]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005b78:	2202      	movs	r2, #2
 8005b7a:	f100 010c 	add.w	r1, r0, #12
 8005b7e:	f000 f9bd 	bl	8005efc <USBD_CtlSendData>
}
 8005b82:	bd08      	pop	{r3, pc}
      USBD_CtlError(pdev, req);
 8005b84:	f7ff fe5e 	bl	8005844 <USBD_CtlError>
      break;
 8005b88:	e7fb      	b.n	8005b82 <USBD_GetStatus+0x2a>
    USBD_CtlError(pdev, req);
 8005b8a:	f7ff fe5b 	bl	8005844 <USBD_CtlError>
}
 8005b8e:	e7f8      	b.n	8005b82 <USBD_GetStatus+0x2a>

08005b90 <USBD_ClrFeature>:
{
 8005b90:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8005b92:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005b96:	3b01      	subs	r3, #1
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d809      	bhi.n	8005bb0 <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005b9c:	884b      	ldrh	r3, [r1, #2]
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d000      	beq.n	8005ba4 <USBD_ClrFeature+0x14>
}
 8005ba2:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005baa:	f000 f9d3 	bl	8005f54 <USBD_CtlSendStatus>
 8005bae:	e7f8      	b.n	8005ba2 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 8005bb0:	f7ff fe48 	bl	8005844 <USBD_CtlError>
}
 8005bb4:	e7f5      	b.n	8005ba2 <USBD_ClrFeature+0x12>

08005bb6 <USBD_StdDevReq>:
{
 8005bb6:	b508      	push	{r3, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005bb8:	780b      	ldrb	r3, [r1, #0]
 8005bba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005bbe:	2b20      	cmp	r3, #32
 8005bc0:	d006      	beq.n	8005bd0 <USBD_StdDevReq+0x1a>
 8005bc2:	2b40      	cmp	r3, #64	; 0x40
 8005bc4:	d004      	beq.n	8005bd0 <USBD_StdDevReq+0x1a>
 8005bc6:	b143      	cbz	r3, 8005bda <USBD_StdDevReq+0x24>
    USBD_CtlError(pdev, req);
 8005bc8:	f7ff fe3c 	bl	8005844 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8005bcc:	2000      	movs	r0, #0
    break;
 8005bce:	e003      	b.n	8005bd8 <USBD_StdDevReq+0x22>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005bd0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	4798      	blx	r3
}
 8005bd8:	bd08      	pop	{r3, pc}
    switch (req->bRequest)
 8005bda:	784b      	ldrb	r3, [r1, #1]
 8005bdc:	2b09      	cmp	r3, #9
 8005bde:	d821      	bhi.n	8005c24 <USBD_StdDevReq+0x6e>
 8005be0:	e8df f003 	tbb	[pc, r3]
 8005be4:	18201c14 	.word	0x18201c14
 8005be8:	20050920 	.word	0x20050920
 8005bec:	0d10      	.short	0x0d10
      USBD_GetDescriptor(pdev, req);
 8005bee:	f7ff fe33 	bl	8005858 <USBD_GetDescriptor>
  USBD_StatusTypeDef ret = USBD_OK;
 8005bf2:	2000      	movs	r0, #0
      break;
 8005bf4:	e7f0      	b.n	8005bd8 <USBD_StdDevReq+0x22>
      USBD_SetAddress(pdev, req);
 8005bf6:	f7ff ff05 	bl	8005a04 <USBD_SetAddress>
  USBD_StatusTypeDef ret = USBD_OK;
 8005bfa:	2000      	movs	r0, #0
      break;
 8005bfc:	e7ec      	b.n	8005bd8 <USBD_StdDevReq+0x22>
      ret = USBD_SetConfig(pdev, req);
 8005bfe:	f7ff ff29 	bl	8005a54 <USBD_SetConfig>
      break;
 8005c02:	e7e9      	b.n	8005bd8 <USBD_StdDevReq+0x22>
      USBD_GetConfig(pdev, req);
 8005c04:	f7ff ff8a 	bl	8005b1c <USBD_GetConfig>
  USBD_StatusTypeDef ret = USBD_OK;
 8005c08:	2000      	movs	r0, #0
      break;
 8005c0a:	e7e5      	b.n	8005bd8 <USBD_StdDevReq+0x22>
      USBD_GetStatus(pdev, req);
 8005c0c:	f7ff ffa4 	bl	8005b58 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8005c10:	2000      	movs	r0, #0
      break;
 8005c12:	e7e1      	b.n	8005bd8 <USBD_StdDevReq+0x22>
      USBD_SetFeature(pdev, req);
 8005c14:	f7ff fdf8 	bl	8005808 <USBD_SetFeature>
  USBD_StatusTypeDef ret = USBD_OK;
 8005c18:	2000      	movs	r0, #0
      break;
 8005c1a:	e7dd      	b.n	8005bd8 <USBD_StdDevReq+0x22>
      USBD_ClrFeature(pdev, req);
 8005c1c:	f7ff ffb8 	bl	8005b90 <USBD_ClrFeature>
  USBD_StatusTypeDef ret = USBD_OK;
 8005c20:	2000      	movs	r0, #0
      break;
 8005c22:	e7d9      	b.n	8005bd8 <USBD_StdDevReq+0x22>
      USBD_CtlError(pdev, req);
 8005c24:	f7ff fe0e 	bl	8005844 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8005c28:	2000      	movs	r0, #0
      break;
 8005c2a:	e7d5      	b.n	8005bd8 <USBD_StdDevReq+0x22>

08005c2c <USBD_StdItfReq>:
{
 8005c2c:	b570      	push	{r4, r5, r6, lr}
 8005c2e:	4605      	mov	r5, r0
 8005c30:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c32:	780b      	ldrb	r3, [r1, #0]
 8005c34:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c38:	2b20      	cmp	r3, #32
 8005c3a:	d007      	beq.n	8005c4c <USBD_StdItfReq+0x20>
 8005c3c:	2b40      	cmp	r3, #64	; 0x40
 8005c3e:	d005      	beq.n	8005c4c <USBD_StdItfReq+0x20>
 8005c40:	b123      	cbz	r3, 8005c4c <USBD_StdItfReq+0x20>
    USBD_CtlError(pdev, req);
 8005c42:	f7ff fdff 	bl	8005844 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8005c46:	2600      	movs	r6, #0
}
 8005c48:	4630      	mov	r0, r6
 8005c4a:	bd70      	pop	{r4, r5, r6, pc}
    switch (pdev->dev_state)
 8005c4c:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 8005c50:	3b01      	subs	r3, #1
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d818      	bhi.n	8005c88 <USBD_StdItfReq+0x5c>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005c56:	7923      	ldrb	r3, [r4, #4]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d80f      	bhi.n	8005c7c <USBD_StdItfReq+0x50>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005c5c:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	4621      	mov	r1, r4
 8005c64:	4628      	mov	r0, r5
 8005c66:	4798      	blx	r3
 8005c68:	4606      	mov	r6, r0
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8005c6a:	88e3      	ldrh	r3, [r4, #6]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d1eb      	bne.n	8005c48 <USBD_StdItfReq+0x1c>
 8005c70:	2800      	cmp	r0, #0
 8005c72:	d1e9      	bne.n	8005c48 <USBD_StdItfReq+0x1c>
          (void)USBD_CtlSendStatus(pdev);
 8005c74:	4628      	mov	r0, r5
 8005c76:	f000 f96d 	bl	8005f54 <USBD_CtlSendStatus>
 8005c7a:	e7e5      	b.n	8005c48 <USBD_StdItfReq+0x1c>
        USBD_CtlError(pdev, req);
 8005c7c:	4621      	mov	r1, r4
 8005c7e:	4628      	mov	r0, r5
 8005c80:	f7ff fde0 	bl	8005844 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8005c84:	2600      	movs	r6, #0
 8005c86:	e7df      	b.n	8005c48 <USBD_StdItfReq+0x1c>
      USBD_CtlError(pdev, req);
 8005c88:	4621      	mov	r1, r4
 8005c8a:	4628      	mov	r0, r5
 8005c8c:	f7ff fdda 	bl	8005844 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8005c90:	2600      	movs	r6, #0
      break;
 8005c92:	e7d9      	b.n	8005c48 <USBD_StdItfReq+0x1c>

08005c94 <USBD_StdEPReq>:
{
 8005c94:	b538      	push	{r3, r4, r5, lr}
 8005c96:	4605      	mov	r5, r0
 8005c98:	460c      	mov	r4, r1
  ep_addr = LOBYTE(req->wIndex);
 8005c9a:	888a      	ldrh	r2, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c9c:	780b      	ldrb	r3, [r1, #0]
 8005c9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ca2:	2b20      	cmp	r3, #32
 8005ca4:	d008      	beq.n	8005cb8 <USBD_StdEPReq+0x24>
 8005ca6:	b2d1      	uxtb	r1, r2
 8005ca8:	2b40      	cmp	r3, #64	; 0x40
 8005caa:	d005      	beq.n	8005cb8 <USBD_StdEPReq+0x24>
 8005cac:	b15b      	cbz	r3, 8005cc6 <USBD_StdEPReq+0x32>
    USBD_CtlError(pdev, req);
 8005cae:	4621      	mov	r1, r4
 8005cb0:	f7ff fdc8 	bl	8005844 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8005cb4:	2000      	movs	r0, #0
    break;
 8005cb6:	e005      	b.n	8005cc4 <USBD_StdEPReq+0x30>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005cb8:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	4621      	mov	r1, r4
 8005cc0:	4628      	mov	r0, r5
 8005cc2:	4798      	blx	r3
}
 8005cc4:	bd38      	pop	{r3, r4, r5, pc}
    switch (req->bRequest)
 8005cc6:	7863      	ldrb	r3, [r4, #1]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d038      	beq.n	8005d3e <USBD_StdEPReq+0xaa>
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d06b      	beq.n	8005da8 <USBD_StdEPReq+0x114>
 8005cd0:	2b03      	cmp	r3, #3
 8005cd2:	f040 80f0 	bne.w	8005eb6 <USBD_StdEPReq+0x222>
      switch (pdev->dev_state)
 8005cd6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d006      	beq.n	8005cec <USBD_StdEPReq+0x58>
 8005cde:	2b03      	cmp	r3, #3
 8005ce0:	d019      	beq.n	8005d16 <USBD_StdEPReq+0x82>
        USBD_CtlError(pdev, req);
 8005ce2:	4621      	mov	r1, r4
 8005ce4:	f7ff fdae 	bl	8005844 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8005ce8:	2000      	movs	r0, #0
        break;
 8005cea:	e7eb      	b.n	8005cc4 <USBD_StdEPReq+0x30>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005cec:	f1b1 0380 	subs.w	r3, r1, #128	; 0x80
 8005cf0:	bf18      	it	ne
 8005cf2:	2301      	movne	r3, #1
 8005cf4:	2900      	cmp	r1, #0
 8005cf6:	bf08      	it	eq
 8005cf8:	2300      	moveq	r3, #0
 8005cfa:	b13b      	cbz	r3, 8005d0c <USBD_StdEPReq+0x78>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005cfc:	f001 ff08 	bl	8007b10 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005d00:	2180      	movs	r1, #128	; 0x80
 8005d02:	4628      	mov	r0, r5
 8005d04:	f001 ff04 	bl	8007b10 <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 8005d08:	2000      	movs	r0, #0
 8005d0a:	e7db      	b.n	8005cc4 <USBD_StdEPReq+0x30>
          USBD_CtlError(pdev, req);
 8005d0c:	4621      	mov	r1, r4
 8005d0e:	f7ff fd99 	bl	8005844 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8005d12:	2000      	movs	r0, #0
 8005d14:	e7d6      	b.n	8005cc4 <USBD_StdEPReq+0x30>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005d16:	8863      	ldrh	r3, [r4, #2]
 8005d18:	b94b      	cbnz	r3, 8005d2e <USBD_StdEPReq+0x9a>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005d1a:	f1b1 0380 	subs.w	r3, r1, #128	; 0x80
 8005d1e:	bf18      	it	ne
 8005d20:	2301      	movne	r3, #1
 8005d22:	2900      	cmp	r1, #0
 8005d24:	bf08      	it	eq
 8005d26:	2300      	moveq	r3, #0
 8005d28:	b10b      	cbz	r3, 8005d2e <USBD_StdEPReq+0x9a>
 8005d2a:	88e3      	ldrh	r3, [r4, #6]
 8005d2c:	b123      	cbz	r3, 8005d38 <USBD_StdEPReq+0xa4>
        (void)USBD_CtlSendStatus(pdev);
 8005d2e:	4628      	mov	r0, r5
 8005d30:	f000 f910 	bl	8005f54 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8005d34:	2000      	movs	r0, #0
        break;
 8005d36:	e7c5      	b.n	8005cc4 <USBD_StdEPReq+0x30>
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8005d38:	f001 feea 	bl	8007b10 <USBD_LL_StallEP>
 8005d3c:	e7f7      	b.n	8005d2e <USBD_StdEPReq+0x9a>
      switch (pdev->dev_state)
 8005d3e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d006      	beq.n	8005d54 <USBD_StdEPReq+0xc0>
 8005d46:	2b03      	cmp	r3, #3
 8005d48:	d019      	beq.n	8005d7e <USBD_StdEPReq+0xea>
        USBD_CtlError(pdev, req);
 8005d4a:	4621      	mov	r1, r4
 8005d4c:	f7ff fd7a 	bl	8005844 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8005d50:	2000      	movs	r0, #0
        break;
 8005d52:	e7b7      	b.n	8005cc4 <USBD_StdEPReq+0x30>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d54:	f1b1 0380 	subs.w	r3, r1, #128	; 0x80
 8005d58:	bf18      	it	ne
 8005d5a:	2301      	movne	r3, #1
 8005d5c:	2900      	cmp	r1, #0
 8005d5e:	bf08      	it	eq
 8005d60:	2300      	moveq	r3, #0
 8005d62:	b13b      	cbz	r3, 8005d74 <USBD_StdEPReq+0xe0>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005d64:	f001 fed4 	bl	8007b10 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005d68:	2180      	movs	r1, #128	; 0x80
 8005d6a:	4628      	mov	r0, r5
 8005d6c:	f001 fed0 	bl	8007b10 <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 8005d70:	2000      	movs	r0, #0
 8005d72:	e7a7      	b.n	8005cc4 <USBD_StdEPReq+0x30>
          USBD_CtlError(pdev, req);
 8005d74:	4621      	mov	r1, r4
 8005d76:	f7ff fd65 	bl	8005844 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8005d7a:	2000      	movs	r0, #0
 8005d7c:	e7a2      	b.n	8005cc4 <USBD_StdEPReq+0x30>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005d7e:	8863      	ldrh	r3, [r4, #2]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f040 809d 	bne.w	8005ec0 <USBD_StdEPReq+0x22c>
          if ((ep_addr & 0x7FU) != 0x00U)
 8005d86:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 8005d8a:	d10a      	bne.n	8005da2 <USBD_StdEPReq+0x10e>
          (void)USBD_CtlSendStatus(pdev);
 8005d8c:	4628      	mov	r0, r5
 8005d8e:	f000 f8e1 	bl	8005f54 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005d92:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	4621      	mov	r1, r4
 8005d9a:	4628      	mov	r0, r5
 8005d9c:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 8005d9e:	2000      	movs	r0, #0
 8005da0:	e790      	b.n	8005cc4 <USBD_StdEPReq+0x30>
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005da2:	f001 febd 	bl	8007b20 <USBD_LL_ClearStallEP>
 8005da6:	e7f1      	b.n	8005d8c <USBD_StdEPReq+0xf8>
      switch (pdev->dev_state)
 8005da8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d006      	beq.n	8005dbe <USBD_StdEPReq+0x12a>
 8005db0:	2b03      	cmp	r3, #3
 8005db2:	d02f      	beq.n	8005e14 <USBD_StdEPReq+0x180>
        USBD_CtlError(pdev, req);
 8005db4:	4621      	mov	r1, r4
 8005db6:	f7ff fd45 	bl	8005844 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8005dba:	2000      	movs	r0, #0
        break;
 8005dbc:	e782      	b.n	8005cc4 <USBD_StdEPReq+0x30>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005dbe:	f1b1 0380 	subs.w	r3, r1, #128	; 0x80
 8005dc2:	bf18      	it	ne
 8005dc4:	2301      	movne	r3, #1
 8005dc6:	2900      	cmp	r1, #0
 8005dc8:	bf08      	it	eq
 8005dca:	2300      	moveq	r3, #0
 8005dcc:	b99b      	cbnz	r3, 8005df6 <USBD_StdEPReq+0x162>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005dce:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005dd2:	d115      	bne.n	8005e00 <USBD_StdEPReq+0x16c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005dd4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005dd8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005ddc:	008b      	lsls	r3, r1, #2
 8005dde:	f503 71a8 	add.w	r1, r3, #336	; 0x150
 8005de2:	4401      	add	r1, r0
 8005de4:	3104      	adds	r1, #4
        pep->status = 0x0000U;
 8005de6:	2400      	movs	r4, #0
 8005de8:	600c      	str	r4, [r1, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005dea:	2202      	movs	r2, #2
 8005dec:	4628      	mov	r0, r5
 8005dee:	f000 f885 	bl	8005efc <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8005df2:	4620      	mov	r0, r4
        break;
 8005df4:	e766      	b.n	8005cc4 <USBD_StdEPReq+0x30>
          USBD_CtlError(pdev, req);
 8005df6:	4621      	mov	r1, r4
 8005df8:	f7ff fd24 	bl	8005844 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8005dfc:	2000      	movs	r0, #0
          break;
 8005dfe:	e761      	b.n	8005cc4 <USBD_StdEPReq+0x30>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e00:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8005e04:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005e08:	008b      	lsls	r3, r1, #2
 8005e0a:	f103 0110 	add.w	r1, r3, #16
 8005e0e:	4401      	add	r1, r0
 8005e10:	3104      	adds	r1, #4
 8005e12:	e7e8      	b.n	8005de6 <USBD_StdEPReq+0x152>
        if ((ep_addr & 0x80U) == 0x80U)
 8005e14:	b252      	sxtb	r2, r2
 8005e16:	2a00      	cmp	r2, #0
 8005e18:	db24      	blt.n	8005e64 <USBD_StdEPReq+0x1d0>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005e1a:	f001 030f 	and.w	r3, r1, #15
 8005e1e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005e22:	0098      	lsls	r0, r3, #2
 8005e24:	4428      	add	r0, r5
 8005e26:	f8b0 3164 	ldrh.w	r3, [r0, #356]	; 0x164
 8005e2a:	b353      	cbz	r3, 8005e82 <USBD_StdEPReq+0x1ee>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e2c:	2a00      	cmp	r2, #0
 8005e2e:	db2e      	blt.n	8005e8e <USBD_StdEPReq+0x1fa>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005e30:	f001 027f 	and.w	r2, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e34:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005e38:	0093      	lsls	r3, r2, #2
 8005e3a:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 8005e3e:	442c      	add	r4, r5
 8005e40:	3404      	adds	r4, #4
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005e42:	2980      	cmp	r1, #128	; 0x80
 8005e44:	bf14      	ite	ne
 8005e46:	2300      	movne	r3, #0
 8005e48:	2301      	moveq	r3, #1
 8005e4a:	2900      	cmp	r1, #0
 8005e4c:	bf08      	it	eq
 8005e4e:	2301      	moveq	r3, #1
 8005e50:	b33b      	cbz	r3, 8005ea2 <USBD_StdEPReq+0x20e>
            pep->status = 0x0000U;
 8005e52:	2300      	movs	r3, #0
 8005e54:	6023      	str	r3, [r4, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005e56:	2202      	movs	r2, #2
 8005e58:	4621      	mov	r1, r4
 8005e5a:	4628      	mov	r0, r5
 8005e5c:	f000 f84e 	bl	8005efc <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8005e60:	2000      	movs	r0, #0
          break;
 8005e62:	e72f      	b.n	8005cc4 <USBD_StdEPReq+0x30>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005e64:	f001 030f 	and.w	r3, r1, #15
 8005e68:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005e6c:	0098      	lsls	r0, r3, #2
 8005e6e:	4428      	add	r0, r5
 8005e70:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d1da      	bne.n	8005e2c <USBD_StdEPReq+0x198>
            USBD_CtlError(pdev, req);
 8005e76:	4621      	mov	r1, r4
 8005e78:	4628      	mov	r0, r5
 8005e7a:	f7ff fce3 	bl	8005844 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8005e7e:	2000      	movs	r0, #0
            break;
 8005e80:	e720      	b.n	8005cc4 <USBD_StdEPReq+0x30>
            USBD_CtlError(pdev, req);
 8005e82:	4621      	mov	r1, r4
 8005e84:	4628      	mov	r0, r5
 8005e86:	f7ff fcdd 	bl	8005844 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8005e8a:	2000      	movs	r0, #0
            break;
 8005e8c:	e71a      	b.n	8005cc4 <USBD_StdEPReq+0x30>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e8e:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 8005e92:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005e96:	0093      	lsls	r3, r2, #2
 8005e98:	f103 0410 	add.w	r4, r3, #16
 8005e9c:	442c      	add	r4, r5
 8005e9e:	3404      	adds	r4, #4
 8005ea0:	e7cf      	b.n	8005e42 <USBD_StdEPReq+0x1ae>
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005ea2:	4628      	mov	r0, r5
 8005ea4:	f001 fdc0 	bl	8007a28 <USBD_LL_IsStallEP>
 8005ea8:	b110      	cbz	r0, 8005eb0 <USBD_StdEPReq+0x21c>
            pep->status = 0x0001U;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	6023      	str	r3, [r4, #0]
 8005eae:	e7d2      	b.n	8005e56 <USBD_StdEPReq+0x1c2>
            pep->status = 0x0000U;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	6023      	str	r3, [r4, #0]
 8005eb4:	e7cf      	b.n	8005e56 <USBD_StdEPReq+0x1c2>
      USBD_CtlError(pdev, req);
 8005eb6:	4621      	mov	r1, r4
 8005eb8:	f7ff fcc4 	bl	8005844 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8005ebc:	2000      	movs	r0, #0
      break;
 8005ebe:	e701      	b.n	8005cc4 <USBD_StdEPReq+0x30>
  USBD_StatusTypeDef ret = USBD_OK;
 8005ec0:	2000      	movs	r0, #0
 8005ec2:	e6ff      	b.n	8005cc4 <USBD_StdEPReq+0x30>

08005ec4 <USBD_GetString>:
  if (desc == NULL)
 8005ec4:	b1c8      	cbz	r0, 8005efa <USBD_GetString+0x36>
{
 8005ec6:	b570      	push	{r4, r5, r6, lr}
 8005ec8:	460d      	mov	r5, r1
 8005eca:	4616      	mov	r6, r2
 8005ecc:	4604      	mov	r4, r0
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005ece:	f7ff fc91 	bl	80057f4 <USBD_GetLen>
 8005ed2:	3001      	adds	r0, #1
 8005ed4:	0040      	lsls	r0, r0, #1
 8005ed6:	8030      	strh	r0, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 8005ed8:	7028      	strb	r0, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005eda:	2303      	movs	r3, #3
 8005edc:	706b      	strb	r3, [r5, #1]
  idx++;
 8005ede:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 8005ee0:	e007      	b.n	8005ef2 <USBD_GetString+0x2e>
    unicode[idx] = *pdesc;
 8005ee2:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 8005ee4:	3401      	adds	r4, #1
    idx++;
 8005ee6:	1c5a      	adds	r2, r3, #1
 8005ee8:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 8005eea:	2100      	movs	r1, #0
 8005eec:	54a9      	strb	r1, [r5, r2]
    idx++;
 8005eee:	3302      	adds	r3, #2
 8005ef0:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 8005ef2:	7822      	ldrb	r2, [r4, #0]
 8005ef4:	2a00      	cmp	r2, #0
 8005ef6:	d1f4      	bne.n	8005ee2 <USBD_GetString+0x1e>
}
 8005ef8:	bd70      	pop	{r4, r5, r6, pc}
 8005efa:	4770      	bx	lr

08005efc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005efc:	b510      	push	{r4, lr}
 8005efe:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005f00:	2202      	movs	r2, #2
 8005f02:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005f06:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length = len;
 8005f08:	61c3      	str	r3, [r0, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005f0a:	460a      	mov	r2, r1
 8005f0c:	2100      	movs	r1, #0
 8005f0e:	f001 fe17 	bl	8007b40 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005f12:	2000      	movs	r0, #0
 8005f14:	bd10      	pop	{r4, pc}

08005f16 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005f16:	b508      	push	{r3, lr}
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005f18:	4613      	mov	r3, r2
 8005f1a:	460a      	mov	r2, r1
 8005f1c:	2100      	movs	r1, #0
 8005f1e:	f001 fe0f 	bl	8007b40 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005f22:	2000      	movs	r0, #0
 8005f24:	bd08      	pop	{r3, pc}

08005f26 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005f26:	b510      	push	{r4, lr}
 8005f28:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005f2a:	2203      	movs	r2, #3
 8005f2c:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005f30:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8005f34:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005f38:	460a      	mov	r2, r1
 8005f3a:	2100      	movs	r1, #0
 8005f3c:	f001 fe08 	bl	8007b50 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005f40:	2000      	movs	r0, #0
 8005f42:	bd10      	pop	{r4, pc}

08005f44 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005f44:	b508      	push	{r3, lr}
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005f46:	4613      	mov	r3, r2
 8005f48:	460a      	mov	r2, r1
 8005f4a:	2100      	movs	r1, #0
 8005f4c:	f001 fe00 	bl	8007b50 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005f50:	2000      	movs	r0, #0
 8005f52:	bd08      	pop	{r3, pc}

08005f54 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005f54:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005f56:	2304      	movs	r3, #4
 8005f58:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	461a      	mov	r2, r3
 8005f60:	4619      	mov	r1, r3
 8005f62:	f001 fded 	bl	8007b40 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005f66:	2000      	movs	r0, #0
 8005f68:	bd08      	pop	{r3, pc}

08005f6a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005f6a:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005f6c:	2305      	movs	r3, #5
 8005f6e:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f72:	2300      	movs	r3, #0
 8005f74:	461a      	mov	r2, r3
 8005f76:	4619      	mov	r1, r3
 8005f78:	f001 fdea 	bl	8007b50 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005f7c:	2000      	movs	r0, #0
 8005f7e:	bd08      	pop	{r3, pc}

08005f80 <GUI_X_Config>:
*
* Purpose:
*   Called during the initialization process in order to set up the
*   available memory for the GUI.
*/
void GUI_X_Config(void) {
 8005f80:	b508      	push	{r3, lr}
  //
  static U32 aMemory[GUI_NUMBYTES / 4];
  //
  // Assign memory to emWin
  //
  GUI_ALLOC_AssignMemory(aMemory, GUI_NUMBYTES);
 8005f82:	f44f 31c8 	mov.w	r1, #102400	; 0x19000
 8005f86:	4803      	ldr	r0, [pc, #12]	; (8005f94 <GUI_X_Config+0x14>)
 8005f88:	f00b f94a 	bl	8011220 <GUI_ALLOC_AssignMemory>
  //
  // Set default font
  //
  GUI_SetDefaultFont(GUI_FONT_6X8);
 8005f8c:	4802      	ldr	r0, [pc, #8]	; (8005f98 <GUI_X_Config+0x18>)
 8005f8e:	f009 fdfd 	bl	800fb8c <GUI_SetDefaultFont>
}
 8005f92:	bd08      	pop	{r3, pc}
 8005f94:	20000380 	.word	0x20000380
 8005f98:	080172d0 	.word	0x080172d0

08005f9c <GUI_X_GetTime>:
  and delay function. Default time unit (tick), normally is
  1 ms.
*/

GUI_TIMER_TIME GUI_X_GetTime(void) { 
  return OS_TimeMS; 
 8005f9c:	4b01      	ldr	r3, [pc, #4]	; (8005fa4 <GUI_X_GetTime+0x8>)
 8005f9e:	6818      	ldr	r0, [r3, #0]
}
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	20019760 	.word	0x20019760

08005fa8 <GUI_X_Delay>:

void GUI_X_Delay(int ms) { 
  int tEnd = OS_TimeMS + ms;
 8005fa8:	4b04      	ldr	r3, [pc, #16]	; (8005fbc <GUI_X_Delay+0x14>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4418      	add	r0, r3
  while ((tEnd - OS_TimeMS) > 0);
 8005fae:	4b03      	ldr	r3, [pc, #12]	; (8005fbc <GUI_X_Delay+0x14>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	1ac3      	subs	r3, r0, r3
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	dcfa      	bgt.n	8005fae <GUI_X_Delay+0x6>
}
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	20019760 	.word	0x20019760

08005fc0 <GUI_X_Init>:
*     GUI_X_Init() is called from GUI_Init is a possibility to init
*     some hardware which needs to be up and running before the GUI.
*     If not required, leave this routine blank.
*/

void GUI_X_Init(void) {}
 8005fc0:	4770      	bx	lr

08005fc2 <GUI_TOUCH_X_ActivateX>:



void GUI_TOUCH_X_ActivateX(void)
{
}
 8005fc2:	4770      	bx	lr

08005fc4 <GUI_TOUCH_X_ActivateY>:
void GUI_TOUCH_X_ActivateY(void)
{
}
 8005fc4:	4770      	bx	lr

08005fc6 <GUI_TOUCH_X_MeasureX>:
int  GUI_TOUCH_X_MeasureX(void)
{
 8005fc6:	b508      	push	{r3, lr}
  return STMPE610_GetX_TOUCH_RAW();
 8005fc8:	f7fb fa28 	bl	800141c <STMPE610_GetX_TOUCH_RAW>
}
 8005fcc:	bd08      	pop	{r3, pc}

08005fce <GUI_TOUCH_X_MeasureY>:
int  GUI_TOUCH_X_MeasureY(void)
{
 8005fce:	b508      	push	{r3, lr}
  return STMPE610_GetY_TOUCH_RAW();
 8005fd0:	f7fb fa2a 	bl	8001428 <STMPE610_GetY_TOUCH_RAW>
}
 8005fd4:	bd08      	pop	{r3, pc}
	...

08005fd8 <LCD_X_Config>:
* Function description:
*   Called during the initialization process in order to set up the
*   display driver configuration.
*
*/
void LCD_X_Config(void) {
 8005fd8:	b530      	push	{r4, r5, lr}
 8005fda:	b0a3      	sub	sp, #140	; 0x8c
  GUI_DEVICE * pDevice;
  CONFIG_FLEXCOLOR Config = {0};
 8005fdc:	2400      	movs	r4, #0
 8005fde:	941d      	str	r4, [sp, #116]	; 0x74
 8005fe0:	941e      	str	r4, [sp, #120]	; 0x78
 8005fe2:	941f      	str	r4, [sp, #124]	; 0x7c
 8005fe4:	9420      	str	r4, [sp, #128]	; 0x80
 8005fe6:	9421      	str	r4, [sp, #132]	; 0x84
  GUI_PORT_API PortAPI = {0};
 8005fe8:	2268      	movs	r2, #104	; 0x68
 8005fea:	4621      	mov	r1, r4
 8005fec:	a803      	add	r0, sp, #12
 8005fee:	f00f fb54 	bl	801569a <memset>
  //
  // Set display driver and color conversion
  //
  pDevice = GUI_DEVICE_CreateAndLink(GUIDRV_FLEXCOLOR, GUICC_M565, 0, 0);
 8005ff2:	4623      	mov	r3, r4
 8005ff4:	4622      	mov	r2, r4
 8005ff6:	491d      	ldr	r1, [pc, #116]	; (800606c <LCD_X_Config+0x94>)
 8005ff8:	481d      	ldr	r0, [pc, #116]	; (8006070 <LCD_X_Config+0x98>)
 8005ffa:	f009 fd5d 	bl	800fab8 <GUI_DEVICE_CreateAndLink>
 8005ffe:	4605      	mov	r5, r0
  //
  // Display driver configuration, required for Lin-driver
  //
  LCD_SetSizeEx (0, XSIZE_PHYS , YSIZE_PHYS);
 8006000:	f44f 7288 	mov.w	r2, #272	; 0x110
 8006004:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8006008:	4620      	mov	r0, r4
 800600a:	f007 fb07 	bl	800d61c <LCD_SetSizeEx>
  LCD_SetVSizeEx(0, XSIZE_PHYS, YSIZE_PHYS);
 800600e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8006012:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8006016:	4620      	mov	r0, r4
 8006018:	f007 fae8 	bl	800d5ec <LCD_SetVSizeEx>
  //
  // Orientation
  //
  Config.Orientation = 0;
 800601c:	941f      	str	r4, [sp, #124]	; 0x7c
  GUIDRV_FlexColor_Config(pDevice, &Config);
 800601e:	a91d      	add	r1, sp, #116	; 0x74
 8006020:	4628      	mov	r0, r5
 8006022:	f007 fa82 	bl	800d52a <GUIDRV_FlexColor_Config>
  //
  // Set controller and operation mode
  //
  PortAPI.pfWrite16_A0  = SSD1963_WriteCommand;
 8006026:	4b13      	ldr	r3, [pc, #76]	; (8006074 <LCD_X_Config+0x9c>)
 8006028:	930b      	str	r3, [sp, #44]	; 0x2c
  PortAPI.pfWrite16_A1  = SSD1963_WriteData;
 800602a:	4b13      	ldr	r3, [pc, #76]	; (8006078 <LCD_X_Config+0xa0>)
 800602c:	930c      	str	r3, [sp, #48]	; 0x30
  PortAPI.pfWriteM16_A1 = SSD1963_WriteDataMultiple;
 800602e:	4b13      	ldr	r3, [pc, #76]	; (800607c <LCD_X_Config+0xa4>)
 8006030:	930e      	str	r3, [sp, #56]	; 0x38
 // PortAPI.pfReadM16_A1  = SSD1963_ReadData;
  GUIDRV_FlexColor_SetFunc(pDevice, &PortAPI, GUIDRV_FLEXCOLOR_F66720, GUIDRV_FLEXCOLOR_M16C0B16);
 8006032:	4b13      	ldr	r3, [pc, #76]	; (8006080 <LCD_X_Config+0xa8>)
 8006034:	4a13      	ldr	r2, [pc, #76]	; (8006084 <LCD_X_Config+0xac>)
 8006036:	a903      	add	r1, sp, #12
 8006038:	4628      	mov	r0, r5
 800603a:	f007 fa94 	bl	800d566 <GUIDRV_FlexColor_SetFunc>

  GUI_TOUCH_Calibrate(GUI_COORD_X, 0, 480, GUI_TOUCH_AD_LEFT , GUI_TOUCH_AD_RIGHT);
 800603e:	f640 7374 	movw	r3, #3956	; 0xf74
 8006042:	9300      	str	r3, [sp, #0]
 8006044:	2392      	movs	r3, #146	; 0x92
 8006046:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800604a:	4621      	mov	r1, r4
 800604c:	4620      	mov	r0, r4
 800604e:	f008 fd07 	bl	800ea60 <GUI_TOUCH_Calibrate>
  GUI_TOUCH_Calibrate(GUI_COORD_Y, 0, 272, GUI_TOUCH_AD_TOP, GUI_TOUCH_AD_BOTTOM);
 8006052:	f640 7303 	movw	r3, #3843	; 0xf03
 8006056:	9300      	str	r3, [sp, #0]
 8006058:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800605c:	f44f 7288 	mov.w	r2, #272	; 0x110
 8006060:	4621      	mov	r1, r4
 8006062:	2001      	movs	r0, #1
 8006064:	f008 fcfc 	bl	800ea60 <GUI_TOUCH_Calibrate>

}
 8006068:	b023      	add	sp, #140	; 0x8c
 800606a:	bd30      	pop	{r4, r5, pc}
 800606c:	0801a7b0 	.word	0x0801a7b0
 8006070:	0801a668 	.word	0x0801a668
 8006074:	08000f3d 	.word	0x08000f3d
 8006078:	08000f95 	.word	0x08000f95
 800607c:	08000fed 	.word	0x08000fed
 8006080:	0800cf31 	.word	0x0800cf31
 8006084:	0800c895 	.word	0x0800c895

08006088 <LCD_X_DisplayDriver>:
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) {
  int r;
  (void) LayerIndex;
  (void) pData;
  
  switch (Cmd) {
 8006088:	2901      	cmp	r1, #1
 800608a:	d106      	bne.n	800609a <LCD_X_DisplayDriver+0x12>
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) {
 800608c:	b508      	push	{r3, lr}
    // display controller and put it into operation. If the display
    // controller is not initialized by any external routine this needs
    // to be adapted by the customer...
    //
    // ...
	  SSD1963_Init();
 800608e:	f7fa ffb9 	bl	8001004 <SSD1963_Init>
	  STMPE610_Init();
 8006092:	f7fb f8dd 	bl	8001250 <STMPE610_Init>
    return 0;
 8006096:	2000      	movs	r0, #0
  }
  default:
    r = -1;
  }
  return r;
}
 8006098:	bd08      	pop	{r3, pc}
  return r;
 800609a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800609e:	4770      	bx	lr

080060a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80060a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060a2:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060a4:	2400      	movs	r4, #0
 80060a6:	9405      	str	r4, [sp, #20]
 80060a8:	9406      	str	r4, [sp, #24]
 80060aa:	9407      	str	r4, [sp, #28]
 80060ac:	9408      	str	r4, [sp, #32]
 80060ae:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80060b0:	4b28      	ldr	r3, [pc, #160]	; (8006154 <MX_GPIO_Init+0xb4>)
 80060b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060b4:	f042 0204 	orr.w	r2, r2, #4
 80060b8:	631a      	str	r2, [r3, #48]	; 0x30
 80060ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060bc:	f002 0204 	and.w	r2, r2, #4
 80060c0:	9200      	str	r2, [sp, #0]
 80060c2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80060c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80060ca:	631a      	str	r2, [r3, #48]	; 0x30
 80060cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060ce:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80060d2:	9201      	str	r2, [sp, #4]
 80060d4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80060d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060d8:	f042 0201 	orr.w	r2, r2, #1
 80060dc:	631a      	str	r2, [r3, #48]	; 0x30
 80060de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060e0:	f002 0201 	and.w	r2, r2, #1
 80060e4:	9202      	str	r2, [sp, #8]
 80060e6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80060e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060ee:	631a      	str	r2, [r3, #48]	; 0x30
 80060f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060f2:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80060f6:	9203      	str	r2, [sp, #12]
 80060f8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80060fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060fc:	f042 0202 	orr.w	r2, r2, #2
 8006100:	631a      	str	r2, [r3, #48]	; 0x30
 8006102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006104:	f003 0302 	and.w	r3, r3, #2
 8006108:	9304      	str	r3, [sp, #16]
 800610a:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_15, GPIO_PIN_RESET);
 800610c:	4f12      	ldr	r7, [pc, #72]	; (8006158 <MX_GPIO_Init+0xb8>)
 800610e:	4622      	mov	r2, r4
 8006110:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006114:	4638      	mov	r0, r7
 8006116:	f7fb fb45 	bl	80017a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800611a:	4d10      	ldr	r5, [pc, #64]	; (800615c <MX_GPIO_Init+0xbc>)
 800611c:	4622      	mov	r2, r4
 800611e:	2108      	movs	r1, #8
 8006120:	4628      	mov	r0, r5
 8006122:	f7fb fb3f 	bl	80017a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006126:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800612a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800612c:	2601      	movs	r6, #1
 800612e:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006130:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006132:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006134:	a905      	add	r1, sp, #20
 8006136:	4638      	mov	r0, r7
 8006138:	f7fb fa40 	bl	80015bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800613c:	2308      	movs	r3, #8
 800613e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006140:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006142:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006144:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006146:	a905      	add	r1, sp, #20
 8006148:	4628      	mov	r0, r5
 800614a:	f7fb fa37 	bl	80015bc <HAL_GPIO_Init>

}
 800614e:	b00b      	add	sp, #44	; 0x2c
 8006150:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006152:	bf00      	nop
 8006154:	40023800 	.word	0x40023800
 8006158:	40021800 	.word	0x40021800
 800615c:	40020400 	.word	0x40020400

08006160 <MX_I2C1_Init>:
{
 8006160:	b538      	push	{r3, r4, r5, lr}
  hi2c1.Instance = I2C1;
 8006162:	4c0d      	ldr	r4, [pc, #52]	; (8006198 <MX_I2C1_Init+0x38>)
 8006164:	4b0d      	ldr	r3, [pc, #52]	; (800619c <MX_I2C1_Init+0x3c>)
 8006166:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8006168:	4b0d      	ldr	r3, [pc, #52]	; (80061a0 <MX_I2C1_Init+0x40>)
 800616a:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800616c:	2500      	movs	r5, #0
 800616e:	60a5      	str	r5, [r4, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006170:	2301      	movs	r3, #1
 8006172:	60e3      	str	r3, [r4, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006174:	6125      	str	r5, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8006176:	6165      	str	r5, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006178:	61a5      	str	r5, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800617a:	61e5      	str	r5, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800617c:	6225      	str	r5, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800617e:	4620      	mov	r0, r4
 8006180:	f7fb fcb6 	bl	8001af0 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006184:	4629      	mov	r1, r5
 8006186:	4620      	mov	r0, r4
 8006188:	f7fb fe8c 	bl	8001ea4 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800618c:	4629      	mov	r1, r5
 800618e:	4620      	mov	r0, r4
 8006190:	f7fb feb6 	bl	8001f00 <HAL_I2CEx_ConfigDigitalFilter>
}
 8006194:	bd38      	pop	{r3, r4, r5, pc}
 8006196:	bf00      	nop
 8006198:	200197c8 	.word	0x200197c8
 800619c:	40005400 	.word	0x40005400
 80061a0:	20303e5d 	.word	0x20303e5d

080061a4 <MX_RTC_Init>:
{
 80061a4:	b530      	push	{r4, r5, lr}
 80061a6:	b089      	sub	sp, #36	; 0x24
  RTC_TimeTypeDef sTime = {0};
 80061a8:	2400      	movs	r4, #0
 80061aa:	9402      	str	r4, [sp, #8]
 80061ac:	9403      	str	r4, [sp, #12]
 80061ae:	9404      	str	r4, [sp, #16]
 80061b0:	9405      	str	r4, [sp, #20]
 80061b2:	9406      	str	r4, [sp, #24]
 80061b4:	9407      	str	r4, [sp, #28]
  RTC_DateTypeDef sDate = {0};
 80061b6:	9401      	str	r4, [sp, #4]
  hrtc.Instance = RTC;
 80061b8:	4d16      	ldr	r5, [pc, #88]	; (8006214 <MX_RTC_Init+0x70>)
 80061ba:	4b17      	ldr	r3, [pc, #92]	; (8006218 <MX_RTC_Init+0x74>)
 80061bc:	602b      	str	r3, [r5, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80061be:	606c      	str	r4, [r5, #4]
  hrtc.Init.AsynchPrediv = 127;
 80061c0:	237f      	movs	r3, #127	; 0x7f
 80061c2:	60ab      	str	r3, [r5, #8]
  hrtc.Init.SynchPrediv = 255;
 80061c4:	23ff      	movs	r3, #255	; 0xff
 80061c6:	60eb      	str	r3, [r5, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80061c8:	612c      	str	r4, [r5, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80061ca:	616c      	str	r4, [r5, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80061cc:	61ac      	str	r4, [r5, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80061ce:	4628      	mov	r0, r5
 80061d0:	f7fd fb3a 	bl	8003848 <HAL_RTC_Init>
  sTime.Hours = 0x12;
 80061d4:	2312      	movs	r3, #18
 80061d6:	f88d 3008 	strb.w	r3, [sp, #8]
  sTime.Minutes = 0x12;
 80061da:	f88d 3009 	strb.w	r3, [sp, #9]
  sTime.Seconds = 0x12;
 80061de:	f88d 300a 	strb.w	r3, [sp, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80061e2:	9406      	str	r4, [sp, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80061e4:	9407      	str	r4, [sp, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80061e6:	2201      	movs	r2, #1
 80061e8:	a902      	add	r1, sp, #8
 80061ea:	4628      	mov	r0, r5
 80061ec:	f7fd fb9a 	bl	8003924 <HAL_RTC_SetTime>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80061f0:	2201      	movs	r2, #1
 80061f2:	f88d 2004 	strb.w	r2, [sp, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 80061f6:	f88d 2005 	strb.w	r2, [sp, #5]
  sDate.Date = 0x11;
 80061fa:	2311      	movs	r3, #17
 80061fc:	f88d 3006 	strb.w	r3, [sp, #6]
  sDate.Year = 0x24;
 8006200:	2324      	movs	r3, #36	; 0x24
 8006202:	f88d 3007 	strb.w	r3, [sp, #7]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8006206:	a901      	add	r1, sp, #4
 8006208:	4628      	mov	r0, r5
 800620a:	f7fd fc0b 	bl	8003a24 <HAL_RTC_SetDate>
}
 800620e:	b009      	add	sp, #36	; 0x24
 8006210:	bd30      	pop	{r4, r5, pc}
 8006212:	bf00      	nop
 8006214:	200198bc 	.word	0x200198bc
 8006218:	40002800 	.word	0x40002800

0800621c <MX_TIM3_Init>:
{
 800621c:	b530      	push	{r4, r5, lr}
 800621e:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006220:	2400      	movs	r4, #0
 8006222:	940a      	str	r4, [sp, #40]	; 0x28
 8006224:	940b      	str	r4, [sp, #44]	; 0x2c
 8006226:	940c      	str	r4, [sp, #48]	; 0x30
 8006228:	940d      	str	r4, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800622a:	9407      	str	r4, [sp, #28]
 800622c:	9408      	str	r4, [sp, #32]
 800622e:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006230:	9400      	str	r4, [sp, #0]
 8006232:	9401      	str	r4, [sp, #4]
 8006234:	9402      	str	r4, [sp, #8]
 8006236:	9403      	str	r4, [sp, #12]
 8006238:	9404      	str	r4, [sp, #16]
 800623a:	9405      	str	r4, [sp, #20]
 800623c:	9406      	str	r4, [sp, #24]
  htim3.Instance = TIM3;
 800623e:	4d16      	ldr	r5, [pc, #88]	; (8006298 <MX_TIM3_Init+0x7c>)
 8006240:	4b16      	ldr	r3, [pc, #88]	; (800629c <MX_TIM3_Init+0x80>)
 8006242:	602b      	str	r3, [r5, #0]
  htim3.Init.Prescaler = 25;
 8006244:	2319      	movs	r3, #25
 8006246:	606b      	str	r3, [r5, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006248:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 1920;
 800624a:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 800624e:	60eb      	str	r3, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006250:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006252:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8006254:	4628      	mov	r0, r5
 8006256:	f7fd ff27 	bl	80040a8 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800625a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800625e:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8006260:	a90a      	add	r1, sp, #40	; 0x28
 8006262:	4628      	mov	r0, r5
 8006264:	f7fe f860 	bl	8004328 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006268:	4628      	mov	r0, r5
 800626a:	f7fd ff4c 	bl	8004106 <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800626e:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006270:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006272:	a907      	add	r1, sp, #28
 8006274:	4628      	mov	r0, r5
 8006276:	f7fe f991 	bl	800459c <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800627a:	2360      	movs	r3, #96	; 0x60
 800627c:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 0;
 800627e:	9401      	str	r4, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006280:	9402      	str	r4, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006282:	9404      	str	r4, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006284:	4622      	mov	r2, r4
 8006286:	4669      	mov	r1, sp
 8006288:	4628      	mov	r0, r5
 800628a:	f7fd ffa3 	bl	80041d4 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 800628e:	4628      	mov	r0, r5
 8006290:	f001 f9ea 	bl	8007668 <HAL_TIM_MspPostInit>
}
 8006294:	b00f      	add	sp, #60	; 0x3c
 8006296:	bd30      	pop	{r4, r5, pc}
 8006298:	20019840 	.word	0x20019840
 800629c:	40000400 	.word	0x40000400

080062a0 <MX_TIM4_Init>:
{
 80062a0:	b530      	push	{r4, r5, lr}
 80062a2:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80062a4:	2400      	movs	r4, #0
 80062a6:	940a      	str	r4, [sp, #40]	; 0x28
 80062a8:	940b      	str	r4, [sp, #44]	; 0x2c
 80062aa:	940c      	str	r4, [sp, #48]	; 0x30
 80062ac:	940d      	str	r4, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80062ae:	9407      	str	r4, [sp, #28]
 80062b0:	9408      	str	r4, [sp, #32]
 80062b2:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80062b4:	9400      	str	r4, [sp, #0]
 80062b6:	9401      	str	r4, [sp, #4]
 80062b8:	9402      	str	r4, [sp, #8]
 80062ba:	9403      	str	r4, [sp, #12]
 80062bc:	9404      	str	r4, [sp, #16]
 80062be:	9405      	str	r4, [sp, #20]
 80062c0:	9406      	str	r4, [sp, #24]
  htim4.Instance = TIM4;
 80062c2:	4d16      	ldr	r5, [pc, #88]	; (800631c <MX_TIM4_Init+0x7c>)
 80062c4:	4b16      	ldr	r3, [pc, #88]	; (8006320 <MX_TIM4_Init+0x80>)
 80062c6:	602b      	str	r3, [r5, #0]
  htim4.Init.Prescaler = 25;
 80062c8:	2319      	movs	r3, #25
 80062ca:	606b      	str	r3, [r5, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062cc:	60ac      	str	r4, [r5, #8]
  htim4.Init.Period = 9600;
 80062ce:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80062d2:	60eb      	str	r3, [r5, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80062d4:	612c      	str	r4, [r5, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80062d6:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80062d8:	4628      	mov	r0, r5
 80062da:	f7fd fee5 	bl	80040a8 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80062de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062e2:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80062e4:	a90a      	add	r1, sp, #40	; 0x28
 80062e6:	4628      	mov	r0, r5
 80062e8:	f7fe f81e 	bl	8004328 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80062ec:	4628      	mov	r0, r5
 80062ee:	f7fd ff0a 	bl	8004106 <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80062f2:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80062f4:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80062f6:	a907      	add	r1, sp, #28
 80062f8:	4628      	mov	r0, r5
 80062fa:	f7fe f94f 	bl	800459c <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80062fe:	2360      	movs	r3, #96	; 0x60
 8006300:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 0;
 8006302:	9401      	str	r4, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006304:	9402      	str	r4, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006306:	9404      	str	r4, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006308:	2208      	movs	r2, #8
 800630a:	4669      	mov	r1, sp
 800630c:	4628      	mov	r0, r5
 800630e:	f7fd ff61 	bl	80041d4 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim4);
 8006312:	4628      	mov	r0, r5
 8006314:	f001 f9a8 	bl	8007668 <HAL_TIM_MspPostInit>
}
 8006318:	b00f      	add	sp, #60	; 0x3c
 800631a:	bd30      	pop	{r4, r5, pc}
 800631c:	2001977c 	.word	0x2001977c
 8006320:	40000800 	.word	0x40000800

08006324 <HAL_SYSTICK_Callback>:
	OS_TimeMS++;
 8006324:	4a02      	ldr	r2, [pc, #8]	; (8006330 <HAL_SYSTICK_Callback+0xc>)
 8006326:	6813      	ldr	r3, [r2, #0]
 8006328:	3301      	adds	r3, #1
 800632a:	6013      	str	r3, [r2, #0]
}
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	20019760 	.word	0x20019760

08006334 <SystemClock_Config>:
{
 8006334:	b530      	push	{r4, r5, lr}
 8006336:	b0b5      	sub	sp, #212	; 0xd4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006338:	2230      	movs	r2, #48	; 0x30
 800633a:	2100      	movs	r1, #0
 800633c:	a828      	add	r0, sp, #160	; 0xa0
 800633e:	f00f f9ac 	bl	801569a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006342:	2400      	movs	r4, #0
 8006344:	9423      	str	r4, [sp, #140]	; 0x8c
 8006346:	9424      	str	r4, [sp, #144]	; 0x90
 8006348:	9425      	str	r4, [sp, #148]	; 0x94
 800634a:	9426      	str	r4, [sp, #152]	; 0x98
 800634c:	9427      	str	r4, [sp, #156]	; 0x9c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800634e:	2284      	movs	r2, #132	; 0x84
 8006350:	4621      	mov	r1, r4
 8006352:	a802      	add	r0, sp, #8
 8006354:	f00f f9a1 	bl	801569a <memset>
  HAL_PWR_EnableBkUpAccess();
 8006358:	f7fc fbce 	bl	8002af8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 800635c:	4b23      	ldr	r3, [pc, #140]	; (80063ec <SystemClock_Config+0xb8>)
 800635e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006360:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006364:	641a      	str	r2, [r3, #64]	; 0x40
 8006366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800636c:	9300      	str	r3, [sp, #0]
 800636e:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006370:	4b1f      	ldr	r3, [pc, #124]	; (80063f0 <SystemClock_Config+0xbc>)
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8006378:	601a      	str	r2, [r3, #0]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006380:	9301      	str	r3, [sp, #4]
 8006382:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8006384:	2309      	movs	r3, #9
 8006386:	9328      	str	r3, [sp, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006388:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800638c:	9329      	str	r3, [sp, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800638e:	2301      	movs	r3, #1
 8006390:	932d      	str	r3, [sp, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006392:	2502      	movs	r5, #2
 8006394:	952e      	str	r5, [sp, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006396:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800639a:	932f      	str	r3, [sp, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 800639c:	2319      	movs	r3, #25
 800639e:	9330      	str	r3, [sp, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 384;
 80063a0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80063a4:	9331      	str	r3, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80063a6:	9532      	str	r5, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80063a8:	2308      	movs	r3, #8
 80063aa:	9333      	str	r3, [sp, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80063ac:	a828      	add	r0, sp, #160	; 0xa0
 80063ae:	f7fc fbe9 	bl	8002b84 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80063b2:	f7fc fba9 	bl	8002b08 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80063b6:	230f      	movs	r3, #15
 80063b8:	9323      	str	r3, [sp, #140]	; 0x8c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80063ba:	9524      	str	r5, [sp, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80063bc:	9425      	str	r4, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80063be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80063c2:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80063c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063c8:	9327      	str	r3, [sp, #156]	; 0x9c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80063ca:	2106      	movs	r1, #6
 80063cc:	a823      	add	r0, sp, #140	; 0x8c
 80063ce:	f7fc fe47 	bl	8003060 <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_I2C1
 80063d2:	4b08      	ldr	r3, [pc, #32]	; (80063f4 <SystemClock_Config+0xc0>)
 80063d4:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80063d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063da:	930e      	str	r3, [sp, #56]	; 0x38
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80063dc:	941b      	str	r4, [sp, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80063de:	9421      	str	r4, [sp, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80063e0:	a802      	add	r0, sp, #8
 80063e2:	f7fc fef7 	bl	80031d4 <HAL_RCCEx_PeriphCLKConfig>
}
 80063e6:	b035      	add	sp, #212	; 0xd4
 80063e8:	bd30      	pop	{r4, r5, pc}
 80063ea:	bf00      	nop
 80063ec:	40023800 	.word	0x40023800
 80063f0:	40007000 	.word	0x40007000
 80063f4:	00204020 	.word	0x00204020

080063f8 <set_time>:

/* USER CODE BEGIN 4 */
void set_time (void)
{
 80063f8:	b530      	push	{r4, r5, lr}
 80063fa:	b089      	sub	sp, #36	; 0x24

	  RTC_TimeTypeDef sTime = {0};
 80063fc:	2300      	movs	r3, #0
 80063fe:	f8cd 300a 	str.w	r3, [sp, #10]
 8006402:	f8cd 300e 	str.w	r3, [sp, #14]
 8006406:	f8cd 3012 	str.w	r3, [sp, #18]
 800640a:	f8cd 3016 	str.w	r3, [sp, #22]
 800640e:	f8cd 301a 	str.w	r3, [sp, #26]
 8006412:	f8ad 301e 	strh.w	r3, [sp, #30]
	  RTC_DateTypeDef sDate = {0};
 8006416:	9301      	str	r3, [sp, #4]
	 /** Initialize RTC and set the Time and Date
	  */
	  sTime.Hours = 0x15;
 8006418:	2315      	movs	r3, #21
 800641a:	f88d 3008 	strb.w	r3, [sp, #8]
	  sTime.Minutes = 0x09;
 800641e:	2309      	movs	r3, #9
 8006420:	f88d 3009 	strb.w	r3, [sp, #9]
	  sTime.Seconds = 0x40;
 8006424:	2340      	movs	r3, #64	; 0x40
 8006426:	f88d 300a 	strb.w	r3, [sp, #10]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800642a:	4c0f      	ldr	r4, [pc, #60]	; (8006468 <set_time+0x70>)
 800642c:	2201      	movs	r2, #1
 800642e:	a902      	add	r1, sp, #8
 8006430:	4620      	mov	r0, r4
 8006432:	f7fd fa77 	bl	8003924 <HAL_RTC_SetTime>
	  {
	    Error_Handler();
	  }
	  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8006436:	2303      	movs	r3, #3
 8006438:	f88d 3004 	strb.w	r3, [sp, #4]
	  sDate.Month = RTC_MONTH_MARCH;
 800643c:	f88d 3005 	strb.w	r3, [sp, #5]
	  sDate.Date = 0x01;
 8006440:	2501      	movs	r5, #1
 8006442:	f88d 5006 	strb.w	r5, [sp, #6]
	  sDate.Year = 0x24;
 8006446:	2324      	movs	r3, #36	; 0x24
 8006448:	f88d 3007 	strb.w	r3, [sp, #7]
	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800644c:	462a      	mov	r2, r5
 800644e:	a901      	add	r1, sp, #4
 8006450:	4620      	mov	r0, r4
 8006452:	f7fd fae7 	bl	8003a24 <HAL_RTC_SetDate>
	  {
	    Error_Handler();
	  }

	  //saveTimeToBackupRegister();
	  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 8006456:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800645a:	4629      	mov	r1, r5
 800645c:	4620      	mov	r0, r4
 800645e:	f7fd fc77 	bl	8003d50 <HAL_RTCEx_BKUPWrite>


}
 8006462:	b009      	add	sp, #36	; 0x24
 8006464:	bd30      	pop	{r4, r5, pc}
 8006466:	bf00      	nop
 8006468:	200198bc 	.word	0x200198bc

0800646c <set_alarm>:


void set_alarm(void) {
 800646c:	b500      	push	{lr}
 800646e:	b08d      	sub	sp, #52	; 0x34
    RTC_AlarmTypeDef sAlarm = {0};
 8006470:	2226      	movs	r2, #38	; 0x26
 8006472:	2100      	movs	r1, #0
 8006474:	f10d 0006 	add.w	r0, sp, #6
 8006478:	f00f f90f 	bl	801569a <memset>

    // Postavljanje vremena alarma
    sAlarm.AlarmTime.Hours = globalAlarmTime.Hours ;
 800647c:	4b0c      	ldr	r3, [pc, #48]	; (80064b0 <set_alarm+0x44>)
 800647e:	781a      	ldrb	r2, [r3, #0]
 8006480:	f88d 2004 	strb.w	r2, [sp, #4]
    sAlarm.AlarmTime.Minutes = globalAlarmTime.Minutes;
 8006484:	785a      	ldrb	r2, [r3, #1]
 8006486:	f88d 2005 	strb.w	r2, [sp, #5]
    sAlarm.AlarmTime.Seconds = globalAlarmTime.Seconds;
 800648a:	789b      	ldrb	r3, [r3, #2]
 800648c:	f88d 3006 	strb.w	r3, [sp, #6]
    sAlarm.AlarmTime.SubSeconds = 0x0;
    sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
    sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
    sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY | RTC_ALARMMASK_HOURS | RTC_ALARMMASK_MINUTES;
 8006490:	4b08      	ldr	r3, [pc, #32]	; (80064b4 <set_alarm+0x48>)
 8006492:	9307      	str	r3, [sp, #28]
    sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
    sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
    sAlarm.AlarmDateWeekDay = 0x1;
 8006494:	2201      	movs	r2, #1
 8006496:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
    sAlarm.Alarm = RTC_ALARM_A;
 800649a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800649e:	930b      	str	r3, [sp, #44]	; 0x2c


    // Postavljanje alarma
    if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK) {
 80064a0:	a901      	add	r1, sp, #4
 80064a2:	4805      	ldr	r0, [pc, #20]	; (80064b8 <set_alarm+0x4c>)
 80064a4:	f7fd fb2c 	bl	8003b00 <HAL_RTC_SetAlarm_IT>
        Error_Handler();
    }
}
 80064a8:	b00d      	add	sp, #52	; 0x34
 80064aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80064ae:	bf00      	nop
 80064b0:	200193b8 	.word	0x200193b8
 80064b4:	80808000 	.word	0x80808000
 80064b8:	200198bc 	.word	0x200198bc

080064bc <get_time>:


void get_time(void){
 80064bc:	b510      	push	{r4, lr}
 80064be:	b08a      	sub	sp, #40	; 0x28

	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80064c0:	4c1a      	ldr	r4, [pc, #104]	; (800652c <get_time+0x70>)
 80064c2:	2200      	movs	r2, #0
 80064c4:	a903      	add	r1, sp, #12
 80064c6:	4620      	mov	r0, r4
 80064c8:	f7fd fbf4 	bl	8003cb4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 80064cc:	2200      	movs	r2, #0
 80064ce:	a909      	add	r1, sp, #36	; 0x24
 80064d0:	4620      	mov	r0, r4
 80064d2:	f7fd fc1b 	bl	8003d0c <HAL_RTC_GetDate>


	sprintf((char*)time, "%02d:%02d:%02d\r",gTime.Hours, gTime.Minutes, gTime.Seconds);
 80064d6:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80064da:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80064de:	f89d 100e 	ldrb.w	r1, [sp, #14]
 80064e2:	4c13      	ldr	r4, [pc, #76]	; (8006530 <get_time+0x74>)
 80064e4:	9100      	str	r1, [sp, #0]
 80064e6:	4913      	ldr	r1, [pc, #76]	; (8006534 <get_time+0x78>)
 80064e8:	4620      	mov	r0, r4
 80064ea:	f00f f997 	bl	801581c <siprintf>
	 CDC_Transmit_FS((uint8_t *)time, strlen((const char *)time));
 80064ee:	4620      	mov	r0, r4
 80064f0:	f7f9 fe8e 	bl	8000210 <strlen>
 80064f4:	b281      	uxth	r1, r0
 80064f6:	4620      	mov	r0, r4
 80064f8:	f001 f992 	bl	8007820 <CDC_Transmit_FS>

	sprintf((char*)date, "%02d-%02d-%2d\r", gDate.Date, gDate.Month, 2000 + gDate.Year);
 80064fc:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8006500:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8006504:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
 8006508:	4c0b      	ldr	r4, [pc, #44]	; (8006538 <get_time+0x7c>)
 800650a:	f501 61fa 	add.w	r1, r1, #2000	; 0x7d0
 800650e:	9100      	str	r1, [sp, #0]
 8006510:	490a      	ldr	r1, [pc, #40]	; (800653c <get_time+0x80>)
 8006512:	4620      	mov	r0, r4
 8006514:	f00f f982 	bl	801581c <siprintf>
	 CDC_Transmit_FS((uint8_t *)date, strlen((const char *)date));
 8006518:	4620      	mov	r0, r4
 800651a:	f7f9 fe79 	bl	8000210 <strlen>
 800651e:	b281      	uxth	r1, r0
 8006520:	4620      	mov	r0, r4
 8006522:	f001 f97d 	bl	8007820 <CDC_Transmit_FS>
}
 8006526:	b00a      	add	sp, #40	; 0x28
 8006528:	bd10      	pop	{r4, pc}
 800652a:	bf00      	nop
 800652c:	200198bc 	.word	0x200198bc
 8006530:	200198e8 	.word	0x200198e8
 8006534:	08015ee0 	.word	0x08015ee0
 8006538:	20019918 	.word	0x20019918
 800653c:	08015ef0 	.word	0x08015ef0

08006540 <sakri_worldclock_stop_watch>:
	HAL_RTC_GetAlarm(&hrtc, &gAlarm, RTC_ALARM_A, RTC_FORMAT_BCD);

}


void sakri_worldclock_stop_watch(void){
 8006540:	b508      	push	{r3, lr}
	WM_HideWindow(hText0);
 8006542:	4b44      	ldr	r3, [pc, #272]	; (8006654 <sakri_worldclock_stop_watch+0x114>)
 8006544:	6818      	ldr	r0, [r3, #0]
 8006546:	f003 fbf5 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hText1);
 800654a:	4b43      	ldr	r3, [pc, #268]	; (8006658 <sakri_worldclock_stop_watch+0x118>)
 800654c:	6818      	ldr	r0, [r3, #0]
 800654e:	f003 fbf1 	bl	8009d34 <WM_HideWindow>
    WM_HideWindow(hText2);
 8006552:	4b42      	ldr	r3, [pc, #264]	; (800665c <sakri_worldclock_stop_watch+0x11c>)
 8006554:	6818      	ldr	r0, [r3, #0]
 8006556:	f003 fbed 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hText3);
 800655a:	4b41      	ldr	r3, [pc, #260]	; (8006660 <sakri_worldclock_stop_watch+0x120>)
 800655c:	6818      	ldr	r0, [r3, #0]
 800655e:	f003 fbe9 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hButton3);
 8006562:	4b40      	ldr	r3, [pc, #256]	; (8006664 <sakri_worldclock_stop_watch+0x124>)
 8006564:	6818      	ldr	r0, [r3, #0]
 8006566:	f003 fbe5 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hButton4);
 800656a:	4b3f      	ldr	r3, [pc, #252]	; (8006668 <sakri_worldclock_stop_watch+0x128>)
 800656c:	6818      	ldr	r0, [r3, #0]
 800656e:	f003 fbe1 	bl	8009d34 <WM_HideWindow>
	//WM_HideWindow(hButton5);
	WM_HideWindow(hEdit0);
 8006572:	4b3e      	ldr	r3, [pc, #248]	; (800666c <sakri_worldclock_stop_watch+0x12c>)
 8006574:	6818      	ldr	r0, [r3, #0]
 8006576:	f003 fbdd 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hEdit1);
 800657a:	4b3d      	ldr	r3, [pc, #244]	; (8006670 <sakri_worldclock_stop_watch+0x130>)
 800657c:	6818      	ldr	r0, [r3, #0]
 800657e:	f003 fbd9 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hEdit2);
 8006582:	4b3c      	ldr	r3, [pc, #240]	; (8006674 <sakri_worldclock_stop_watch+0x134>)
 8006584:	6818      	ldr	r0, [r3, #0]
 8006586:	f003 fbd5 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hEdit3);
 800658a:	4b3b      	ldr	r3, [pc, #236]	; (8006678 <sakri_worldclock_stop_watch+0x138>)
 800658c:	6818      	ldr	r0, [r3, #0]
 800658e:	f003 fbd1 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hEdit4);
 8006592:	4b3a      	ldr	r3, [pc, #232]	; (800667c <sakri_worldclock_stop_watch+0x13c>)
 8006594:	6818      	ldr	r0, [r3, #0]
 8006596:	f003 fbcd 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hEdit5);
 800659a:	4b39      	ldr	r3, [pc, #228]	; (8006680 <sakri_worldclock_stop_watch+0x140>)
 800659c:	6818      	ldr	r0, [r3, #0]
 800659e:	f003 fbc9 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hEdit6);
 80065a2:	4b38      	ldr	r3, [pc, #224]	; (8006684 <sakri_worldclock_stop_watch+0x144>)
 80065a4:	6818      	ldr	r0, [r3, #0]
 80065a6:	f003 fbc5 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hEdit7);
 80065aa:	4b37      	ldr	r3, [pc, #220]	; (8006688 <sakri_worldclock_stop_watch+0x148>)
 80065ac:	6818      	ldr	r0, [r3, #0]
 80065ae:	f003 fbc1 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hEdit8);
 80065b2:	4b36      	ldr	r3, [pc, #216]	; (800668c <sakri_worldclock_stop_watch+0x14c>)
 80065b4:	6818      	ldr	r0, [r3, #0]
 80065b6:	f003 fbbd 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hEdit9);
 80065ba:	4b35      	ldr	r3, [pc, #212]	; (8006690 <sakri_worldclock_stop_watch+0x150>)
 80065bc:	6818      	ldr	r0, [r3, #0]
 80065be:	f003 fbb9 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hEdit10);
 80065c2:	4b34      	ldr	r3, [pc, #208]	; (8006694 <sakri_worldclock_stop_watch+0x154>)
 80065c4:	6818      	ldr	r0, [r3, #0]
 80065c6:	f003 fbb5 	bl	8009d34 <WM_HideWindow>
	//WM_HideWindow(hEdit11);
	//WM_HideWindow(hEdit12);
	//WM_HideWindow(hEdit13);
	//WM_HideWindow(hEdit14);
	WM_HideWindow(hEdit15);
 80065ca:	4b33      	ldr	r3, [pc, #204]	; (8006698 <sakri_worldclock_stop_watch+0x158>)
 80065cc:	6818      	ldr	r0, [r3, #0]
 80065ce:	f003 fbb1 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hEdit16);
 80065d2:	4b32      	ldr	r3, [pc, #200]	; (800669c <sakri_worldclock_stop_watch+0x15c>)
 80065d4:	6818      	ldr	r0, [r3, #0]
 80065d6:	f003 fbad 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hEdit17);
 80065da:	4b31      	ldr	r3, [pc, #196]	; (80066a0 <sakri_worldclock_stop_watch+0x160>)
 80065dc:	6818      	ldr	r0, [r3, #0]
 80065de:	f003 fba9 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hEdit18);
 80065e2:	4b30      	ldr	r3, [pc, #192]	; (80066a4 <sakri_worldclock_stop_watch+0x164>)
 80065e4:	6818      	ldr	r0, [r3, #0]
 80065e6:	f003 fba5 	bl	8009d34 <WM_HideWindow>
	WM_ShowWindow(hEdit11);
 80065ea:	4b2f      	ldr	r3, [pc, #188]	; (80066a8 <sakri_worldclock_stop_watch+0x168>)
 80065ec:	6818      	ldr	r0, [r3, #0]
 80065ee:	f003 f93e 	bl	800986e <WM_ShowWindow>
	WM_ShowWindow(hEdit12);
 80065f2:	4b2e      	ldr	r3, [pc, #184]	; (80066ac <sakri_worldclock_stop_watch+0x16c>)
 80065f4:	6818      	ldr	r0, [r3, #0]
 80065f6:	f003 f93a 	bl	800986e <WM_ShowWindow>
	WM_ShowWindow(hEdit13);
 80065fa:	4b2d      	ldr	r3, [pc, #180]	; (80066b0 <sakri_worldclock_stop_watch+0x170>)
 80065fc:	6818      	ldr	r0, [r3, #0]
 80065fe:	f003 f936 	bl	800986e <WM_ShowWindow>
	WM_ShowWindow(hEdit14);
 8006602:	4b2c      	ldr	r3, [pc, #176]	; (80066b4 <sakri_worldclock_stop_watch+0x174>)
 8006604:	6818      	ldr	r0, [r3, #0]
 8006606:	f003 f932 	bl	800986e <WM_ShowWindow>
	WM_ShowWindow(hButton6);
 800660a:	4b2b      	ldr	r3, [pc, #172]	; (80066b8 <sakri_worldclock_stop_watch+0x178>)
 800660c:	6818      	ldr	r0, [r3, #0]
 800660e:	f003 f92e 	bl	800986e <WM_ShowWindow>
	WM_ShowWindow(hButton7);
 8006612:	4b2a      	ldr	r3, [pc, #168]	; (80066bc <sakri_worldclock_stop_watch+0x17c>)
 8006614:	6818      	ldr	r0, [r3, #0]
 8006616:	f003 f92a 	bl	800986e <WM_ShowWindow>
	WM_ShowWindow(hButton8);
 800661a:	4b29      	ldr	r3, [pc, #164]	; (80066c0 <sakri_worldclock_stop_watch+0x180>)
 800661c:	6818      	ldr	r0, [r3, #0]
 800661e:	f003 f926 	bl	800986e <WM_ShowWindow>
	WM_ShowWindow(hButton9);
 8006622:	4b28      	ldr	r3, [pc, #160]	; (80066c4 <sakri_worldclock_stop_watch+0x184>)
 8006624:	6818      	ldr	r0, [r3, #0]
 8006626:	f003 f922 	bl	800986e <WM_ShowWindow>
	WM_ShowWindow(hButton5);
 800662a:	4b27      	ldr	r3, [pc, #156]	; (80066c8 <sakri_worldclock_stop_watch+0x188>)
 800662c:	6818      	ldr	r0, [r3, #0]
 800662e:	f003 f91e 	bl	800986e <WM_ShowWindow>
	WM_HideWindow(hButton10);
 8006632:	4b26      	ldr	r3, [pc, #152]	; (80066cc <sakri_worldclock_stop_watch+0x18c>)
 8006634:	6818      	ldr	r0, [r3, #0]
 8006636:	f003 fb7d 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hButton11);
 800663a:	4b25      	ldr	r3, [pc, #148]	; (80066d0 <sakri_worldclock_stop_watch+0x190>)
 800663c:	6818      	ldr	r0, [r3, #0]
 800663e:	f003 fb79 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hButton12);
 8006642:	4b24      	ldr	r3, [pc, #144]	; (80066d4 <sakri_worldclock_stop_watch+0x194>)
 8006644:	6818      	ldr	r0, [r3, #0]
 8006646:	f003 fb75 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hButton13);
 800664a:	4b23      	ldr	r3, [pc, #140]	; (80066d8 <sakri_worldclock_stop_watch+0x198>)
 800664c:	6818      	ldr	r0, [r3, #0]
 800664e:	f003 fb71 	bl	8009d34 <WM_HideWindow>

}
 8006652:	bd08      	pop	{r3, pc}
 8006654:	20019768 	.word	0x20019768
 8006658:	200198e4 	.word	0x200198e4
 800665c:	200198f4 	.word	0x200198f4
 8006660:	20019764 	.word	0x20019764
 8006664:	20019914 	.word	0x20019914
 8006668:	20019814 	.word	0x20019814
 800666c:	2001976c 	.word	0x2001976c
 8006670:	20019824 	.word	0x20019824
 8006674:	20019930 	.word	0x20019930
 8006678:	200198b8 	.word	0x200198b8
 800667c:	20019940 	.word	0x20019940
 8006680:	20019900 	.word	0x20019900
 8006684:	20019834 	.word	0x20019834
 8006688:	2001990c 	.word	0x2001990c
 800668c:	200198a4 	.word	0x200198a4
 8006690:	200198dc 	.word	0x200198dc
 8006694:	20019928 	.word	0x20019928
 8006698:	20019924 	.word	0x20019924
 800669c:	20019904 	.word	0x20019904
 80066a0:	20019820 	.word	0x20019820
 80066a4:	20019948 	.word	0x20019948
 80066a8:	20019778 	.word	0x20019778
 80066ac:	20019830 	.word	0x20019830
 80066b0:	200198e0 	.word	0x200198e0
 80066b4:	20019910 	.word	0x20019910
 80066b8:	200198a8 	.word	0x200198a8
 80066bc:	20019828 	.word	0x20019828
 80066c0:	2001993c 	.word	0x2001993c
 80066c4:	200198b0 	.word	0x200198b0
 80066c8:	20019770 	.word	0x20019770
 80066cc:	2001992c 	.word	0x2001992c
 80066d0:	20019908 	.word	0x20019908
 80066d4:	20019774 	.word	0x20019774
 80066d8:	2001982c 	.word	0x2001982c

080066dc <sakri_alarm_stopwatch>:


void sakri_alarm_stopwatch (void) {
 80066dc:	b508      	push	{r3, lr}
	//WM_HideWindow(hEdit11);
	//WM_HideWindow(hEdit12);
	WM_HideWindow(hEdit13);
 80066de:	4b40      	ldr	r3, [pc, #256]	; (80067e0 <sakri_alarm_stopwatch+0x104>)
 80066e0:	6818      	ldr	r0, [r3, #0]
 80066e2:	f003 fb27 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hEdit14);
 80066e6:	4b3f      	ldr	r3, [pc, #252]	; (80067e4 <sakri_alarm_stopwatch+0x108>)
 80066e8:	6818      	ldr	r0, [r3, #0]
 80066ea:	f003 fb23 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hButton6);
 80066ee:	4b3e      	ldr	r3, [pc, #248]	; (80067e8 <sakri_alarm_stopwatch+0x10c>)
 80066f0:	6818      	ldr	r0, [r3, #0]
 80066f2:	f003 fb1f 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hButton7);
 80066f6:	4b3d      	ldr	r3, [pc, #244]	; (80067ec <sakri_alarm_stopwatch+0x110>)
 80066f8:	6818      	ldr	r0, [r3, #0]
 80066fa:	f003 fb1b 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hButton8);
 80066fe:	4b3c      	ldr	r3, [pc, #240]	; (80067f0 <sakri_alarm_stopwatch+0x114>)
 8006700:	6818      	ldr	r0, [r3, #0]
 8006702:	f003 fb17 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hButton9);
 8006706:	4b3b      	ldr	r3, [pc, #236]	; (80067f4 <sakri_alarm_stopwatch+0x118>)
 8006708:	6818      	ldr	r0, [r3, #0]
 800670a:	f003 fb13 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hButton10);
 800670e:	4b3a      	ldr	r3, [pc, #232]	; (80067f8 <sakri_alarm_stopwatch+0x11c>)
 8006710:	6818      	ldr	r0, [r3, #0]
 8006712:	f003 fb0f 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hButton11);
 8006716:	4b39      	ldr	r3, [pc, #228]	; (80067fc <sakri_alarm_stopwatch+0x120>)
 8006718:	6818      	ldr	r0, [r3, #0]
 800671a:	f003 fb0b 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hButton12);
 800671e:	4b38      	ldr	r3, [pc, #224]	; (8006800 <sakri_alarm_stopwatch+0x124>)
 8006720:	6818      	ldr	r0, [r3, #0]
 8006722:	f003 fb07 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hButton13);
 8006726:	4b37      	ldr	r3, [pc, #220]	; (8006804 <sakri_alarm_stopwatch+0x128>)
 8006728:	6818      	ldr	r0, [r3, #0]
 800672a:	f003 fb03 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hButton3);
 800672e:	4b36      	ldr	r3, [pc, #216]	; (8006808 <sakri_alarm_stopwatch+0x12c>)
 8006730:	6818      	ldr	r0, [r3, #0]
 8006732:	f003 faff 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hButton4);
 8006736:	4b35      	ldr	r3, [pc, #212]	; (800680c <sakri_alarm_stopwatch+0x130>)
 8006738:	6818      	ldr	r0, [r3, #0]
 800673a:	f003 fafb 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hButton5);
 800673e:	4b34      	ldr	r3, [pc, #208]	; (8006810 <sakri_alarm_stopwatch+0x134>)
 8006740:	6818      	ldr	r0, [r3, #0]
 8006742:	f003 faf7 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hEdit0);
 8006746:	4b33      	ldr	r3, [pc, #204]	; (8006814 <sakri_alarm_stopwatch+0x138>)
 8006748:	6818      	ldr	r0, [r3, #0]
 800674a:	f003 faf3 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hEdit1);
 800674e:	4b32      	ldr	r3, [pc, #200]	; (8006818 <sakri_alarm_stopwatch+0x13c>)
 8006750:	6818      	ldr	r0, [r3, #0]
 8006752:	f003 faef 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hEdit2);
 8006756:	4b31      	ldr	r3, [pc, #196]	; (800681c <sakri_alarm_stopwatch+0x140>)
 8006758:	6818      	ldr	r0, [r3, #0]
 800675a:	f003 faeb 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hEdit3);
 800675e:	4b30      	ldr	r3, [pc, #192]	; (8006820 <sakri_alarm_stopwatch+0x144>)
 8006760:	6818      	ldr	r0, [r3, #0]
 8006762:	f003 fae7 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hEdit4);
 8006766:	4b2f      	ldr	r3, [pc, #188]	; (8006824 <sakri_alarm_stopwatch+0x148>)
 8006768:	6818      	ldr	r0, [r3, #0]
 800676a:	f003 fae3 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hEdit5);
 800676e:	4b2e      	ldr	r3, [pc, #184]	; (8006828 <sakri_alarm_stopwatch+0x14c>)
 8006770:	6818      	ldr	r0, [r3, #0]
 8006772:	f003 fadf 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hEdit6);
 8006776:	4b2d      	ldr	r3, [pc, #180]	; (800682c <sakri_alarm_stopwatch+0x150>)
 8006778:	6818      	ldr	r0, [r3, #0]
 800677a:	f003 fadb 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hEdit7);
 800677e:	4b2c      	ldr	r3, [pc, #176]	; (8006830 <sakri_alarm_stopwatch+0x154>)
 8006780:	6818      	ldr	r0, [r3, #0]
 8006782:	f003 fad7 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hEdit8);
 8006786:	4b2b      	ldr	r3, [pc, #172]	; (8006834 <sakri_alarm_stopwatch+0x158>)
 8006788:	6818      	ldr	r0, [r3, #0]
 800678a:	f003 fad3 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hEdit9);
 800678e:	4b2a      	ldr	r3, [pc, #168]	; (8006838 <sakri_alarm_stopwatch+0x15c>)
 8006790:	6818      	ldr	r0, [r3, #0]
 8006792:	f003 facf 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hEdit10);
 8006796:	4b29      	ldr	r3, [pc, #164]	; (800683c <sakri_alarm_stopwatch+0x160>)
 8006798:	6818      	ldr	r0, [r3, #0]
 800679a:	f003 facb 	bl	8009d34 <WM_HideWindow>
	//WM_HideWindow(hEdit15);
	//WM_HideWindow(hEdit16);
	//WM_HideWindow(hEdit17);
	//WM_HideWindow(hEdit18);
	WM_ShowWindow(hText0);
 800679e:	4b28      	ldr	r3, [pc, #160]	; (8006840 <sakri_alarm_stopwatch+0x164>)
 80067a0:	6818      	ldr	r0, [r3, #0]
 80067a2:	f003 f864 	bl	800986e <WM_ShowWindow>
	WM_ShowWindow(hText1);
 80067a6:	4b27      	ldr	r3, [pc, #156]	; (8006844 <sakri_alarm_stopwatch+0x168>)
 80067a8:	6818      	ldr	r0, [r3, #0]
 80067aa:	f003 f860 	bl	800986e <WM_ShowWindow>
	WM_ShowWindow(hText2);
 80067ae:	4b26      	ldr	r3, [pc, #152]	; (8006848 <sakri_alarm_stopwatch+0x16c>)
 80067b0:	6818      	ldr	r0, [r3, #0]
 80067b2:	f003 f85c 	bl	800986e <WM_ShowWindow>
    WM_ShowWindow(hText3);
 80067b6:	4b25      	ldr	r3, [pc, #148]	; (800684c <sakri_alarm_stopwatch+0x170>)
 80067b8:	6818      	ldr	r0, [r3, #0]
 80067ba:	f003 f858 	bl	800986e <WM_ShowWindow>
    WM_ShowWindow(hEdit15);
 80067be:	4b24      	ldr	r3, [pc, #144]	; (8006850 <sakri_alarm_stopwatch+0x174>)
 80067c0:	6818      	ldr	r0, [r3, #0]
 80067c2:	f003 f854 	bl	800986e <WM_ShowWindow>
    WM_ShowWindow(hEdit16);
 80067c6:	4b23      	ldr	r3, [pc, #140]	; (8006854 <sakri_alarm_stopwatch+0x178>)
 80067c8:	6818      	ldr	r0, [r3, #0]
 80067ca:	f003 f850 	bl	800986e <WM_ShowWindow>
    WM_ShowWindow(hEdit17);
 80067ce:	4b22      	ldr	r3, [pc, #136]	; (8006858 <sakri_alarm_stopwatch+0x17c>)
 80067d0:	6818      	ldr	r0, [r3, #0]
 80067d2:	f003 f84c 	bl	800986e <WM_ShowWindow>
    WM_ShowWindow(hEdit18);
 80067d6:	4b21      	ldr	r3, [pc, #132]	; (800685c <sakri_alarm_stopwatch+0x180>)
 80067d8:	6818      	ldr	r0, [r3, #0]
 80067da:	f003 f848 	bl	800986e <WM_ShowWindow>



}
 80067de:	bd08      	pop	{r3, pc}
 80067e0:	200198e0 	.word	0x200198e0
 80067e4:	20019910 	.word	0x20019910
 80067e8:	200198a8 	.word	0x200198a8
 80067ec:	20019828 	.word	0x20019828
 80067f0:	2001993c 	.word	0x2001993c
 80067f4:	200198b0 	.word	0x200198b0
 80067f8:	2001992c 	.word	0x2001992c
 80067fc:	20019908 	.word	0x20019908
 8006800:	20019774 	.word	0x20019774
 8006804:	2001982c 	.word	0x2001982c
 8006808:	20019914 	.word	0x20019914
 800680c:	20019814 	.word	0x20019814
 8006810:	20019770 	.word	0x20019770
 8006814:	2001976c 	.word	0x2001976c
 8006818:	20019824 	.word	0x20019824
 800681c:	20019930 	.word	0x20019930
 8006820:	200198b8 	.word	0x200198b8
 8006824:	20019940 	.word	0x20019940
 8006828:	20019900 	.word	0x20019900
 800682c:	20019834 	.word	0x20019834
 8006830:	2001990c 	.word	0x2001990c
 8006834:	200198a4 	.word	0x200198a4
 8006838:	200198dc 	.word	0x200198dc
 800683c:	20019928 	.word	0x20019928
 8006840:	20019768 	.word	0x20019768
 8006844:	200198e4 	.word	0x200198e4
 8006848:	200198f4 	.word	0x200198f4
 800684c:	20019764 	.word	0x20019764
 8006850:	20019924 	.word	0x20019924
 8006854:	20019904 	.word	0x20019904
 8006858:	20019820 	.word	0x20019820
 800685c:	20019948 	.word	0x20019948

08006860 <sakri_alarm_worldclock>:


void sakri_alarm_worldclock(void) {
 8006860:	b508      	push	{r3, lr}
	WM_HideWindow(hText0);
 8006862:	4b40      	ldr	r3, [pc, #256]	; (8006964 <sakri_alarm_worldclock+0x104>)
 8006864:	6818      	ldr	r0, [r3, #0]
 8006866:	f003 fa65 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hText1);
 800686a:	4b3f      	ldr	r3, [pc, #252]	; (8006968 <sakri_alarm_worldclock+0x108>)
 800686c:	6818      	ldr	r0, [r3, #0]
 800686e:	f003 fa61 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hText2);
 8006872:	4b3e      	ldr	r3, [pc, #248]	; (800696c <sakri_alarm_worldclock+0x10c>)
 8006874:	6818      	ldr	r0, [r3, #0]
 8006876:	f003 fa5d 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hText3);
 800687a:	4b3d      	ldr	r3, [pc, #244]	; (8006970 <sakri_alarm_worldclock+0x110>)
 800687c:	6818      	ldr	r0, [r3, #0]
 800687e:	f003 fa59 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hEdit15);
 8006882:	4b3c      	ldr	r3, [pc, #240]	; (8006974 <sakri_alarm_worldclock+0x114>)
 8006884:	6818      	ldr	r0, [r3, #0]
 8006886:	f003 fa55 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hEdit16);
 800688a:	4b3b      	ldr	r3, [pc, #236]	; (8006978 <sakri_alarm_worldclock+0x118>)
 800688c:	6818      	ldr	r0, [r3, #0]
 800688e:	f003 fa51 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hEdit17);
 8006892:	4b3a      	ldr	r3, [pc, #232]	; (800697c <sakri_alarm_worldclock+0x11c>)
 8006894:	6818      	ldr	r0, [r3, #0]
 8006896:	f003 fa4d 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hEdit18);
 800689a:	4b39      	ldr	r3, [pc, #228]	; (8006980 <sakri_alarm_worldclock+0x120>)
 800689c:	6818      	ldr	r0, [r3, #0]
 800689e:	f003 fa49 	bl	8009d34 <WM_HideWindow>
	//WM_HideWindow(hEdit11);
	//WM_HideWindow(hEdit12);
	WM_HideWindow(hEdit13);
 80068a2:	4b38      	ldr	r3, [pc, #224]	; (8006984 <sakri_alarm_worldclock+0x124>)
 80068a4:	6818      	ldr	r0, [r3, #0]
 80068a6:	f003 fa45 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hEdit14);
 80068aa:	4b37      	ldr	r3, [pc, #220]	; (8006988 <sakri_alarm_worldclock+0x128>)
 80068ac:	6818      	ldr	r0, [r3, #0]
 80068ae:	f003 fa41 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hButton3);
 80068b2:	4b36      	ldr	r3, [pc, #216]	; (800698c <sakri_alarm_worldclock+0x12c>)
 80068b4:	6818      	ldr	r0, [r3, #0]
 80068b6:	f003 fa3d 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hButton4);
 80068ba:	4b35      	ldr	r3, [pc, #212]	; (8006990 <sakri_alarm_worldclock+0x130>)
 80068bc:	6818      	ldr	r0, [r3, #0]
 80068be:	f003 fa39 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hButton5);
 80068c2:	4b34      	ldr	r3, [pc, #208]	; (8006994 <sakri_alarm_worldclock+0x134>)
 80068c4:	6818      	ldr	r0, [r3, #0]
 80068c6:	f003 fa35 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hButton6);
 80068ca:	4b33      	ldr	r3, [pc, #204]	; (8006998 <sakri_alarm_worldclock+0x138>)
 80068cc:	6818      	ldr	r0, [r3, #0]
 80068ce:	f003 fa31 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hButton7);
 80068d2:	4b32      	ldr	r3, [pc, #200]	; (800699c <sakri_alarm_worldclock+0x13c>)
 80068d4:	6818      	ldr	r0, [r3, #0]
 80068d6:	f003 fa2d 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hButton8);
 80068da:	4b31      	ldr	r3, [pc, #196]	; (80069a0 <sakri_alarm_worldclock+0x140>)
 80068dc:	6818      	ldr	r0, [r3, #0]
 80068de:	f003 fa29 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hButton9);
 80068e2:	4b30      	ldr	r3, [pc, #192]	; (80069a4 <sakri_alarm_worldclock+0x144>)
 80068e4:	6818      	ldr	r0, [r3, #0]
 80068e6:	f003 fa25 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hButton10);
 80068ea:	4b2f      	ldr	r3, [pc, #188]	; (80069a8 <sakri_alarm_worldclock+0x148>)
 80068ec:	6818      	ldr	r0, [r3, #0]
 80068ee:	f003 fa21 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hButton11);
 80068f2:	4b2e      	ldr	r3, [pc, #184]	; (80069ac <sakri_alarm_worldclock+0x14c>)
 80068f4:	6818      	ldr	r0, [r3, #0]
 80068f6:	f003 fa1d 	bl	8009d34 <WM_HideWindow>
	WM_HideWindow(hButton13);
 80068fa:	4b2d      	ldr	r3, [pc, #180]	; (80069b0 <sakri_alarm_worldclock+0x150>)
 80068fc:	6818      	ldr	r0, [r3, #0]
 80068fe:	f003 fa19 	bl	8009d34 <WM_HideWindow>
	WM_ShowWindow(hEdit0);
 8006902:	4b2c      	ldr	r3, [pc, #176]	; (80069b4 <sakri_alarm_worldclock+0x154>)
 8006904:	6818      	ldr	r0, [r3, #0]
 8006906:	f002 ffb2 	bl	800986e <WM_ShowWindow>
	WM_ShowWindow(hEdit1);
 800690a:	4b2b      	ldr	r3, [pc, #172]	; (80069b8 <sakri_alarm_worldclock+0x158>)
 800690c:	6818      	ldr	r0, [r3, #0]
 800690e:	f002 ffae 	bl	800986e <WM_ShowWindow>
	WM_ShowWindow(hEdit2);
 8006912:	4b2a      	ldr	r3, [pc, #168]	; (80069bc <sakri_alarm_worldclock+0x15c>)
 8006914:	6818      	ldr	r0, [r3, #0]
 8006916:	f002 ffaa 	bl	800986e <WM_ShowWindow>
	WM_ShowWindow(hEdit3);
 800691a:	4b29      	ldr	r3, [pc, #164]	; (80069c0 <sakri_alarm_worldclock+0x160>)
 800691c:	6818      	ldr	r0, [r3, #0]
 800691e:	f002 ffa6 	bl	800986e <WM_ShowWindow>
	WM_ShowWindow(hEdit4);
 8006922:	4b28      	ldr	r3, [pc, #160]	; (80069c4 <sakri_alarm_worldclock+0x164>)
 8006924:	6818      	ldr	r0, [r3, #0]
 8006926:	f002 ffa2 	bl	800986e <WM_ShowWindow>
	WM_ShowWindow(hEdit5);
 800692a:	4b27      	ldr	r3, [pc, #156]	; (80069c8 <sakri_alarm_worldclock+0x168>)
 800692c:	6818      	ldr	r0, [r3, #0]
 800692e:	f002 ff9e 	bl	800986e <WM_ShowWindow>
	WM_ShowWindow(hEdit6);
 8006932:	4b26      	ldr	r3, [pc, #152]	; (80069cc <sakri_alarm_worldclock+0x16c>)
 8006934:	6818      	ldr	r0, [r3, #0]
 8006936:	f002 ff9a 	bl	800986e <WM_ShowWindow>
	WM_ShowWindow(hEdit7);
 800693a:	4b25      	ldr	r3, [pc, #148]	; (80069d0 <sakri_alarm_worldclock+0x170>)
 800693c:	6818      	ldr	r0, [r3, #0]
 800693e:	f002 ff96 	bl	800986e <WM_ShowWindow>
	WM_ShowWindow(hEdit8);
 8006942:	4b24      	ldr	r3, [pc, #144]	; (80069d4 <sakri_alarm_worldclock+0x174>)
 8006944:	6818      	ldr	r0, [r3, #0]
 8006946:	f002 ff92 	bl	800986e <WM_ShowWindow>
	WM_ShowWindow(hEdit9);
 800694a:	4b23      	ldr	r3, [pc, #140]	; (80069d8 <sakri_alarm_worldclock+0x178>)
 800694c:	6818      	ldr	r0, [r3, #0]
 800694e:	f002 ff8e 	bl	800986e <WM_ShowWindow>
	WM_ShowWindow(hEdit10);
 8006952:	4b22      	ldr	r3, [pc, #136]	; (80069dc <sakri_alarm_worldclock+0x17c>)
 8006954:	6818      	ldr	r0, [r3, #0]
 8006956:	f002 ff8a 	bl	800986e <WM_ShowWindow>
	//WM_ShowWindow(hButton4); //reset
	//WM_ShowWindow(hButton3); //resume
	//WM_ShowWindow(hButton10);
	//WM_ShowWindow(hButton11);
	WM_ShowWindow(hButton12);
 800695a:	4b21      	ldr	r3, [pc, #132]	; (80069e0 <sakri_alarm_worldclock+0x180>)
 800695c:	6818      	ldr	r0, [r3, #0]
 800695e:	f002 ff86 	bl	800986e <WM_ShowWindow>


}
 8006962:	bd08      	pop	{r3, pc}
 8006964:	20019768 	.word	0x20019768
 8006968:	200198e4 	.word	0x200198e4
 800696c:	200198f4 	.word	0x200198f4
 8006970:	20019764 	.word	0x20019764
 8006974:	20019924 	.word	0x20019924
 8006978:	20019904 	.word	0x20019904
 800697c:	20019820 	.word	0x20019820
 8006980:	20019948 	.word	0x20019948
 8006984:	200198e0 	.word	0x200198e0
 8006988:	20019910 	.word	0x20019910
 800698c:	20019914 	.word	0x20019914
 8006990:	20019814 	.word	0x20019814
 8006994:	20019770 	.word	0x20019770
 8006998:	200198a8 	.word	0x200198a8
 800699c:	20019828 	.word	0x20019828
 80069a0:	2001993c 	.word	0x2001993c
 80069a4:	200198b0 	.word	0x200198b0
 80069a8:	2001992c 	.word	0x2001992c
 80069ac:	20019908 	.word	0x20019908
 80069b0:	2001982c 	.word	0x2001982c
 80069b4:	2001976c 	.word	0x2001976c
 80069b8:	20019824 	.word	0x20019824
 80069bc:	20019930 	.word	0x20019930
 80069c0:	200198b8 	.word	0x200198b8
 80069c4:	20019940 	.word	0x20019940
 80069c8:	20019900 	.word	0x20019900
 80069cc:	20019834 	.word	0x20019834
 80069d0:	2001990c 	.word	0x2001990c
 80069d4:	200198a4 	.word	0x200198a4
 80069d8:	200198dc 	.word	0x200198dc
 80069dc:	20019928 	.word	0x20019928
 80069e0:	20019774 	.word	0x20019774

080069e4 <set_time_to_edit_boxes>:


void set_time_to_edit_boxes(WM_HWIN hEditBeograd, WM_HWIN hEditHavana, WM_HWIN hEditTokio, WM_HWIN hEditMoskva) {
 80069e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069e8:	b094      	sub	sp, #80	; 0x50
 80069ea:	4680      	mov	r8, r0
 80069ec:	460f      	mov	r7, r1
 80069ee:	4614      	mov	r4, r2
 80069f0:	461d      	mov	r5, r3
	//while (1) {
        RTC_TimeTypeDef gTime;

        HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80069f2:	2200      	movs	r2, #0
 80069f4:	a90e      	add	r1, sp, #56	; 0x38
 80069f6:	482e      	ldr	r0, [pc, #184]	; (8006ab0 <set_time_to_edit_boxes+0xcc>)
 80069f8:	f7fd f95c 	bl	8003cb4 <HAL_RTC_GetTime>
        char timeHavana[9];
        char timeTokio[9];
        char timeMoskva[9];

        // Postavljanje vremena za Beograd
        sprintf(timeBeograd, "%02d:%02d:%02d", gTime.Hours, gTime.Minutes, gTime.Seconds);
 80069fc:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8006a00:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8006a04:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
 8006a08:	4e2a      	ldr	r6, [pc, #168]	; (8006ab4 <set_time_to_edit_boxes+0xd0>)
 8006a0a:	9100      	str	r1, [sp, #0]
 8006a0c:	4631      	mov	r1, r6
 8006a0e:	a80b      	add	r0, sp, #44	; 0x2c
 8006a10:	f00e ff04 	bl	801581c <siprintf>
        EDIT_SetText(hEditBeograd, timeBeograd);
 8006a14:	a90b      	add	r1, sp, #44	; 0x2c
 8006a16:	4640      	mov	r0, r8
 8006a18:	f002 fc0a 	bl	8009230 <EDIT_SetText>

        // Postavljanje vremena za Havana (recimo -7 sati u odnosu na GMT)
        gTime.Hours -= 7;
 8006a1c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8006a20:	3a07      	subs	r2, #7
 8006a22:	b2d2      	uxtb	r2, r2
 8006a24:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
        if (gTime.Hours < 0) {
            gTime.Hours += 24;
        }
        sprintf(timeHavana, "%02d:%02d:%02d", gTime.Hours, gTime.Minutes, gTime.Seconds);
 8006a28:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8006a2c:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
 8006a30:	9100      	str	r1, [sp, #0]
 8006a32:	4631      	mov	r1, r6
 8006a34:	a808      	add	r0, sp, #32
 8006a36:	f00e fef1 	bl	801581c <siprintf>
        EDIT_SetText(hEditHavana, timeHavana);
 8006a3a:	a908      	add	r1, sp, #32
 8006a3c:	4638      	mov	r0, r7
 8006a3e:	f002 fbf7 	bl	8009230 <EDIT_SetText>

        // Postavljanje vremena za Moskvu (recimo +3 sata u odnosu na GMT)
        gTime.Hours += 9;
 8006a42:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8006a46:	3309      	adds	r3, #9
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
        if (gTime.Hours >= 24) {
 8006a4e:	2b17      	cmp	r3, #23
 8006a50:	d902      	bls.n	8006a58 <set_time_to_edit_boxes+0x74>
            gTime.Hours -= 24;
 8006a52:	3b18      	subs	r3, #24
 8006a54:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
        }
        sprintf(timeMoskva, "%02d:%02d:%02d", gTime.Hours, gTime.Minutes, gTime.Seconds);
 8006a58:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8006a5c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8006a60:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
 8006a64:	9100      	str	r1, [sp, #0]
 8006a66:	4913      	ldr	r1, [pc, #76]	; (8006ab4 <set_time_to_edit_boxes+0xd0>)
 8006a68:	a802      	add	r0, sp, #8
 8006a6a:	f00e fed7 	bl	801581c <siprintf>
        EDIT_SetText(hEditMoskva, timeMoskva);
 8006a6e:	a902      	add	r1, sp, #8
 8006a70:	4628      	mov	r0, r5
 8006a72:	f002 fbdd 	bl	8009230 <EDIT_SetText>

        // Postavljanje vremena za Tokio (recimo +9 sati u odnosu na GMT)
        gTime.Hours += 7;
 8006a76:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8006a7a:	3307      	adds	r3, #7
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
        if (gTime.Hours >= 24) {
 8006a82:	2b17      	cmp	r3, #23
 8006a84:	d902      	bls.n	8006a8c <set_time_to_edit_boxes+0xa8>
            gTime.Hours -= 24;
 8006a86:	3b18      	subs	r3, #24
 8006a88:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
        }
        sprintf(timeTokio, "%02d:%02d:%02d", gTime.Hours, gTime.Minutes, gTime.Seconds);
 8006a8c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8006a90:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8006a94:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
 8006a98:	9100      	str	r1, [sp, #0]
 8006a9a:	4906      	ldr	r1, [pc, #24]	; (8006ab4 <set_time_to_edit_boxes+0xd0>)
 8006a9c:	a805      	add	r0, sp, #20
 8006a9e:	f00e febd 	bl	801581c <siprintf>
        EDIT_SetText(hEditTokio, timeTokio);
 8006aa2:	a905      	add	r1, sp, #20
 8006aa4:	4620      	mov	r0, r4
 8006aa6:	f002 fbc3 	bl	8009230 <EDIT_SetText>



    //}
}
 8006aaa:	b014      	add	sp, #80	; 0x50
 8006aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ab0:	200198bc 	.word	0x200198bc
 8006ab4:	08015f08 	.word	0x08015f08

08006ab8 <set_time_to_edit_box>:



void set_time_to_edit_box(WM_HWIN hEdit) {
 8006ab8:	b510      	push	{r4, lr}
 8006aba:	b08c      	sub	sp, #48	; 0x30
 8006abc:	4604      	mov	r4, r0

    RTC_TimeTypeDef gTime;

    HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8006abe:	2200      	movs	r2, #0
 8006ac0:	a906      	add	r1, sp, #24
 8006ac2:	480a      	ldr	r0, [pc, #40]	; (8006aec <set_time_to_edit_box+0x34>)
 8006ac4:	f7fd f8f6 	bl	8003cb4 <HAL_RTC_GetTime>

    char timeString[9]; // Deklaracija timeString unutar funkcije

    sprintf(timeString, "%02d:%02d:%02d", gTime.Hours, gTime.Minutes, gTime.Seconds);
 8006ac8:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8006acc:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8006ad0:	f89d 101a 	ldrb.w	r1, [sp, #26]
 8006ad4:	9100      	str	r1, [sp, #0]
 8006ad6:	4906      	ldr	r1, [pc, #24]	; (8006af0 <set_time_to_edit_box+0x38>)
 8006ad8:	a803      	add	r0, sp, #12
 8006ada:	f00e fe9f 	bl	801581c <siprintf>

    // Postavljanje teksta u edit box
    EDIT_SetText(hEdit, timeString);
 8006ade:	a903      	add	r1, sp, #12
 8006ae0:	4620      	mov	r0, r4
 8006ae2:	f002 fba5 	bl	8009230 <EDIT_SetText>


}
 8006ae6:	b00c      	add	sp, #48	; 0x30
 8006ae8:	bd10      	pop	{r4, pc}
 8006aea:	bf00      	nop
 8006aec:	200198bc 	.word	0x200198bc
 8006af0:	08015f08 	.word	0x08015f08

08006af4 <set_satiPlus_to_edit_box>:

void set_satiPlus_to_edit_box(WM_HWIN hEdit) {
 8006af4:	b510      	push	{r4, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	4604      	mov	r4, r0

    AlarmPodesavanje.Hours++;
 8006afa:	4a0d      	ldr	r2, [pc, #52]	; (8006b30 <set_satiPlus_to_edit_box+0x3c>)
 8006afc:	7813      	ldrb	r3, [r2, #0]
 8006afe:	3301      	adds	r3, #1
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	7013      	strb	r3, [r2, #0]
            if (AlarmPodesavanje.Hours >= 24) {
 8006b04:	2b17      	cmp	r3, #23
 8006b06:	d902      	bls.n	8006b0e <set_satiPlus_to_edit_box+0x1a>
                AlarmPodesavanje.Hours = 0;
 8006b08:	4613      	mov	r3, r2
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	701a      	strb	r2, [r3, #0]
            }

    char timeString[9]; // Deklaracija timeString unutar funkcije

    sprintf(timeString, "%02d", AlarmPodesavanje.Hours);
 8006b0e:	4b08      	ldr	r3, [pc, #32]	; (8006b30 <set_satiPlus_to_edit_box+0x3c>)
 8006b10:	781a      	ldrb	r2, [r3, #0]
 8006b12:	4908      	ldr	r1, [pc, #32]	; (8006b34 <set_satiPlus_to_edit_box+0x40>)
 8006b14:	a801      	add	r0, sp, #4
 8006b16:	f00e fe81 	bl	801581c <siprintf>

    // Postavljanje teksta u edit box
    EDIT_SetText(hEdit, timeString);
 8006b1a:	a901      	add	r1, sp, #4
 8006b1c:	4620      	mov	r0, r4
 8006b1e:	f002 fb87 	bl	8009230 <EDIT_SetText>
    GUI_Delay(1000);
 8006b22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b26:	f007 ff87 	bl	800ea38 <GUI_Delay>


}
 8006b2a:	b004      	add	sp, #16
 8006b2c:	bd10      	pop	{r4, pc}
 8006b2e:	bf00      	nop
 8006b30:	20019380 	.word	0x20019380
 8006b34:	08015f00 	.word	0x08015f00

08006b38 <set_satiMinus_to_edit_box>:

void set_satiMinus_to_edit_box(WM_HWIN hEdit) {
 8006b38:	b510      	push	{r4, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	4604      	mov	r4, r0


    AlarmPodesavanje.Hours--;
 8006b3e:	4b09      	ldr	r3, [pc, #36]	; (8006b64 <set_satiMinus_to_edit_box+0x2c>)
 8006b40:	781a      	ldrb	r2, [r3, #0]
 8006b42:	3a01      	subs	r2, #1
 8006b44:	b2d2      	uxtb	r2, r2
 8006b46:	701a      	strb	r2, [r3, #0]
                AlarmPodesavanje.Hours = 24;
            }

    char timeString[9]; // Deklaracija timeString unutar funkcije

    sprintf(timeString, "%02d", AlarmPodesavanje.Hours);
 8006b48:	4907      	ldr	r1, [pc, #28]	; (8006b68 <set_satiMinus_to_edit_box+0x30>)
 8006b4a:	a801      	add	r0, sp, #4
 8006b4c:	f00e fe66 	bl	801581c <siprintf>

    // Postavljanje teksta u edit box
    EDIT_SetText(hEdit, timeString);
 8006b50:	a901      	add	r1, sp, #4
 8006b52:	4620      	mov	r0, r4
 8006b54:	f002 fb6c 	bl	8009230 <EDIT_SetText>
    GUI_Delay(1000);
 8006b58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b5c:	f007 ff6c 	bl	800ea38 <GUI_Delay>


}
 8006b60:	b004      	add	sp, #16
 8006b62:	bd10      	pop	{r4, pc}
 8006b64:	20019380 	.word	0x20019380
 8006b68:	08015f00 	.word	0x08015f00

08006b6c <set_minutiPlus_to_edit_box>:

void set_minutiPlus_to_edit_box(WM_HWIN hEdit) {
 8006b6c:	b510      	push	{r4, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	4604      	mov	r4, r0

    AlarmPodesavanje.Minutes++;
 8006b72:	4a0d      	ldr	r2, [pc, #52]	; (8006ba8 <set_minutiPlus_to_edit_box+0x3c>)
 8006b74:	7853      	ldrb	r3, [r2, #1]
 8006b76:	3301      	adds	r3, #1
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	7053      	strb	r3, [r2, #1]
            if (AlarmPodesavanje.Minutes  >= 60) {
 8006b7c:	2b3b      	cmp	r3, #59	; 0x3b
 8006b7e:	d902      	bls.n	8006b86 <set_minutiPlus_to_edit_box+0x1a>
                AlarmPodesavanje.Minutes  = 0;
 8006b80:	4613      	mov	r3, r2
 8006b82:	2200      	movs	r2, #0
 8006b84:	705a      	strb	r2, [r3, #1]
            }

    char timeString[9]; // Deklaracija timeString unutar funkcije

    sprintf(timeString, "%02d", AlarmPodesavanje.Minutes );
 8006b86:	4b08      	ldr	r3, [pc, #32]	; (8006ba8 <set_minutiPlus_to_edit_box+0x3c>)
 8006b88:	785a      	ldrb	r2, [r3, #1]
 8006b8a:	4908      	ldr	r1, [pc, #32]	; (8006bac <set_minutiPlus_to_edit_box+0x40>)
 8006b8c:	a801      	add	r0, sp, #4
 8006b8e:	f00e fe45 	bl	801581c <siprintf>

    // Postavljanje teksta u edit box
    EDIT_SetText(hEdit, timeString);
 8006b92:	a901      	add	r1, sp, #4
 8006b94:	4620      	mov	r0, r4
 8006b96:	f002 fb4b 	bl	8009230 <EDIT_SetText>
    GUI_Delay(1000);
 8006b9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b9e:	f007 ff4b 	bl	800ea38 <GUI_Delay>

}
 8006ba2:	b004      	add	sp, #16
 8006ba4:	bd10      	pop	{r4, pc}
 8006ba6:	bf00      	nop
 8006ba8:	20019380 	.word	0x20019380
 8006bac:	08015f00 	.word	0x08015f00

08006bb0 <set_minutiMinus_to_edit_box>:

void set_minutiMinus_to_edit_box(WM_HWIN hEdit) {
 8006bb0:	b510      	push	{r4, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	4604      	mov	r4, r0

    AlarmPodesavanje.Minutes--;
 8006bb6:	4a0c      	ldr	r2, [pc, #48]	; (8006be8 <set_minutiMinus_to_edit_box+0x38>)
 8006bb8:	7853      	ldrb	r3, [r2, #1]
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	7053      	strb	r3, [r2, #1]
            if (AlarmPodesavanje.Minutes  ==0 ) {
 8006bc0:	b913      	cbnz	r3, 8006bc8 <set_minutiMinus_to_edit_box+0x18>
                AlarmPodesavanje.Minutes  = 59;
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	223b      	movs	r2, #59	; 0x3b
 8006bc6:	705a      	strb	r2, [r3, #1]
            }

    char timeString[9]; // Deklaracija timeString unutar funkcije

    sprintf(timeString, "%02d", AlarmPodesavanje.Minutes );
 8006bc8:	4b07      	ldr	r3, [pc, #28]	; (8006be8 <set_minutiMinus_to_edit_box+0x38>)
 8006bca:	785a      	ldrb	r2, [r3, #1]
 8006bcc:	4907      	ldr	r1, [pc, #28]	; (8006bec <set_minutiMinus_to_edit_box+0x3c>)
 8006bce:	a801      	add	r0, sp, #4
 8006bd0:	f00e fe24 	bl	801581c <siprintf>

    // Postavljanje teksta u edit box
    EDIT_SetText(hEdit, timeString);
 8006bd4:	a901      	add	r1, sp, #4
 8006bd6:	4620      	mov	r0, r4
 8006bd8:	f002 fb2a 	bl	8009230 <EDIT_SetText>
    GUI_Delay(1000);
 8006bdc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006be0:	f007 ff2a 	bl	800ea38 <GUI_Delay>

}
 8006be4:	b004      	add	sp, #16
 8006be6:	bd10      	pop	{r4, pc}
 8006be8:	20019380 	.word	0x20019380
 8006bec:	08015f00 	.word	0x08015f00

08006bf0 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{

	alarm = 1;
 8006bf0:	4b01      	ldr	r3, [pc, #4]	; (8006bf8 <HAL_RTC_AlarmAEventCallback+0x8>)
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	701a      	strb	r2, [r3, #0]


}
 8006bf6:	4770      	bx	lr
 8006bf8:	200193b4 	.word	0x200193b4

08006bfc <upis_alarm>:
    }

    // Slanje vremena preko neophodnog mehanizma (npr. CDC_Transmit_FS)
}

void upis_alarm(WM_HWIN hEdit) {
 8006bfc:	b510      	push	{r4, lr}
 8006bfe:	b088      	sub	sp, #32
 8006c00:	4604      	mov	r4, r0
    // Kreiranje stringa za vreme postavljeno u set_alarm funkciji
    char timeString[20];

    //globalAlarmTime=AlarmPodesavanje;
    sprintf(timeString, "%02d:%02d:%02d\r", AlarmPodesavanje.Hours, AlarmPodesavanje.Minutes, AlarmPodesavanje.Seconds);
 8006c02:	4908      	ldr	r1, [pc, #32]	; (8006c24 <upis_alarm+0x28>)
 8006c04:	780a      	ldrb	r2, [r1, #0]
 8006c06:	784b      	ldrb	r3, [r1, #1]
 8006c08:	7889      	ldrb	r1, [r1, #2]
 8006c0a:	9100      	str	r1, [sp, #0]
 8006c0c:	4906      	ldr	r1, [pc, #24]	; (8006c28 <upis_alarm+0x2c>)
 8006c0e:	a803      	add	r0, sp, #12
 8006c10:	f00e fe04 	bl	801581c <siprintf>

    // Postavljanje vremena u EDIT polje
    if (hEdit != 0) {
 8006c14:	b90c      	cbnz	r4, 8006c1a <upis_alarm+0x1e>
        EDIT_SetText(hEdit, timeString);
    }

    // Dodatne radnje po potrebi
}
 8006c16:	b008      	add	sp, #32
 8006c18:	bd10      	pop	{r4, pc}
        EDIT_SetText(hEdit, timeString);
 8006c1a:	a903      	add	r1, sp, #12
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	f002 fb07 	bl	8009230 <EDIT_SetText>
}
 8006c22:	e7f8      	b.n	8006c16 <upis_alarm+0x1a>
 8006c24:	20019380 	.word	0x20019380
 8006c28:	08015ee0 	.word	0x08015ee0

08006c2c <upis_stoperica>:

void upis_stoperica(WM_HWIN hEdit) { //funkcija za upis vremena za stopericu
 8006c2c:	b510      	push	{r4, lr}
 8006c2e:	b086      	sub	sp, #24
 8006c30:	4604      	mov	r4, r0
    // Kreiranje stringa za vreme postavljeno u set_alarm funkciji

    char timeString[20];

    stoperica.Seconds++;
 8006c32:	4a0e      	ldr	r2, [pc, #56]	; (8006c6c <upis_stoperica+0x40>)
 8006c34:	7893      	ldrb	r3, [r2, #2]
 8006c36:	3301      	adds	r3, #1
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	7093      	strb	r3, [r2, #2]
    if(stoperica.Seconds==59){
 8006c3c:	2b3b      	cmp	r3, #59	; 0x3b
 8006c3e:	d009      	beq.n	8006c54 <upis_stoperica+0x28>
    	stoperica.Seconds=0;
        stoperica.Minutes++;
    }
    sprintf(timeString, "%02d:%02d\r", stoperica.Minutes, stoperica.Seconds);
 8006c40:	4a0a      	ldr	r2, [pc, #40]	; (8006c6c <upis_stoperica+0x40>)
 8006c42:	7893      	ldrb	r3, [r2, #2]
 8006c44:	7852      	ldrb	r2, [r2, #1]
 8006c46:	490a      	ldr	r1, [pc, #40]	; (8006c70 <upis_stoperica+0x44>)
 8006c48:	a801      	add	r0, sp, #4
 8006c4a:	f00e fde7 	bl	801581c <siprintf>

    // Postavljanje vremena u EDIT polje
    if (hEdit != 0) {
 8006c4e:	b944      	cbnz	r4, 8006c62 <upis_stoperica+0x36>
        EDIT_SetText(hEdit, timeString);
    }

    // Dodatne radnje po potrebi
}
 8006c50:	b006      	add	sp, #24
 8006c52:	bd10      	pop	{r4, pc}
    	stoperica.Seconds=0;
 8006c54:	4613      	mov	r3, r2
 8006c56:	2200      	movs	r2, #0
 8006c58:	709a      	strb	r2, [r3, #2]
        stoperica.Minutes++;
 8006c5a:	785a      	ldrb	r2, [r3, #1]
 8006c5c:	3201      	adds	r2, #1
 8006c5e:	705a      	strb	r2, [r3, #1]
 8006c60:	e7ee      	b.n	8006c40 <upis_stoperica+0x14>
        EDIT_SetText(hEdit, timeString);
 8006c62:	a901      	add	r1, sp, #4
 8006c64:	4620      	mov	r0, r4
 8006c66:	f002 fae3 	bl	8009230 <EDIT_SetText>
}
 8006c6a:	e7f1      	b.n	8006c50 <upis_stoperica+0x24>
 8006c6c:	2001988c 	.word	0x2001988c
 8006c70:	08015f18 	.word	0x08015f18

08006c74 <prolazno_vrijeme>:

void prolazno_vrijeme(WM_HWIN hEdit){
 8006c74:	b510      	push	{r4, lr}
 8006c76:	b086      	sub	sp, #24
 8006c78:	4604      	mov	r4, r0

	char timeString[20];

    sprintf(timeString, "%02d:%02d\r", stoperica.Minutes, stoperica.Seconds);
 8006c7a:	4a07      	ldr	r2, [pc, #28]	; (8006c98 <prolazno_vrijeme+0x24>)
 8006c7c:	7893      	ldrb	r3, [r2, #2]
 8006c7e:	7852      	ldrb	r2, [r2, #1]
 8006c80:	4906      	ldr	r1, [pc, #24]	; (8006c9c <prolazno_vrijeme+0x28>)
 8006c82:	a801      	add	r0, sp, #4
 8006c84:	f00e fdca 	bl	801581c <siprintf>

    // Postavljanje vremena u EDIT polje
    if (hEdit != 0) {
 8006c88:	b90c      	cbnz	r4, 8006c8e <prolazno_vrijeme+0x1a>
        EDIT_SetText(hEdit, timeString);
    }

}
 8006c8a:	b006      	add	sp, #24
 8006c8c:	bd10      	pop	{r4, pc}
        EDIT_SetText(hEdit, timeString);
 8006c8e:	a901      	add	r1, sp, #4
 8006c90:	4620      	mov	r0, r4
 8006c92:	f002 facd 	bl	8009230 <EDIT_SetText>
}
 8006c96:	e7f8      	b.n	8006c8a <prolazno_vrijeme+0x16>
 8006c98:	2001988c 	.word	0x2001988c
 8006c9c:	08015f18 	.word	0x08015f18

08006ca0 <upis_stoperica2>:

void upis_stoperica2(WM_HWIN hEdit) { //funkcija za upis vremena za stopericu
 8006ca0:	b510      	push	{r4, lr}
 8006ca2:	b086      	sub	sp, #24
 8006ca4:	4604      	mov	r4, r0
    // Kreiranje stringa za vreme postavljeno u set_alarm funkciji

    char timeString[20];

    stoperica2.Seconds++;
 8006ca6:	4a0e      	ldr	r2, [pc, #56]	; (8006ce0 <upis_stoperica2+0x40>)
 8006ca8:	7893      	ldrb	r3, [r2, #2]
 8006caa:	3301      	adds	r3, #1
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	7093      	strb	r3, [r2, #2]
    if(stoperica2.Seconds==59){
 8006cb0:	2b3b      	cmp	r3, #59	; 0x3b
 8006cb2:	d009      	beq.n	8006cc8 <upis_stoperica2+0x28>
    	stoperica2.Seconds=0;
    	stoperica2.Minutes++;
    }
    sprintf(timeString, "%02d:%02d\r", stoperica2.Minutes, stoperica2.Seconds);
 8006cb4:	4a0a      	ldr	r2, [pc, #40]	; (8006ce0 <upis_stoperica2+0x40>)
 8006cb6:	7893      	ldrb	r3, [r2, #2]
 8006cb8:	7852      	ldrb	r2, [r2, #1]
 8006cba:	490a      	ldr	r1, [pc, #40]	; (8006ce4 <upis_stoperica2+0x44>)
 8006cbc:	a801      	add	r0, sp, #4
 8006cbe:	f00e fdad 	bl	801581c <siprintf>

    // Postavljanje vremena u EDIT polje
    if (hEdit != 0) {
 8006cc2:	b944      	cbnz	r4, 8006cd6 <upis_stoperica2+0x36>
        EDIT_SetText(hEdit, timeString);
    }

    // Dodatne radnje po potrebi
}
 8006cc4:	b006      	add	sp, #24
 8006cc6:	bd10      	pop	{r4, pc}
    	stoperica2.Seconds=0;
 8006cc8:	4613      	mov	r3, r2
 8006cca:	2200      	movs	r2, #0
 8006ccc:	709a      	strb	r2, [r3, #2]
    	stoperica2.Minutes++;
 8006cce:	785a      	ldrb	r2, [r3, #1]
 8006cd0:	3201      	adds	r2, #1
 8006cd2:	705a      	strb	r2, [r3, #1]
 8006cd4:	e7ee      	b.n	8006cb4 <upis_stoperica2+0x14>
        EDIT_SetText(hEdit, timeString);
 8006cd6:	a901      	add	r1, sp, #4
 8006cd8:	4620      	mov	r0, r4
 8006cda:	f002 faa9 	bl	8009230 <EDIT_SetText>
}
 8006cde:	e7f1      	b.n	8006cc4 <upis_stoperica2+0x24>
 8006ce0:	200193d0 	.word	0x200193d0
 8006ce4:	08015f18 	.word	0x08015f18

08006ce8 <upis_reset>:

void upis_reset(void){
 8006ce8:	b500      	push	{lr}
 8006cea:	b087      	sub	sp, #28
	RTC_TimeTypeDef nulaTime = {0};

	nulaTime.Minutes=0;
	nulaTime.Seconds=0;

	sprintf(timeString, "%02d:%02d\r", nulaTime.Minutes, nulaTime.Seconds);
 8006cec:	2300      	movs	r3, #0
 8006cee:	461a      	mov	r2, r3
 8006cf0:	491f      	ldr	r1, [pc, #124]	; (8006d70 <upis_reset+0x88>)
 8006cf2:	a801      	add	r0, sp, #4
 8006cf4:	f00e fd92 	bl	801581c <siprintf>

    if (hEdit0 != 0) {
 8006cf8:	4b1e      	ldr	r3, [pc, #120]	; (8006d74 <upis_reset+0x8c>)
 8006cfa:	6818      	ldr	r0, [r3, #0]
 8006cfc:	b9b8      	cbnz	r0, 8006d2e <upis_reset+0x46>
        EDIT_SetText(hEdit0, timeString);
    }
    if (hEdit2 != 0) {
 8006cfe:	4b1e      	ldr	r3, [pc, #120]	; (8006d78 <upis_reset+0x90>)
 8006d00:	6818      	ldr	r0, [r3, #0]
 8006d02:	b9c0      	cbnz	r0, 8006d36 <upis_reset+0x4e>
        EDIT_SetText(hEdit2, timeString);
    }
    if (hEdit3 != 0) {
 8006d04:	4b1d      	ldr	r3, [pc, #116]	; (8006d7c <upis_reset+0x94>)
 8006d06:	6818      	ldr	r0, [r3, #0]
 8006d08:	b9c8      	cbnz	r0, 8006d3e <upis_reset+0x56>
        EDIT_SetText(hEdit3, timeString);
    }
    if (hEdit4 != 0) {
 8006d0a:	4b1d      	ldr	r3, [pc, #116]	; (8006d80 <upis_reset+0x98>)
 8006d0c:	6818      	ldr	r0, [r3, #0]
 8006d0e:	b9d0      	cbnz	r0, 8006d46 <upis_reset+0x5e>
        EDIT_SetText(hEdit4, timeString);
    }
    if (hEdit6 != 0) {
 8006d10:	4b1c      	ldr	r3, [pc, #112]	; (8006d84 <upis_reset+0x9c>)
 8006d12:	6818      	ldr	r0, [r3, #0]
 8006d14:	b9d8      	cbnz	r0, 8006d4e <upis_reset+0x66>
        EDIT_SetText(hEdit6, timeString);
    }
    if (hEdit8 != 0) {
 8006d16:	4b1c      	ldr	r3, [pc, #112]	; (8006d88 <upis_reset+0xa0>)
 8006d18:	6818      	ldr	r0, [r3, #0]
 8006d1a:	b9e0      	cbnz	r0, 8006d56 <upis_reset+0x6e>
        EDIT_SetText(hEdit8, timeString);
    }
    if (hEdit7 != 0) {
 8006d1c:	4b1b      	ldr	r3, [pc, #108]	; (8006d8c <upis_reset+0xa4>)
 8006d1e:	6818      	ldr	r0, [r3, #0]
 8006d20:	b9e8      	cbnz	r0, 8006d5e <upis_reset+0x76>
        EDIT_SetText(hEdit7, timeString);
    }
    if (hEdit9 != 0) {
 8006d22:	4b1b      	ldr	r3, [pc, #108]	; (8006d90 <upis_reset+0xa8>)
 8006d24:	6818      	ldr	r0, [r3, #0]
 8006d26:	b9f0      	cbnz	r0, 8006d66 <upis_reset+0x7e>
        EDIT_SetText(hEdit9, timeString);
    }
}
 8006d28:	b007      	add	sp, #28
 8006d2a:	f85d fb04 	ldr.w	pc, [sp], #4
        EDIT_SetText(hEdit0, timeString);
 8006d2e:	a901      	add	r1, sp, #4
 8006d30:	f002 fa7e 	bl	8009230 <EDIT_SetText>
 8006d34:	e7e3      	b.n	8006cfe <upis_reset+0x16>
        EDIT_SetText(hEdit2, timeString);
 8006d36:	a901      	add	r1, sp, #4
 8006d38:	f002 fa7a 	bl	8009230 <EDIT_SetText>
 8006d3c:	e7e2      	b.n	8006d04 <upis_reset+0x1c>
        EDIT_SetText(hEdit3, timeString);
 8006d3e:	a901      	add	r1, sp, #4
 8006d40:	f002 fa76 	bl	8009230 <EDIT_SetText>
 8006d44:	e7e1      	b.n	8006d0a <upis_reset+0x22>
        EDIT_SetText(hEdit4, timeString);
 8006d46:	a901      	add	r1, sp, #4
 8006d48:	f002 fa72 	bl	8009230 <EDIT_SetText>
 8006d4c:	e7e0      	b.n	8006d10 <upis_reset+0x28>
        EDIT_SetText(hEdit6, timeString);
 8006d4e:	a901      	add	r1, sp, #4
 8006d50:	f002 fa6e 	bl	8009230 <EDIT_SetText>
 8006d54:	e7df      	b.n	8006d16 <upis_reset+0x2e>
        EDIT_SetText(hEdit8, timeString);
 8006d56:	a901      	add	r1, sp, #4
 8006d58:	f002 fa6a 	bl	8009230 <EDIT_SetText>
 8006d5c:	e7de      	b.n	8006d1c <upis_reset+0x34>
        EDIT_SetText(hEdit7, timeString);
 8006d5e:	a901      	add	r1, sp, #4
 8006d60:	f002 fa66 	bl	8009230 <EDIT_SetText>
 8006d64:	e7dd      	b.n	8006d22 <upis_reset+0x3a>
        EDIT_SetText(hEdit9, timeString);
 8006d66:	a901      	add	r1, sp, #4
 8006d68:	f002 fa62 	bl	8009230 <EDIT_SetText>
}
 8006d6c:	e7dc      	b.n	8006d28 <upis_reset+0x40>
 8006d6e:	bf00      	nop
 8006d70:	08015f18 	.word	0x08015f18
 8006d74:	2001976c 	.word	0x2001976c
 8006d78:	20019930 	.word	0x20019930
 8006d7c:	200198b8 	.word	0x200198b8
 8006d80:	20019940 	.word	0x20019940
 8006d84:	20019834 	.word	0x20019834
 8006d88:	200198a4 	.word	0x200198a4
 8006d8c:	2001990c 	.word	0x2001990c
 8006d90:	200198dc 	.word	0x200198dc

08006d94 <set_buzzer>:

void set_buzzer(uint16_t frekvencija, uint8_t faktor_ispune)
{
 8006d94:	b410      	push	{r4}

__HAL_TIM_SetAutoreload(&htim4, 3840000/frekvencija); // Set Frequency
 8006d96:	4c05      	ldr	r4, [pc, #20]	; (8006dac <set_buzzer+0x18>)
 8006d98:	6822      	ldr	r2, [r4, #0]
 8006d9a:	4b05      	ldr	r3, [pc, #20]	; (8006db0 <set_buzzer+0x1c>)
 8006d9c:	fb93 f0f0 	sdiv	r0, r3, r0
 8006da0:	62d0      	str	r0, [r2, #44]	; 0x2c
 8006da2:	60e0      	str	r0, [r4, #12]
 __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3,faktor_ispune); // Set Volume
 8006da4:	63d1      	str	r1, [r2, #60]	; 0x3c

}
 8006da6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006daa:	4770      	bx	lr
 8006dac:	2001977c 	.word	0x2001977c
 8006db0:	003a9800 	.word	0x003a9800

08006db4 <main>:
{
 8006db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006db8:	b093      	sub	sp, #76	; 0x4c
  HAL_Init();
 8006dba:	f7fa fb61 	bl	8001480 <HAL_Init>
  SystemClock_Config();
 8006dbe:	f7ff fab9 	bl	8006334 <SystemClock_Config>
  MX_GPIO_Init();
 8006dc2:	f7ff f96d 	bl	80060a0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8006dc6:	f7ff f9cb 	bl	8006160 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8006dca:	f000 fcd7 	bl	800777c <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8006dce:	f7ff f9e9 	bl	80061a4 <MX_RTC_Init>
  MX_TIM3_Init();
 8006dd2:	f7ff fa23 	bl	800621c <MX_TIM3_Init>
  MX_TIM4_Init();
 8006dd6:	f7ff fa63 	bl	80062a0 <MX_TIM4_Init>
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2)
 8006dda:	2101      	movs	r1, #1
 8006ddc:	48bb      	ldr	r0, [pc, #748]	; (80070cc <main+0x318>)
 8006dde:	f7fc ffbc 	bl	8003d5a <HAL_RTCEx_BKUPRead>
 8006de2:	f243 23f2 	movw	r3, #13042	; 0x32f2
 8006de6:	4298      	cmp	r0, r3
 8006de8:	d001      	beq.n	8006dee <main+0x3a>
	  set_time();
 8006dea:	f7ff fb05 	bl	80063f8 <set_time>
   Init_LCD_GPIO();
 8006dee:	f7fa f82d 	bl	8000e4c <Init_LCD_GPIO>
   Init_TOUCH_GPIO(hi2c1);
 8006df2:	4eb7      	ldr	r6, [pc, #732]	; (80070d0 <main+0x31c>)
 8006df4:	466c      	mov	r4, sp
 8006df6:	f106 0510 	add.w	r5, r6, #16
 8006dfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006dfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006e00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006e04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e06:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006e0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006e0e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8006e12:	f7fa f9a3 	bl	800115c <Init_TOUCH_GPIO>
   STMPE610_Init();
 8006e16:	f7fa fa1b 	bl	8001250 <STMPE610_Init>
   WM_SetCreateFlags(WM_CF_MEMDEV); // eliminise flickering
 8006e1a:	2004      	movs	r0, #4
 8006e1c:	f002 fe54 	bl	8009ac8 <WM_SetCreateFlags>
   GUI_Init();
 8006e20:	f008 ff26 	bl	800fc70 <GUI_Init>
    GUI_SetBkColor(GUI_YELLOW);
 8006e24:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006e28:	f008 fa08 	bl	800f23c <GUI_SetBkColor>
    GUI_Clear();
 8006e2c:	f008 fee6 	bl	800fbfc <GUI_Clear>
    CreateStopwatch();
 8006e30:	f001 f806 	bl	8007e40 <CreateStopwatch>
    WM_HWIN hDialog = CreateStopwatch();
 8006e34:	f001 f804 	bl	8007e40 <CreateStopwatch>
 8006e38:	4681      	mov	r9, r0
    hButton0 = WM_GetDialogItem(hDialog, ID_BUTTON_0);
 8006e3a:	f640 0101 	movw	r1, #2049	; 0x801
 8006e3e:	f003 f81c 	bl	8009e7a <WM_GetDialogItem>
 8006e42:	4ba4      	ldr	r3, [pc, #656]	; (80070d4 <main+0x320>)
 8006e44:	6018      	str	r0, [r3, #0]
    hButton1 = WM_GetDialogItem(hDialog, ID_BUTTON_1);
 8006e46:	f640 0102 	movw	r1, #2050	; 0x802
 8006e4a:	4648      	mov	r0, r9
 8006e4c:	f003 f815 	bl	8009e7a <WM_GetDialogItem>
 8006e50:	4ba1      	ldr	r3, [pc, #644]	; (80070d8 <main+0x324>)
 8006e52:	6018      	str	r0, [r3, #0]
    hButton2 = WM_GetDialogItem(hDialog, ID_BUTTON_2);
 8006e54:	f640 0103 	movw	r1, #2051	; 0x803
 8006e58:	4648      	mov	r0, r9
 8006e5a:	f003 f80e 	bl	8009e7a <WM_GetDialogItem>
 8006e5e:	4b9f      	ldr	r3, [pc, #636]	; (80070dc <main+0x328>)
 8006e60:	6018      	str	r0, [r3, #0]
    hButton3 = WM_GetDialogItem(hDialog, ID_BUTTON_3);
 8006e62:	f640 0105 	movw	r1, #2053	; 0x805
 8006e66:	4648      	mov	r0, r9
 8006e68:	f003 f807 	bl	8009e7a <WM_GetDialogItem>
 8006e6c:	4b9c      	ldr	r3, [pc, #624]	; (80070e0 <main+0x32c>)
 8006e6e:	6018      	str	r0, [r3, #0]
    hButton4 = WM_GetDialogItem(hDialog, ID_BUTTON_4);
 8006e70:	f640 0106 	movw	r1, #2054	; 0x806
 8006e74:	4648      	mov	r0, r9
 8006e76:	f003 f800 	bl	8009e7a <WM_GetDialogItem>
 8006e7a:	4b9a      	ldr	r3, [pc, #616]	; (80070e4 <main+0x330>)
 8006e7c:	6018      	str	r0, [r3, #0]
    hButton5 = WM_GetDialogItem(hDialog, ID_BUTTON_5);
 8006e7e:	f640 0114 	movw	r1, #2068	; 0x814
 8006e82:	4648      	mov	r0, r9
 8006e84:	f002 fff9 	bl	8009e7a <WM_GetDialogItem>
 8006e88:	4b97      	ldr	r3, [pc, #604]	; (80070e8 <main+0x334>)
 8006e8a:	6018      	str	r0, [r3, #0]
    hButton6 = WM_GetDialogItem(hDialog, ID_BUTTON_6);
 8006e8c:	f640 0115 	movw	r1, #2069	; 0x815
 8006e90:	4648      	mov	r0, r9
 8006e92:	f002 fff2 	bl	8009e7a <WM_GetDialogItem>
 8006e96:	4b95      	ldr	r3, [pc, #596]	; (80070ec <main+0x338>)
 8006e98:	6018      	str	r0, [r3, #0]
    hButton7 = WM_GetDialogItem(hDialog, ID_BUTTON_7);
 8006e9a:	f640 0116 	movw	r1, #2070	; 0x816
 8006e9e:	4648      	mov	r0, r9
 8006ea0:	f002 ffeb 	bl	8009e7a <WM_GetDialogItem>
 8006ea4:	4b92      	ldr	r3, [pc, #584]	; (80070f0 <main+0x33c>)
 8006ea6:	6018      	str	r0, [r3, #0]
    hButton8 = WM_GetDialogItem(hDialog, ID_BUTTON_8);
 8006ea8:	f640 0117 	movw	r1, #2071	; 0x817
 8006eac:	4648      	mov	r0, r9
 8006eae:	f002 ffe4 	bl	8009e7a <WM_GetDialogItem>
 8006eb2:	4b90      	ldr	r3, [pc, #576]	; (80070f4 <main+0x340>)
 8006eb4:	6018      	str	r0, [r3, #0]
    hButton9 = WM_GetDialogItem(hDialog, ID_BUTTON_9);
 8006eb6:	f640 0118 	movw	r1, #2072	; 0x818
 8006eba:	4648      	mov	r0, r9
 8006ebc:	f002 ffdd 	bl	8009e7a <WM_GetDialogItem>
 8006ec0:	4b8d      	ldr	r3, [pc, #564]	; (80070f8 <main+0x344>)
 8006ec2:	6018      	str	r0, [r3, #0]
    hButton10 = WM_GetDialogItem(hDialog, ID_BUTTON_10);
 8006ec4:	f640 0123 	movw	r1, #2083	; 0x823
 8006ec8:	4648      	mov	r0, r9
 8006eca:	f002 ffd6 	bl	8009e7a <WM_GetDialogItem>
 8006ece:	4b8b      	ldr	r3, [pc, #556]	; (80070fc <main+0x348>)
 8006ed0:	6018      	str	r0, [r3, #0]
    hButton11 = WM_GetDialogItem(hDialog, ID_BUTTON_11);
 8006ed2:	f640 0124 	movw	r1, #2084	; 0x824
 8006ed6:	4648      	mov	r0, r9
 8006ed8:	f002 ffcf 	bl	8009e7a <WM_GetDialogItem>
 8006edc:	4b88      	ldr	r3, [pc, #544]	; (8007100 <main+0x34c>)
 8006ede:	6018      	str	r0, [r3, #0]
    hButton12 = WM_GetDialogItem(hDialog, ID_BUTTON_12);
 8006ee0:	f640 0125 	movw	r1, #2085	; 0x825
 8006ee4:	4648      	mov	r0, r9
 8006ee6:	f002 ffc8 	bl	8009e7a <WM_GetDialogItem>
 8006eea:	4b86      	ldr	r3, [pc, #536]	; (8007104 <main+0x350>)
 8006eec:	6018      	str	r0, [r3, #0]
    hButton13 = WM_GetDialogItem(hDialog, ID_BUTTON_13);
 8006eee:	f640 0126 	movw	r1, #2086	; 0x826
 8006ef2:	4648      	mov	r0, r9
 8006ef4:	f002 ffc1 	bl	8009e7a <WM_GetDialogItem>
 8006ef8:	4b83      	ldr	r3, [pc, #524]	; (8007108 <main+0x354>)
 8006efa:	6018      	str	r0, [r3, #0]
    hEdit0 = WM_GetDialogItem(hDialog, ID_EDIT_0);
 8006efc:	f640 0107 	movw	r1, #2055	; 0x807
 8006f00:	4648      	mov	r0, r9
 8006f02:	f002 ffba 	bl	8009e7a <WM_GetDialogItem>
 8006f06:	4b81      	ldr	r3, [pc, #516]	; (800710c <main+0x358>)
 8006f08:	6018      	str	r0, [r3, #0]
    hEdit1 = WM_GetDialogItem(hDialog, ID_EDIT_1);
 8006f0a:	f640 0108 	movw	r1, #2056	; 0x808
 8006f0e:	4648      	mov	r0, r9
 8006f10:	f002 ffb3 	bl	8009e7a <WM_GetDialogItem>
 8006f14:	4b7e      	ldr	r3, [pc, #504]	; (8007110 <main+0x35c>)
 8006f16:	6018      	str	r0, [r3, #0]
    hEdit2 = WM_GetDialogItem(hDialog, ID_EDIT_2);
 8006f18:	f640 0109 	movw	r1, #2057	; 0x809
 8006f1c:	4648      	mov	r0, r9
 8006f1e:	f002 ffac 	bl	8009e7a <WM_GetDialogItem>
 8006f22:	4b7c      	ldr	r3, [pc, #496]	; (8007114 <main+0x360>)
 8006f24:	6018      	str	r0, [r3, #0]
    hEdit3 = WM_GetDialogItem(hDialog, ID_EDIT_3);
 8006f26:	f640 010a 	movw	r1, #2058	; 0x80a
 8006f2a:	4648      	mov	r0, r9
 8006f2c:	f002 ffa5 	bl	8009e7a <WM_GetDialogItem>
 8006f30:	4b79      	ldr	r3, [pc, #484]	; (8007118 <main+0x364>)
 8006f32:	6018      	str	r0, [r3, #0]
    hEdit4 = WM_GetDialogItem(hDialog, ID_EDIT_4);
 8006f34:	f640 010b 	movw	r1, #2059	; 0x80b
 8006f38:	4648      	mov	r0, r9
 8006f3a:	f002 ff9e 	bl	8009e7a <WM_GetDialogItem>
 8006f3e:	4b77      	ldr	r3, [pc, #476]	; (800711c <main+0x368>)
 8006f40:	6018      	str	r0, [r3, #0]
    hEdit5 = WM_GetDialogItem(hDialog, ID_EDIT_5);
 8006f42:	f640 010c 	movw	r1, #2060	; 0x80c
 8006f46:	4648      	mov	r0, r9
 8006f48:	f002 ff97 	bl	8009e7a <WM_GetDialogItem>
 8006f4c:	4b74      	ldr	r3, [pc, #464]	; (8007120 <main+0x36c>)
 8006f4e:	6018      	str	r0, [r3, #0]
    hEdit6 = WM_GetDialogItem(hDialog, ID_EDIT_6);
 8006f50:	f640 010d 	movw	r1, #2061	; 0x80d
 8006f54:	4648      	mov	r0, r9
 8006f56:	f002 ff90 	bl	8009e7a <WM_GetDialogItem>
 8006f5a:	4b72      	ldr	r3, [pc, #456]	; (8007124 <main+0x370>)
 8006f5c:	6018      	str	r0, [r3, #0]
    hEdit7 = WM_GetDialogItem(hDialog, ID_EDIT_7);
 8006f5e:	f640 010e 	movw	r1, #2062	; 0x80e
 8006f62:	4648      	mov	r0, r9
 8006f64:	f002 ff89 	bl	8009e7a <WM_GetDialogItem>
 8006f68:	4b6f      	ldr	r3, [pc, #444]	; (8007128 <main+0x374>)
 8006f6a:	6018      	str	r0, [r3, #0]
    hEdit8 = WM_GetDialogItem(hDialog, ID_EDIT_8);
 8006f6c:	f640 010f 	movw	r1, #2063	; 0x80f
 8006f70:	4648      	mov	r0, r9
 8006f72:	f002 ff82 	bl	8009e7a <WM_GetDialogItem>
 8006f76:	4b6d      	ldr	r3, [pc, #436]	; (800712c <main+0x378>)
 8006f78:	6018      	str	r0, [r3, #0]
    hEdit9 = WM_GetDialogItem(hDialog, ID_EDIT_9);
 8006f7a:	f44f 6101 	mov.w	r1, #2064	; 0x810
 8006f7e:	4648      	mov	r0, r9
 8006f80:	f002 ff7b 	bl	8009e7a <WM_GetDialogItem>
 8006f84:	4b6a      	ldr	r3, [pc, #424]	; (8007130 <main+0x37c>)
 8006f86:	6018      	str	r0, [r3, #0]
    hEdit10 = WM_GetDialogItem(hDialog, ID_EDIT_10);
 8006f88:	f640 0111 	movw	r1, #2065	; 0x811
 8006f8c:	4648      	mov	r0, r9
 8006f8e:	f002 ff74 	bl	8009e7a <WM_GetDialogItem>
 8006f92:	4b68      	ldr	r3, [pc, #416]	; (8007134 <main+0x380>)
 8006f94:	6018      	str	r0, [r3, #0]
    hEdit11 = WM_GetDialogItem(hDialog, ID_EDIT_11);
 8006f96:	f640 0112 	movw	r1, #2066	; 0x812
 8006f9a:	4648      	mov	r0, r9
 8006f9c:	f002 ff6d 	bl	8009e7a <WM_GetDialogItem>
 8006fa0:	4b65      	ldr	r3, [pc, #404]	; (8007138 <main+0x384>)
 8006fa2:	6018      	str	r0, [r3, #0]
    hEdit12 = WM_GetDialogItem(hDialog, ID_EDIT_12);
 8006fa4:	f640 0113 	movw	r1, #2067	; 0x813
 8006fa8:	4648      	mov	r0, r9
 8006faa:	f002 ff66 	bl	8009e7a <WM_GetDialogItem>
 8006fae:	4b63      	ldr	r3, [pc, #396]	; (800713c <main+0x388>)
 8006fb0:	6018      	str	r0, [r3, #0]
    hEdit13 = WM_GetDialogItem(hDialog, ID_EDIT_13);
 8006fb2:	f640 0119 	movw	r1, #2073	; 0x819
 8006fb6:	4648      	mov	r0, r9
 8006fb8:	f002 ff5f 	bl	8009e7a <WM_GetDialogItem>
 8006fbc:	4b60      	ldr	r3, [pc, #384]	; (8007140 <main+0x38c>)
 8006fbe:	6018      	str	r0, [r3, #0]
    hEdit14 = WM_GetDialogItem(hDialog, ID_EDIT_14);
 8006fc0:	f640 011a 	movw	r1, #2074	; 0x81a
 8006fc4:	4648      	mov	r0, r9
 8006fc6:	f002 ff58 	bl	8009e7a <WM_GetDialogItem>
 8006fca:	4b5e      	ldr	r3, [pc, #376]	; (8007144 <main+0x390>)
 8006fcc:	6018      	str	r0, [r3, #0]
    hEdit15 = WM_GetDialogItem(hDialog, ID_EDIT_15);
 8006fce:	f640 011b 	movw	r1, #2075	; 0x81b
 8006fd2:	4648      	mov	r0, r9
 8006fd4:	f002 ff51 	bl	8009e7a <WM_GetDialogItem>
 8006fd8:	4b5b      	ldr	r3, [pc, #364]	; (8007148 <main+0x394>)
 8006fda:	6018      	str	r0, [r3, #0]
    hEdit16 = WM_GetDialogItem(hDialog, ID_EDIT_16);
 8006fdc:	f640 011c 	movw	r1, #2076	; 0x81c
 8006fe0:	4648      	mov	r0, r9
 8006fe2:	f002 ff4a 	bl	8009e7a <WM_GetDialogItem>
 8006fe6:	4b59      	ldr	r3, [pc, #356]	; (800714c <main+0x398>)
 8006fe8:	6018      	str	r0, [r3, #0]
    hEdit17 = WM_GetDialogItem(hDialog, ID_EDIT_17);
 8006fea:	f640 011d 	movw	r1, #2077	; 0x81d
 8006fee:	4648      	mov	r0, r9
 8006ff0:	f002 ff43 	bl	8009e7a <WM_GetDialogItem>
 8006ff4:	4b56      	ldr	r3, [pc, #344]	; (8007150 <main+0x39c>)
 8006ff6:	6018      	str	r0, [r3, #0]
    hEdit18 = WM_GetDialogItem(hDialog, ID_EDIT_18);
 8006ff8:	f640 011e 	movw	r1, #2078	; 0x81e
 8006ffc:	4648      	mov	r0, r9
 8006ffe:	f002 ff3c 	bl	8009e7a <WM_GetDialogItem>
 8007002:	4b54      	ldr	r3, [pc, #336]	; (8007154 <main+0x3a0>)
 8007004:	6018      	str	r0, [r3, #0]
    hText0 = WM_GetDialogItem(hDialog, ID_TEXT_0);
 8007006:	f640 011f 	movw	r1, #2079	; 0x81f
 800700a:	4648      	mov	r0, r9
 800700c:	f002 ff35 	bl	8009e7a <WM_GetDialogItem>
 8007010:	4b51      	ldr	r3, [pc, #324]	; (8007158 <main+0x3a4>)
 8007012:	6018      	str	r0, [r3, #0]
    hText1 = WM_GetDialogItem(hDialog, ID_TEXT_1);
 8007014:	f44f 6102 	mov.w	r1, #2080	; 0x820
 8007018:	4648      	mov	r0, r9
 800701a:	f002 ff2e 	bl	8009e7a <WM_GetDialogItem>
 800701e:	4b4f      	ldr	r3, [pc, #316]	; (800715c <main+0x3a8>)
 8007020:	6018      	str	r0, [r3, #0]
    hText2 = WM_GetDialogItem(hDialog, ID_TEXT_2);
 8007022:	f640 0121 	movw	r1, #2081	; 0x821
 8007026:	4648      	mov	r0, r9
 8007028:	f002 ff27 	bl	8009e7a <WM_GetDialogItem>
 800702c:	4b4c      	ldr	r3, [pc, #304]	; (8007160 <main+0x3ac>)
 800702e:	6018      	str	r0, [r3, #0]
    hText3 = WM_GetDialogItem(hDialog, ID_TEXT_3);
 8007030:	f640 0122 	movw	r1, #2082	; 0x822
 8007034:	4648      	mov	r0, r9
 8007036:	f002 ff20 	bl	8009e7a <WM_GetDialogItem>
 800703a:	4b4a      	ldr	r3, [pc, #296]	; (8007164 <main+0x3b0>)
 800703c:	6018      	str	r0, [r3, #0]
    WM_HWIN hEditBeograd = WM_GetDialogItem(hDialog, ID_EDIT_15);
 800703e:	f640 011b 	movw	r1, #2075	; 0x81b
 8007042:	4648      	mov	r0, r9
 8007044:	f002 ff19 	bl	8009e7a <WM_GetDialogItem>
 8007048:	4680      	mov	r8, r0
    WM_HWIN hEditHavana = WM_GetDialogItem(hDialog, ID_EDIT_16);
 800704a:	f640 011c 	movw	r1, #2076	; 0x81c
 800704e:	4648      	mov	r0, r9
 8007050:	f002 ff13 	bl	8009e7a <WM_GetDialogItem>
 8007054:	4607      	mov	r7, r0
    WM_HWIN hEditTokio = WM_GetDialogItem(hDialog, ID_EDIT_17);
 8007056:	f640 011d 	movw	r1, #2077	; 0x81d
 800705a:	4648      	mov	r0, r9
 800705c:	f002 ff0d 	bl	8009e7a <WM_GetDialogItem>
 8007060:	4606      	mov	r6, r0
    WM_HWIN hEditMoskva = WM_GetDialogItem(hDialog, ID_EDIT_18);
 8007062:	f640 011e 	movw	r1, #2078	; 0x81e
 8007066:	4648      	mov	r0, r9
 8007068:	f002 ff07 	bl	8009e7a <WM_GetDialogItem>
 800706c:	4605      	mov	r5, r0
    WM_HWIN hEditTrenutno1 = WM_GetDialogItem(hDialog, ID_EDIT_11);
 800706e:	f640 0112 	movw	r1, #2066	; 0x812
 8007072:	4648      	mov	r0, r9
 8007074:	f002 ff01 	bl	8009e7a <WM_GetDialogItem>
 8007078:	9011      	str	r0, [sp, #68]	; 0x44
    WM_HWIN hEditSati = WM_GetDialogItem(hDialog, ID_EDIT_13);
 800707a:	f640 0119 	movw	r1, #2073	; 0x819
 800707e:	4648      	mov	r0, r9
 8007080:	f002 fefb 	bl	8009e7a <WM_GetDialogItem>
 8007084:	4682      	mov	sl, r0
    WM_HWIN hEditMinuti = WM_GetDialogItem(hDialog, ID_EDIT_14);
 8007086:	f640 011a 	movw	r1, #2074	; 0x81a
 800708a:	4648      	mov	r0, r9
 800708c:	f002 fef5 	bl	8009e7a <WM_GetDialogItem>
 8007090:	4681      	mov	r9, r0
    HAL_RTC_GetTime(&hrtc, &AlarmVrijeme, RTC_FORMAT_BIN);
 8007092:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 8007178 <main+0x3c4>
 8007096:	2200      	movs	r2, #0
 8007098:	4659      	mov	r1, fp
 800709a:	480c      	ldr	r0, [pc, #48]	; (80070cc <main+0x318>)
 800709c:	f7fc fe0a 	bl	8003cb4 <HAL_RTC_GetTime>
    AlarmPodesavanje.Hours = AlarmVrijeme.Hours;
 80070a0:	f89b 2000 	ldrb.w	r2, [fp]
 80070a4:	4b30      	ldr	r3, [pc, #192]	; (8007168 <main+0x3b4>)
 80070a6:	701a      	strb	r2, [r3, #0]
    AlarmPodesavanje.Minutes = AlarmVrijeme.Minutes;
 80070a8:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80070ac:	705a      	strb	r2, [r3, #1]
    stoperica.Seconds=0x00;
 80070ae:	4a2f      	ldr	r2, [pc, #188]	; (800716c <main+0x3b8>)
 80070b0:	2300      	movs	r3, #0
 80070b2:	7093      	strb	r3, [r2, #2]
    stoperica.Minutes=0x00;
 80070b4:	7053      	strb	r3, [r2, #1]
    stoperica2.Seconds=0x00;
 80070b6:	4a2e      	ldr	r2, [pc, #184]	; (8007170 <main+0x3bc>)
 80070b8:	7093      	strb	r3, [r2, #2]
    stoperica2.Minutes=0x00;
 80070ba:	7053      	strb	r3, [r2, #1]
	sakri_worldclock_stop_watch(); // prikazuje samo polja za ALARM
 80070bc:	f7ff fa40 	bl	8006540 <sakri_worldclock_stop_watch>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80070c0:	2108      	movs	r1, #8
 80070c2:	482c      	ldr	r0, [pc, #176]	; (8007174 <main+0x3c0>)
 80070c4:	f7fd f9bc 	bl	8004440 <HAL_TIM_PWM_Start>
 80070c8:	e09a      	b.n	8007200 <main+0x44c>
 80070ca:	bf00      	nop
 80070cc:	200198bc 	.word	0x200198bc
 80070d0:	200197c8 	.word	0x200197c8
 80070d4:	200198fc 	.word	0x200198fc
 80070d8:	200198b4 	.word	0x200198b4
 80070dc:	20019944 	.word	0x20019944
 80070e0:	20019914 	.word	0x20019914
 80070e4:	20019814 	.word	0x20019814
 80070e8:	20019770 	.word	0x20019770
 80070ec:	200198a8 	.word	0x200198a8
 80070f0:	20019828 	.word	0x20019828
 80070f4:	2001993c 	.word	0x2001993c
 80070f8:	200198b0 	.word	0x200198b0
 80070fc:	2001992c 	.word	0x2001992c
 8007100:	20019908 	.word	0x20019908
 8007104:	20019774 	.word	0x20019774
 8007108:	2001982c 	.word	0x2001982c
 800710c:	2001976c 	.word	0x2001976c
 8007110:	20019824 	.word	0x20019824
 8007114:	20019930 	.word	0x20019930
 8007118:	200198b8 	.word	0x200198b8
 800711c:	20019940 	.word	0x20019940
 8007120:	20019900 	.word	0x20019900
 8007124:	20019834 	.word	0x20019834
 8007128:	2001990c 	.word	0x2001990c
 800712c:	200198a4 	.word	0x200198a4
 8007130:	200198dc 	.word	0x200198dc
 8007134:	20019928 	.word	0x20019928
 8007138:	20019778 	.word	0x20019778
 800713c:	20019830 	.word	0x20019830
 8007140:	200198e0 	.word	0x200198e0
 8007144:	20019910 	.word	0x20019910
 8007148:	20019924 	.word	0x20019924
 800714c:	20019904 	.word	0x20019904
 8007150:	20019820 	.word	0x20019820
 8007154:	20019948 	.word	0x20019948
 8007158:	20019768 	.word	0x20019768
 800715c:	200198e4 	.word	0x200198e4
 8007160:	200198f4 	.word	0x200198f4
 8007164:	20019764 	.word	0x20019764
 8007168:	20019380 	.word	0x20019380
 800716c:	2001988c 	.word	0x2001988c
 8007170:	200193d0 	.word	0x200193d0
 8007174:	2001977c 	.word	0x2001977c
 8007178:	20019398 	.word	0x20019398
     		            	 sakri_worldclock_stop_watch(); // prikazuje samo polja za ALARM
 800717c:	f7ff f9e0 	bl	8006540 <sakri_worldclock_stop_watch>
     		            	 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8007180:	2108      	movs	r1, #8
 8007182:	48bc      	ldr	r0, [pc, #752]	; (8007474 <main+0x6c0>)
 8007184:	f7fa fb14 	bl	80017b0 <HAL_GPIO_TogglePin>
     		            	 GUI_Delay(10);
 8007188:	200a      	movs	r0, #10
 800718a:	f007 fc55 	bl	800ea38 <GUI_Delay>
     	  GUI_Delay(10);
 800718e:	200a      	movs	r0, #10
 8007190:	f007 fc52 	bl	800ea38 <GUI_Delay>
     	  get_time();
 8007194:	f7ff f992 	bl	80064bc <get_time>
     	  HAL_Delay(10);
 8007198:	200a      	movs	r0, #10
 800719a:	f7fa f98f 	bl	80014bc <HAL_Delay>
    	  if(alarm==1){
 800719e:	4bb6      	ldr	r3, [pc, #728]	; (8007478 <main+0x6c4>)
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	f000 81a6 	beq.w	80074f4 <main+0x740>
    	  if(X_koordinata>400 && X_koordinata<480 && Y_koordinata>200 && Y_koordinata<270){
 80071a8:	4bb4      	ldr	r3, [pc, #720]	; (800747c <main+0x6c8>)
 80071aa:	881b      	ldrh	r3, [r3, #0]
 80071ac:	f2a3 1391 	subw	r3, r3, #401	; 0x191
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	2b4e      	cmp	r3, #78	; 0x4e
 80071b4:	d807      	bhi.n	80071c6 <main+0x412>
 80071b6:	4bb2      	ldr	r3, [pc, #712]	; (8007480 <main+0x6cc>)
 80071b8:	881b      	ldrh	r3, [r3, #0]
 80071ba:	2bc8      	cmp	r3, #200	; 0xc8
 80071bc:	d903      	bls.n	80071c6 <main+0x412>
 80071be:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80071c2:	f0c0 819d 	bcc.w	8007500 <main+0x74c>
          set_time_to_edit_boxes(hEditBeograd,hEditHavana, hEditMoskva, hEditTokio);
 80071c6:	4633      	mov	r3, r6
 80071c8:	462a      	mov	r2, r5
 80071ca:	4639      	mov	r1, r7
 80071cc:	4640      	mov	r0, r8
 80071ce:	f7ff fc09 	bl	80069e4 <set_time_to_edit_boxes>
          set_time_to_edit_box(hEditTrenutno1);
 80071d2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80071d4:	f7ff fc70 	bl	8006ab8 <set_time_to_edit_box>
          if(flegStoperica==1){
 80071d8:	4baa      	ldr	r3, [pc, #680]	; (8007484 <main+0x6d0>)
 80071da:	881b      	ldrh	r3, [r3, #0]
 80071dc:	2b01      	cmp	r3, #1
 80071de:	f000 819a 	beq.w	8007516 <main+0x762>
          if(flegProlazno!=0){
 80071e2:	4ba9      	ldr	r3, [pc, #676]	; (8007488 <main+0x6d4>)
 80071e4:	881b      	ldrh	r3, [r3, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	f040 819a 	bne.w	8007520 <main+0x76c>
          GUI_Delay(1000);
 80071ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80071f0:	f007 fc22 	bl	800ea38 <GUI_Delay>
      	  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_15, 0); //ISKLJUCI LED ZA ALARM
 80071f4:	2200      	movs	r2, #0
 80071f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80071fa:	48a4      	ldr	r0, [pc, #656]	; (800748c <main+0x6d8>)
 80071fc:	f7fa fad2 	bl	80017a4 <HAL_GPIO_WritePin>
	  STMPE610_read_xyz();
 8007200:	f7fa f86e 	bl	80012e0 <STMPE610_read_xyz>
      GUI_TOUCH_Exec();
 8007204:	f007 fc8a 	bl	800eb1c <GUI_TOUCH_Exec>
      keyPressed=GUI_GetKey();
 8007208:	f008 f950 	bl	800f4ac <GUI_GetKey>
 800720c:	4ca0      	ldr	r4, [pc, #640]	; (8007490 <main+0x6dc>)
 800720e:	8020      	strh	r0, [r4, #0]
      GUI_Delay(1);
 8007210:	2001      	movs	r0, #1
 8007212:	f007 fc11 	bl	800ea38 <GUI_Delay>
      X_koordinata=STMPE610_GetX_TOUCH();
 8007216:	f7fa f8a3 	bl	8001360 <STMPE610_GetX_TOUCH>
 800721a:	4b98      	ldr	r3, [pc, #608]	; (800747c <main+0x6c8>)
 800721c:	8018      	strh	r0, [r3, #0]
      Y_koordinata=STMPE610_GetY_TOUCH();
 800721e:	f7fa f8cf 	bl	80013c0 <STMPE610_GetY_TOUCH>
 8007222:	4b97      	ldr	r3, [pc, #604]	; (8007480 <main+0x6cc>)
 8007224:	8018      	strh	r0, [r3, #0]
      switch(keyPressed)
 8007226:	8823      	ldrh	r3, [r4, #0]
 8007228:	f6a3 0301 	subw	r3, r3, #2049	; 0x801
 800722c:	2b24      	cmp	r3, #36	; 0x24
 800722e:	d8ae      	bhi.n	800718e <main+0x3da>
 8007230:	a201      	add	r2, pc, #4	; (adr r2, 8007238 <main+0x484>)
 8007232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007236:	bf00      	nop
 8007238:	0800717d 	.word	0x0800717d
 800723c:	080072cd 	.word	0x080072cd
 8007240:	080072e7 	.word	0x080072e7
 8007244:	0800718f 	.word	0x0800718f
 8007248:	080072fb 	.word	0x080072fb
 800724c:	0800732f 	.word	0x0800732f
 8007250:	0800718f 	.word	0x0800718f
 8007254:	0800718f 	.word	0x0800718f
 8007258:	0800718f 	.word	0x0800718f
 800725c:	0800718f 	.word	0x0800718f
 8007260:	0800718f 	.word	0x0800718f
 8007264:	0800718f 	.word	0x0800718f
 8007268:	0800718f 	.word	0x0800718f
 800726c:	0800718f 	.word	0x0800718f
 8007270:	0800718f 	.word	0x0800718f
 8007274:	0800718f 	.word	0x0800718f
 8007278:	0800718f 	.word	0x0800718f
 800727c:	0800718f 	.word	0x0800718f
 8007280:	0800718f 	.word	0x0800718f
 8007284:	08007383 	.word	0x08007383
 8007288:	0800739f 	.word	0x0800739f
 800728c:	080073af 	.word	0x080073af
 8007290:	080073bf 	.word	0x080073bf
 8007294:	080073cf 	.word	0x080073cf
 8007298:	0800718f 	.word	0x0800718f
 800729c:	0800718f 	.word	0x0800718f
 80072a0:	0800718f 	.word	0x0800718f
 80072a4:	0800718f 	.word	0x0800718f
 80072a8:	0800718f 	.word	0x0800718f
 80072ac:	0800718f 	.word	0x0800718f
 80072b0:	0800718f 	.word	0x0800718f
 80072b4:	0800718f 	.word	0x0800718f
 80072b8:	0800718f 	.word	0x0800718f
 80072bc:	0800718f 	.word	0x0800718f
 80072c0:	080073df 	.word	0x080073df
 80072c4:	08007413 	.word	0x08007413
 80072c8:	080074cd 	.word	0x080074cd
                        	  sakri_alarm_stopwatch(); // prikazuje polja samo za WORLDCLOK
 80072cc:	f7ff fa06 	bl	80066dc <sakri_alarm_stopwatch>
      		            	 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80072d0:	2108      	movs	r1, #8
 80072d2:	4868      	ldr	r0, [pc, #416]	; (8007474 <main+0x6c0>)
 80072d4:	f7fa fa6c 	bl	80017b0 <HAL_GPIO_TogglePin>
                        	  GUI_Delay(10);
 80072d8:	200a      	movs	r0, #10
 80072da:	f007 fbad 	bl	800ea38 <GUI_Delay>
                              GUI_Delay(10);
 80072de:	200a      	movs	r0, #10
 80072e0:	f007 fbaa 	bl	800ea38 <GUI_Delay>
       			  break;
 80072e4:	e753      	b.n	800718e <main+0x3da>
                        	  sakri_alarm_worldclock(); // prikazuje polja samo za STOPWATCH
 80072e6:	f7ff fabb 	bl	8006860 <sakri_alarm_worldclock>
      		            	 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80072ea:	2108      	movs	r1, #8
 80072ec:	4861      	ldr	r0, [pc, #388]	; (8007474 <main+0x6c0>)
 80072ee:	f7fa fa5f 	bl	80017b0 <HAL_GPIO_TogglePin>
                        	  GUI_Delay(10);
 80072f2:	200a      	movs	r0, #10
 80072f4:	f007 fba0 	bl	800ea38 <GUI_Delay>
                  break;
 80072f8:	e749      	b.n	800718e <main+0x3da>
      		            	 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80072fa:	2108      	movs	r1, #8
 80072fc:	485d      	ldr	r0, [pc, #372]	; (8007474 <main+0x6c0>)
 80072fe:	f7fa fa57 	bl	80017b0 <HAL_GPIO_TogglePin>
                        	  flegStoperica = 1;
 8007302:	2301      	movs	r3, #1
 8007304:	4a5f      	ldr	r2, [pc, #380]	; (8007484 <main+0x6d0>)
 8007306:	8013      	strh	r3, [r2, #0]
                        	  flegProlazno = 1 ;
 8007308:	4a5f      	ldr	r2, [pc, #380]	; (8007488 <main+0x6d4>)
 800730a:	8013      	strh	r3, [r2, #0]
                          	  WM_ShowWindow(hButton11);
 800730c:	4b61      	ldr	r3, [pc, #388]	; (8007494 <main+0x6e0>)
 800730e:	6818      	ldr	r0, [r3, #0]
 8007310:	f002 faad 	bl	800986e <WM_ShowWindow>
                          	  WM_ShowWindow(hButton10);
 8007314:	4b60      	ldr	r3, [pc, #384]	; (8007498 <main+0x6e4>)
 8007316:	6818      	ldr	r0, [r3, #0]
 8007318:	f002 faa9 	bl	800986e <WM_ShowWindow>
                          	  WM_HideWindow(hButton3);
 800731c:	4b5f      	ldr	r3, [pc, #380]	; (800749c <main+0x6e8>)
 800731e:	6818      	ldr	r0, [r3, #0]
 8007320:	f002 fd08 	bl	8009d34 <WM_HideWindow>
                          	  WM_HideWindow(hButton4);
 8007324:	4b5e      	ldr	r3, [pc, #376]	; (80074a0 <main+0x6ec>)
 8007326:	6818      	ldr	r0, [r3, #0]
 8007328:	f002 fd04 	bl	8009d34 <WM_HideWindow>
                  break;
 800732c:	e72f      	b.n	800718e <main+0x3da>
                        	  flegStoperica=0;
 800732e:	f04f 0b00 	mov.w	fp, #0
 8007332:	4b54      	ldr	r3, [pc, #336]	; (8007484 <main+0x6d0>)
 8007334:	f8a3 b000 	strh.w	fp, [r3]
                          	  WM_ShowWindow(hButton12);
 8007338:	4b5a      	ldr	r3, [pc, #360]	; (80074a4 <main+0x6f0>)
 800733a:	6818      	ldr	r0, [r3, #0]
 800733c:	f002 fa97 	bl	800986e <WM_ShowWindow>
                          	  WM_HideWindow(hButton3);
 8007340:	4b56      	ldr	r3, [pc, #344]	; (800749c <main+0x6e8>)
 8007342:	6818      	ldr	r0, [r3, #0]
 8007344:	f002 fcf6 	bl	8009d34 <WM_HideWindow>
                          	  WM_HideWindow(hButton4);
 8007348:	4b55      	ldr	r3, [pc, #340]	; (80074a0 <main+0x6ec>)
 800734a:	6818      	ldr	r0, [r3, #0]
 800734c:	f002 fcf2 	bl	8009d34 <WM_HideWindow>
                          	  WM_HideWindow(hButton11);
 8007350:	4b50      	ldr	r3, [pc, #320]	; (8007494 <main+0x6e0>)
 8007352:	6818      	ldr	r0, [r3, #0]
 8007354:	f002 fcee 	bl	8009d34 <WM_HideWindow>
                          	  WM_HideWindow(hButton10);
 8007358:	4b4f      	ldr	r3, [pc, #316]	; (8007498 <main+0x6e4>)
 800735a:	6818      	ldr	r0, [r3, #0]
 800735c:	f002 fcea 	bl	8009d34 <WM_HideWindow>
                              stoperica.Seconds=0x00;
 8007360:	4b51      	ldr	r3, [pc, #324]	; (80074a8 <main+0x6f4>)
 8007362:	f883 b002 	strb.w	fp, [r3, #2]
                              stoperica.Minutes=0x00;
 8007366:	f883 b001 	strb.w	fp, [r3, #1]
                              stoperica2.Seconds=0x00;
 800736a:	4b50      	ldr	r3, [pc, #320]	; (80074ac <main+0x6f8>)
 800736c:	f883 b002 	strb.w	fp, [r3, #2]
                              stoperica2.Minutes=0x00;
 8007370:	f883 b001 	strb.w	fp, [r3, #1]
                              upis_reset();
 8007374:	f7ff fcb8 	bl	8006ce8 <upis_reset>
      		            	 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8007378:	2108      	movs	r1, #8
 800737a:	483e      	ldr	r0, [pc, #248]	; (8007474 <main+0x6c0>)
 800737c:	f7fa fa18 	bl	80017b0 <HAL_GPIO_TogglePin>
                  break;
 8007380:	e705      	b.n	800718e <main+0x3da>
      		            	 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8007382:	2108      	movs	r1, #8
 8007384:	483b      	ldr	r0, [pc, #236]	; (8007474 <main+0x6c0>)
 8007386:	f7fa fa13 	bl	80017b0 <HAL_GPIO_TogglePin>
                        	  set_alarm();
 800738a:	f7ff f86f 	bl	800646c <set_alarm>
                        	  GUI_Delay(10);
 800738e:	200a      	movs	r0, #10
 8007390:	f007 fb52 	bl	800ea38 <GUI_Delay>
                        	  upis_alarm(hEdit12); // upis setovanog alarma u edit polje iznad slike
 8007394:	4b46      	ldr	r3, [pc, #280]	; (80074b0 <main+0x6fc>)
 8007396:	6818      	ldr	r0, [r3, #0]
 8007398:	f7ff fc30 	bl	8006bfc <upis_alarm>
                  break;
 800739c:	e6f7      	b.n	800718e <main+0x3da>
      		            	 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 800739e:	2108      	movs	r1, #8
 80073a0:	4834      	ldr	r0, [pc, #208]	; (8007474 <main+0x6c0>)
 80073a2:	f7fa fa05 	bl	80017b0 <HAL_GPIO_TogglePin>
                        	  set_satiPlus_to_edit_box(hEditSati);
 80073a6:	4650      	mov	r0, sl
 80073a8:	f7ff fba4 	bl	8006af4 <set_satiPlus_to_edit_box>
                  break;
 80073ac:	e6ef      	b.n	800718e <main+0x3da>
      		            	 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80073ae:	2108      	movs	r1, #8
 80073b0:	4830      	ldr	r0, [pc, #192]	; (8007474 <main+0x6c0>)
 80073b2:	f7fa f9fd 	bl	80017b0 <HAL_GPIO_TogglePin>
                        	  set_satiMinus_to_edit_box(hEditSati);
 80073b6:	4650      	mov	r0, sl
 80073b8:	f7ff fbbe 	bl	8006b38 <set_satiMinus_to_edit_box>
                  break;
 80073bc:	e6e7      	b.n	800718e <main+0x3da>
      		            	 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80073be:	2108      	movs	r1, #8
 80073c0:	482c      	ldr	r0, [pc, #176]	; (8007474 <main+0x6c0>)
 80073c2:	f7fa f9f5 	bl	80017b0 <HAL_GPIO_TogglePin>
                        	  set_minutiPlus_to_edit_box(hEditMinuti);
 80073c6:	4648      	mov	r0, r9
 80073c8:	f7ff fbd0 	bl	8006b6c <set_minutiPlus_to_edit_box>
                  break;
 80073cc:	e6df      	b.n	800718e <main+0x3da>
      		            	 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80073ce:	2108      	movs	r1, #8
 80073d0:	4828      	ldr	r0, [pc, #160]	; (8007474 <main+0x6c0>)
 80073d2:	f7fa f9ed 	bl	80017b0 <HAL_GPIO_TogglePin>
                        	  set_minutiMinus_to_edit_box(hEditMinuti);
 80073d6:	4648      	mov	r0, r9
 80073d8:	f7ff fbea 	bl	8006bb0 <set_minutiMinus_to_edit_box>
                  break;
 80073dc:	e6d7      	b.n	800718e <main+0x3da>
                        	  flegStoperica=0;
 80073de:	2300      	movs	r3, #0
 80073e0:	4a28      	ldr	r2, [pc, #160]	; (8007484 <main+0x6d0>)
 80073e2:	8013      	strh	r3, [r2, #0]
                        	  flegProlazno=0;
 80073e4:	4a28      	ldr	r2, [pc, #160]	; (8007488 <main+0x6d4>)
 80073e6:	8013      	strh	r3, [r2, #0]
                          	  WM_ShowWindow(hButton3);
 80073e8:	4b2c      	ldr	r3, [pc, #176]	; (800749c <main+0x6e8>)
 80073ea:	6818      	ldr	r0, [r3, #0]
 80073ec:	f002 fa3f 	bl	800986e <WM_ShowWindow>
                          	  WM_ShowWindow(hButton4);
 80073f0:	4b2b      	ldr	r3, [pc, #172]	; (80074a0 <main+0x6ec>)
 80073f2:	6818      	ldr	r0, [r3, #0]
 80073f4:	f002 fa3b 	bl	800986e <WM_ShowWindow>
                          	  WM_HideWindow(hButton11);
 80073f8:	4b26      	ldr	r3, [pc, #152]	; (8007494 <main+0x6e0>)
 80073fa:	6818      	ldr	r0, [r3, #0]
 80073fc:	f002 fc9a 	bl	8009d34 <WM_HideWindow>
                          	  WM_HideWindow(hButton10);
 8007400:	4b25      	ldr	r3, [pc, #148]	; (8007498 <main+0x6e4>)
 8007402:	6818      	ldr	r0, [r3, #0]
 8007404:	f002 fc96 	bl	8009d34 <WM_HideWindow>
      		            	 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8007408:	2108      	movs	r1, #8
 800740a:	481a      	ldr	r0, [pc, #104]	; (8007474 <main+0x6c0>)
 800740c:	f7fa f9d0 	bl	80017b0 <HAL_GPIO_TogglePin>
                  break;
 8007410:	e6bd      	b.n	800718e <main+0x3da>
                        	  flegProlazno++;
 8007412:	4a1d      	ldr	r2, [pc, #116]	; (8007488 <main+0x6d4>)
 8007414:	8813      	ldrh	r3, [r2, #0]
 8007416:	3301      	adds	r3, #1
 8007418:	b29b      	uxth	r3, r3
 800741a:	8013      	strh	r3, [r2, #0]
                        	  if(flegProlazno==1){
 800741c:	2b01      	cmp	r3, #1
 800741e:	d00a      	beq.n	8007436 <main+0x682>
                        	  else if(flegProlazno==2){		//druga dva edit boxa za prolazno vrijeme
 8007420:	2b02      	cmp	r3, #2
 8007422:	d011      	beq.n	8007448 <main+0x694>
                        	  else if(flegProlazno==3){		//treca dva edit boxa za prolazno vrijeme
 8007424:	2b03      	cmp	r3, #3
 8007426:	d018      	beq.n	800745a <main+0x6a6>
                        	  else if(flegProlazno==4){
 8007428:	2b04      	cmp	r3, #4
 800742a:	d01f      	beq.n	800746c <main+0x6b8>
      		            	 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 800742c:	2108      	movs	r1, #8
 800742e:	4811      	ldr	r0, [pc, #68]	; (8007474 <main+0x6c0>)
 8007430:	f7fa f9be 	bl	80017b0 <HAL_GPIO_TogglePin>
                  break;
 8007434:	e6ab      	b.n	800718e <main+0x3da>
                        		  prolazno_vrijeme(hEdit2); //prva dva edit boxa za prolazno vrijeme
 8007436:	4b1f      	ldr	r3, [pc, #124]	; (80074b4 <main+0x700>)
 8007438:	6818      	ldr	r0, [r3, #0]
 800743a:	f7ff fc1b 	bl	8006c74 <prolazno_vrijeme>
                        		  prolazno_vrijeme(hEdit4);
 800743e:	4b1e      	ldr	r3, [pc, #120]	; (80074b8 <main+0x704>)
 8007440:	6818      	ldr	r0, [r3, #0]
 8007442:	f7ff fc17 	bl	8006c74 <prolazno_vrijeme>
 8007446:	e7f1      	b.n	800742c <main+0x678>
                        		  prolazno_vrijeme(hEdit6); //ukupno vrijeme za drugp prolazno vrijeme
 8007448:	4b1c      	ldr	r3, [pc, #112]	; (80074bc <main+0x708>)
 800744a:	6818      	ldr	r0, [r3, #0]
 800744c:	f7ff fc12 	bl	8006c74 <prolazno_vrijeme>
                        		  upis_stoperica2(hEdit8);
 8007450:	4b1b      	ldr	r3, [pc, #108]	; (80074c0 <main+0x70c>)
 8007452:	6818      	ldr	r0, [r3, #0]
 8007454:	f7ff fc24 	bl	8006ca0 <upis_stoperica2>
 8007458:	e7e8      	b.n	800742c <main+0x678>
                        		  upis_stoperica2(hEdit9);
 800745a:	4b1a      	ldr	r3, [pc, #104]	; (80074c4 <main+0x710>)
 800745c:	6818      	ldr	r0, [r3, #0]
 800745e:	f7ff fc1f 	bl	8006ca0 <upis_stoperica2>
                        		  prolazno_vrijeme(hEdit7); //ukupno vrijeme za poslednje prolazno vrijeme
 8007462:	4b19      	ldr	r3, [pc, #100]	; (80074c8 <main+0x714>)
 8007464:	6818      	ldr	r0, [r3, #0]
 8007466:	f7ff fc05 	bl	8006c74 <prolazno_vrijeme>
 800746a:	e7df      	b.n	800742c <main+0x678>
                        		  flegProlazno=0;
 800746c:	4b06      	ldr	r3, [pc, #24]	; (8007488 <main+0x6d4>)
 800746e:	2200      	movs	r2, #0
 8007470:	801a      	strh	r2, [r3, #0]
 8007472:	e7db      	b.n	800742c <main+0x678>
 8007474:	40020400 	.word	0x40020400
 8007478:	200193b4 	.word	0x200193b4
 800747c:	200193b0 	.word	0x200193b0
 8007480:	200193b2 	.word	0x200193b2
 8007484:	200198ac 	.word	0x200198ac
 8007488:	2001981c 	.word	0x2001981c
 800748c:	40021800 	.word	0x40021800
 8007490:	200198f8 	.word	0x200198f8
 8007494:	20019908 	.word	0x20019908
 8007498:	2001992c 	.word	0x2001992c
 800749c:	20019914 	.word	0x20019914
 80074a0:	20019814 	.word	0x20019814
 80074a4:	20019774 	.word	0x20019774
 80074a8:	2001988c 	.word	0x2001988c
 80074ac:	200193d0 	.word	0x200193d0
 80074b0:	20019830 	.word	0x20019830
 80074b4:	20019930 	.word	0x20019930
 80074b8:	20019940 	.word	0x20019940
 80074bc:	20019834 	.word	0x20019834
 80074c0:	200198a4 	.word	0x200198a4
 80074c4:	200198dc 	.word	0x200198dc
 80074c8:	2001990c 	.word	0x2001990c
                        	  flegStoperica=1;
 80074cc:	4b17      	ldr	r3, [pc, #92]	; (800752c <main+0x778>)
 80074ce:	2201      	movs	r2, #1
 80074d0:	801a      	strh	r2, [r3, #0]
      		            	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80074d2:	2108      	movs	r1, #8
 80074d4:	4816      	ldr	r0, [pc, #88]	; (8007530 <main+0x77c>)
 80074d6:	f7fa f96b 	bl	80017b0 <HAL_GPIO_TogglePin>
                          	  WM_HideWindow(hButton12);
 80074da:	4b16      	ldr	r3, [pc, #88]	; (8007534 <main+0x780>)
 80074dc:	6818      	ldr	r0, [r3, #0]
 80074de:	f002 fc29 	bl	8009d34 <WM_HideWindow>
                          	  WM_ShowWindow(hButton11);
 80074e2:	4b15      	ldr	r3, [pc, #84]	; (8007538 <main+0x784>)
 80074e4:	6818      	ldr	r0, [r3, #0]
 80074e6:	f002 f9c2 	bl	800986e <WM_ShowWindow>
                          	  WM_ShowWindow(hButton10);
 80074ea:	4b14      	ldr	r3, [pc, #80]	; (800753c <main+0x788>)
 80074ec:	6818      	ldr	r0, [r3, #0]
 80074ee:	f002 f9be 	bl	800986e <WM_ShowWindow>
       	          break;
 80074f2:	e64c      	b.n	800718e <main+0x3da>
    		set_buzzer(400, 80);
 80074f4:	2150      	movs	r1, #80	; 0x50
 80074f6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80074fa:	f7ff fc4b 	bl	8006d94 <set_buzzer>
 80074fe:	e653      	b.n	80071a8 <main+0x3f4>
          	 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8007500:	2108      	movs	r1, #8
 8007502:	480b      	ldr	r0, [pc, #44]	; (8007530 <main+0x77c>)
 8007504:	f7fa f954 	bl	80017b0 <HAL_GPIO_TogglePin>
    		  alarm=0;
 8007508:	2000      	movs	r0, #0
 800750a:	4b0d      	ldr	r3, [pc, #52]	; (8007540 <main+0x78c>)
 800750c:	7018      	strb	r0, [r3, #0]
    		  set_buzzer(0, 0);
 800750e:	4601      	mov	r1, r0
 8007510:	f7ff fc40 	bl	8006d94 <set_buzzer>
 8007514:	e657      	b.n	80071c6 <main+0x412>
        	  upis_stoperica(hEdit0);
 8007516:	4b0b      	ldr	r3, [pc, #44]	; (8007544 <main+0x790>)
 8007518:	6818      	ldr	r0, [r3, #0]
 800751a:	f7ff fb87 	bl	8006c2c <upis_stoperica>
 800751e:	e660      	b.n	80071e2 <main+0x42e>
        	  upis_stoperica2(hEdit3);
 8007520:	4b09      	ldr	r3, [pc, #36]	; (8007548 <main+0x794>)
 8007522:	6818      	ldr	r0, [r3, #0]
 8007524:	f7ff fbbc 	bl	8006ca0 <upis_stoperica2>
 8007528:	e660      	b.n	80071ec <main+0x438>
 800752a:	bf00      	nop
 800752c:	200198ac 	.word	0x200198ac
 8007530:	40020400 	.word	0x40020400
 8007534:	20019774 	.word	0x20019774
 8007538:	20019908 	.word	0x20019908
 800753c:	2001992c 	.word	0x2001992c
 8007540:	200193b4 	.word	0x200193b4
 8007544:	2001976c 	.word	0x2001976c
 8007548:	200198b8 	.word	0x200198b8

0800754c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800754c:	4770      	bx	lr
	...

08007550 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007550:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8007552:	4b0a      	ldr	r3, [pc, #40]	; (800757c <HAL_MspInit+0x2c>)
 8007554:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007556:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800755a:	641a      	str	r2, [r3, #64]	; 0x40
 800755c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800755e:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8007562:	9200      	str	r2, [sp, #0]
 8007564:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007566:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007568:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800756c:	645a      	str	r2, [r3, #68]	; 0x44
 800756e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007574:	9301      	str	r3, [sp, #4]
 8007576:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007578:	b002      	add	sp, #8
 800757a:	4770      	bx	lr
 800757c:	40023800 	.word	0x40023800

08007580 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007580:	b510      	push	{r4, lr}
 8007582:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007584:	2300      	movs	r3, #0
 8007586:	9303      	str	r3, [sp, #12]
 8007588:	9304      	str	r3, [sp, #16]
 800758a:	9305      	str	r3, [sp, #20]
 800758c:	9306      	str	r3, [sp, #24]
 800758e:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 8007590:	6802      	ldr	r2, [r0, #0]
 8007592:	4b13      	ldr	r3, [pc, #76]	; (80075e0 <HAL_I2C_MspInit+0x60>)
 8007594:	429a      	cmp	r2, r3
 8007596:	d001      	beq.n	800759c <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007598:	b008      	add	sp, #32
 800759a:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800759c:	4c11      	ldr	r4, [pc, #68]	; (80075e4 <HAL_I2C_MspInit+0x64>)
 800759e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80075a0:	f043 0302 	orr.w	r3, r3, #2
 80075a4:	6323      	str	r3, [r4, #48]	; 0x30
 80075a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80075a8:	f003 0302 	and.w	r3, r3, #2
 80075ac:	9301      	str	r3, [sp, #4]
 80075ae:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80075b0:	23c0      	movs	r3, #192	; 0xc0
 80075b2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80075b4:	2312      	movs	r3, #18
 80075b6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80075b8:	2301      	movs	r3, #1
 80075ba:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075bc:	2303      	movs	r3, #3
 80075be:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80075c0:	2304      	movs	r3, #4
 80075c2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075c4:	a903      	add	r1, sp, #12
 80075c6:	4808      	ldr	r0, [pc, #32]	; (80075e8 <HAL_I2C_MspInit+0x68>)
 80075c8:	f7f9 fff8 	bl	80015bc <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80075cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80075ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80075d2:	6423      	str	r3, [r4, #64]	; 0x40
 80075d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80075d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075da:	9302      	str	r3, [sp, #8]
 80075dc:	9b02      	ldr	r3, [sp, #8]
}
 80075de:	e7db      	b.n	8007598 <HAL_I2C_MspInit+0x18>
 80075e0:	40005400 	.word	0x40005400
 80075e4:	40023800 	.word	0x40023800
 80075e8:	40020400 	.word	0x40020400

080075ec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80075ec:	b508      	push	{r3, lr}
  if(hrtc->Instance==RTC)
 80075ee:	6802      	ldr	r2, [r0, #0]
 80075f0:	4b08      	ldr	r3, [pc, #32]	; (8007614 <HAL_RTC_MspInit+0x28>)
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d000      	beq.n	80075f8 <HAL_RTC_MspInit+0xc>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80075f6:	bd08      	pop	{r3, pc}
    __HAL_RCC_RTC_ENABLE();
 80075f8:	4a07      	ldr	r2, [pc, #28]	; (8007618 <HAL_RTC_MspInit+0x2c>)
 80075fa:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80075fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007600:	6713      	str	r3, [r2, #112]	; 0x70
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8007602:	2200      	movs	r2, #0
 8007604:	4611      	mov	r1, r2
 8007606:	2029      	movs	r0, #41	; 0x29
 8007608:	f7f9 ff7e 	bl	8001508 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800760c:	2029      	movs	r0, #41	; 0x29
 800760e:	f7f9 ffad 	bl	800156c <HAL_NVIC_EnableIRQ>
}
 8007612:	e7f0      	b.n	80075f6 <HAL_RTC_MspInit+0xa>
 8007614:	40002800 	.word	0x40002800
 8007618:	40023800 	.word	0x40023800

0800761c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800761c:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM3)
 800761e:	6803      	ldr	r3, [r0, #0]
 8007620:	4a0e      	ldr	r2, [pc, #56]	; (800765c <HAL_TIM_Base_MspInit+0x40>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d004      	beq.n	8007630 <HAL_TIM_Base_MspInit+0x14>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8007626:	4a0e      	ldr	r2, [pc, #56]	; (8007660 <HAL_TIM_Base_MspInit+0x44>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d00c      	beq.n	8007646 <HAL_TIM_Base_MspInit+0x2a>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800762c:	b002      	add	sp, #8
 800762e:	4770      	bx	lr
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007630:	4b0c      	ldr	r3, [pc, #48]	; (8007664 <HAL_TIM_Base_MspInit+0x48>)
 8007632:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007634:	f042 0202 	orr.w	r2, r2, #2
 8007638:	641a      	str	r2, [r3, #64]	; 0x40
 800763a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763c:	f003 0302 	and.w	r3, r3, #2
 8007640:	9300      	str	r3, [sp, #0]
 8007642:	9b00      	ldr	r3, [sp, #0]
 8007644:	e7f2      	b.n	800762c <HAL_TIM_Base_MspInit+0x10>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007646:	4b07      	ldr	r3, [pc, #28]	; (8007664 <HAL_TIM_Base_MspInit+0x48>)
 8007648:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800764a:	f042 0204 	orr.w	r2, r2, #4
 800764e:	641a      	str	r2, [r3, #64]	; 0x40
 8007650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007652:	f003 0304 	and.w	r3, r3, #4
 8007656:	9301      	str	r3, [sp, #4]
 8007658:	9b01      	ldr	r3, [sp, #4]
}
 800765a:	e7e7      	b.n	800762c <HAL_TIM_Base_MspInit+0x10>
 800765c:	40000400 	.word	0x40000400
 8007660:	40000800 	.word	0x40000800
 8007664:	40023800 	.word	0x40023800

08007668 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007668:	b500      	push	{lr}
 800766a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800766c:	2300      	movs	r3, #0
 800766e:	9303      	str	r3, [sp, #12]
 8007670:	9304      	str	r3, [sp, #16]
 8007672:	9305      	str	r3, [sp, #20]
 8007674:	9306      	str	r3, [sp, #24]
 8007676:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM3)
 8007678:	6803      	ldr	r3, [r0, #0]
 800767a:	4a19      	ldr	r2, [pc, #100]	; (80076e0 <HAL_TIM_MspPostInit+0x78>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d005      	beq.n	800768c <HAL_TIM_MspPostInit+0x24>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(htim->Instance==TIM4)
 8007680:	4a18      	ldr	r2, [pc, #96]	; (80076e4 <HAL_TIM_MspPostInit+0x7c>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d016      	beq.n	80076b4 <HAL_TIM_MspPostInit+0x4c>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8007686:	b009      	add	sp, #36	; 0x24
 8007688:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800768c:	4b16      	ldr	r3, [pc, #88]	; (80076e8 <HAL_TIM_MspPostInit+0x80>)
 800768e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007690:	f042 0202 	orr.w	r2, r2, #2
 8007694:	631a      	str	r2, [r3, #48]	; 0x30
 8007696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007698:	f003 0302 	and.w	r3, r3, #2
 800769c:	9301      	str	r3, [sp, #4]
 800769e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80076a0:	2310      	movs	r3, #16
 80076a2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076a4:	2302      	movs	r3, #2
 80076a6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80076a8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80076aa:	a903      	add	r1, sp, #12
 80076ac:	480f      	ldr	r0, [pc, #60]	; (80076ec <HAL_TIM_MspPostInit+0x84>)
 80076ae:	f7f9 ff85 	bl	80015bc <HAL_GPIO_Init>
 80076b2:	e7e8      	b.n	8007686 <HAL_TIM_MspPostInit+0x1e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80076b4:	4b0c      	ldr	r3, [pc, #48]	; (80076e8 <HAL_TIM_MspPostInit+0x80>)
 80076b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076b8:	f042 0202 	orr.w	r2, r2, #2
 80076bc:	631a      	str	r2, [r3, #48]	; 0x30
 80076be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c0:	f003 0302 	and.w	r3, r3, #2
 80076c4:	9302      	str	r3, [sp, #8]
 80076c6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80076c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076cc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076ce:	2302      	movs	r3, #2
 80076d0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80076d2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80076d4:	a903      	add	r1, sp, #12
 80076d6:	4805      	ldr	r0, [pc, #20]	; (80076ec <HAL_TIM_MspPostInit+0x84>)
 80076d8:	f7f9 ff70 	bl	80015bc <HAL_GPIO_Init>
}
 80076dc:	e7d3      	b.n	8007686 <HAL_TIM_MspPostInit+0x1e>
 80076de:	bf00      	nop
 80076e0:	40000400 	.word	0x40000400
 80076e4:	40000800 	.word	0x40000800
 80076e8:	40023800 	.word	0x40023800
 80076ec:	40020400 	.word	0x40020400

080076f0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80076f0:	4770      	bx	lr

080076f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80076f2:	e7fe      	b.n	80076f2 <HardFault_Handler>

080076f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80076f4:	e7fe      	b.n	80076f4 <MemManage_Handler>

080076f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80076f6:	e7fe      	b.n	80076f6 <BusFault_Handler>

080076f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80076f8:	e7fe      	b.n	80076f8 <UsageFault_Handler>

080076fa <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80076fa:	4770      	bx	lr

080076fc <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80076fc:	4770      	bx	lr

080076fe <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80076fe:	4770      	bx	lr

08007700 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007700:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007702:	f7f9 fec9 	bl	8001498 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8007706:	f7f9 ff55 	bl	80015b4 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 800770a:	bd08      	pop	{r3, pc}

0800770c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms (A and B) interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 800770c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800770e:	4802      	ldr	r0, [pc, #8]	; (8007718 <RTC_Alarm_IRQHandler+0xc>)
 8007710:	f7fc f832 	bl	8003778 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8007714:	bd08      	pop	{r3, pc}
 8007716:	bf00      	nop
 8007718:	200198bc 	.word	0x200198bc

0800771c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800771c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800771e:	4802      	ldr	r0, [pc, #8]	; (8007728 <OTG_FS_IRQHandler+0xc>)
 8007720:	f7fa fdda 	bl	80022d8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8007724:	bd08      	pop	{r3, pc}
 8007726:	bf00      	nop
 8007728:	2001ac1c 	.word	0x2001ac1c

0800772c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800772c:	b508      	push	{r3, lr}
 800772e:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007730:	4a0b      	ldr	r2, [pc, #44]	; (8007760 <_sbrk+0x34>)
 8007732:	6812      	ldr	r2, [r2, #0]
 8007734:	b142      	cbz	r2, 8007748 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8007736:	4a0a      	ldr	r2, [pc, #40]	; (8007760 <_sbrk+0x34>)
 8007738:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 800773a:	4403      	add	r3, r0
 800773c:	466a      	mov	r2, sp
 800773e:	4293      	cmp	r3, r2
 8007740:	d806      	bhi.n	8007750 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8007742:	4a07      	ldr	r2, [pc, #28]	; (8007760 <_sbrk+0x34>)
 8007744:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8007746:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8007748:	4a05      	ldr	r2, [pc, #20]	; (8007760 <_sbrk+0x34>)
 800774a:	4906      	ldr	r1, [pc, #24]	; (8007764 <_sbrk+0x38>)
 800774c:	6011      	str	r1, [r2, #0]
 800774e:	e7f2      	b.n	8007736 <_sbrk+0xa>
		errno = ENOMEM;
 8007750:	f00d ff36 	bl	80155c0 <__errno>
 8007754:	230c      	movs	r3, #12
 8007756:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8007758:	f04f 30ff 	mov.w	r0, #4294967295
 800775c:	e7f3      	b.n	8007746 <_sbrk+0x1a>
 800775e:	bf00      	nop
 8007760:	200193e8 	.word	0x200193e8
 8007764:	2001b3c8 	.word	0x2001b3c8

08007768 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007768:	4a03      	ldr	r2, [pc, #12]	; (8007778 <SystemInit+0x10>)
 800776a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800776e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007772:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007776:	4770      	bx	lr
 8007778:	e000ed00 	.word	0xe000ed00

0800777c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800777c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800777e:	2200      	movs	r2, #0
 8007780:	490f      	ldr	r1, [pc, #60]	; (80077c0 <MX_USB_DEVICE_Init+0x44>)
 8007782:	4810      	ldr	r0, [pc, #64]	; (80077c4 <MX_USB_DEVICE_Init+0x48>)
 8007784:	f7fd fed1 	bl	800552a <USBD_Init>
 8007788:	b970      	cbnz	r0, 80077a8 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800778a:	490f      	ldr	r1, [pc, #60]	; (80077c8 <MX_USB_DEVICE_Init+0x4c>)
 800778c:	480d      	ldr	r0, [pc, #52]	; (80077c4 <MX_USB_DEVICE_Init+0x48>)
 800778e:	f7fd fee8 	bl	8005562 <USBD_RegisterClass>
 8007792:	b960      	cbnz	r0, 80077ae <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007794:	490d      	ldr	r1, [pc, #52]	; (80077cc <MX_USB_DEVICE_Init+0x50>)
 8007796:	480b      	ldr	r0, [pc, #44]	; (80077c4 <MX_USB_DEVICE_Init+0x48>)
 8007798:	f7fd fe7f 	bl	800549a <USBD_CDC_RegisterInterface>
 800779c:	b950      	cbnz	r0, 80077b4 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800779e:	4809      	ldr	r0, [pc, #36]	; (80077c4 <MX_USB_DEVICE_Init+0x48>)
 80077a0:	f7fd fef3 	bl	800558a <USBD_Start>
 80077a4:	b948      	cbnz	r0, 80077ba <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80077a6:	bd08      	pop	{r3, pc}
    Error_Handler();
 80077a8:	f7ff fed0 	bl	800754c <Error_Handler>
 80077ac:	e7ed      	b.n	800778a <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 80077ae:	f7ff fecd 	bl	800754c <Error_Handler>
 80077b2:	e7ef      	b.n	8007794 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 80077b4:	f7ff feca 	bl	800754c <Error_Handler>
 80077b8:	e7f1      	b.n	800779e <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 80077ba:	f7ff fec7 	bl	800754c <Error_Handler>
}
 80077be:	e7f2      	b.n	80077a6 <MX_USB_DEVICE_Init+0x2a>
 80077c0:	20000130 	.word	0x20000130
 80077c4:	2001994c 	.word	0x2001994c
 80077c8:	20000008 	.word	0x20000008
 80077cc:	2000011c 	.word	0x2000011c

080077d0 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80077d0:	2000      	movs	r0, #0
 80077d2:	4770      	bx	lr

080077d4 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80077d4:	2000      	movs	r0, #0
 80077d6:	4770      	bx	lr

080077d8 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 80077d8:	2000      	movs	r0, #0
 80077da:	4770      	bx	lr

080077dc <CDC_Receive_FS>:
{
 80077dc:	b510      	push	{r4, lr}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80077de:	4c05      	ldr	r4, [pc, #20]	; (80077f4 <CDC_Receive_FS+0x18>)
 80077e0:	4601      	mov	r1, r0
 80077e2:	4620      	mov	r0, r4
 80077e4:	f7fd fe68 	bl	80054b8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80077e8:	4620      	mov	r0, r4
 80077ea:	f7fd fe85 	bl	80054f8 <USBD_CDC_ReceivePacket>
}
 80077ee:	2000      	movs	r0, #0
 80077f0:	bd10      	pop	{r4, pc}
 80077f2:	bf00      	nop
 80077f4:	2001994c 	.word	0x2001994c

080077f8 <CDC_Init_FS>:
{
 80077f8:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80077fa:	4c06      	ldr	r4, [pc, #24]	; (8007814 <CDC_Init_FS+0x1c>)
 80077fc:	2200      	movs	r2, #0
 80077fe:	4906      	ldr	r1, [pc, #24]	; (8007818 <CDC_Init_FS+0x20>)
 8007800:	4620      	mov	r0, r4
 8007802:	f7fd fe51 	bl	80054a8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007806:	4905      	ldr	r1, [pc, #20]	; (800781c <CDC_Init_FS+0x24>)
 8007808:	4620      	mov	r0, r4
 800780a:	f7fd fe55 	bl	80054b8 <USBD_CDC_SetRxBuffer>
}
 800780e:	2000      	movs	r0, #0
 8007810:	bd10      	pop	{r4, pc}
 8007812:	bf00      	nop
 8007814:	2001994c 	.word	0x2001994c
 8007818:	2001a41c 	.word	0x2001a41c
 800781c:	20019c1c 	.word	0x20019c1c

08007820 <CDC_Transmit_FS>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007820:	4b09      	ldr	r3, [pc, #36]	; (8007848 <CDC_Transmit_FS+0x28>)
 8007822:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
  if (hcdc->TxState != 0){
 8007826:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800782a:	b10b      	cbz	r3, 8007830 <CDC_Transmit_FS+0x10>
    return USBD_BUSY;
 800782c:	2001      	movs	r0, #1
}
 800782e:	4770      	bx	lr
{
 8007830:	b510      	push	{r4, lr}
 8007832:	460a      	mov	r2, r1
 8007834:	4601      	mov	r1, r0
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007836:	4c04      	ldr	r4, [pc, #16]	; (8007848 <CDC_Transmit_FS+0x28>)
 8007838:	4620      	mov	r0, r4
 800783a:	f7fd fe35 	bl	80054a8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800783e:	4620      	mov	r0, r4
 8007840:	f7fd fe40 	bl	80054c4 <USBD_CDC_TransmitPacket>
}
 8007844:	bd10      	pop	{r4, pc}
 8007846:	bf00      	nop
 8007848:	2001994c 	.word	0x2001994c

0800784c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800784c:	b508      	push	{r3, lr}
  SystemClock_Config();
 800784e:	f7fe fd71 	bl	8006334 <SystemClock_Config>
}
 8007852:	bd08      	pop	{r3, pc}

08007854 <HAL_PCD_MspInit>:
{
 8007854:	b510      	push	{r4, lr}
 8007856:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007858:	2300      	movs	r3, #0
 800785a:	9303      	str	r3, [sp, #12]
 800785c:	9304      	str	r3, [sp, #16]
 800785e:	9305      	str	r3, [sp, #20]
 8007860:	9306      	str	r3, [sp, #24]
 8007862:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007864:	6803      	ldr	r3, [r0, #0]
 8007866:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800786a:	d001      	beq.n	8007870 <HAL_PCD_MspInit+0x1c>
}
 800786c:	b008      	add	sp, #32
 800786e:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007870:	4c18      	ldr	r4, [pc, #96]	; (80078d4 <HAL_PCD_MspInit+0x80>)
 8007872:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007874:	f043 0301 	orr.w	r3, r3, #1
 8007878:	6323      	str	r3, [r4, #48]	; 0x30
 800787a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800787c:	f003 0301 	and.w	r3, r3, #1
 8007880:	9300      	str	r3, [sp, #0]
 8007882:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007884:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007888:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800788a:	2302      	movs	r3, #2
 800788c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800788e:	2303      	movs	r3, #3
 8007890:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007892:	230a      	movs	r3, #10
 8007894:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007896:	a903      	add	r1, sp, #12
 8007898:	480f      	ldr	r0, [pc, #60]	; (80078d8 <HAL_PCD_MspInit+0x84>)
 800789a:	f7f9 fe8f 	bl	80015bc <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800789e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80078a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078a4:	6363      	str	r3, [r4, #52]	; 0x34
 80078a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80078a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078ac:	9301      	str	r3, [sp, #4]
 80078ae:	9b01      	ldr	r3, [sp, #4]
 80078b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80078b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80078b6:	6463      	str	r3, [r4, #68]	; 0x44
 80078b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80078ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078be:	9302      	str	r3, [sp, #8]
 80078c0:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80078c2:	2200      	movs	r2, #0
 80078c4:	4611      	mov	r1, r2
 80078c6:	2043      	movs	r0, #67	; 0x43
 80078c8:	f7f9 fe1e 	bl	8001508 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80078cc:	2043      	movs	r0, #67	; 0x43
 80078ce:	f7f9 fe4d 	bl	800156c <HAL_NVIC_EnableIRQ>
}
 80078d2:	e7cb      	b.n	800786c <HAL_PCD_MspInit+0x18>
 80078d4:	40023800 	.word	0x40023800
 80078d8:	40020000 	.word	0x40020000

080078dc <HAL_PCD_SetupStageCallback>:
{
 80078dc:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80078de:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 80078e2:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80078e6:	f7fd fe65 	bl	80055b4 <USBD_LL_SetupStage>
}
 80078ea:	bd08      	pop	{r3, pc}

080078ec <HAL_PCD_DataOutStageCallback>:
{
 80078ec:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80078ee:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 80078f2:	0093      	lsls	r3, r2, #2
 80078f4:	4403      	add	r3, r0
 80078f6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80078fa:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80078fe:	f7fd fe85 	bl	800560c <USBD_LL_DataOutStage>
}
 8007902:	bd08      	pop	{r3, pc}

08007904 <HAL_PCD_DataInStageCallback>:
{
 8007904:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007906:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 800790a:	0093      	lsls	r3, r2, #2
 800790c:	4403      	add	r3, r0
 800790e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007910:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8007914:	f7fd feb3 	bl	800567e <USBD_LL_DataInStage>
}
 8007918:	bd08      	pop	{r3, pc}

0800791a <HAL_PCD_SOFCallback>:
{
 800791a:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800791c:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8007920:	f7fd ff48 	bl	80057b4 <USBD_LL_SOF>
}
 8007924:	bd08      	pop	{r3, pc}

08007926 <HAL_PCD_ResetCallback>:
{
 8007926:	b510      	push	{r4, lr}
 8007928:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800792a:	68c3      	ldr	r3, [r0, #12]
 800792c:	b12b      	cbz	r3, 800793a <HAL_PCD_ResetCallback+0x14>
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800792e:	2b02      	cmp	r3, #2
 8007930:	d00d      	beq.n	800794e <HAL_PCD_ResetCallback+0x28>
    Error_Handler();
 8007932:	f7ff fe0b 	bl	800754c <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007936:	2101      	movs	r1, #1
 8007938:	e000      	b.n	800793c <HAL_PCD_ResetCallback+0x16>
    speed = USBD_SPEED_HIGH;
 800793a:	2100      	movs	r1, #0
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800793c:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
 8007940:	f7fd ff21 	bl	8005786 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007944:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
 8007948:	f7fd fef4 	bl	8005734 <USBD_LL_Reset>
}
 800794c:	bd10      	pop	{r4, pc}
    speed = USBD_SPEED_FULL;
 800794e:	2101      	movs	r1, #1
 8007950:	e7f4      	b.n	800793c <HAL_PCD_ResetCallback+0x16>
	...

08007954 <HAL_PCD_SuspendCallback>:
{
 8007954:	b510      	push	{r4, lr}
 8007956:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007958:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 800795c:	f7fd ff16 	bl	800578c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007960:	6822      	ldr	r2, [r4, #0]
 8007962:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8007966:	f043 0301 	orr.w	r3, r3, #1
 800796a:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  if (hpcd->Init.low_power_enable)
 800796e:	6a23      	ldr	r3, [r4, #32]
 8007970:	b123      	cbz	r3, 800797c <HAL_PCD_SuspendCallback+0x28>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007972:	4a03      	ldr	r2, [pc, #12]	; (8007980 <HAL_PCD_SuspendCallback+0x2c>)
 8007974:	6913      	ldr	r3, [r2, #16]
 8007976:	f043 0306 	orr.w	r3, r3, #6
 800797a:	6113      	str	r3, [r2, #16]
}
 800797c:	bd10      	pop	{r4, pc}
 800797e:	bf00      	nop
 8007980:	e000ed00 	.word	0xe000ed00

08007984 <HAL_PCD_ResumeCallback>:
{
 8007984:	b508      	push	{r3, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007986:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 800798a:	f7fd ff08 	bl	800579e <USBD_LL_Resume>
}
 800798e:	bd08      	pop	{r3, pc}

08007990 <HAL_PCD_ISOOUTIncompleteCallback>:
{
 8007990:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007992:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8007996:	f7fd ff1d 	bl	80057d4 <USBD_LL_IsoOUTIncomplete>
}
 800799a:	bd08      	pop	{r3, pc}

0800799c <HAL_PCD_ISOINIncompleteCallback>:
{
 800799c:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800799e:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80079a2:	f7fd ff15 	bl	80057d0 <USBD_LL_IsoINIncomplete>
}
 80079a6:	bd08      	pop	{r3, pc}

080079a8 <HAL_PCD_ConnectCallback>:
{
 80079a8:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80079aa:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80079ae:	f7fd ff13 	bl	80057d8 <USBD_LL_DevConnected>
}
 80079b2:	bd08      	pop	{r3, pc}

080079b4 <HAL_PCD_DisconnectCallback>:
{
 80079b4:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80079b6:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80079ba:	f7fd ff0f 	bl	80057dc <USBD_LL_DevDisconnected>
}
 80079be:	bd08      	pop	{r3, pc}

080079c0 <USBD_LL_Init>:
  if (pdev->id == DEVICE_FS) {
 80079c0:	7803      	ldrb	r3, [r0, #0]
 80079c2:	b10b      	cbz	r3, 80079c8 <USBD_LL_Init+0x8>
}
 80079c4:	2000      	movs	r0, #0
 80079c6:	4770      	bx	lr
{
 80079c8:	b510      	push	{r4, lr}
 80079ca:	4603      	mov	r3, r0
  hpcd_USB_OTG_FS.pData = pdev;
 80079cc:	4815      	ldr	r0, [pc, #84]	; (8007a24 <USBD_LL_Init+0x64>)
 80079ce:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 80079d2:	f8c3 02c4 	str.w	r0, [r3, #708]	; 0x2c4
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80079d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80079da:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80079dc:	2306      	movs	r3, #6
 80079de:	6043      	str	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80079e0:	2202      	movs	r2, #2
 80079e2:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80079e4:	2300      	movs	r3, #0
 80079e6:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80079e8:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80079ea:	61c3      	str	r3, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80079ec:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80079ee:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80079f0:	62c3      	str	r3, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80079f2:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80079f4:	f7fa fb1a 	bl	800202c <HAL_PCD_Init>
 80079f8:	b980      	cbnz	r0, 8007a1c <USBD_LL_Init+0x5c>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80079fa:	4c0a      	ldr	r4, [pc, #40]	; (8007a24 <USBD_LL_Init+0x64>)
 80079fc:	2180      	movs	r1, #128	; 0x80
 80079fe:	4620      	mov	r0, r4
 8007a00:	f7fb f861 	bl	8002ac6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007a04:	2240      	movs	r2, #64	; 0x40
 8007a06:	2100      	movs	r1, #0
 8007a08:	4620      	mov	r0, r4
 8007a0a:	f7fb f838 	bl	8002a7e <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007a0e:	2280      	movs	r2, #128	; 0x80
 8007a10:	2101      	movs	r1, #1
 8007a12:	4620      	mov	r0, r4
 8007a14:	f7fb f833 	bl	8002a7e <HAL_PCDEx_SetTxFiFo>
}
 8007a18:	2000      	movs	r0, #0
 8007a1a:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8007a1c:	f7ff fd96 	bl	800754c <Error_Handler>
 8007a20:	e7eb      	b.n	80079fa <USBD_LL_Init+0x3a>
 8007a22:	bf00      	nop
 8007a24:	2001ac1c 	.word	0x2001ac1c

08007a28 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007a28:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 8007a2c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007a30:	d108      	bne.n	8007a44 <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007a32:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8007a36:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8007a3a:	008a      	lsls	r2, r1, #2
 8007a3c:	4413      	add	r3, r2
 8007a3e:	f893 01fe 	ldrb.w	r0, [r3, #510]	; 0x1fe
}
 8007a42:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007a44:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8007a48:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8007a4c:	008a      	lsls	r2, r1, #2
 8007a4e:	4413      	add	r3, r2
 8007a50:	f893 003e 	ldrb.w	r0, [r3, #62]	; 0x3e
 8007a54:	4770      	bx	lr

08007a56 <USBD_LL_GetRxDataSize>:
{
 8007a56:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007a58:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8007a5c:	f7fa ff64 	bl	8002928 <HAL_PCD_EP_GetRxCount>
}
 8007a60:	bd08      	pop	{r3, pc}
	...

08007a64 <HAL_PCDEx_LPM_Callback>:
{
 8007a64:	b510      	push	{r4, lr}
 8007a66:	4604      	mov	r4, r0
  switch (msg)
 8007a68:	b111      	cbz	r1, 8007a70 <HAL_PCDEx_LPM_Callback+0xc>
 8007a6a:	2901      	cmp	r1, #1
 8007a6c:	d016      	beq.n	8007a9c <HAL_PCDEx_LPM_Callback+0x38>
}
 8007a6e:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8007a70:	6a03      	ldr	r3, [r0, #32]
 8007a72:	b95b      	cbnz	r3, 8007a8c <HAL_PCDEx_LPM_Callback+0x28>
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007a74:	6822      	ldr	r2, [r4, #0]
 8007a76:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8007a7a:	f023 0301 	bic.w	r3, r3, #1
 8007a7e:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Resume(hpcd->pData);
 8007a82:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
 8007a86:	f7fd fe8a 	bl	800579e <USBD_LL_Resume>
    break;
 8007a8a:	e7f0      	b.n	8007a6e <HAL_PCDEx_LPM_Callback+0xa>
      SystemClockConfig_Resume();
 8007a8c:	f7ff fede 	bl	800784c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007a90:	4a0c      	ldr	r2, [pc, #48]	; (8007ac4 <HAL_PCDEx_LPM_Callback+0x60>)
 8007a92:	6913      	ldr	r3, [r2, #16]
 8007a94:	f023 0306 	bic.w	r3, r3, #6
 8007a98:	6113      	str	r3, [r2, #16]
 8007a9a:	e7eb      	b.n	8007a74 <HAL_PCDEx_LPM_Callback+0x10>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007a9c:	6802      	ldr	r2, [r0, #0]
 8007a9e:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8007aa2:	f043 0301 	orr.w	r3, r3, #1
 8007aa6:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 8007aaa:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8007aae:	f7fd fe6d 	bl	800578c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007ab2:	6a23      	ldr	r3, [r4, #32]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d0da      	beq.n	8007a6e <HAL_PCDEx_LPM_Callback+0xa>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007ab8:	4a02      	ldr	r2, [pc, #8]	; (8007ac4 <HAL_PCDEx_LPM_Callback+0x60>)
 8007aba:	6913      	ldr	r3, [r2, #16]
 8007abc:	f043 0306 	orr.w	r3, r3, #6
 8007ac0:	6113      	str	r3, [r2, #16]
}
 8007ac2:	e7d4      	b.n	8007a6e <HAL_PCDEx_LPM_Callback+0xa>
 8007ac4:	e000ed00 	.word	0xe000ed00

08007ac8 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8007ac8:	b118      	cbz	r0, 8007ad2 <USBD_Get_USB_Status+0xa>
 8007aca:	2802      	cmp	r0, #2
 8007acc:	d003      	beq.n	8007ad6 <USBD_Get_USB_Status+0xe>
  {
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007ace:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8007ad0:	4770      	bx	lr
      usb_status = USBD_OK;
 8007ad2:	2000      	movs	r0, #0
 8007ad4:	4770      	bx	lr
      usb_status = USBD_BUSY;
 8007ad6:	2001      	movs	r0, #1
    break;
 8007ad8:	4770      	bx	lr

08007ada <USBD_LL_Start>:
{
 8007ada:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8007adc:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8007ae0:	f7fa fb3c 	bl	800215c <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ae4:	f7ff fff0 	bl	8007ac8 <USBD_Get_USB_Status>
}
 8007ae8:	bd08      	pop	{r3, pc}

08007aea <USBD_LL_OpenEP>:
{
 8007aea:	b510      	push	{r4, lr}
 8007aec:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007aee:	4613      	mov	r3, r2
 8007af0:	4622      	mov	r2, r4
 8007af2:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8007af6:	f7fa fe71 	bl	80027dc <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007afa:	f7ff ffe5 	bl	8007ac8 <USBD_Get_USB_Status>
}
 8007afe:	bd10      	pop	{r4, pc}

08007b00 <USBD_LL_CloseEP>:
{
 8007b00:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007b02:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8007b06:	f7fa feaa 	bl	800285e <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b0a:	f7ff ffdd 	bl	8007ac8 <USBD_Get_USB_Status>
}
 8007b0e:	bd08      	pop	{r3, pc}

08007b10 <USBD_LL_StallEP>:
{
 8007b10:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007b12:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8007b16:	f7fa ff3a 	bl	800298e <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b1a:	f7ff ffd5 	bl	8007ac8 <USBD_Get_USB_Status>
}
 8007b1e:	bd08      	pop	{r3, pc}

08007b20 <USBD_LL_ClearStallEP>:
{
 8007b20:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007b22:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8007b26:	f7fa ff73 	bl	8002a10 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b2a:	f7ff ffcd 	bl	8007ac8 <USBD_Get_USB_Status>
}
 8007b2e:	bd08      	pop	{r3, pc}

08007b30 <USBD_LL_SetUSBAddress>:
{
 8007b30:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007b32:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8007b36:	f7fa fe3d 	bl	80027b4 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b3a:	f7ff ffc5 	bl	8007ac8 <USBD_Get_USB_Status>
}
 8007b3e:	bd08      	pop	{r3, pc}

08007b40 <USBD_LL_Transmit>:
{
 8007b40:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007b42:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8007b46:	f7fa fef8 	bl	800293a <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b4a:	f7ff ffbd 	bl	8007ac8 <USBD_Get_USB_Status>
}
 8007b4e:	bd08      	pop	{r3, pc}

08007b50 <USBD_LL_PrepareReceive>:
{
 8007b50:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007b52:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8007b56:	f7fa feb9 	bl	80028cc <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b5a:	f7ff ffb5 	bl	8007ac8 <USBD_Get_USB_Status>
}
 8007b5e:	bd08      	pop	{r3, pc}

08007b60 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007b60:	2312      	movs	r3, #18
 8007b62:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8007b64:	4800      	ldr	r0, [pc, #0]	; (8007b68 <USBD_FS_DeviceDescriptor+0x8>)
 8007b66:	4770      	bx	lr
 8007b68:	2000015c 	.word	0x2000015c

08007b6c <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007b6c:	2304      	movs	r3, #4
 8007b6e:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8007b70:	4800      	ldr	r0, [pc, #0]	; (8007b74 <USBD_FS_LangIDStrDescriptor+0x8>)
 8007b72:	4770      	bx	lr
 8007b74:	20000170 	.word	0x20000170

08007b78 <USBD_FS_USR_BOSDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8007b78:	230c      	movs	r3, #12
 8007b7a:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
}
 8007b7c:	4800      	ldr	r0, [pc, #0]	; (8007b80 <USBD_FS_USR_BOSDescriptor+0x8>)
 8007b7e:	4770      	bx	lr
 8007b80:	20000150 	.word	0x20000150

08007b84 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8007b84:	2300      	movs	r3, #0
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d216      	bcs.n	8007bb8 <IntToUnicode+0x34>
{
 8007b8a:	b430      	push	{r4, r5}
 8007b8c:	e00b      	b.n	8007ba6 <IntToUnicode+0x22>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007b8e:	3437      	adds	r4, #55	; 0x37
 8007b90:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    }

    value = value << 4;
 8007b94:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8007b96:	005c      	lsls	r4, r3, #1
 8007b98:	3401      	adds	r4, #1
 8007b9a:	2500      	movs	r5, #0
 8007b9c:	550d      	strb	r5, [r1, r4]
  for (idx = 0; idx < len; idx++)
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d206      	bcs.n	8007bb4 <IntToUnicode+0x30>
    if (((value >> 28)) < 0xA)
 8007ba6:	0f04      	lsrs	r4, r0, #28
 8007ba8:	2c09      	cmp	r4, #9
 8007baa:	d8f0      	bhi.n	8007b8e <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 8007bac:	3430      	adds	r4, #48	; 0x30
 8007bae:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
 8007bb2:	e7ef      	b.n	8007b94 <IntToUnicode+0x10>
  }
}
 8007bb4:	bc30      	pop	{r4, r5}
 8007bb6:	4770      	bx	lr
 8007bb8:	4770      	bx	lr
	...

08007bbc <Get_SerialNum>:
{
 8007bbc:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007bbe:	4b0a      	ldr	r3, [pc, #40]	; (8007be8 <Get_SerialNum+0x2c>)
 8007bc0:	6818      	ldr	r0, [r3, #0]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007bc2:	3304      	adds	r3, #4
 8007bc4:	681c      	ldr	r4, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007bc6:	3304      	adds	r3, #4
 8007bc8:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8007bca:	18c0      	adds	r0, r0, r3
 8007bcc:	d100      	bne.n	8007bd0 <Get_SerialNum+0x14>
}
 8007bce:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007bd0:	4d06      	ldr	r5, [pc, #24]	; (8007bec <Get_SerialNum+0x30>)
 8007bd2:	2208      	movs	r2, #8
 8007bd4:	1ca9      	adds	r1, r5, #2
 8007bd6:	f7ff ffd5 	bl	8007b84 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007bda:	2204      	movs	r2, #4
 8007bdc:	f105 0112 	add.w	r1, r5, #18
 8007be0:	4620      	mov	r0, r4
 8007be2:	f7ff ffcf 	bl	8007b84 <IntToUnicode>
}
 8007be6:	e7f2      	b.n	8007bce <Get_SerialNum+0x12>
 8007be8:	1ff0f420 	.word	0x1ff0f420
 8007bec:	20000174 	.word	0x20000174

08007bf0 <USBD_FS_SerialStrDescriptor>:
{
 8007bf0:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8007bf2:	231a      	movs	r3, #26
 8007bf4:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 8007bf6:	f7ff ffe1 	bl	8007bbc <Get_SerialNum>
}
 8007bfa:	4801      	ldr	r0, [pc, #4]	; (8007c00 <USBD_FS_SerialStrDescriptor+0x10>)
 8007bfc:	bd08      	pop	{r3, pc}
 8007bfe:	bf00      	nop
 8007c00:	20000174 	.word	0x20000174

08007c04 <USBD_FS_ProductStrDescriptor>:
{
 8007c04:	b508      	push	{r3, lr}
 8007c06:	460a      	mov	r2, r1
  if(speed == 0)
 8007c08:	b128      	cbz	r0, 8007c16 <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c0a:	4905      	ldr	r1, [pc, #20]	; (8007c20 <USBD_FS_ProductStrDescriptor+0x1c>)
 8007c0c:	4805      	ldr	r0, [pc, #20]	; (8007c24 <USBD_FS_ProductStrDescriptor+0x20>)
 8007c0e:	f7fe f959 	bl	8005ec4 <USBD_GetString>
}
 8007c12:	4803      	ldr	r0, [pc, #12]	; (8007c20 <USBD_FS_ProductStrDescriptor+0x1c>)
 8007c14:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c16:	4902      	ldr	r1, [pc, #8]	; (8007c20 <USBD_FS_ProductStrDescriptor+0x1c>)
 8007c18:	4802      	ldr	r0, [pc, #8]	; (8007c24 <USBD_FS_ProductStrDescriptor+0x20>)
 8007c1a:	f7fe f953 	bl	8005ec4 <USBD_GetString>
 8007c1e:	e7f8      	b.n	8007c12 <USBD_FS_ProductStrDescriptor+0xe>
 8007c20:	2001b020 	.word	0x2001b020
 8007c24:	08015f64 	.word	0x08015f64

08007c28 <USBD_FS_ManufacturerStrDescriptor>:
{
 8007c28:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007c2a:	4c04      	ldr	r4, [pc, #16]	; (8007c3c <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8007c2c:	460a      	mov	r2, r1
 8007c2e:	4621      	mov	r1, r4
 8007c30:	4803      	ldr	r0, [pc, #12]	; (8007c40 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8007c32:	f7fe f947 	bl	8005ec4 <USBD_GetString>
}
 8007c36:	4620      	mov	r0, r4
 8007c38:	bd10      	pop	{r4, pc}
 8007c3a:	bf00      	nop
 8007c3c:	2001b020 	.word	0x2001b020
 8007c40:	08015f50 	.word	0x08015f50

08007c44 <USBD_FS_ConfigStrDescriptor>:
{
 8007c44:	b508      	push	{r3, lr}
 8007c46:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8007c48:	b128      	cbz	r0, 8007c56 <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c4a:	4905      	ldr	r1, [pc, #20]	; (8007c60 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8007c4c:	4805      	ldr	r0, [pc, #20]	; (8007c64 <USBD_FS_ConfigStrDescriptor+0x20>)
 8007c4e:	f7fe f939 	bl	8005ec4 <USBD_GetString>
}
 8007c52:	4803      	ldr	r0, [pc, #12]	; (8007c60 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8007c54:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c56:	4902      	ldr	r1, [pc, #8]	; (8007c60 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8007c58:	4802      	ldr	r0, [pc, #8]	; (8007c64 <USBD_FS_ConfigStrDescriptor+0x20>)
 8007c5a:	f7fe f933 	bl	8005ec4 <USBD_GetString>
 8007c5e:	e7f8      	b.n	8007c52 <USBD_FS_ConfigStrDescriptor+0xe>
 8007c60:	2001b020 	.word	0x2001b020
 8007c64:	08015f34 	.word	0x08015f34

08007c68 <USBD_FS_InterfaceStrDescriptor>:
{
 8007c68:	b508      	push	{r3, lr}
 8007c6a:	460a      	mov	r2, r1
  if(speed == 0)
 8007c6c:	b128      	cbz	r0, 8007c7a <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c6e:	4905      	ldr	r1, [pc, #20]	; (8007c84 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8007c70:	4805      	ldr	r0, [pc, #20]	; (8007c88 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8007c72:	f7fe f927 	bl	8005ec4 <USBD_GetString>
}
 8007c76:	4803      	ldr	r0, [pc, #12]	; (8007c84 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8007c78:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c7a:	4902      	ldr	r1, [pc, #8]	; (8007c84 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8007c7c:	4802      	ldr	r0, [pc, #8]	; (8007c88 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8007c7e:	f7fe f921 	bl	8005ec4 <USBD_GetString>
 8007c82:	e7f8      	b.n	8007c76 <USBD_FS_InterfaceStrDescriptor+0xe>
 8007c84:	2001b020 	.word	0x2001b020
 8007c88:	08015f40 	.word	0x08015f40

08007c8c <_GetImageById>:
/*********************************************************************
*
*       _GetImageById
*/
static const void * _GetImageById(U32 Id, U32 * pSize) {
  switch (Id) {
 8007c8c:	b920      	cbnz	r0, 8007c98 <_GetImageById+0xc>
  case ID_IMAGE_0_IMAGE_0:
    *pSize = sizeof(_acImage_0);
 8007c8e:	f640 5372 	movw	r3, #3442	; 0xd72
 8007c92:	600b      	str	r3, [r1, #0]
    return (const void *)_acImage_0;
 8007c94:	4801      	ldr	r0, [pc, #4]	; (8007c9c <_GetImageById+0x10>)
 8007c96:	4770      	bx	lr
  }
  return NULL;
 8007c98:	2000      	movs	r0, #0
}
 8007c9a:	4770      	bx	lr
 8007c9c:	080163c0 	.word	0x080163c0

08007ca0 <_cbDialog>:

/*********************************************************************
*
*       _cbDialog
*/
static void _cbDialog(WM_MESSAGE * pMsg) {
 8007ca0:	b570      	push	{r4, r5, r6, lr}
 8007ca2:	b082      	sub	sp, #8
 8007ca4:	4604      	mov	r4, r0
  int          NCode;
  int          Id;
  // USER START (Optionally insert additional variables)
  // USER END

  switch (pMsg->MsgId) {
 8007ca6:	6803      	ldr	r3, [r0, #0]
 8007ca8:	2b1d      	cmp	r3, #29
 8007caa:	d005      	beq.n	8007cb8 <_cbDialog+0x18>
 8007cac:	2b26      	cmp	r3, #38	; 0x26
 8007cae:	f000 80b7 	beq.w	8007e20 <_cbDialog+0x180>
    }
    break;
  // USER START (Optionally insert additional message handling)
  // USER END
  default:
    WM_DefaultProc(pMsg);
 8007cb2:	f003 fa1f 	bl	800b0f4 <WM_DefaultProc>
    break;
  }
}
 8007cb6:	e0b1      	b.n	8007e1c <_cbDialog+0x17c>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_IMAGE_0);
 8007cb8:	f640 0104 	movw	r1, #2052	; 0x804
 8007cbc:	6840      	ldr	r0, [r0, #4]
 8007cbe:	f002 f8dc 	bl	8009e7a <WM_GetDialogItem>
 8007cc2:	4605      	mov	r5, r0
    pData = _GetImageById(ID_IMAGE_0_IMAGE_0, &FileSize);
 8007cc4:	a901      	add	r1, sp, #4
 8007cc6:	2000      	movs	r0, #0
 8007cc8:	f7ff ffe0 	bl	8007c8c <_GetImageById>
    IMAGE_SetBMP(hItem, pData, FileSize);
 8007ccc:	9a01      	ldr	r2, [sp, #4]
 8007cce:	4601      	mov	r1, r0
 8007cd0:	4628      	mov	r0, r5
 8007cd2:	f000 fc0f 	bl	80084f4 <IMAGE_SetBMP>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_0);
 8007cd6:	f640 0107 	movw	r1, #2055	; 0x807
 8007cda:	6860      	ldr	r0, [r4, #4]
 8007cdc:	f002 f8cd 	bl	8009e7a <WM_GetDialogItem>
 8007ce0:	4606      	mov	r6, r0
    EDIT_SetText(hItem, "");
 8007ce2:	4d51      	ldr	r5, [pc, #324]	; (8007e28 <_cbDialog+0x188>)
 8007ce4:	4629      	mov	r1, r5
 8007ce6:	f001 faa3 	bl	8009230 <EDIT_SetText>
    EDIT_SetFont(hItem, GUI_FONT_20_1);
 8007cea:	4950      	ldr	r1, [pc, #320]	; (8007e2c <_cbDialog+0x18c>)
 8007cec:	4630      	mov	r0, r6
 8007cee:	f001 fa8d 	bl	800920c <EDIT_SetFont>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_1);
 8007cf2:	f640 0108 	movw	r1, #2056	; 0x808
 8007cf6:	6860      	ldr	r0, [r4, #4]
 8007cf8:	f002 f8bf 	bl	8009e7a <WM_GetDialogItem>
    EDIT_SetText(hItem, "01");
 8007cfc:	494c      	ldr	r1, [pc, #304]	; (8007e30 <_cbDialog+0x190>)
 8007cfe:	f001 fa97 	bl	8009230 <EDIT_SetText>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_2);
 8007d02:	f640 0109 	movw	r1, #2057	; 0x809
 8007d06:	6860      	ldr	r0, [r4, #4]
 8007d08:	f002 f8b7 	bl	8009e7a <WM_GetDialogItem>
    EDIT_SetText(hItem, "");
 8007d0c:	4629      	mov	r1, r5
 8007d0e:	f001 fa8f 	bl	8009230 <EDIT_SetText>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_3);
 8007d12:	f640 010a 	movw	r1, #2058	; 0x80a
 8007d16:	6860      	ldr	r0, [r4, #4]
 8007d18:	f002 f8af 	bl	8009e7a <WM_GetDialogItem>
    EDIT_SetText(hItem, "");
 8007d1c:	4629      	mov	r1, r5
 8007d1e:	f001 fa87 	bl	8009230 <EDIT_SetText>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_4);
 8007d22:	f640 010b 	movw	r1, #2059	; 0x80b
 8007d26:	6860      	ldr	r0, [r4, #4]
 8007d28:	f002 f8a7 	bl	8009e7a <WM_GetDialogItem>
    EDIT_SetText(hItem, "");
 8007d2c:	4629      	mov	r1, r5
 8007d2e:	f001 fa7f 	bl	8009230 <EDIT_SetText>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_5);
 8007d32:	f640 010c 	movw	r1, #2060	; 0x80c
 8007d36:	6860      	ldr	r0, [r4, #4]
 8007d38:	f002 f89f 	bl	8009e7a <WM_GetDialogItem>
    EDIT_SetText(hItem, "02");
 8007d3c:	493d      	ldr	r1, [pc, #244]	; (8007e34 <_cbDialog+0x194>)
 8007d3e:	f001 fa77 	bl	8009230 <EDIT_SetText>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_6);
 8007d42:	f640 010d 	movw	r1, #2061	; 0x80d
 8007d46:	6860      	ldr	r0, [r4, #4]
 8007d48:	f002 f897 	bl	8009e7a <WM_GetDialogItem>
    EDIT_SetText(hItem, "");
 8007d4c:	4629      	mov	r1, r5
 8007d4e:	f001 fa6f 	bl	8009230 <EDIT_SetText>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_7);
 8007d52:	f640 010e 	movw	r1, #2062	; 0x80e
 8007d56:	6860      	ldr	r0, [r4, #4]
 8007d58:	f002 f88f 	bl	8009e7a <WM_GetDialogItem>
    EDIT_SetText(hItem, "");
 8007d5c:	4629      	mov	r1, r5
 8007d5e:	f001 fa67 	bl	8009230 <EDIT_SetText>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_8);
 8007d62:	f640 010f 	movw	r1, #2063	; 0x80f
 8007d66:	6860      	ldr	r0, [r4, #4]
 8007d68:	f002 f887 	bl	8009e7a <WM_GetDialogItem>
    EDIT_SetText(hItem, "");
 8007d6c:	4629      	mov	r1, r5
 8007d6e:	f001 fa5f 	bl	8009230 <EDIT_SetText>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_9);
 8007d72:	f44f 6101 	mov.w	r1, #2064	; 0x810
 8007d76:	6860      	ldr	r0, [r4, #4]
 8007d78:	f002 f87f 	bl	8009e7a <WM_GetDialogItem>
    EDIT_SetText(hItem, "");
 8007d7c:	4629      	mov	r1, r5
 8007d7e:	f001 fa57 	bl	8009230 <EDIT_SetText>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_10);
 8007d82:	f640 0111 	movw	r1, #2065	; 0x811
 8007d86:	6860      	ldr	r0, [r4, #4]
 8007d88:	f002 f877 	bl	8009e7a <WM_GetDialogItem>
    EDIT_SetText(hItem, "03");
 8007d8c:	492a      	ldr	r1, [pc, #168]	; (8007e38 <_cbDialog+0x198>)
 8007d8e:	f001 fa4f 	bl	8009230 <EDIT_SetText>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_11);
 8007d92:	f640 0112 	movw	r1, #2066	; 0x812
 8007d96:	6860      	ldr	r0, [r4, #4]
 8007d98:	f002 f86f 	bl	8009e7a <WM_GetDialogItem>
 8007d9c:	4606      	mov	r6, r0
    EDIT_SetText(hItem, "");
 8007d9e:	4629      	mov	r1, r5
 8007da0:	f001 fa46 	bl	8009230 <EDIT_SetText>
    EDIT_SetFont(hItem, GUI_FONT_24_1);
 8007da4:	4925      	ldr	r1, [pc, #148]	; (8007e3c <_cbDialog+0x19c>)
 8007da6:	4630      	mov	r0, r6
 8007da8:	f001 fa30 	bl	800920c <EDIT_SetFont>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_12);
 8007dac:	f640 0113 	movw	r1, #2067	; 0x813
 8007db0:	6860      	ldr	r0, [r4, #4]
 8007db2:	f002 f862 	bl	8009e7a <WM_GetDialogItem>
    EDIT_SetText(hItem, "");
 8007db6:	4629      	mov	r1, r5
 8007db8:	f001 fa3a 	bl	8009230 <EDIT_SetText>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_13);
 8007dbc:	f640 0119 	movw	r1, #2073	; 0x819
 8007dc0:	6860      	ldr	r0, [r4, #4]
 8007dc2:	f002 f85a 	bl	8009e7a <WM_GetDialogItem>
    EDIT_SetText(hItem, "");
 8007dc6:	4629      	mov	r1, r5
 8007dc8:	f001 fa32 	bl	8009230 <EDIT_SetText>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_14);
 8007dcc:	f640 011a 	movw	r1, #2074	; 0x81a
 8007dd0:	6860      	ldr	r0, [r4, #4]
 8007dd2:	f002 f852 	bl	8009e7a <WM_GetDialogItem>
    EDIT_SetText(hItem, "");
 8007dd6:	4629      	mov	r1, r5
 8007dd8:	f001 fa2a 	bl	8009230 <EDIT_SetText>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_15);
 8007ddc:	f640 011b 	movw	r1, #2075	; 0x81b
 8007de0:	6860      	ldr	r0, [r4, #4]
 8007de2:	f002 f84a 	bl	8009e7a <WM_GetDialogItem>
    EDIT_SetText(hItem, "");
 8007de6:	4629      	mov	r1, r5
 8007de8:	f001 fa22 	bl	8009230 <EDIT_SetText>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_16);
 8007dec:	f640 011c 	movw	r1, #2076	; 0x81c
 8007df0:	6860      	ldr	r0, [r4, #4]
 8007df2:	f002 f842 	bl	8009e7a <WM_GetDialogItem>
    EDIT_SetText(hItem, "");
 8007df6:	4629      	mov	r1, r5
 8007df8:	f001 fa1a 	bl	8009230 <EDIT_SetText>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_17);
 8007dfc:	f640 011d 	movw	r1, #2077	; 0x81d
 8007e00:	6860      	ldr	r0, [r4, #4]
 8007e02:	f002 f83a 	bl	8009e7a <WM_GetDialogItem>
    EDIT_SetText(hItem, "");
 8007e06:	4629      	mov	r1, r5
 8007e08:	f001 fa12 	bl	8009230 <EDIT_SetText>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_18);
 8007e0c:	f640 011e 	movw	r1, #2078	; 0x81e
 8007e10:	6860      	ldr	r0, [r4, #4]
 8007e12:	f002 f832 	bl	8009e7a <WM_GetDialogItem>
    EDIT_SetText(hItem, "");
 8007e16:	4629      	mov	r1, r5
 8007e18:	f001 fa0a 	bl	8009230 <EDIT_SetText>
}
 8007e1c:	b002      	add	sp, #8
 8007e1e:	bd70      	pop	{r4, r5, r6, pc}
    Id    = WM_GetId(pMsg->hWinSrc);
 8007e20:	6880      	ldr	r0, [r0, #8]
 8007e22:	f001 ffeb 	bl	8009dfc <WM_GetId>
 8007e26:	e7f9      	b.n	8007e1c <_cbDialog+0x17c>
 8007e28:	08015f04 	.word	0x08015f04
 8007e2c:	080191ec 	.word	0x080191ec
 8007e30:	08017134 	.word	0x08017134
 8007e34:	08017138 	.word	0x08017138
 8007e38:	0801713c 	.word	0x0801713c
 8007e3c:	08018bf8 	.word	0x08018bf8

08007e40 <CreateStopwatch>:
/*********************************************************************
*
*       CreateStopwatch
*/
WM_HWIN CreateStopwatch(void);
WM_HWIN CreateStopwatch(void) {
 8007e40:	b500      	push	{lr}
 8007e42:	b083      	sub	sp, #12
  WM_HWIN hWin;

  hWin = GUI_CreateDialogBox(_aDialogCreate, GUI_COUNTOF(_aDialogCreate), _cbDialog, WM_HBKWIN, 0, 0);
 8007e44:	f002 f81e 	bl	8009e84 <WM_GetDesktopWindow>
 8007e48:	2300      	movs	r3, #0
 8007e4a:	9301      	str	r3, [sp, #4]
 8007e4c:	9300      	str	r3, [sp, #0]
 8007e4e:	4603      	mov	r3, r0
 8007e50:	4a03      	ldr	r2, [pc, #12]	; (8007e60 <CreateStopwatch+0x20>)
 8007e52:	2127      	movs	r1, #39	; 0x27
 8007e54:	4803      	ldr	r0, [pc, #12]	; (8007e64 <CreateStopwatch+0x24>)
 8007e56:	f001 fa69 	bl	800932c <GUI_CreateDialogBox>
  return hWin;
}
 8007e5a:	b003      	add	sp, #12
 8007e5c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007e60:	08007ca1 	.word	0x08007ca1
 8007e64:	08015f7c 	.word	0x08015f7c

08007e68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007e68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007ea0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007e6c:	480d      	ldr	r0, [pc, #52]	; (8007ea4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8007e6e:	490e      	ldr	r1, [pc, #56]	; (8007ea8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007e70:	4a0e      	ldr	r2, [pc, #56]	; (8007eac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007e72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007e74:	e002      	b.n	8007e7c <LoopCopyDataInit>

08007e76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007e76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007e78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007e7a:	3304      	adds	r3, #4

08007e7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007e7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007e7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007e80:	d3f9      	bcc.n	8007e76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007e82:	4a0b      	ldr	r2, [pc, #44]	; (8007eb0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8007e84:	4c0b      	ldr	r4, [pc, #44]	; (8007eb4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8007e86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007e88:	e001      	b.n	8007e8e <LoopFillZerobss>

08007e8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007e8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007e8c:	3204      	adds	r2, #4

08007e8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007e8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007e90:	d3fb      	bcc.n	8007e8a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007e92:	f7ff fc69 	bl	8007768 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007e96:	f00d fb99 	bl	80155cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007e9a:	f7fe ff8b 	bl	8006db4 <main>
  bx  lr    
 8007e9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007ea0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8007ea4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007ea8:	2000035c 	.word	0x2000035c
  ldr r2, =_sidata
 8007eac:	0801d5a8 	.word	0x0801d5a8
  ldr r2, =_sbss
 8007eb0:	2000035c 	.word	0x2000035c
  ldr r4, =_ebss
 8007eb4:	2001b3c8 	.word	0x2001b3c8

08007eb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007eb8:	e7fe      	b.n	8007eb8 <ADC_IRQHandler>

08007eba <WINDOW_Callback>:
 8007eba:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007ebe:	6845      	ldr	r5, [r0, #4]
 8007ec0:	4604      	mov	r4, r0
 8007ec2:	4628      	mov	r0, r5
 8007ec4:	f009 f986 	bl	80111d4 <GUI_ALLOC_LockH>
 8007ec8:	af02      	add	r7, sp, #8
 8007eca:	6b86      	ldr	r6, [r0, #56]	; 0x38
 8007ecc:	f847 0d08 	str.w	r0, [r7, #-8]!
 8007ed0:	f8d0 9034 	ldr.w	r9, [r0, #52]	; 0x34
 8007ed4:	f8d0 8040 	ldr.w	r8, [r0, #64]	; 0x40
 8007ed8:	4668      	mov	r0, sp
 8007eda:	f009 f989 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8007ede:	6823      	ldr	r3, [r4, #0]
 8007ee0:	2b1f      	cmp	r3, #31
 8007ee2:	d02f      	beq.n	8007f44 <WINDOW_Callback+0x8a>
 8007ee4:	dc06      	bgt.n	8007ef4 <WINDOW_Callback+0x3a>
 8007ee6:	2b0f      	cmp	r3, #15
 8007ee8:	d060      	beq.n	8007fac <WINDOW_Callback+0xf2>
 8007eea:	2b1e      	cmp	r3, #30
 8007eec:	d015      	beq.n	8007f1a <WINDOW_Callback+0x60>
 8007eee:	2b0e      	cmp	r3, #14
 8007ef0:	d169      	bne.n	8007fc6 <WINDOW_Callback+0x10c>
 8007ef2:	e04a      	b.n	8007f8a <WINDOW_Callback+0xd0>
 8007ef4:	2b22      	cmp	r3, #34	; 0x22
 8007ef6:	d063      	beq.n	8007fc0 <WINDOW_Callback+0x106>
 8007ef8:	2b2a      	cmp	r3, #42	; 0x2a
 8007efa:	d002      	beq.n	8007f02 <WINDOW_Callback+0x48>
 8007efc:	2b20      	cmp	r3, #32
 8007efe:	d162      	bne.n	8007fc6 <WINDOW_Callback+0x10c>
 8007f00:	e025      	b.n	8007f4e <WINDOW_Callback+0x94>
 8007f02:	4628      	mov	r0, r5
 8007f04:	f009 f966 	bl	80111d4 <GUI_ALLOC_LockH>
 8007f08:	68e3      	ldr	r3, [r4, #12]
 8007f0a:	9000      	str	r0, [sp, #0]
 8007f0c:	b10b      	cbz	r3, 8007f12 <WINDOW_Callback+0x58>
 8007f0e:	63c3      	str	r3, [r0, #60]	; 0x3c
 8007f10:	e001      	b.n	8007f16 <WINDOW_Callback+0x5c>
 8007f12:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8007f14:	60e3      	str	r3, [r4, #12]
 8007f16:	4668      	mov	r0, sp
 8007f18:	e034      	b.n	8007f84 <WINDOW_Callback+0xca>
 8007f1a:	68e4      	ldr	r4, [r4, #12]
 8007f1c:	2c01      	cmp	r4, #1
 8007f1e:	d15b      	bne.n	8007fd8 <WINDOW_Callback+0x11e>
 8007f20:	4630      	mov	r0, r6
 8007f22:	f001 feec 	bl	8009cfe <WM_IsWindow>
 8007f26:	2800      	cmp	r0, #0
 8007f28:	d03c      	beq.n	8007fa4 <WINDOW_Callback+0xea>
 8007f2a:	4630      	mov	r0, r6
 8007f2c:	f001 fd7e 	bl	8009a2c <WM_SetFocus>
 8007f30:	4630      	mov	r0, r6
 8007f32:	f001 ff15 	bl	8009d60 <WM_HasFocus>
 8007f36:	2800      	cmp	r0, #0
 8007f38:	d04e      	beq.n	8007fd8 <WINDOW_Callback+0x11e>
 8007f3a:	4630      	mov	r0, r6
 8007f3c:	4621      	mov	r1, r4
 8007f3e:	f000 f8f9 	bl	8008134 <WIDGET_OrState>
 8007f42:	e049      	b.n	8007fd8 <WINDOW_Callback+0x11e>
 8007f44:	4628      	mov	r0, r5
 8007f46:	4621      	mov	r1, r4
 8007f48:	f000 f928 	bl	800819c <WIDGET_HandleActive>
 8007f4c:	e044      	b.n	8007fd8 <WINDOW_Callback+0x11e>
 8007f4e:	4628      	mov	r0, r5
 8007f50:	f009 f940 	bl	80111d4 <GUI_ALLOC_LockH>
 8007f54:	68e4      	ldr	r4, [r4, #12]
 8007f56:	9001      	str	r0, [sp, #4]
 8007f58:	b19c      	cbz	r4, 8007f82 <WINDOW_Callback+0xc8>
 8007f5a:	6860      	ldr	r0, [r4, #4]
 8007f5c:	4629      	mov	r1, r5
 8007f5e:	f001 fc1f 	bl	80097a0 <WM__IsAncestorOrSelf>
 8007f62:	b930      	cbnz	r0, 8007f72 <WINDOW_Callback+0xb8>
 8007f64:	6820      	ldr	r0, [r4, #0]
 8007f66:	4629      	mov	r1, r5
 8007f68:	f001 fc09 	bl	800977e <WM__IsAncestor>
 8007f6c:	b148      	cbz	r0, 8007f82 <WINDOW_Callback+0xc8>
 8007f6e:	6822      	ldr	r2, [r4, #0]
 8007f70:	e005      	b.n	8007f7e <WINDOW_Callback+0xc4>
 8007f72:	6860      	ldr	r0, [r4, #4]
 8007f74:	4629      	mov	r1, r5
 8007f76:	f001 fc02 	bl	800977e <WM__IsAncestor>
 8007f7a:	b110      	cbz	r0, 8007f82 <WINDOW_Callback+0xc8>
 8007f7c:	6862      	ldr	r2, [r4, #4]
 8007f7e:	9b01      	ldr	r3, [sp, #4]
 8007f80:	639a      	str	r2, [r3, #56]	; 0x38
 8007f82:	a801      	add	r0, sp, #4
 8007f84:	f009 f934 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8007f88:	e026      	b.n	8007fd8 <WINDOW_Callback+0x11e>
 8007f8a:	68e3      	ldr	r3, [r4, #12]
 8007f8c:	685a      	ldr	r2, [r3, #4]
 8007f8e:	2a00      	cmp	r2, #0
 8007f90:	dd19      	ble.n	8007fc6 <WINDOW_Callback+0x10c>
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2b09      	cmp	r3, #9
 8007f96:	d005      	beq.n	8007fa4 <WINDOW_Callback+0xea>
 8007f98:	2b0a      	cmp	r3, #10
 8007f9a:	d114      	bne.n	8007fc6 <WINDOW_Callback+0x10c>
 8007f9c:	4628      	mov	r0, r5
 8007f9e:	f001 fce3 	bl	8009968 <WM_SetFocusOnPrevChild>
 8007fa2:	e019      	b.n	8007fd8 <WINDOW_Callback+0x11e>
 8007fa4:	4628      	mov	r0, r5
 8007fa6:	f001 fd0f 	bl	80099c8 <WM_SetFocusOnNextChild>
 8007faa:	e015      	b.n	8007fd8 <WINDOW_Callback+0x11e>
 8007fac:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8007fb0:	4598      	cmp	r8, r3
 8007fb2:	d008      	beq.n	8007fc6 <WINDOW_Callback+0x10c>
 8007fb4:	4640      	mov	r0, r8
 8007fb6:	f005 ffe3 	bl	800df80 <LCD_SetBkColor>
 8007fba:	f007 fe1f 	bl	800fbfc <GUI_Clear>
 8007fbe:	e002      	b.n	8007fc6 <WINDOW_Callback+0x10c>
 8007fc0:	f8c4 800c 	str.w	r8, [r4, #12]
 8007fc4:	e008      	b.n	8007fd8 <WINDOW_Callback+0x11e>
 8007fc6:	f1b9 0f00 	cmp.w	r9, #0
 8007fca:	d002      	beq.n	8007fd2 <WINDOW_Callback+0x118>
 8007fcc:	4620      	mov	r0, r4
 8007fce:	47c8      	blx	r9
 8007fd0:	e002      	b.n	8007fd8 <WINDOW_Callback+0x11e>
 8007fd2:	4620      	mov	r0, r4
 8007fd4:	f003 f88e 	bl	800b0f4 <WM_DefaultProc>
 8007fd8:	b003      	add	sp, #12
 8007fda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08007fe0 <WINDOW_CreateUser>:
 8007fe0:	b510      	push	{r4, lr}
 8007fe2:	b086      	sub	sp, #24
 8007fe4:	9c08      	ldr	r4, [sp, #32]
 8007fe6:	9400      	str	r4, [sp, #0]
 8007fe8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007fea:	9401      	str	r4, [sp, #4]
 8007fec:	4c0f      	ldr	r4, [pc, #60]	; (800802c <WINDOW_CreateUser+0x4c>)
 8007fee:	9402      	str	r4, [sp, #8]
 8007ff0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8007ff2:	3418      	adds	r4, #24
 8007ff4:	9403      	str	r4, [sp, #12]
 8007ff6:	f002 fc9b 	bl	800a930 <WM_CreateWindowAsChild>
 8007ffa:	4604      	mov	r4, r0
 8007ffc:	b190      	cbz	r0, 8008024 <WINDOW_CreateUser+0x44>
 8007ffe:	f009 f8e9 	bl	80111d4 <GUI_ALLOC_LockH>
 8008002:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008004:	9005      	str	r0, [sp, #20]
 8008006:	2210      	movs	r2, #16
 8008008:	f000 f8c0 	bl	800818c <WIDGET__Init>
 800800c:	a806      	add	r0, sp, #24
 800800e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008010:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 8008014:	6351      	str	r1, [r2, #52]	; 0x34
 8008016:	2100      	movs	r1, #0
 8008018:	6391      	str	r1, [r2, #56]	; 0x38
 800801a:	4905      	ldr	r1, [pc, #20]	; (8008030 <WINDOW_CreateUser+0x50>)
 800801c:	6809      	ldr	r1, [r1, #0]
 800801e:	6411      	str	r1, [r2, #64]	; 0x40
 8008020:	f009 f8e6 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8008024:	4620      	mov	r0, r4
 8008026:	b006      	add	sp, #24
 8008028:	bd10      	pop	{r4, pc}
 800802a:	bf00      	nop
 800802c:	08007ebb 	.word	0x08007ebb
 8008030:	20000190 	.word	0x20000190

08008034 <WINDOW_CreateIndirect>:
 8008034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008036:	b087      	sub	sp, #28
 8008038:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 800803c:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 8008040:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
 8008044:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 8008048:	9100      	str	r1, [sp, #0]
 800804a:	8a41      	ldrh	r1, [r0, #18]
 800804c:	9101      	str	r1, [sp, #4]
 800804e:	2100      	movs	r1, #0
 8008050:	9102      	str	r1, [sp, #8]
 8008052:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8008056:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008058:	9103      	str	r1, [sp, #12]
 800805a:	9404      	str	r4, [sp, #16]
 800805c:	6984      	ldr	r4, [r0, #24]
 800805e:	9405      	str	r4, [sp, #20]
 8008060:	eb0e 0002 	add.w	r0, lr, r2
 8008064:	18f9      	adds	r1, r7, r3
 8008066:	4632      	mov	r2, r6
 8008068:	462b      	mov	r3, r5
 800806a:	f7ff ffb9 	bl	8007fe0 <WINDOW_CreateUser>
 800806e:	b007      	add	sp, #28
 8008070:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008072 <_EffectRequiresRedraw>:
 8008072:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008074:	460d      	mov	r5, r1
 8008076:	f100 0108 	add.w	r1, r0, #8
 800807a:	4602      	mov	r2, r0
 800807c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800807e:	c903      	ldmia	r1, {r0, r1}
 8008080:	681c      	ldr	r4, [r3, #0]
 8008082:	e88d 0003 	stmia.w	sp, {r0, r1}
 8008086:	4610      	mov	r0, r2
 8008088:	4669      	mov	r1, sp
 800808a:	f001 fb66 	bl	800975a <WM__Screen2Client>
 800808e:	f9b5 2000 	ldrsh.w	r2, [r5]
 8008092:	f9bd 3000 	ldrsh.w	r3, [sp]
 8008096:	4422      	add	r2, r4
 8008098:	429a      	cmp	r2, r3
 800809a:	dc17      	bgt.n	80080cc <_EffectRequiresRedraw+0x5a>
 800809c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80080a0:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80080a4:	1b12      	subs	r2, r2, r4
 80080a6:	429a      	cmp	r2, r3
 80080a8:	db10      	blt.n	80080cc <_EffectRequiresRedraw+0x5a>
 80080aa:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80080ae:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80080b2:	4422      	add	r2, r4
 80080b4:	429a      	cmp	r2, r3
 80080b6:	dc09      	bgt.n	80080cc <_EffectRequiresRedraw+0x5a>
 80080b8:	f9b5 0006 	ldrsh.w	r0, [r5, #6]
 80080bc:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80080c0:	1b04      	subs	r4, r0, r4
 80080c2:	429c      	cmp	r4, r3
 80080c4:	bfac      	ite	ge
 80080c6:	2000      	movge	r0, #0
 80080c8:	2001      	movlt	r0, #1
 80080ca:	e000      	b.n	80080ce <_EffectRequiresRedraw+0x5c>
 80080cc:	2001      	movs	r0, #1
 80080ce:	b003      	add	sp, #12
 80080d0:	bd30      	pop	{r4, r5, pc}

080080d2 <WIDGET__RotateRect90>:
 80080d2:	f9b0 3000 	ldrsh.w	r3, [r0]
 80080d6:	b570      	push	{r4, r5, r6, lr}
 80080d8:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 80080dc:	8815      	ldrh	r5, [r2, #0]
 80080de:	88d0      	ldrh	r0, [r2, #6]
 80080e0:	8894      	ldrh	r4, [r2, #4]
 80080e2:	8852      	ldrh	r2, [r2, #2]
 80080e4:	804d      	strh	r5, [r1, #2]
 80080e6:	1af3      	subs	r3, r6, r3
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	1a18      	subs	r0, r3, r0
 80080ec:	1a9b      	subs	r3, r3, r2
 80080ee:	8008      	strh	r0, [r1, #0]
 80080f0:	808b      	strh	r3, [r1, #4]
 80080f2:	80cc      	strh	r4, [r1, #6]
 80080f4:	bd70      	pop	{r4, r5, r6, pc}

080080f6 <WIDGET__GetInsideRect>:
 80080f6:	b538      	push	{r3, r4, r5, lr}
 80080f8:	4604      	mov	r4, r0
 80080fa:	460d      	mov	r5, r1
 80080fc:	f002 fb8f 	bl	800a81e <WM__GetClientRectWin>
 8008100:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008102:	4628      	mov	r0, r5
 8008104:	4629      	mov	r1, r5
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800810c:	f005 bfdb 	b.w	800e0c6 <GUI__ReduceRect>

08008110 <WIDGET_SetState>:
 8008110:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008112:	460c      	mov	r4, r1
 8008114:	4605      	mov	r5, r0
 8008116:	f009 f85d 	bl	80111d4 <GUI_ALLOC_LockH>
 800811a:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800811c:	9001      	str	r0, [sp, #4]
 800811e:	4294      	cmp	r4, r2
 8008120:	d003      	beq.n	800812a <WIDGET_SetState+0x1a>
 8008122:	8644      	strh	r4, [r0, #50]	; 0x32
 8008124:	4628      	mov	r0, r5
 8008126:	f002 fbc2 	bl	800a8ae <WM_InvalidateWindow>
 800812a:	a801      	add	r0, sp, #4
 800812c:	f009 f860 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8008130:	b003      	add	sp, #12
 8008132:	bd30      	pop	{r4, r5, pc}

08008134 <WIDGET_OrState>:
 8008134:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008136:	460c      	mov	r4, r1
 8008138:	4605      	mov	r5, r0
 800813a:	b178      	cbz	r0, 800815c <WIDGET_OrState+0x28>
 800813c:	f009 f84a 	bl	80111d4 <GUI_ALLOC_LockH>
 8008140:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8008142:	9001      	str	r0, [sp, #4]
 8008144:	ea04 0102 	and.w	r1, r4, r2
 8008148:	428c      	cmp	r4, r1
 800814a:	d004      	beq.n	8008156 <WIDGET_OrState+0x22>
 800814c:	4314      	orrs	r4, r2
 800814e:	8644      	strh	r4, [r0, #50]	; 0x32
 8008150:	4628      	mov	r0, r5
 8008152:	f002 fbac 	bl	800a8ae <WM_InvalidateWindow>
 8008156:	a801      	add	r0, sp, #4
 8008158:	f009 f84a 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800815c:	b003      	add	sp, #12
 800815e:	bd30      	pop	{r4, r5, pc}

08008160 <WIDGET_AndState>:
 8008160:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008162:	460d      	mov	r5, r1
 8008164:	4604      	mov	r4, r0
 8008166:	b170      	cbz	r0, 8008186 <WIDGET_AndState+0x26>
 8008168:	f009 f834 	bl	80111d4 <GUI_ALLOC_LockH>
 800816c:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800816e:	9001      	str	r0, [sp, #4]
 8008170:	ea22 0105 	bic.w	r1, r2, r5
 8008174:	428a      	cmp	r2, r1
 8008176:	d003      	beq.n	8008180 <WIDGET_AndState+0x20>
 8008178:	8641      	strh	r1, [r0, #50]	; 0x32
 800817a:	4620      	mov	r0, r4
 800817c:	f002 fb97 	bl	800a8ae <WM_InvalidateWindow>
 8008180:	a801      	add	r0, sp, #4
 8008182:	f009 f835 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8008186:	b003      	add	sp, #12
 8008188:	bd30      	pop	{r4, r5, pc}
	...

0800818c <WIDGET__Init>:
 800818c:	4b02      	ldr	r3, [pc, #8]	; (8008198 <WIDGET__Init+0xc>)
 800818e:	8642      	strh	r2, [r0, #50]	; 0x32
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	62c3      	str	r3, [r0, #44]	; 0x2c
 8008194:	8601      	strh	r1, [r0, #48]	; 0x30
 8008196:	4770      	bx	lr
 8008198:	20000194 	.word	0x20000194

0800819c <WIDGET_HandleActive>:
 800819c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800819e:	460d      	mov	r5, r1
 80081a0:	b085      	sub	sp, #20
 80081a2:	4606      	mov	r6, r0
 80081a4:	2800      	cmp	r0, #0
 80081a6:	f000 8093 	beq.w	80082d0 <WIDGET_HandleActive+0x134>
 80081aa:	f009 f813 	bl	80111d4 <GUI_ALLOC_LockH>
 80081ae:	682b      	ldr	r3, [r5, #0]
 80081b0:	9002      	str	r0, [sp, #8]
 80081b2:	2b16      	cmp	r3, #22
 80081b4:	d052      	beq.n	800825c <WIDGET_HandleActive+0xc0>
 80081b6:	dc0c      	bgt.n	80081d2 <WIDGET_HandleActive+0x36>
 80081b8:	2b11      	cmp	r3, #17
 80081ba:	d033      	beq.n	8008224 <WIDGET_HandleActive+0x88>
 80081bc:	dc02      	bgt.n	80081c4 <WIDGET_HandleActive+0x28>
 80081be:	2b0d      	cmp	r3, #13
 80081c0:	d03e      	beq.n	8008240 <WIDGET_HandleActive+0xa4>
 80081c2:	e07e      	b.n	80082c2 <WIDGET_HandleActive+0x126>
 80081c4:	2b14      	cmp	r3, #20
 80081c6:	d077      	beq.n	80082b8 <WIDGET_HandleActive+0x11c>
 80081c8:	2b15      	cmp	r3, #21
 80081ca:	d17a      	bne.n	80082c2 <WIDGET_HandleActive+0x126>
 80081cc:	f9b0 3030 	ldrsh.w	r3, [r0, #48]	; 0x30
 80081d0:	e070      	b.n	80082b4 <WIDGET_HandleActive+0x118>
 80081d2:	2b1f      	cmp	r3, #31
 80081d4:	d06b      	beq.n	80082ae <WIDGET_HandleActive+0x112>
 80081d6:	dc02      	bgt.n	80081de <WIDGET_HandleActive+0x42>
 80081d8:	2b1e      	cmp	r3, #30
 80081da:	d042      	beq.n	8008262 <WIDGET_HandleActive+0xc6>
 80081dc:	e071      	b.n	80082c2 <WIDGET_HandleActive+0x126>
 80081de:	2b31      	cmp	r3, #49	; 0x31
 80081e0:	d01e      	beq.n	8008220 <WIDGET_HandleActive+0x84>
 80081e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081e6:	d16c      	bne.n	80082c2 <WIDGET_HandleActive+0x126>
 80081e8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80081ea:	6819      	ldr	r1, [r3, #0]
 80081ec:	68eb      	ldr	r3, [r5, #12]
 80081ee:	62c3      	str	r3, [r0, #44]	; 0x2c
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	a802      	add	r0, sp, #8
 80081f4:	1acd      	subs	r5, r1, r3
 80081f6:	f008 fffb 	bl	80111f0 <GUI_ALLOC_UnlockH>
 80081fa:	4630      	mov	r0, r6
 80081fc:	f008 ffea 	bl	80111d4 <GUI_ALLOC_LockH>
 8008200:	ac04      	add	r4, sp, #16
 8008202:	4269      	negs	r1, r5
 8008204:	f844 0d04 	str.w	r0, [r4, #-4]!
 8008208:	460a      	mov	r2, r1
 800820a:	462b      	mov	r3, r5
 800820c:	9500      	str	r5, [sp, #0]
 800820e:	f001 fa2a 	bl	8009666 <WM__UpdateChildPositions>
 8008212:	4620      	mov	r0, r4
 8008214:	f008 ffec 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8008218:	4630      	mov	r0, r6
 800821a:	f002 fb48 	bl	800a8ae <WM_InvalidateWindow>
 800821e:	e04e      	b.n	80082be <WIDGET_HandleActive+0x122>
 8008220:	2400      	movs	r4, #0
 8008222:	e03f      	b.n	80082a4 <WIDGET_HandleActive+0x108>
 8008224:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8008226:	06d9      	lsls	r1, r3, #27
 8008228:	d54b      	bpl.n	80082c2 <WIDGET_HandleActive+0x126>
 800822a:	68eb      	ldr	r3, [r5, #12]
 800822c:	7a1b      	ldrb	r3, [r3, #8]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d047      	beq.n	80082c2 <WIDGET_HandleActive+0x126>
 8008232:	a802      	add	r0, sp, #8
 8008234:	f008 ffdc 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8008238:	4630      	mov	r0, r6
 800823a:	f001 fbf7 	bl	8009a2c <WM_SetFocus>
 800823e:	e040      	b.n	80082c2 <WIDGET_HandleActive+0x126>
 8008240:	68eb      	ldr	r3, [r5, #12]
 8008242:	68db      	ldr	r3, [r3, #12]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d03c      	beq.n	80082c2 <WIDGET_HandleActive+0x126>
 8008248:	7a1b      	ldrb	r3, [r3, #8]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d039      	beq.n	80082c2 <WIDGET_HandleActive+0x126>
 800824e:	a802      	add	r0, sp, #8
 8008250:	f008 ffce 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8008254:	4630      	mov	r0, r6
 8008256:	f001 fe53 	bl	8009f00 <WM_BringToTop>
 800825a:	e030      	b.n	80082be <WIDGET_HandleActive+0x122>
 800825c:	68eb      	ldr	r3, [r5, #12]
 800825e:	8603      	strh	r3, [r0, #48]	; 0x30
 8008260:	e02d      	b.n	80082be <WIDGET_HandleActive+0x122>
 8008262:	68eb      	ldr	r3, [r5, #12]
 8008264:	8e41      	ldrh	r1, [r0, #50]	; 0x32
 8008266:	2b01      	cmp	r3, #1
 8008268:	d108      	bne.n	800827c <WIDGET_HandleActive+0xe0>
 800826a:	06ca      	lsls	r2, r1, #27
 800826c:	d50d      	bpl.n	800828a <WIDGET_HandleActive+0xee>
 800826e:	4630      	mov	r0, r6
 8008270:	f041 0101 	orr.w	r1, r1, #1
 8008274:	f7ff ff4c 	bl	8008110 <WIDGET_SetState>
 8008278:	2708      	movs	r7, #8
 800827a:	e008      	b.n	800828e <WIDGET_HandleActive+0xf2>
 800827c:	f021 0101 	bic.w	r1, r1, #1
 8008280:	4630      	mov	r0, r6
 8008282:	f7ff ff45 	bl	8008110 <WIDGET_SetState>
 8008286:	2709      	movs	r7, #9
 8008288:	e001      	b.n	800828e <WIDGET_HandleActive+0xf2>
 800828a:	f04f 37ff 	mov.w	r7, #4294967295
 800828e:	a802      	add	r0, sp, #8
 8008290:	f008 ffae 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8008294:	1c7b      	adds	r3, r7, #1
 8008296:	f04f 0400 	mov.w	r4, #0
 800829a:	d005      	beq.n	80082a8 <WIDGET_HandleActive+0x10c>
 800829c:	4630      	mov	r0, r6
 800829e:	4639      	mov	r1, r7
 80082a0:	f001 fc97 	bl	8009bd2 <WM_NotifyParent>
 80082a4:	60ec      	str	r4, [r5, #12]
 80082a6:	e00d      	b.n	80082c4 <WIDGET_HandleActive+0x128>
 80082a8:	2301      	movs	r3, #1
 80082aa:	60eb      	str	r3, [r5, #12]
 80082ac:	e00a      	b.n	80082c4 <WIDGET_HandleActive+0x128>
 80082ae:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80082b0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80082b4:	60eb      	str	r3, [r5, #12]
 80082b6:	e002      	b.n	80082be <WIDGET_HandleActive+0x122>
 80082b8:	68e9      	ldr	r1, [r5, #12]
 80082ba:	f7ff ff1c 	bl	80080f6 <WIDGET__GetInsideRect>
 80082be:	2400      	movs	r4, #0
 80082c0:	e000      	b.n	80082c4 <WIDGET_HandleActive+0x128>
 80082c2:	2401      	movs	r4, #1
 80082c4:	9b02      	ldr	r3, [sp, #8]
 80082c6:	b123      	cbz	r3, 80082d2 <WIDGET_HandleActive+0x136>
 80082c8:	a802      	add	r0, sp, #8
 80082ca:	f008 ff91 	bl	80111f0 <GUI_ALLOC_UnlockH>
 80082ce:	e000      	b.n	80082d2 <WIDGET_HandleActive+0x136>
 80082d0:	2401      	movs	r4, #1
 80082d2:	4620      	mov	r0, r4
 80082d4:	b005      	add	sp, #20
 80082d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080082d8 <WIDGET__EFFECT_DrawDownRect>:
 80082d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80082da:	4605      	mov	r5, r0
 80082dc:	460c      	mov	r4, r1
 80082de:	b919      	cbnz	r1, 80082e8 <WIDGET__EFFECT_DrawDownRect+0x10>
 80082e0:	4668      	mov	r0, sp
 80082e2:	f001 fdfd 	bl	8009ee0 <WM_GetClientRect>
 80082e6:	466c      	mov	r4, sp
 80082e8:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 80082ea:	071b      	lsls	r3, r3, #28
 80082ec:	d505      	bpl.n	80082fa <WIDGET__EFFECT_DrawDownRect+0x22>
 80082ee:	4622      	mov	r2, r4
 80082f0:	4628      	mov	r0, r5
 80082f2:	4669      	mov	r1, sp
 80082f4:	f7ff feed 	bl	80080d2 <WIDGET__RotateRect90>
 80082f8:	466c      	mov	r4, sp
 80082fa:	4628      	mov	r0, r5
 80082fc:	4621      	mov	r1, r4
 80082fe:	f7ff feb8 	bl	8008072 <_EffectRequiresRedraw>
 8008302:	b118      	cbz	r0, 800830c <WIDGET__EFFECT_DrawDownRect+0x34>
 8008304:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008306:	4620      	mov	r0, r4
 8008308:	691b      	ldr	r3, [r3, #16]
 800830a:	4798      	blx	r3
 800830c:	b003      	add	sp, #12
 800830e:	bd30      	pop	{r4, r5, pc}

08008310 <WIDGET__EFFECT_DrawDown>:
 8008310:	2100      	movs	r1, #0
 8008312:	f7ff bfe1 	b.w	80082d8 <WIDGET__EFFECT_DrawDownRect>

08008316 <TEXT_CreateIndirect>:
 8008316:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008318:	b087      	sub	sp, #28
 800831a:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 800831e:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 8008322:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
 8008326:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 800832a:	9100      	str	r1, [sp, #0]
 800832c:	2102      	movs	r1, #2
 800832e:	9101      	str	r1, [sp, #4]
 8008330:	8a41      	ldrh	r1, [r0, #18]
 8008332:	9102      	str	r1, [sp, #8]
 8008334:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8008338:	9103      	str	r1, [sp, #12]
 800833a:	6844      	ldr	r4, [r0, #4]
 800833c:	9404      	str	r4, [sp, #16]
 800833e:	6984      	ldr	r4, [r0, #24]
 8008340:	9405      	str	r4, [sp, #20]
 8008342:	eb0e 0002 	add.w	r0, lr, r2
 8008346:	18f9      	adds	r1, r7, r3
 8008348:	4632      	mov	r2, r6
 800834a:	462b      	mov	r3, r5
 800834c:	f000 f866 	bl	800841c <TEXT_CreateUser>
 8008350:	b007      	add	sp, #28
 8008352:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008354 <TEXT_Callback>:
 8008354:	b530      	push	{r4, r5, lr}
 8008356:	6845      	ldr	r5, [r0, #4]
 8008358:	4604      	mov	r4, r0
 800835a:	b085      	sub	sp, #20
 800835c:	4628      	mov	r0, r5
 800835e:	4621      	mov	r1, r4
 8008360:	f7ff ff1c 	bl	800819c <WIDGET_HandleActive>
 8008364:	2800      	cmp	r0, #0
 8008366:	d056      	beq.n	8008416 <TEXT_Callback+0xc2>
 8008368:	6823      	ldr	r3, [r4, #0]
 800836a:	2b0f      	cmp	r3, #15
 800836c:	d01e      	beq.n	80083ac <TEXT_Callback+0x58>
 800836e:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8008372:	d00e      	beq.n	8008392 <TEXT_Callback+0x3e>
 8008374:	2b0b      	cmp	r3, #11
 8008376:	d14b      	bne.n	8008410 <TEXT_Callback+0xbc>
 8008378:	4628      	mov	r0, r5
 800837a:	f008 ff2b 	bl	80111d4 <GUI_ALLOC_LockH>
 800837e:	ad04      	add	r5, sp, #16
 8008380:	f845 0d08 	str.w	r0, [r5, #-8]!
 8008384:	3044      	adds	r0, #68	; 0x44
 8008386:	f009 f97d 	bl	8011684 <GUI_ALLOC_FreePtr>
 800838a:	4628      	mov	r0, r5
 800838c:	f008 ff30 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8008390:	e03e      	b.n	8008410 <TEXT_Callback+0xbc>
 8008392:	68e3      	ldr	r3, [r4, #12]
 8008394:	b12b      	cbz	r3, 80083a2 <TEXT_Callback+0x4e>
 8008396:	7a1b      	ldrb	r3, [r3, #8]
 8008398:	2b00      	cmp	r3, #0
 800839a:	bf0c      	ite	eq
 800839c:	2102      	moveq	r1, #2
 800839e:	2101      	movne	r1, #1
 80083a0:	e000      	b.n	80083a4 <TEXT_Callback+0x50>
 80083a2:	2103      	movs	r1, #3
 80083a4:	4628      	mov	r0, r5
 80083a6:	f001 fc14 	bl	8009bd2 <WM_NotifyParent>
 80083aa:	e031      	b.n	8008410 <TEXT_Callback+0xbc>
 80083ac:	4628      	mov	r0, r5
 80083ae:	f008 ff11 	bl	80111d4 <GUI_ALLOC_LockH>
 80083b2:	9000      	str	r0, [sp, #0]
 80083b4:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80083b6:	f005 fdeb 	bl	800df90 <LCD_SetColor>
 80083ba:	9b00      	ldr	r3, [sp, #0]
 80083bc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80083be:	f006 ff11 	bl	800f1e4 <GUI_SetFont>
 80083c2:	4628      	mov	r0, r5
 80083c4:	f001 fa94 	bl	80098f0 <WM_GetHasTrans>
 80083c8:	b928      	cbnz	r0, 80083d6 <TEXT_Callback+0x82>
 80083ca:	9b00      	ldr	r3, [sp, #0]
 80083cc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80083ce:	f005 fdd7 	bl	800df80 <LCD_SetBkColor>
 80083d2:	f007 fc13 	bl	800fbfc <GUI_Clear>
 80083d6:	9b00      	ldr	r3, [sp, #0]
 80083d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083da:	b1ab      	cbz	r3, 8008408 <TEXT_Callback+0xb4>
 80083dc:	2002      	movs	r0, #2
 80083de:	f006 fef7 	bl	800f1d0 <GUI_SetTextMode>
 80083e2:	a802      	add	r0, sp, #8
 80083e4:	f001 fd7c 	bl	8009ee0 <WM_GetClientRect>
 80083e8:	9b00      	ldr	r3, [sp, #0]
 80083ea:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80083ec:	f008 fef2 	bl	80111d4 <GUI_ALLOC_LockH>
 80083f0:	9b00      	ldr	r3, [sp, #0]
 80083f2:	9001      	str	r0, [sp, #4]
 80083f4:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 80083f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80083fc:	a902      	add	r1, sp, #8
 80083fe:	f007 f9a9 	bl	800f754 <GUI_DispStringInRectWrap>
 8008402:	a801      	add	r0, sp, #4
 8008404:	f008 fef4 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8008408:	4668      	mov	r0, sp
 800840a:	f008 fef1 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800840e:	e002      	b.n	8008416 <TEXT_Callback+0xc2>
 8008410:	4620      	mov	r0, r4
 8008412:	f002 fe6f 	bl	800b0f4 <WM_DefaultProc>
 8008416:	b005      	add	sp, #20
 8008418:	bd30      	pop	{r4, r5, pc}
	...

0800841c <TEXT_CreateUser>:
 800841c:	b570      	push	{r4, r5, r6, lr}
 800841e:	b086      	sub	sp, #24
 8008420:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008422:	9500      	str	r5, [sp, #0]
 8008424:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008426:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8008428:	f045 0501 	orr.w	r5, r5, #1
 800842c:	9501      	str	r5, [sp, #4]
 800842e:	4d1a      	ldr	r5, [pc, #104]	; (8008498 <TEXT_CreateUser+0x7c>)
 8008430:	9502      	str	r5, [sp, #8]
 8008432:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008434:	3520      	adds	r5, #32
 8008436:	9503      	str	r5, [sp, #12]
 8008438:	f002 fa7a 	bl	800a930 <WM_CreateWindowAsChild>
 800843c:	4605      	mov	r5, r0
 800843e:	b340      	cbz	r0, 8008492 <TEXT_CreateUser+0x76>
 8008440:	b18c      	cbz	r4, 8008466 <TEXT_CreateUser+0x4a>
 8008442:	4620      	mov	r0, r4
 8008444:	f7f7 fee4 	bl	8000210 <strlen>
 8008448:	3001      	adds	r0, #1
 800844a:	f009 f930 	bl	80116ae <GUI_ALLOC_AllocZero>
 800844e:	4606      	mov	r6, r0
 8008450:	b150      	cbz	r0, 8008468 <TEXT_CreateUser+0x4c>
 8008452:	f008 febf 	bl	80111d4 <GUI_ALLOC_LockH>
 8008456:	4621      	mov	r1, r4
 8008458:	9005      	str	r0, [sp, #20]
 800845a:	f00d f9ff 	bl	801585c <strcpy>
 800845e:	a805      	add	r0, sp, #20
 8008460:	f008 fec6 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8008464:	e000      	b.n	8008468 <TEXT_CreateUser+0x4c>
 8008466:	4626      	mov	r6, r4
 8008468:	4628      	mov	r0, r5
 800846a:	f008 feb3 	bl	80111d4 <GUI_ALLOC_LockH>
 800846e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008470:	9005      	str	r0, [sp, #20]
 8008472:	2200      	movs	r2, #0
 8008474:	f7ff fe8a 	bl	800818c <WIDGET__Init>
 8008478:	9c05      	ldr	r4, [sp, #20]
 800847a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800847c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 8008480:	4b06      	ldr	r3, [pc, #24]	; (800849c <TEXT_CreateUser+0x80>)
 8008482:	6466      	str	r6, [r4, #68]	; 0x44
 8008484:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008486:	3434      	adds	r4, #52	; 0x34
 8008488:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800848c:	a805      	add	r0, sp, #20
 800848e:	f008 feaf 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8008492:	4628      	mov	r0, r5
 8008494:	b006      	add	sp, #24
 8008496:	bd70      	pop	{r4, r5, r6, pc}
 8008498:	08008355 	.word	0x08008355
 800849c:	20000198 	.word	0x20000198

080084a0 <_GetImageSize>:
 80084a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80084a2:	460d      	mov	r5, r1
 80084a4:	4616      	mov	r6, r2
 80084a6:	f008 fe95 	bl	80111d4 <GUI_ALLOC_LockH>
 80084aa:	ab02      	add	r3, sp, #8
 80084ac:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80084ae:	f843 0d04 	str.w	r0, [r3, #-4]!
 80084b2:	4618      	mov	r0, r3
 80084b4:	f008 fe9c 	bl	80111f0 <GUI_ALLOC_UnlockH>
 80084b8:	4620      	mov	r0, r4
 80084ba:	f008 faf3 	bl	8010aa4 <GUI_BMP_GetXSize>
 80084be:	6028      	str	r0, [r5, #0]
 80084c0:	4620      	mov	r0, r4
 80084c2:	f008 fb13 	bl	8010aec <GUI_BMP_GetYSize>
 80084c6:	6030      	str	r0, [r6, #0]
 80084c8:	b002      	add	sp, #8
 80084ca:	bd70      	pop	{r4, r5, r6, pc}

080084cc <_DrawImageAt>:
 80084cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80084ce:	460d      	mov	r5, r1
 80084d0:	4614      	mov	r4, r2
 80084d2:	f008 fe7f 	bl	80111d4 <GUI_ALLOC_LockH>
 80084d6:	ab02      	add	r3, sp, #8
 80084d8:	6b86      	ldr	r6, [r0, #56]	; 0x38
 80084da:	f843 0d04 	str.w	r0, [r3, #-4]!
 80084de:	4618      	mov	r0, r3
 80084e0:	f008 fe86 	bl	80111f0 <GUI_ALLOC_UnlockH>
 80084e4:	4630      	mov	r0, r6
 80084e6:	4629      	mov	r1, r5
 80084e8:	4622      	mov	r2, r4
 80084ea:	f008 fd65 	bl	8010fb8 <GUI_BMP_Draw>
 80084ee:	b002      	add	sp, #8
 80084f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080084f4 <IMAGE_SetBMP>:
 80084f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80084f6:	460d      	mov	r5, r1
 80084f8:	4616      	mov	r6, r2
 80084fa:	4604      	mov	r4, r0
 80084fc:	b1c8      	cbz	r0, 8008532 <IMAGE_SetBMP+0x3e>
 80084fe:	b1c1      	cbz	r1, 8008532 <IMAGE_SetBMP+0x3e>
 8008500:	b1ba      	cbz	r2, 8008532 <IMAGE_SetBMP+0x3e>
 8008502:	f008 fe67 	bl	80111d4 <GUI_ALLOC_LockH>
 8008506:	4603      	mov	r3, r0
 8008508:	4a0b      	ldr	r2, [pc, #44]	; (8008538 <IMAGE_SetBMP+0x44>)
 800850a:	63da      	str	r2, [r3, #60]	; 0x3c
 800850c:	a802      	add	r0, sp, #8
 800850e:	4a0b      	ldr	r2, [pc, #44]	; (800853c <IMAGE_SetBMP+0x48>)
 8008510:	f840 3d04 	str.w	r3, [r0, #-4]!
 8008514:	639d      	str	r5, [r3, #56]	; 0x38
 8008516:	64de      	str	r6, [r3, #76]	; 0x4c
 8008518:	645a      	str	r2, [r3, #68]	; 0x44
 800851a:	f008 fe69 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800851e:	4620      	mov	r0, r4
 8008520:	2100      	movs	r1, #0
 8008522:	f000 f886 	bl	8008632 <IMAGE__FreeAttached>
 8008526:	4620      	mov	r0, r4
 8008528:	f000 f99e 	bl	8008868 <IMAGE__SetWindowSize>
 800852c:	4620      	mov	r0, r4
 800852e:	f002 f9be 	bl	800a8ae <WM_InvalidateWindow>
 8008532:	b002      	add	sp, #8
 8008534:	bd70      	pop	{r4, r5, r6, pc}
 8008536:	bf00      	nop
 8008538:	080084cd 	.word	0x080084cd
 800853c:	080084a1 	.word	0x080084a1

08008540 <_Paint>:
 8008540:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008542:	4606      	mov	r6, r0
 8008544:	f008 fe46 	bl	80111d4 <GUI_ALLOC_LockH>
 8008548:	4602      	mov	r2, r0
 800854a:	a802      	add	r0, sp, #8
 800854c:	6c55      	ldr	r5, [r2, #68]	; 0x44
 800854e:	f840 2d04 	str.w	r2, [r0, #-4]!
 8008552:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 8008554:	f008 fe4c 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8008558:	b125      	cbz	r5, 8008564 <_Paint+0x24>
 800855a:	b11c      	cbz	r4, 8008564 <_Paint+0x24>
 800855c:	2100      	movs	r1, #0
 800855e:	4630      	mov	r0, r6
 8008560:	460a      	mov	r2, r1
 8008562:	47a0      	blx	r4
 8008564:	b002      	add	sp, #8
 8008566:	bd70      	pop	{r4, r5, r6, pc}

08008568 <_PaintTiled>:
 8008568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800856c:	b085      	sub	sp, #20
 800856e:	4680      	mov	r8, r0
 8008570:	f008 fe30 	bl	80111d4 <GUI_ALLOC_LockH>
 8008574:	9001      	str	r0, [sp, #4]
 8008576:	f001 fc01 	bl	8009d7c <WM__GetWindowSizeX>
 800857a:	4681      	mov	r9, r0
 800857c:	9801      	ldr	r0, [sp, #4]
 800857e:	f001 fc04 	bl	8009d8a <WM__GetWindowSizeY>
 8008582:	4682      	mov	sl, r0
 8008584:	a804      	add	r0, sp, #16
 8008586:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 800858a:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 800858c:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 800858e:	f8d3 b034 	ldr.w	fp, [r3, #52]	; 0x34
 8008592:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008596:	f008 fe2b 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800859a:	2d00      	cmp	r5, #0
 800859c:	d046      	beq.n	800862c <_PaintTiled+0xc4>
 800859e:	2f00      	cmp	r7, #0
 80085a0:	d044      	beq.n	800862c <_PaintTiled+0xc4>
 80085a2:	4640      	mov	r0, r8
 80085a4:	a902      	add	r1, sp, #8
 80085a6:	aa03      	add	r2, sp, #12
 80085a8:	47a8      	blx	r5
 80085aa:	9b02      	ldr	r3, [sp, #8]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d03d      	beq.n	800862c <_PaintTiled+0xc4>
 80085b0:	9b03      	ldr	r3, [sp, #12]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d03a      	beq.n	800862c <_PaintTiled+0xc4>
 80085b6:	b144      	cbz	r4, 80085ca <_PaintTiled+0x62>
 80085b8:	4620      	mov	r0, r4
 80085ba:	f002 ffa9 	bl	800b510 <GUI_MEMDEV_GetXPos>
 80085be:	4605      	mov	r5, r0
 80085c0:	4620      	mov	r0, r4
 80085c2:	f002 ffbb 	bl	800b53c <GUI_MEMDEV_GetYPos>
 80085c6:	4606      	mov	r6, r0
 80085c8:	e001      	b.n	80085ce <_PaintTiled+0x66>
 80085ca:	4626      	mov	r6, r4
 80085cc:	4625      	mov	r5, r4
 80085ce:	f01b 0f01 	tst.w	fp, #1
 80085d2:	d003      	beq.n	80085dc <_PaintTiled+0x74>
 80085d4:	2d00      	cmp	r5, #0
 80085d6:	db01      	blt.n	80085dc <_PaintTiled+0x74>
 80085d8:	2e00      	cmp	r6, #0
 80085da:	da01      	bge.n	80085e0 <_PaintTiled+0x78>
 80085dc:	2500      	movs	r5, #0
 80085de:	e019      	b.n	8008614 <_PaintTiled+0xac>
 80085e0:	2100      	movs	r1, #0
 80085e2:	4640      	mov	r0, r8
 80085e4:	460a      	mov	r2, r1
 80085e6:	47b8      	blx	r7
 80085e8:	9f02      	ldr	r7, [sp, #8]
 80085ea:	454f      	cmp	r7, r9
 80085ec:	da06      	bge.n	80085fc <_PaintTiled+0x94>
 80085ee:	19e9      	adds	r1, r5, r7
 80085f0:	4620      	mov	r0, r4
 80085f2:	4632      	mov	r2, r6
 80085f4:	f002 fe50 	bl	800b298 <GUI_MEMDEV_WriteAt>
 80085f8:	007f      	lsls	r7, r7, #1
 80085fa:	e7f6      	b.n	80085ea <_PaintTiled+0x82>
 80085fc:	9f03      	ldr	r7, [sp, #12]
 80085fe:	4557      	cmp	r7, sl
 8008600:	da14      	bge.n	800862c <_PaintTiled+0xc4>
 8008602:	19f2      	adds	r2, r6, r7
 8008604:	4620      	mov	r0, r4
 8008606:	4629      	mov	r1, r5
 8008608:	f002 fe46 	bl	800b298 <GUI_MEMDEV_WriteAt>
 800860c:	007f      	lsls	r7, r7, #1
 800860e:	e7f6      	b.n	80085fe <_PaintTiled+0x96>
 8008610:	9b03      	ldr	r3, [sp, #12]
 8008612:	441d      	add	r5, r3
 8008614:	4555      	cmp	r5, sl
 8008616:	da09      	bge.n	800862c <_PaintTiled+0xc4>
 8008618:	2400      	movs	r4, #0
 800861a:	454c      	cmp	r4, r9
 800861c:	daf8      	bge.n	8008610 <_PaintTiled+0xa8>
 800861e:	4621      	mov	r1, r4
 8008620:	4640      	mov	r0, r8
 8008622:	462a      	mov	r2, r5
 8008624:	47b8      	blx	r7
 8008626:	9b02      	ldr	r3, [sp, #8]
 8008628:	441c      	add	r4, r3
 800862a:	e7f6      	b.n	800861a <_PaintTiled+0xb2>
 800862c:	b005      	add	sp, #20
 800862e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008632 <IMAGE__FreeAttached>:
 8008632:	b513      	push	{r0, r1, r4, lr}
 8008634:	460c      	mov	r4, r1
 8008636:	f008 fdcd 	bl	80111d4 <GUI_ALLOC_LockH>
 800863a:	9001      	str	r0, [sp, #4]
 800863c:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 8008640:	f003 fe34 	bl	800c2ac <GUI_MEMDEV_Delete>
 8008644:	9b01      	ldr	r3, [sp, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800864c:	b92c      	cbnz	r4, 800865a <IMAGE__FreeAttached+0x28>
 800864e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8008650:	b118      	cbz	r0, 800865a <IMAGE__FreeAttached+0x28>
 8008652:	f006 f97f 	bl	800e954 <GUI_TIMER_Delete>
 8008656:	9b01      	ldr	r3, [sp, #4]
 8008658:	659c      	str	r4, [r3, #88]	; 0x58
 800865a:	a801      	add	r0, sp, #4
 800865c:	f008 fdc8 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8008660:	b002      	add	sp, #8
 8008662:	bd10      	pop	{r4, pc}

08008664 <IMAGE_Callback>:
 8008664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008668:	6844      	ldr	r4, [r0, #4]
 800866a:	b08b      	sub	sp, #44	; 0x2c
 800866c:	4605      	mov	r5, r0
 800866e:	4620      	mov	r0, r4
 8008670:	f008 fdb0 	bl	80111d4 <GUI_ALLOC_LockH>
 8008674:	af0a      	add	r7, sp, #40	; 0x28
 8008676:	f8b0 c000 	ldrh.w	ip, [r0]
 800867a:	f847 0d04 	str.w	r0, [r7, #-4]!
 800867e:	8842      	ldrh	r2, [r0, #2]
 8008680:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8008682:	f8d0 b034 	ldr.w	fp, [r0, #52]	; 0x34
 8008686:	f8d0 8084 	ldr.w	r8, [r0, #132]	; 0x84
 800868a:	f8b0 9004 	ldrh.w	r9, [r0, #4]
 800868e:	f8b0 a006 	ldrh.w	sl, [r0, #6]
 8008692:	9205      	str	r2, [sp, #20]
 8008694:	4638      	mov	r0, r7
 8008696:	f8cd c010 	str.w	ip, [sp, #16]
 800869a:	f008 fda9 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800869e:	4620      	mov	r0, r4
 80086a0:	4629      	mov	r1, r5
 80086a2:	f7ff fd7b 	bl	800819c <WIDGET_HandleActive>
 80086a6:	9a05      	ldr	r2, [sp, #20]
 80086a8:	f8dd c010 	ldr.w	ip, [sp, #16]
 80086ac:	2800      	cmp	r0, #0
 80086ae:	f000 80ce 	beq.w	800884e <IMAGE_Callback+0x1ea>
 80086b2:	682b      	ldr	r3, [r5, #0]
 80086b4:	2b0b      	cmp	r3, #11
 80086b6:	f000 80c3 	beq.w	8008840 <IMAGE_Callback+0x1dc>
 80086ba:	dc04      	bgt.n	80086c6 <IMAGE_Callback+0x62>
 80086bc:	2b03      	cmp	r3, #3
 80086be:	d008      	beq.n	80086d2 <IMAGE_Callback+0x6e>
 80086c0:	2b05      	cmp	r3, #5
 80086c2:	d055      	beq.n	8008770 <IMAGE_Callback+0x10c>
 80086c4:	e0c0      	b.n	8008848 <IMAGE_Callback+0x1e4>
 80086c6:	2b0f      	cmp	r3, #15
 80086c8:	d055      	beq.n	8008776 <IMAGE_Callback+0x112>
 80086ca:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80086ce:	d042      	beq.n	8008756 <IMAGE_Callback+0xf2>
 80086d0:	e0ba      	b.n	8008848 <IMAGE_Callback+0x1e4>
 80086d2:	f1b8 0f00 	cmp.w	r8, #0
 80086d6:	f000 80b7 	beq.w	8008848 <IMAGE_Callback+0x1e4>
 80086da:	4e5e      	ldr	r6, [pc, #376]	; (8008854 <IMAGE_Callback+0x1f0>)
 80086dc:	f8d5 b00c 	ldr.w	fp, [r5, #12]
 80086e0:	6833      	ldr	r3, [r6, #0]
 80086e2:	4f5d      	ldr	r7, [pc, #372]	; (8008858 <IMAGE_Callback+0x1f4>)
 80086e4:	b10b      	cbz	r3, 80086ea <IMAGE_Callback+0x86>
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	b95b      	cbnz	r3, 8008702 <IMAGE_Callback+0x9e>
 80086ea:	9205      	str	r2, [sp, #20]
 80086ec:	f8cd c010 	str.w	ip, [sp, #16]
 80086f0:	f005 f826 	bl	800d740 <LCD_GetXSize>
 80086f4:	6030      	str	r0, [r6, #0]
 80086f6:	f005 f82b 	bl	800d750 <LCD_GetYSize>
 80086fa:	f8dd c010 	ldr.w	ip, [sp, #16]
 80086fe:	9a05      	ldr	r2, [sp, #20]
 8008700:	6038      	str	r0, [r7, #0]
 8008702:	f8db 1000 	ldr.w	r1, [fp]
 8008706:	2900      	cmp	r1, #0
 8008708:	dd04      	ble.n	8008714 <IMAGE_Callback+0xb0>
 800870a:	fa0f f38c 	sxth.w	r3, ip
 800870e:	1a5b      	subs	r3, r3, r1
 8008710:	2b00      	cmp	r3, #0
 8008712:	db2d      	blt.n	8008770 <IMAGE_Callback+0x10c>
 8008714:	f8db 3004 	ldr.w	r3, [fp, #4]
 8008718:	2b00      	cmp	r3, #0
 800871a:	dd03      	ble.n	8008724 <IMAGE_Callback+0xc0>
 800871c:	b210      	sxth	r0, r2
 800871e:	1ac0      	subs	r0, r0, r3
 8008720:	2800      	cmp	r0, #0
 8008722:	db25      	blt.n	8008770 <IMAGE_Callback+0x10c>
 8008724:	2900      	cmp	r1, #0
 8008726:	da06      	bge.n	8008736 <IMAGE_Callback+0xd2>
 8008728:	fa0f f989 	sxth.w	r9, r9
 800872c:	6830      	ldr	r0, [r6, #0]
 800872e:	ebc1 0109 	rsb	r1, r1, r9
 8008732:	4281      	cmp	r1, r0
 8008734:	dc1c      	bgt.n	8008770 <IMAGE_Callback+0x10c>
 8008736:	2b00      	cmp	r3, #0
 8008738:	da06      	bge.n	8008748 <IMAGE_Callback+0xe4>
 800873a:	fa0f fa8a 	sxth.w	sl, sl
 800873e:	6839      	ldr	r1, [r7, #0]
 8008740:	ebc3 030a 	rsb	r3, r3, sl
 8008744:	428b      	cmp	r3, r1
 8008746:	dc13      	bgt.n	8008770 <IMAGE_Callback+0x10c>
 8008748:	4640      	mov	r0, r8
 800874a:	fa0f f18c 	sxth.w	r1, ip
 800874e:	b212      	sxth	r2, r2
 8008750:	f002 fe9e 	bl	800b490 <GUI_MEMDEV_SetOrg>
 8008754:	e078      	b.n	8008848 <IMAGE_Callback+0x1e4>
 8008756:	68eb      	ldr	r3, [r5, #12]
 8008758:	b12b      	cbz	r3, 8008766 <IMAGE_Callback+0x102>
 800875a:	7a1b      	ldrb	r3, [r3, #8]
 800875c:	2b00      	cmp	r3, #0
 800875e:	bf0c      	ite	eq
 8008760:	2102      	moveq	r1, #2
 8008762:	2101      	movne	r1, #1
 8008764:	e000      	b.n	8008768 <IMAGE_Callback+0x104>
 8008766:	2103      	movs	r1, #3
 8008768:	4620      	mov	r0, r4
 800876a:	f001 fa32 	bl	8009bd2 <WM_NotifyParent>
 800876e:	e06b      	b.n	8008848 <IMAGE_Callback+0x1e4>
 8008770:	4620      	mov	r0, r4
 8008772:	2101      	movs	r1, #1
 8008774:	e066      	b.n	8008844 <IMAGE_Callback+0x1e0>
 8008776:	f1b8 0f00 	cmp.w	r8, #0
 800877a:	d001      	beq.n	8008780 <IMAGE_Callback+0x11c>
 800877c:	4640      	mov	r0, r8
 800877e:	e059      	b.n	8008834 <IMAGE_Callback+0x1d0>
 8008780:	f01b 0f01 	tst.w	fp, #1
 8008784:	d059      	beq.n	800883a <IMAGE_Callback+0x1d6>
 8008786:	f01b 0304 	ands.w	r3, fp, #4
 800878a:	fa0f f08c 	sxth.w	r0, ip
 800878e:	fa0f f989 	sxth.w	r9, r9
 8008792:	b211      	sxth	r1, r2
 8008794:	9306      	str	r3, [sp, #24]
 8008796:	fa0f fa8a 	sxth.w	sl, sl
 800879a:	ebc0 0209 	rsb	r2, r0, r9
 800879e:	d00d      	beq.n	80087bc <IMAGE_Callback+0x158>
 80087a0:	2301      	movs	r3, #1
 80087a2:	9300      	str	r3, [sp, #0]
 80087a4:	4b2d      	ldr	r3, [pc, #180]	; (800885c <IMAGE_Callback+0x1f8>)
 80087a6:	9301      	str	r3, [sp, #4]
 80087a8:	ebc1 0a0a 	rsb	sl, r1, sl
 80087ac:	4b2c      	ldr	r3, [pc, #176]	; (8008860 <IMAGE_Callback+0x1fc>)
 80087ae:	9302      	str	r3, [sp, #8]
 80087b0:	3201      	adds	r2, #1
 80087b2:	f10a 0301 	add.w	r3, sl, #1
 80087b6:	f002 fee6 	bl	800b586 <GUI_MEMDEV_CreateFixed>
 80087ba:	e005      	b.n	80087c8 <IMAGE_Callback+0x164>
 80087bc:	ebc1 030a 	rsb	r3, r1, sl
 80087c0:	3201      	adds	r2, #1
 80087c2:	3301      	adds	r3, #1
 80087c4:	f003 fdd0 	bl	800c368 <GUI_MEMDEV_Create>
 80087c8:	4605      	mov	r5, r0
 80087ca:	4620      	mov	r0, r4
 80087cc:	2d00      	cmp	r5, #0
 80087ce:	d035      	beq.n	800883c <IMAGE_Callback+0x1d8>
 80087d0:	f008 fd00 	bl	80111d4 <GUI_ALLOC_LockH>
 80087d4:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8008864 <IMAGE_Callback+0x200>
 80087d8:	9009      	str	r0, [sp, #36]	; 0x24
 80087da:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
 80087de:	4638      	mov	r0, r7
 80087e0:	f008 fd06 	bl	80111f0 <GUI_ALLOC_UnlockH>
 80087e4:	f8d9 3000 	ldr.w	r3, [r9]
 80087e8:	4628      	mov	r0, r5
 80087ea:	899a      	ldrh	r2, [r3, #12]
 80087ec:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 80087f0:	895f      	ldrh	r7, [r3, #10]
 80087f2:	f8b3 b00e 	ldrh.w	fp, [r3, #14]
 80087f6:	9207      	str	r2, [sp, #28]
 80087f8:	f003 fdbe 	bl	800c378 <GUI_MEMDEV_Select>
 80087fc:	9b06      	ldr	r3, [sp, #24]
 80087fe:	4682      	mov	sl, r0
 8008800:	b133      	cbz	r3, 8008810 <IMAGE_Callback+0x1ac>
 8008802:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8008806:	f006 fd19 	bl	800f23c <GUI_SetBkColor>
 800880a:	f007 f9f7 	bl	800fbfc <GUI_Clear>
 800880e:	e002      	b.n	8008816 <IMAGE_Callback+0x1b2>
 8008810:	4628      	mov	r0, r5
 8008812:	f002 fec1 	bl	800b598 <GUI_MEMDEV_Clear>
 8008816:	4620      	mov	r0, r4
 8008818:	47b0      	blx	r6
 800881a:	4650      	mov	r0, sl
 800881c:	f003 fdac 	bl	800c378 <GUI_MEMDEV_Select>
 8008820:	f8d9 3000 	ldr.w	r3, [r9]
 8008824:	9a07      	ldr	r2, [sp, #28]
 8008826:	f8a3 8008 	strh.w	r8, [r3, #8]
 800882a:	815f      	strh	r7, [r3, #10]
 800882c:	819a      	strh	r2, [r3, #12]
 800882e:	f8a3 b00e 	strh.w	fp, [r3, #14]
 8008832:	4628      	mov	r0, r5
 8008834:	f002 fd60 	bl	800b2f8 <GUI_MEMDEV_Write>
 8008838:	e009      	b.n	800884e <IMAGE_Callback+0x1ea>
 800883a:	4620      	mov	r0, r4
 800883c:	47b0      	blx	r6
 800883e:	e006      	b.n	800884e <IMAGE_Callback+0x1ea>
 8008840:	4620      	mov	r0, r4
 8008842:	2100      	movs	r1, #0
 8008844:	f7ff fef5 	bl	8008632 <IMAGE__FreeAttached>
 8008848:	4628      	mov	r0, r5
 800884a:	f002 fc53 	bl	800b0f4 <WM_DefaultProc>
 800884e:	b00b      	add	sp, #44	; 0x2c
 8008850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008854:	200193ec 	.word	0x200193ec
 8008858:	200193f0 	.word	0x200193f0
 800885c:	08017288 	.word	0x08017288
 8008860:	0801a7c8 	.word	0x0801a7c8
 8008864:	20000238 	.word	0x20000238

08008868 <IMAGE__SetWindowSize>:
 8008868:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800886a:	4604      	mov	r4, r0
 800886c:	f008 fcb2 	bl	80111d4 <GUI_ALLOC_LockH>
 8008870:	4602      	mov	r2, r0
 8008872:	a804      	add	r0, sp, #16
 8008874:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8008876:	f840 2d0c 	str.w	r2, [r0, #-12]!
 800887a:	6c55      	ldr	r5, [r2, #68]	; 0x44
 800887c:	f008 fcb8 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8008880:	06f3      	lsls	r3, r6, #27
 8008882:	d508      	bpl.n	8008896 <IMAGE__SetWindowSize+0x2e>
 8008884:	4620      	mov	r0, r4
 8008886:	a902      	add	r1, sp, #8
 8008888:	aa03      	add	r2, sp, #12
 800888a:	47a8      	blx	r5
 800888c:	4620      	mov	r0, r4
 800888e:	9902      	ldr	r1, [sp, #8]
 8008890:	9a03      	ldr	r2, [sp, #12]
 8008892:	f001 f836 	bl	8009902 <WM_SetSize>
 8008896:	b004      	add	sp, #16
 8008898:	bd70      	pop	{r4, r5, r6, pc}
	...

0800889c <IMAGE_CreateUser>:
 800889c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800889e:	b089      	sub	sp, #36	; 0x24
 80088a0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80088a2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80088a4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80088a6:	f015 0f08 	tst.w	r5, #8
 80088aa:	f047 0401 	orr.w	r4, r7, #1
 80088ae:	d016      	beq.n	80088de <IMAGE_CreateUser+0x42>
 80088b0:	4630      	mov	r0, r6
 80088b2:	a906      	add	r1, sp, #24
 80088b4:	f001 fb11 	bl	8009eda <WM_GetClientRectEx>
 80088b8:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80088bc:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 80088c0:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 80088c4:	1ad2      	subs	r2, r2, r3
 80088c6:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80088ca:	f447 64f0 	orr.w	r4, r7, #1920	; 0x780
 80088ce:	1acb      	subs	r3, r1, r3
 80088d0:	2100      	movs	r1, #0
 80088d2:	3201      	adds	r2, #1
 80088d4:	3301      	adds	r3, #1
 80088d6:	f044 0401 	orr.w	r4, r4, #1
 80088da:	4608      	mov	r0, r1
 80088dc:	e005      	b.n	80088ea <IMAGE_CreateUser+0x4e>
 80088de:	2a00      	cmp	r2, #0
 80088e0:	bf08      	it	eq
 80088e2:	2201      	moveq	r2, #1
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	bf08      	it	eq
 80088e8:	2301      	moveq	r3, #1
 80088ea:	9401      	str	r4, [sp, #4]
 80088ec:	4c0e      	ldr	r4, [pc, #56]	; (8008928 <IMAGE_CreateUser+0x8c>)
 80088ee:	9402      	str	r4, [sp, #8]
 80088f0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80088f2:	9600      	str	r6, [sp, #0]
 80088f4:	345c      	adds	r4, #92	; 0x5c
 80088f6:	9403      	str	r4, [sp, #12]
 80088f8:	f002 f81a 	bl	800a930 <WM_CreateWindowAsChild>
 80088fc:	4604      	mov	r4, r0
 80088fe:	b180      	cbz	r0, 8008922 <IMAGE_CreateUser+0x86>
 8008900:	f008 fc68 	bl	80111d4 <GUI_ALLOC_LockH>
 8008904:	2200      	movs	r2, #0
 8008906:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008908:	9005      	str	r0, [sp, #20]
 800890a:	f7ff fc3f 	bl	800818c <WIDGET__Init>
 800890e:	07aa      	lsls	r2, r5, #30
 8008910:	9b05      	ldr	r3, [sp, #20]
 8008912:	bf4c      	ite	mi
 8008914:	4a05      	ldrmi	r2, [pc, #20]	; (800892c <IMAGE_CreateUser+0x90>)
 8008916:	4a06      	ldrpl	r2, [pc, #24]	; (8008930 <IMAGE_CreateUser+0x94>)
 8008918:	635d      	str	r5, [r3, #52]	; 0x34
 800891a:	641a      	str	r2, [r3, #64]	; 0x40
 800891c:	a805      	add	r0, sp, #20
 800891e:	f008 fc67 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8008922:	4620      	mov	r0, r4
 8008924:	b009      	add	sp, #36	; 0x24
 8008926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008928:	08008665 	.word	0x08008665
 800892c:	08008569 	.word	0x08008569
 8008930:	08008541 	.word	0x08008541

08008934 <IMAGE_CreateIndirect>:
 8008934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008936:	b087      	sub	sp, #28
 8008938:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 800893c:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 8008940:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
 8008944:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 8008948:	9100      	str	r1, [sp, #0]
 800894a:	8a41      	ldrh	r1, [r0, #18]
 800894c:	9101      	str	r1, [sp, #4]
 800894e:	6944      	ldr	r4, [r0, #20]
 8008950:	9402      	str	r4, [sp, #8]
 8008952:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8008956:	9103      	str	r1, [sp, #12]
 8008958:	6984      	ldr	r4, [r0, #24]
 800895a:	9404      	str	r4, [sp, #16]
 800895c:	eb0e 0002 	add.w	r0, lr, r2
 8008960:	18f9      	adds	r1, r7, r3
 8008962:	4632      	mov	r2, r6
 8008964:	462b      	mov	r3, r5
 8008966:	f7ff ff99 	bl	800889c <IMAGE_CreateUser>
 800896a:	b007      	add	sp, #28
 800896c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800896e <EDIT_CreateIndirect>:
 800896e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008970:	b087      	sub	sp, #28
 8008972:	4604      	mov	r4, r0
 8008974:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 8008978:	9100      	str	r1, [sp, #0]
 800897a:	2100      	movs	r1, #0
 800897c:	6965      	ldr	r5, [r4, #20]
 800897e:	f9b4 e00c 	ldrsh.w	lr, [r4, #12]
 8008982:	f9b4 700e 	ldrsh.w	r7, [r4, #14]
 8008986:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
 800898a:	9101      	str	r1, [sp, #4]
 800898c:	8a61      	ldrh	r1, [r4, #18]
 800898e:	9102      	str	r1, [sp, #8]
 8008990:	9504      	str	r5, [sp, #16]
 8008992:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8008996:	69a5      	ldr	r5, [r4, #24]
 8008998:	9103      	str	r1, [sp, #12]
 800899a:	9505      	str	r5, [sp, #20]
 800899c:	4410      	add	r0, r2
 800899e:	eb0e 0103 	add.w	r1, lr, r3
 80089a2:	463a      	mov	r2, r7
 80089a4:	4633      	mov	r3, r6
 80089a6:	f000 fa13 	bl	8008dd0 <EDIT_CreateUser>
 80089aa:	4605      	mov	r5, r0
 80089ac:	b110      	cbz	r0, 80089b4 <EDIT_CreateIndirect+0x46>
 80089ae:	8a61      	ldrh	r1, [r4, #18]
 80089b0:	f000 fcab 	bl	800930a <EDIT_SetTextAlign>
 80089b4:	4628      	mov	r0, r5
 80089b6:	b007      	add	sp, #28
 80089b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080089bc <_Paint>:
 80089bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c0:	b08d      	sub	sp, #52	; 0x34
 80089c2:	2300      	movs	r3, #0
 80089c4:	4605      	mov	r5, r0
 80089c6:	460e      	mov	r6, r1
 80089c8:	9300      	str	r3, [sp, #0]
 80089ca:	f000 fecf 	bl	800976c <WM__IsEnabled>
 80089ce:	4604      	mov	r4, r0
 80089d0:	4628      	mov	r0, r5
 80089d2:	f008 fbff 	bl	80111d4 <GUI_ALLOC_LockH>
 80089d6:	9001      	str	r0, [sp, #4]
 80089d8:	b12e      	cbz	r6, 80089e6 <_Paint+0x2a>
 80089da:	f890 2056 	ldrb.w	r2, [r0, #86]	; 0x56
 80089de:	f042 0204 	orr.w	r2, r2, #4
 80089e2:	f880 2056 	strb.w	r2, [r0, #86]	; 0x56
 80089e6:	f104 021e 	add.w	r2, r4, #30
 80089ea:	f10d 0810 	add.w	r8, sp, #16
 80089ee:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80089f2:	f005 fac5 	bl	800df80 <LCD_SetBkColor>
 80089f6:	9b01      	ldr	r3, [sp, #4]
 80089f8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80089fc:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80089fe:	f005 fac7 	bl	800df90 <LCD_SetColor>
 8008a02:	9c01      	ldr	r4, [sp, #4]
 8008a04:	2300      	movs	r3, #0
 8008a06:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8008a08:	9302      	str	r3, [sp, #8]
 8008a0a:	f006 fbeb 	bl	800f1e4 <GUI_SetFont>
 8008a0e:	4620      	mov	r0, r4
 8008a10:	4641      	mov	r1, r8
 8008a12:	f7ff fb70 	bl	80080f6 <WIDGET__GetInsideRect>
 8008a16:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008a18:	b110      	cbz	r0, 8008a20 <_Paint+0x64>
 8008a1a:	f008 fbdb 	bl	80111d4 <GUI_ALLOC_LockH>
 8008a1e:	9002      	str	r0, [sp, #8]
 8008a20:	e898 0003 	ldmia.w	r8, {r0, r1}
 8008a24:	f10d 0a18 	add.w	sl, sp, #24
 8008a28:	e88a 0003 	stmia.w	sl, {r0, r1}
 8008a2c:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 8008a30:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8008a34:	9802      	ldr	r0, [sp, #8]
 8008a36:	441a      	add	r2, r3
 8008a38:	3201      	adds	r2, #1
 8008a3a:	f8ad 2018 	strh.w	r2, [sp, #24]
 8008a3e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8008a42:	3a01      	subs	r2, #1
 8008a44:	1ad3      	subs	r3, r2, r3
 8008a46:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
 8008a4a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8008a4e:	4651      	mov	r1, sl
 8008a50:	465a      	mov	r2, fp
 8008a52:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008a54:	f005 fc84 	bl	800e360 <GUI__CalcTextRect>
 8008a58:	8e65      	ldrh	r5, [r4, #50]	; 0x32
 8008a5a:	f015 0501 	ands.w	r5, r5, #1
 8008a5e:	d057      	beq.n	8008b10 <_Paint+0x154>
 8008a60:	f894 5055 	ldrb.w	r5, [r4, #85]	; 0x55
 8008a64:	9802      	ldr	r0, [sp, #8]
 8008a66:	2d00      	cmp	r5, #0
 8008a68:	bf08      	it	eq
 8008a6a:	2501      	moveq	r5, #1
 8008a6c:	f005 fc06 	bl	800e27c <GUI__GetNumChars>
 8008a70:	4681      	mov	r9, r0
 8008a72:	9802      	ldr	r0, [sp, #8]
 8008a74:	2800      	cmp	r0, #0
 8008a76:	d04b      	beq.n	8008b10 <_Paint+0x154>
 8008a78:	2300      	movs	r3, #0
 8008a7a:	9303      	str	r3, [sp, #12]
 8008a7c:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8008a80:	b913      	cbnz	r3, 8008a88 <_Paint+0xcc>
 8008a82:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008a84:	b323      	cbz	r3, 8008ad0 <_Paint+0x114>
 8008a86:	b31e      	cbz	r6, 8008ad0 <_Paint+0x114>
 8008a88:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 8008a8a:	454f      	cmp	r7, r9
 8008a8c:	da2a      	bge.n	8008ae4 <_Paint+0x128>
 8008a8e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008a90:	b1ab      	cbz	r3, 8008abe <_Paint+0x102>
 8008a92:	b1a6      	cbz	r6, 8008abe <_Paint+0x102>
 8008a94:	2500      	movs	r5, #0
 8008a96:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8008a98:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008a9a:	4413      	add	r3, r2
 8008a9c:	429f      	cmp	r7, r3
 8008a9e:	da0a      	bge.n	8008ab6 <_Paint+0xfa>
 8008aa0:	4639      	mov	r1, r7
 8008aa2:	464a      	mov	r2, r9
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	9802      	ldr	r0, [sp, #8]
 8008aa8:	f005 fc52 	bl	800e350 <GUI__GetCursorCharacter>
 8008aac:	f007 fbc2 	bl	8010234 <GUI_GetCharDistX>
 8008ab0:	3701      	adds	r7, #1
 8008ab2:	4405      	add	r5, r0
 8008ab4:	e7ef      	b.n	8008a96 <_Paint+0xda>
 8008ab6:	2d00      	cmp	r5, #0
 8008ab8:	bf08      	it	eq
 8008aba:	2501      	moveq	r5, #1
 8008abc:	e012      	b.n	8008ae4 <_Paint+0x128>
 8008abe:	4639      	mov	r1, r7
 8008ac0:	464a      	mov	r2, r9
 8008ac2:	ab03      	add	r3, sp, #12
 8008ac4:	f005 fc44 	bl	800e350 <GUI__GetCursorCharacter>
 8008ac8:	f007 fbb4 	bl	8010234 <GUI_GetCharDistX>
 8008acc:	4605      	mov	r5, r0
 8008ace:	e009      	b.n	8008ae4 <_Paint+0x128>
 8008ad0:	4b4c      	ldr	r3, [pc, #304]	; (8008c04 <_Paint+0x248>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d105      	bne.n	8008ae4 <_Paint+0x128>
 8008ad8:	4b4b      	ldr	r3, [pc, #300]	; (8008c08 <_Paint+0x24c>)
 8008ada:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4649      	mov	r1, r9
 8008ae0:	4798      	blx	r3
 8008ae2:	9003      	str	r0, [sp, #12]
 8008ae4:	e89b 0003 	ldmia.w	fp, {r0, r1}
 8008ae8:	ab08      	add	r3, sp, #32
 8008aea:	e883 0003 	stmia.w	r3, {r0, r1}
 8008aee:	9b03      	ldr	r3, [sp, #12]
 8008af0:	b123      	cbz	r3, 8008afc <_Paint+0x140>
 8008af2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8008af6:	1b5b      	subs	r3, r3, r5
 8008af8:	f8ad 3020 	strh.w	r3, [sp, #32]
 8008afc:	9802      	ldr	r0, [sp, #8]
 8008afe:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008b00:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 8008b04:	464a      	mov	r2, r9
 8008b06:	f005 fc0f 	bl	800e328 <GUI__GetCursorPosX>
 8008b0a:	4438      	add	r0, r7
 8008b0c:	f8ad 0020 	strh.w	r0, [sp, #32]
 8008b10:	9b02      	ldr	r3, [sp, #8]
 8008b12:	b113      	cbz	r3, 8008b1a <_Paint+0x15e>
 8008b14:	a802      	add	r0, sp, #8
 8008b16:	f008 fb6b 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8008b1a:	9b01      	ldr	r3, [sp, #4]
 8008b1c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008b1e:	b110      	cbz	r0, 8008b26 <_Paint+0x16a>
 8008b20:	f008 fb58 	bl	80111d4 <GUI_ALLOC_LockH>
 8008b24:	9000      	str	r0, [sp, #0]
 8008b26:	2000      	movs	r0, #0
 8008b28:	f002 f8fe 	bl	800ad28 <WM__InitIVRSearch>
 8008b2c:	b940      	cbnz	r0, 8008b40 <_Paint+0x184>
 8008b2e:	2e00      	cmp	r6, #0
 8008b30:	d05c      	beq.n	8008bec <_Paint+0x230>
 8008b32:	9b01      	ldr	r3, [sp, #4]
 8008b34:	2100      	movs	r1, #0
 8008b36:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8008b3a:	f000 fe6f 	bl	800981c <WM_RestartTimer>
 8008b3e:	e055      	b.n	8008bec <_Paint+0x230>
 8008b40:	4640      	mov	r0, r8
 8008b42:	f000 fea9 	bl	8009898 <WM_SetUserClipRect>
 8008b46:	b12e      	cbz	r6, 8008b54 <_Paint+0x198>
 8008b48:	9800      	ldr	r0, [sp, #0]
 8008b4a:	4641      	mov	r1, r8
 8008b4c:	4652      	mov	r2, sl
 8008b4e:	465b      	mov	r3, fp
 8008b50:	f008 fe6a 	bl	8011828 <WIDGET__FillStringInRect>
 8008b54:	9b01      	ldr	r3, [sp, #4]
 8008b56:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8008b58:	07d0      	lsls	r0, r2, #31
 8008b5a:	d53d      	bpl.n	8008bd8 <_Paint+0x21c>
 8008b5c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008b60:	0719      	lsls	r1, r3, #28
 8008b62:	d52f      	bpl.n	8008bc4 <_Paint+0x208>
 8008b64:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8008b68:	3b01      	subs	r3, #1
 8008b6a:	442b      	add	r3, r5
 8008b6c:	2000      	movs	r0, #0
 8008b6e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8008b72:	f000 fe91 	bl	8009898 <WM_SetUserClipRect>
 8008b76:	a808      	add	r0, sp, #32
 8008b78:	f000 fe8e 	bl	8009898 <WM_SetUserClipRect>
 8008b7c:	9b01      	ldr	r3, [sp, #4]
 8008b7e:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
 8008b82:	0752      	lsls	r2, r2, #29
 8008b84:	d507      	bpl.n	8008b96 <_Paint+0x1da>
 8008b86:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8008b88:	f006 fb5a 	bl	800f240 <GUI_SetColor>
 8008b8c:	9b01      	ldr	r3, [sp, #4]
 8008b8e:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8008b92:	f006 fb53 	bl	800f23c <GUI_SetBkColor>
 8008b96:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8008b9a:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8008b9e:	9800      	ldr	r0, [sp, #0]
 8008ba0:	f006 fe76 	bl	800f890 <GUI_DispStringAt>
 8008ba4:	2004      	movs	r0, #4
 8008ba6:	f006 fb27 	bl	800f1f8 <GUI_SetDrawMode>
 8008baa:	4b18      	ldr	r3, [pc, #96]	; (8008c0c <_Paint+0x250>)
 8008bac:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f9b3 0022 	ldrsh.w	r0, [r3, #34]	; 0x22
 8008bb6:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 8008bba:	1942      	adds	r2, r0, r5
 8008bbc:	3a01      	subs	r2, #1
 8008bbe:	f006 fd2d 	bl	800f61c <GUI_FillRect>
 8008bc2:	e009      	b.n	8008bd8 <_Paint+0x21c>
 8008bc4:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 8008bc8:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 8008bcc:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 8008bd0:	1942      	adds	r2, r0, r5
 8008bd2:	3a01      	subs	r2, #1
 8008bd4:	f006 fcd2 	bl	800f57c <GUI_InvertRect>
 8008bd8:	2000      	movs	r0, #0
 8008bda:	f000 fe5d 	bl	8009898 <WM_SetUserClipRect>
 8008bde:	b116      	cbz	r6, 8008be6 <_Paint+0x22a>
 8008be0:	9801      	ldr	r0, [sp, #4]
 8008be2:	f7ff fb95 	bl	8008310 <WIDGET__EFFECT_DrawDown>
 8008be6:	f001 ffdd 	bl	800aba4 <WM__GetNextIVR>
 8008bea:	e79f      	b.n	8008b2c <_Paint+0x170>
 8008bec:	a801      	add	r0, sp, #4
 8008bee:	f008 faff 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8008bf2:	9b00      	ldr	r3, [sp, #0]
 8008bf4:	b113      	cbz	r3, 8008bfc <_Paint+0x240>
 8008bf6:	4668      	mov	r0, sp
 8008bf8:	f008 fafa 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8008bfc:	b00d      	add	sp, #52	; 0x34
 8008bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c02:	bf00      	nop
 8008c04:	2001b274 	.word	0x2001b274
 8008c08:	2001b288 	.word	0x2001b288
 8008c0c:	20000238 	.word	0x20000238

08008c10 <_IncrementBuffer>:
 8008c10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008c14:	460e      	mov	r6, r1
 8008c16:	4680      	mov	r8, r0
 8008c18:	f008 fadc 	bl	80111d4 <GUI_ALLOC_LockH>
 8008c1c:	ac02      	add	r4, sp, #8
 8008c1e:	8f47      	ldrh	r7, [r0, #58]	; 0x3a
 8008c20:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8008c22:	f844 0d08 	str.w	r0, [r4, #-8]!
 8008c26:	4437      	add	r7, r6
 8008c28:	4668      	mov	r0, sp
 8008c2a:	f008 fae1 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8008c2e:	4628      	mov	r0, r5
 8008c30:	4639      	mov	r1, r7
 8008c32:	f006 fb80 	bl	800f336 <GUI_ALLOC_Realloc>
 8008c36:	4606      	mov	r6, r0
 8008c38:	b1a0      	cbz	r0, 8008c64 <_IncrementBuffer+0x54>
 8008c3a:	b945      	cbnz	r5, 8008c4e <_IncrementBuffer+0x3e>
 8008c3c:	f008 faca 	bl	80111d4 <GUI_ALLOC_LockH>
 8008c40:	4602      	mov	r2, r0
 8008c42:	a802      	add	r0, sp, #8
 8008c44:	f840 2d04 	str.w	r2, [r0, #-4]!
 8008c48:	7015      	strb	r5, [r2, #0]
 8008c4a:	f008 fad1 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8008c4e:	4640      	mov	r0, r8
 8008c50:	f008 fac0 	bl	80111d4 <GUI_ALLOC_LockH>
 8008c54:	9000      	str	r0, [sp, #0]
 8008c56:	8747      	strh	r7, [r0, #58]	; 0x3a
 8008c58:	6346      	str	r6, [r0, #52]	; 0x34
 8008c5a:	4668      	mov	r0, sp
 8008c5c:	f008 fac8 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8008c60:	2001      	movs	r0, #1
 8008c62:	e7ff      	b.n	8008c64 <_IncrementBuffer+0x54>
 8008c64:	b002      	add	sp, #8
 8008c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008c6a <_ChangeCharacter>:
 8008c6a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008c6e:	460d      	mov	r5, r1
 8008c70:	4606      	mov	r6, r0
 8008c72:	2100      	movs	r1, #0
 8008c74:	4628      	mov	r0, r5
 8008c76:	4690      	mov	r8, r2
 8008c78:	461f      	mov	r7, r3
 8008c7a:	f8ad 1004 	strh.w	r1, [sp, #4]
 8008c7e:	f88d 1006 	strb.w	r1, [sp, #6]
 8008c82:	f005 fd7d 	bl	800e780 <GUI_UC__CalcSizeOfChar>
 8008c86:	4445      	add	r5, r8
 8008c88:	b2ad      	uxth	r5, r5
 8008c8a:	4604      	mov	r4, r0
 8008c8c:	4628      	mov	r0, r5
 8008c8e:	f005 fd77 	bl	800e780 <GUI_UC__CalcSizeOfChar>
 8008c92:	4284      	cmp	r4, r0
 8008c94:	d10c      	bne.n	8008cb0 <_ChangeCharacter+0x46>
 8008c96:	4629      	mov	r1, r5
 8008c98:	a801      	add	r0, sp, #4
 8008c9a:	f005 fd69 	bl	800e770 <GUI_UC_Encode>
 8008c9e:	a901      	add	r1, sp, #4
 8008ca0:	4638      	mov	r0, r7
 8008ca2:	4622      	mov	r2, r4
 8008ca4:	f00c fcd5 	bl	8015652 <memcpy>
 8008ca8:	4630      	mov	r0, r6
 8008caa:	2105      	movs	r1, #5
 8008cac:	f000 ff91 	bl	8009bd2 <WM_NotifyParent>
 8008cb0:	b002      	add	sp, #8
 8008cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008cb6 <_IsSpaceInBuffer>:
 8008cb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008cb8:	4606      	mov	r6, r0
 8008cba:	460f      	mov	r7, r1
 8008cbc:	f008 fa8a 	bl	80111d4 <GUI_ALLOC_LockH>
 8008cc0:	9000      	str	r0, [sp, #0]
 8008cc2:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8008cc4:	b158      	cbz	r0, 8008cde <_IsSpaceInBuffer+0x28>
 8008cc6:	f008 fa85 	bl	80111d4 <GUI_ALLOC_LockH>
 8008cca:	ac02      	add	r4, sp, #8
 8008ccc:	f844 0d04 	str.w	r0, [r4, #-4]!
 8008cd0:	f7f7 fa9e 	bl	8000210 <strlen>
 8008cd4:	4605      	mov	r5, r0
 8008cd6:	4620      	mov	r0, r4
 8008cd8:	f008 fa8a 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8008cdc:	e000      	b.n	8008ce0 <_IsSpaceInBuffer+0x2a>
 8008cde:	4605      	mov	r5, r0
 8008ce0:	a802      	add	r0, sp, #8
 8008ce2:	197c      	adds	r4, r7, r5
 8008ce4:	f850 2d08 	ldr.w	r2, [r0, #-8]!
 8008ce8:	8f52      	ldrh	r2, [r2, #58]	; 0x3a
 8008cea:	3401      	adds	r4, #1
 8008cec:	1aa4      	subs	r4, r4, r2
 8008cee:	4668      	mov	r0, sp
 8008cf0:	f008 fa7e 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8008cf4:	2c00      	cmp	r4, #0
 8008cf6:	dd08      	ble.n	8008d0a <_IsSpaceInBuffer+0x54>
 8008cf8:	4630      	mov	r0, r6
 8008cfa:	f104 0110 	add.w	r1, r4, #16
 8008cfe:	f7ff ff87 	bl	8008c10 <_IncrementBuffer>
 8008d02:	3000      	adds	r0, #0
 8008d04:	bf18      	it	ne
 8008d06:	2001      	movne	r0, #1
 8008d08:	e000      	b.n	8008d0c <_IsSpaceInBuffer+0x56>
 8008d0a:	2001      	movs	r0, #1
 8008d0c:	b003      	add	sp, #12
 8008d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008d10 <_DeleteChar>:
 8008d10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d12:	4607      	mov	r7, r0
 8008d14:	f008 fa5e 	bl	80111d4 <GUI_ALLOC_LockH>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	a802      	add	r0, sp, #8
 8008d1c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8008d1e:	f840 2d08 	str.w	r2, [r0, #-8]!
 8008d22:	4668      	mov	r0, sp
 8008d24:	6cd6      	ldr	r6, [r2, #76]	; 0x4c
 8008d26:	f008 fa63 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8008d2a:	b314      	cbz	r4, 8008d72 <_DeleteChar+0x62>
 8008d2c:	4620      	mov	r0, r4
 8008d2e:	f008 fa51 	bl	80111d4 <GUI_ALLOC_LockH>
 8008d32:	ac02      	add	r4, sp, #8
 8008d34:	4631      	mov	r1, r6
 8008d36:	4605      	mov	r5, r0
 8008d38:	f844 0d04 	str.w	r0, [r4, #-4]!
 8008d3c:	f005 fd3c 	bl	800e7b8 <GUI_UC__NumChars2NumBytes>
 8008d40:	4606      	mov	r6, r0
 8008d42:	4628      	mov	r0, r5
 8008d44:	f7f7 fa64 	bl	8000210 <strlen>
 8008d48:	4286      	cmp	r6, r0
 8008d4a:	d20f      	bcs.n	8008d6c <_DeleteChar+0x5c>
 8008d4c:	4435      	add	r5, r6
 8008d4e:	4628      	mov	r0, r5
 8008d50:	f005 fcfe 	bl	800e750 <GUI_UC_GetCharSize>
 8008d54:	1829      	adds	r1, r5, r0
 8008d56:	4628      	mov	r0, r5
 8008d58:	f00c fd80 	bl	801585c <strcpy>
 8008d5c:	4620      	mov	r0, r4
 8008d5e:	f008 fa47 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8008d62:	4638      	mov	r0, r7
 8008d64:	2105      	movs	r1, #5
 8008d66:	f000 ff34 	bl	8009bd2 <WM_NotifyParent>
 8008d6a:	e002      	b.n	8008d72 <_DeleteChar+0x62>
 8008d6c:	4620      	mov	r0, r4
 8008d6e:	f008 fa3f 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8008d72:	b003      	add	sp, #12
 8008d74:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008d76 <EDIT__SetCursorPos>:
 8008d76:	b513      	push	{r0, r1, r4, lr}
 8008d78:	460c      	mov	r4, r1
 8008d7a:	f008 fa2b 	bl	80111d4 <GUI_ALLOC_LockH>
 8008d7e:	9000      	str	r0, [sp, #0]
 8008d80:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8008d82:	b1f8      	cbz	r0, 8008dc4 <EDIT__SetCursorPos+0x4e>
 8008d84:	f008 fa26 	bl	80111d4 <GUI_ALLOC_LockH>
 8008d88:	9001      	str	r0, [sp, #4]
 8008d8a:	f005 fa77 	bl	800e27c <GUI__GetNumChars>
 8008d8e:	9b00      	ldr	r3, [sp, #0]
 8008d90:	f9b3 1038 	ldrsh.w	r1, [r3, #56]	; 0x38
 8008d94:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8008d98:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8008d9c:	2a00      	cmp	r2, #0
 8008d9e:	bf0c      	ite	eq
 8008da0:	460a      	moveq	r2, r1
 8008da2:	1e4a      	subne	r2, r1, #1
 8008da4:	4294      	cmp	r4, r2
 8008da6:	bfa8      	it	ge
 8008da8:	4614      	movge	r4, r2
 8008daa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008dac:	4284      	cmp	r4, r0
 8008dae:	bfb8      	it	lt
 8008db0:	4620      	movlt	r0, r4
 8008db2:	4282      	cmp	r2, r0
 8008db4:	f04f 0200 	mov.w	r2, #0
 8008db8:	bf18      	it	ne
 8008dba:	64d8      	strne	r0, [r3, #76]	; 0x4c
 8008dbc:	651a      	str	r2, [r3, #80]	; 0x50
 8008dbe:	a801      	add	r0, sp, #4
 8008dc0:	f008 fa16 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8008dc4:	4668      	mov	r0, sp
 8008dc6:	f008 fa13 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8008dca:	b002      	add	sp, #8
 8008dcc:	bd10      	pop	{r4, pc}
	...

08008dd0 <EDIT_CreateUser>:
 8008dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dd4:	b086      	sub	sp, #24
 8008dd6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008dd8:	9400      	str	r4, [sp, #0]
 8008dda:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8008ddc:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8008de0:	f444 5480 	orr.w	r4, r4, #4096	; 0x1000
 8008de4:	9401      	str	r4, [sp, #4]
 8008de6:	4c21      	ldr	r4, [pc, #132]	; (8008e6c <EDIT_CreateUser+0x9c>)
 8008de8:	9402      	str	r4, [sp, #8]
 8008dea:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8008dec:	3460      	adds	r4, #96	; 0x60
 8008dee:	9403      	str	r4, [sp, #12]
 8008df0:	f001 fd9e 	bl	800a930 <WM_CreateWindowAsChild>
 8008df4:	4607      	mov	r7, r0
 8008df6:	2800      	cmp	r0, #0
 8008df8:	d034      	beq.n	8008e64 <EDIT_CreateUser+0x94>
 8008dfa:	f008 f9eb 	bl	80111d4 <GUI_ALLOC_LockH>
 8008dfe:	4d1c      	ldr	r5, [pc, #112]	; (8008e70 <EDIT_CreateUser+0xa0>)
 8008e00:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008e02:	9005      	str	r0, [sp, #20]
 8008e04:	2210      	movs	r2, #16
 8008e06:	f7ff f9c1 	bl	800818c <WIDGET__Init>
 8008e0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008e0c:	9e05      	ldr	r6, [sp, #20]
 8008e0e:	f106 0460 	add.w	r4, r6, #96	; 0x60
 8008e12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008e16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e18:	682b      	ldr	r3, [r5, #0]
 8008e1a:	6023      	str	r3, [r4, #0]
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	f886 3055 	strb.w	r3, [r6, #85]	; 0x55
 8008e22:	f118 0301 	adds.w	r3, r8, #1
 8008e26:	bf18      	it	ne
 8008e28:	2301      	movne	r3, #1
 8008e2a:	f1b8 0f00 	cmp.w	r8, #0
 8008e2e:	bfcc      	ite	gt
 8008e30:	fa1f f888 	uxthgt.w	r8, r8
 8008e34:	f04f 0808 	movle.w	r8, #8
 8008e38:	f886 3088 	strb.w	r3, [r6, #136]	; 0x88
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	8773      	strh	r3, [r6, #58]	; 0x3a
 8008e40:	6373      	str	r3, [r6, #52]	; 0x34
 8008e42:	f8a6 8038 	strh.w	r8, [r6, #56]	; 0x38
 8008e46:	a805      	add	r0, sp, #20
 8008e48:	f008 f9d2 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8008e4c:	fa0f f188 	sxth.w	r1, r8
 8008e50:	4638      	mov	r0, r7
 8008e52:	3101      	adds	r1, #1
 8008e54:	f7ff fedc 	bl	8008c10 <_IncrementBuffer>
 8008e58:	4604      	mov	r4, r0
 8008e5a:	b918      	cbnz	r0, 8008e64 <EDIT_CreateUser+0x94>
 8008e5c:	4638      	mov	r0, r7
 8008e5e:	f001 fe11 	bl	800aa84 <WM_DeleteWindow>
 8008e62:	4627      	mov	r7, r4
 8008e64:	4638      	mov	r0, r7
 8008e66:	b006      	add	sp, #24
 8008e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e6c:	08009111 	.word	0x08009111
 8008e70:	200001a8 	.word	0x200001a8

08008e74 <EDIT_SetCursorAtPixel>:
 8008e74:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008e78:	460f      	mov	r7, r1
 8008e7a:	4604      	mov	r4, r0
 8008e7c:	2800      	cmp	r0, #0
 8008e7e:	d04f      	beq.n	8008f20 <EDIT_SetCursorAtPixel+0xac>
 8008e80:	f008 f9a8 	bl	80111d4 <GUI_ALLOC_LockH>
 8008e84:	9001      	str	r0, [sp, #4]
 8008e86:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	d046      	beq.n	8008f1a <EDIT_SetCursorAtPixel+0xa6>
 8008e8c:	f008 f9a2 	bl	80111d4 <GUI_ALLOC_LockH>
 8008e90:	9b01      	ldr	r3, [sp, #4]
 8008e92:	9000      	str	r0, [sp, #0]
 8008e94:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8008e96:	f006 f9a5 	bl	800f1e4 <GUI_SetFont>
 8008e9a:	4680      	mov	r8, r0
 8008e9c:	4620      	mov	r0, r4
 8008e9e:	f000 ff7b 	bl	8009d98 <WM_GetWindowSizeX>
 8008ea2:	4605      	mov	r5, r0
 8008ea4:	9800      	ldr	r0, [sp, #0]
 8008ea6:	f006 fba1 	bl	800f5ec <GUI_GetStringDistX>
 8008eaa:	9b01      	ldr	r3, [sp, #4]
 8008eac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008eae:	f002 0203 	and.w	r2, r2, #3
 8008eb2:	2a01      	cmp	r2, #1
 8008eb4:	4606      	mov	r6, r0
 8008eb6:	d007      	beq.n	8008ec8 <EDIT_SetCursorAtPixel+0x54>
 8008eb8:	2a02      	cmp	r2, #2
 8008eba:	d109      	bne.n	8008ed0 <EDIT_SetCursorAtPixel+0x5c>
 8008ebc:	1a2d      	subs	r5, r5, r0
 8008ebe:	3501      	adds	r5, #1
 8008ec0:	fb95 f5f2 	sdiv	r5, r5, r2
 8008ec4:	1b7d      	subs	r5, r7, r5
 8008ec6:	e009      	b.n	8008edc <EDIT_SetCursorAtPixel+0x68>
 8008ec8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008eca:	1b45      	subs	r5, r0, r5
 8008ecc:	43db      	mvns	r3, r3
 8008ece:	e003      	b.n	8008ed8 <EDIT_SetCursorAtPixel+0x64>
 8008ed0:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8008ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	43ed      	mvns	r5, r5
 8008ed8:	1aed      	subs	r5, r5, r3
 8008eda:	443d      	add	r5, r7
 8008edc:	9800      	ldr	r0, [sp, #0]
 8008ede:	f005 f9cd 	bl	800e27c <GUI__GetNumChars>
 8008ee2:	2d00      	cmp	r5, #0
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	da02      	bge.n	8008eee <EDIT_SetCursorAtPixel+0x7a>
 8008ee8:	4620      	mov	r0, r4
 8008eea:	2100      	movs	r1, #0
 8008eec:	e00a      	b.n	8008f04 <EDIT_SetCursorAtPixel+0x90>
 8008eee:	42b5      	cmp	r5, r6
 8008ef0:	dd02      	ble.n	8008ef8 <EDIT_SetCursorAtPixel+0x84>
 8008ef2:	4620      	mov	r0, r4
 8008ef4:	4611      	mov	r1, r2
 8008ef6:	e005      	b.n	8008f04 <EDIT_SetCursorAtPixel+0x90>
 8008ef8:	4629      	mov	r1, r5
 8008efa:	9800      	ldr	r0, [sp, #0]
 8008efc:	f005 fa1e 	bl	800e33c <GUI__GetCursorPosChar>
 8008f00:	4601      	mov	r1, r0
 8008f02:	4620      	mov	r0, r4
 8008f04:	f7ff ff37 	bl	8008d76 <EDIT__SetCursorPos>
 8008f08:	4668      	mov	r0, sp
 8008f0a:	f008 f971 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8008f0e:	4640      	mov	r0, r8
 8008f10:	f006 f968 	bl	800f1e4 <GUI_SetFont>
 8008f14:	4620      	mov	r0, r4
 8008f16:	f001 fcca 	bl	800a8ae <WM_InvalidateWindow>
 8008f1a:	a801      	add	r0, sp, #4
 8008f1c:	f008 f968 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8008f20:	b002      	add	sp, #8
 8008f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008f26 <EDIT_AddKey>:
 8008f26:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f2a:	460d      	mov	r5, r1
 8008f2c:	4604      	mov	r4, r0
 8008f2e:	2800      	cmp	r0, #0
 8008f30:	f000 80eb 	beq.w	800910a <EDIT_AddKey+0x1e4>
 8008f34:	f008 f94e 	bl	80111d4 <GUI_ALLOC_LockH>
 8008f38:	af04      	add	r7, sp, #16
 8008f3a:	f8d0 9058 	ldr.w	r9, [r0, #88]	; 0x58
 8008f3e:	f847 0d0c 	str.w	r0, [r7, #-12]!
 8008f42:	f890 a054 	ldrb.w	sl, [r0, #84]	; 0x54
 8008f46:	f8d0 8034 	ldr.w	r8, [r0, #52]	; 0x34
 8008f4a:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
 8008f4c:	4638      	mov	r0, r7
 8008f4e:	f008 f94f 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8008f52:	f1b9 0f00 	cmp.w	r9, #0
 8008f56:	d003      	beq.n	8008f60 <EDIT_AddKey+0x3a>
 8008f58:	4620      	mov	r0, r4
 8008f5a:	4629      	mov	r1, r5
 8008f5c:	47c8      	blx	r9
 8008f5e:	e0d1      	b.n	8009104 <EDIT_AddKey+0x1de>
 8008f60:	2d12      	cmp	r5, #18
 8008f62:	f000 80cb 	beq.w	80090fc <EDIT_AddKey+0x1d6>
 8008f66:	dc05      	bgt.n	8008f74 <EDIT_AddKey+0x4e>
 8008f68:	2d10      	cmp	r5, #16
 8008f6a:	d03d      	beq.n	8008fe8 <EDIT_AddKey+0xc2>
 8008f6c:	dc09      	bgt.n	8008f82 <EDIT_AddKey+0x5c>
 8008f6e:	2d08      	cmp	r5, #8
 8008f70:	d03d      	beq.n	8008fee <EDIT_AddKey+0xc8>
 8008f72:	e05a      	b.n	800902a <EDIT_AddKey+0x104>
 8008f74:	2d1d      	cmp	r5, #29
 8008f76:	d045      	beq.n	8009004 <EDIT_AddKey+0xde>
 8008f78:	2d1e      	cmp	r5, #30
 8008f7a:	d03f      	beq.n	8008ffc <EDIT_AddKey+0xd6>
 8008f7c:	2d13      	cmp	r5, #19
 8008f7e:	d154      	bne.n	800902a <EDIT_AddKey+0x104>
 8008f80:	e015      	b.n	8008fae <EDIT_AddKey+0x88>
 8008f82:	f1b8 0f00 	cmp.w	r8, #0
 8008f86:	f000 80bd 	beq.w	8009104 <EDIT_AddKey+0x1de>
 8008f8a:	4640      	mov	r0, r8
 8008f8c:	f008 f922 	bl	80111d4 <GUI_ALLOC_LockH>
 8008f90:	ad04      	add	r5, sp, #16
 8008f92:	4631      	mov	r1, r6
 8008f94:	4607      	mov	r7, r0
 8008f96:	f845 0d04 	str.w	r0, [r5, #-4]!
 8008f9a:	f005 fc0d 	bl	800e7b8 <GUI_UC__NumChars2NumBytes>
 8008f9e:	183e      	adds	r6, r7, r0
 8008fa0:	4630      	mov	r0, r6
 8008fa2:	f005 fbdd 	bl	800e760 <GUI_UC_GetCharCode>
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	4601      	mov	r1, r0
 8008faa:	4620      	mov	r0, r4
 8008fac:	e015      	b.n	8008fda <EDIT_AddKey+0xb4>
 8008fae:	f1b8 0f00 	cmp.w	r8, #0
 8008fb2:	f000 80a7 	beq.w	8009104 <EDIT_AddKey+0x1de>
 8008fb6:	4640      	mov	r0, r8
 8008fb8:	f008 f90c 	bl	80111d4 <GUI_ALLOC_LockH>
 8008fbc:	ad04      	add	r5, sp, #16
 8008fbe:	4631      	mov	r1, r6
 8008fc0:	4607      	mov	r7, r0
 8008fc2:	f845 0d04 	str.w	r0, [r5, #-4]!
 8008fc6:	f005 fbf7 	bl	800e7b8 <GUI_UC__NumChars2NumBytes>
 8008fca:	183e      	adds	r6, r7, r0
 8008fcc:	4630      	mov	r0, r6
 8008fce:	f005 fbc7 	bl	800e760 <GUI_UC_GetCharCode>
 8008fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8008fd6:	4601      	mov	r1, r0
 8008fd8:	4620      	mov	r0, r4
 8008fda:	4633      	mov	r3, r6
 8008fdc:	f7ff fe45 	bl	8008c6a <_ChangeCharacter>
 8008fe0:	4628      	mov	r0, r5
 8008fe2:	f008 f905 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8008fe6:	e08d      	b.n	8009104 <EDIT_AddKey+0x1de>
 8008fe8:	4620      	mov	r0, r4
 8008fea:	1e71      	subs	r1, r6, #1
 8008fec:	e088      	b.n	8009100 <EDIT_AddKey+0x1da>
 8008fee:	2e00      	cmp	r6, #0
 8008ff0:	f000 8088 	beq.w	8009104 <EDIT_AddKey+0x1de>
 8008ff4:	4620      	mov	r0, r4
 8008ff6:	1e71      	subs	r1, r6, #1
 8008ff8:	f7ff febd 	bl	8008d76 <EDIT__SetCursorPos>
 8008ffc:	4620      	mov	r0, r4
 8008ffe:	f7ff fe87 	bl	8008d10 <_DeleteChar>
 8009002:	e07f      	b.n	8009104 <EDIT_AddKey+0x1de>
 8009004:	4620      	mov	r0, r4
 8009006:	f008 f8e5 	bl	80111d4 <GUI_ALLOC_LockH>
 800900a:	f1ba 0f01 	cmp.w	sl, #1
 800900e:	9001      	str	r0, [sp, #4]
 8009010:	d102      	bne.n	8009018 <EDIT_AddKey+0xf2>
 8009012:	f880 9054 	strb.w	r9, [r0, #84]	; 0x54
 8009016:	e006      	b.n	8009026 <EDIT_AddKey+0x100>
 8009018:	2301      	movs	r3, #1
 800901a:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
 800901e:	4631      	mov	r1, r6
 8009020:	4620      	mov	r0, r4
 8009022:	f7ff fea8 	bl	8008d76 <EDIT__SetCursorPos>
 8009026:	4638      	mov	r0, r7
 8009028:	e7db      	b.n	8008fe2 <EDIT_AddKey+0xbc>
 800902a:	2d1f      	cmp	r5, #31
 800902c:	dd6a      	ble.n	8009104 <EDIT_AddKey+0x1de>
 800902e:	f1ba 0f00 	cmp.w	sl, #0
 8009032:	d002      	beq.n	800903a <EDIT_AddKey+0x114>
 8009034:	4620      	mov	r0, r4
 8009036:	f7ff fe6b 	bl	8008d10 <_DeleteChar>
 800903a:	4620      	mov	r0, r4
 800903c:	f008 f8ca 	bl	80111d4 <GUI_ALLOC_LockH>
 8009040:	f9b0 3038 	ldrsh.w	r3, [r0, #56]	; 0x38
 8009044:	9002      	str	r0, [sp, #8]
 8009046:	2b00      	cmp	r3, #0
 8009048:	4607      	mov	r7, r0
 800904a:	dd18      	ble.n	800907e <EDIT_AddKey+0x158>
 800904c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800904e:	b160      	cbz	r0, 800906a <EDIT_AddKey+0x144>
 8009050:	f008 f8c0 	bl	80111d4 <GUI_ALLOC_LockH>
 8009054:	f10d 0810 	add.w	r8, sp, #16
 8009058:	f848 0d04 	str.w	r0, [r8, #-4]!
 800905c:	f005 f90e 	bl	800e27c <GUI__GetNumChars>
 8009060:	4681      	mov	r9, r0
 8009062:	4640      	mov	r0, r8
 8009064:	f008 f8c4 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8009068:	e000      	b.n	800906c <EDIT_AddKey+0x146>
 800906a:	4681      	mov	r9, r0
 800906c:	f9b7 8038 	ldrsh.w	r8, [r7, #56]	; 0x38
 8009070:	45c1      	cmp	r9, r8
 8009072:	bfac      	ite	ge
 8009074:	f04f 0800 	movge.w	r8, #0
 8009078:	f04f 0801 	movlt.w	r8, #1
 800907c:	e001      	b.n	8009082 <EDIT_AddKey+0x15c>
 800907e:	f04f 0801 	mov.w	r8, #1
 8009082:	af04      	add	r7, sp, #16
 8009084:	f857 3d08 	ldr.w	r3, [r7, #-8]!
 8009088:	4638      	mov	r0, r7
 800908a:	f8d3 a04c 	ldr.w	sl, [r3, #76]	; 0x4c
 800908e:	f008 f8af 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8009092:	f1b8 0f00 	cmp.w	r8, #0
 8009096:	d035      	beq.n	8009104 <EDIT_AddKey+0x1de>
 8009098:	fa1f f885 	uxth.w	r8, r5
 800909c:	4640      	mov	r0, r8
 800909e:	f005 fb6f 	bl	800e780 <GUI_UC__CalcSizeOfChar>
 80090a2:	4681      	mov	r9, r0
 80090a4:	4649      	mov	r1, r9
 80090a6:	4620      	mov	r0, r4
 80090a8:	f7ff fe05 	bl	8008cb6 <_IsSpaceInBuffer>
 80090ac:	b350      	cbz	r0, 8009104 <EDIT_AddKey+0x1de>
 80090ae:	4620      	mov	r0, r4
 80090b0:	f008 f890 	bl	80111d4 <GUI_ALLOC_LockH>
 80090b4:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80090b6:	9002      	str	r0, [sp, #8]
 80090b8:	4638      	mov	r0, r7
 80090ba:	f008 f899 	bl	80111f0 <GUI_ALLOC_UnlockH>
 80090be:	4628      	mov	r0, r5
 80090c0:	f008 f888 	bl	80111d4 <GUI_ALLOC_LockH>
 80090c4:	ad04      	add	r5, sp, #16
 80090c6:	4651      	mov	r1, sl
 80090c8:	4607      	mov	r7, r0
 80090ca:	f845 0d04 	str.w	r0, [r5, #-4]!
 80090ce:	f005 fb73 	bl	800e7b8 <GUI_UC__NumChars2NumBytes>
 80090d2:	4407      	add	r7, r0
 80090d4:	4638      	mov	r0, r7
 80090d6:	f7f7 f89b 	bl	8000210 <strlen>
 80090da:	4639      	mov	r1, r7
 80090dc:	1c42      	adds	r2, r0, #1
 80090de:	eb07 0009 	add.w	r0, r7, r9
 80090e2:	f00c fac1 	bl	8015668 <memmove>
 80090e6:	4641      	mov	r1, r8
 80090e8:	4638      	mov	r0, r7
 80090ea:	f005 fb41 	bl	800e770 <GUI_UC_Encode>
 80090ee:	4628      	mov	r0, r5
 80090f0:	f008 f87e 	bl	80111f0 <GUI_ALLOC_UnlockH>
 80090f4:	4620      	mov	r0, r4
 80090f6:	2105      	movs	r1, #5
 80090f8:	f000 fd6b 	bl	8009bd2 <WM_NotifyParent>
 80090fc:	4620      	mov	r0, r4
 80090fe:	1c71      	adds	r1, r6, #1
 8009100:	f7ff fe39 	bl	8008d76 <EDIT__SetCursorPos>
 8009104:	4620      	mov	r0, r4
 8009106:	f001 fbd2 	bl	800a8ae <WM_InvalidateWindow>
 800910a:	b004      	add	sp, #16
 800910c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009110 <EDIT_Callback>:
 8009110:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009112:	6844      	ldr	r4, [r0, #4]
 8009114:	4605      	mov	r5, r0
 8009116:	4620      	mov	r0, r4
 8009118:	f000 fb28 	bl	800976c <WM__IsEnabled>
 800911c:	4629      	mov	r1, r5
 800911e:	4606      	mov	r6, r0
 8009120:	4620      	mov	r0, r4
 8009122:	f7ff f83b 	bl	800819c <WIDGET_HandleActive>
 8009126:	2800      	cmp	r0, #0
 8009128:	d06b      	beq.n	8009202 <EDIT_Callback+0xf2>
 800912a:	682b      	ldr	r3, [r5, #0]
 800912c:	2b0f      	cmp	r3, #15
 800912e:	d040      	beq.n	80091b2 <EDIT_Callback+0xa2>
 8009130:	dc04      	bgt.n	800913c <EDIT_Callback+0x2c>
 8009132:	2b0b      	cmp	r3, #11
 8009134:	d042      	beq.n	80091bc <EDIT_Callback+0xac>
 8009136:	2b0e      	cmp	r3, #14
 8009138:	d04d      	beq.n	80091d6 <EDIT_Callback+0xc6>
 800913a:	e05f      	b.n	80091fc <EDIT_Callback+0xec>
 800913c:	f240 1213 	movw	r2, #275	; 0x113
 8009140:	4293      	cmp	r3, r2
 8009142:	d003      	beq.n	800914c <EDIT_Callback+0x3c>
 8009144:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8009148:	d021      	beq.n	800918e <EDIT_Callback+0x7e>
 800914a:	e057      	b.n	80091fc <EDIT_Callback+0xec>
 800914c:	4620      	mov	r0, r4
 800914e:	f001 fbcf 	bl	800a8f0 <WM_SelectWindow>
 8009152:	4620      	mov	r0, r4
 8009154:	f008 f83e 	bl	80111d4 <GUI_ALLOC_LockH>
 8009158:	ae02      	add	r6, sp, #8
 800915a:	f846 0d04 	str.w	r0, [r6, #-4]!
 800915e:	f890 3056 	ldrb.w	r3, [r0, #86]	; 0x56
 8009162:	f083 0304 	eor.w	r3, r3, #4
 8009166:	f880 3056 	strb.w	r3, [r0, #86]	; 0x56
 800916a:	4630      	mov	r0, r6
 800916c:	f008 f840 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8009170:	2100      	movs	r1, #0
 8009172:	4620      	mov	r0, r4
 8009174:	f7ff fc22 	bl	80089bc <_Paint>
 8009178:	4620      	mov	r0, r4
 800917a:	f008 f82b 	bl	80111d4 <GUI_ALLOC_LockH>
 800917e:	2100      	movs	r1, #0
 8009180:	9001      	str	r0, [sp, #4]
 8009182:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 8009186:	f000 fb49 	bl	800981c <WM_RestartTimer>
 800918a:	4630      	mov	r0, r6
 800918c:	e020      	b.n	80091d0 <EDIT_Callback+0xc0>
 800918e:	68eb      	ldr	r3, [r5, #12]
 8009190:	b153      	cbz	r3, 80091a8 <EDIT_Callback+0x98>
 8009192:	7a1a      	ldrb	r2, [r3, #8]
 8009194:	4620      	mov	r0, r4
 8009196:	b12a      	cbz	r2, 80091a4 <EDIT_Callback+0x94>
 8009198:	6819      	ldr	r1, [r3, #0]
 800919a:	f7ff fe6b 	bl	8008e74 <EDIT_SetCursorAtPixel>
 800919e:	4620      	mov	r0, r4
 80091a0:	2101      	movs	r1, #1
 80091a2:	e003      	b.n	80091ac <EDIT_Callback+0x9c>
 80091a4:	2102      	movs	r1, #2
 80091a6:	e001      	b.n	80091ac <EDIT_Callback+0x9c>
 80091a8:	4620      	mov	r0, r4
 80091aa:	2103      	movs	r1, #3
 80091ac:	f000 fd11 	bl	8009bd2 <WM_NotifyParent>
 80091b0:	e024      	b.n	80091fc <EDIT_Callback+0xec>
 80091b2:	4620      	mov	r0, r4
 80091b4:	2101      	movs	r1, #1
 80091b6:	f7ff fc01 	bl	80089bc <_Paint>
 80091ba:	e022      	b.n	8009202 <EDIT_Callback+0xf2>
 80091bc:	4620      	mov	r0, r4
 80091be:	f008 f809 	bl	80111d4 <GUI_ALLOC_LockH>
 80091c2:	ac02      	add	r4, sp, #8
 80091c4:	f844 0d04 	str.w	r0, [r4, #-4]!
 80091c8:	3034      	adds	r0, #52	; 0x34
 80091ca:	f008 fa5b 	bl	8011684 <GUI_ALLOC_FreePtr>
 80091ce:	4620      	mov	r0, r4
 80091d0:	f008 f80e 	bl	80111f0 <GUI_ALLOC_UnlockH>
 80091d4:	e012      	b.n	80091fc <EDIT_Callback+0xec>
 80091d6:	b18e      	cbz	r6, 80091fc <EDIT_Callback+0xec>
 80091d8:	68eb      	ldr	r3, [r5, #12]
 80091da:	685a      	ldr	r2, [r3, #4]
 80091dc:	2a00      	cmp	r2, #0
 80091de:	dd0d      	ble.n	80091fc <EDIT_Callback+0xec>
 80091e0:	6819      	ldr	r1, [r3, #0]
 80091e2:	f1a1 0309 	sub.w	r3, r1, #9
 80091e6:	2b19      	cmp	r3, #25
 80091e8:	d804      	bhi.n	80091f4 <EDIT_Callback+0xe4>
 80091ea:	2201      	movs	r2, #1
 80091ec:	409a      	lsls	r2, r3
 80091ee:	4b06      	ldr	r3, [pc, #24]	; (8009208 <EDIT_Callback+0xf8>)
 80091f0:	4013      	ands	r3, r2
 80091f2:	b91b      	cbnz	r3, 80091fc <EDIT_Callback+0xec>
 80091f4:	4620      	mov	r0, r4
 80091f6:	f7ff fe96 	bl	8008f26 <EDIT_AddKey>
 80091fa:	e002      	b.n	8009202 <EDIT_Callback+0xf2>
 80091fc:	4628      	mov	r0, r5
 80091fe:	f001 ff79 	bl	800b0f4 <WM_DefaultProc>
 8009202:	b002      	add	sp, #8
 8009204:	bd70      	pop	{r4, r5, r6, pc}
 8009206:	bf00      	nop
 8009208:	03040013 	.word	0x03040013

0800920c <EDIT_SetFont>:
 800920c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800920e:	460d      	mov	r5, r1
 8009210:	4606      	mov	r6, r0
 8009212:	b158      	cbz	r0, 800922c <EDIT_SetFont+0x20>
 8009214:	f007 ffde 	bl	80111d4 <GUI_ALLOC_LockH>
 8009218:	ac02      	add	r4, sp, #8
 800921a:	6685      	str	r5, [r0, #104]	; 0x68
 800921c:	f844 0d04 	str.w	r0, [r4, #-4]!
 8009220:	4630      	mov	r0, r6
 8009222:	f001 fb44 	bl	800a8ae <WM_InvalidateWindow>
 8009226:	4620      	mov	r0, r4
 8009228:	f007 ffe2 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800922c:	b002      	add	sp, #8
 800922e:	bd70      	pop	{r4, r5, r6, pc}

08009230 <EDIT_SetText>:
 8009230:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009234:	460c      	mov	r4, r1
 8009236:	4606      	mov	r6, r0
 8009238:	2800      	cmp	r0, #0
 800923a:	d063      	beq.n	8009304 <EDIT_SetText+0xd4>
 800923c:	f007 ffca 	bl	80111d4 <GUI_ALLOC_LockH>
 8009240:	ad02      	add	r5, sp, #8
 8009242:	6b47      	ldr	r7, [r0, #52]	; 0x34
 8009244:	f845 0d08 	str.w	r0, [r5, #-8]!
 8009248:	f8b0 8038 	ldrh.w	r8, [r0, #56]	; 0x38
 800924c:	4668      	mov	r0, sp
 800924e:	f007 ffcf 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8009252:	2c00      	cmp	r4, #0
 8009254:	d046      	beq.n	80092e4 <EDIT_SetText+0xb4>
 8009256:	b16f      	cbz	r7, 8009274 <EDIT_SetText+0x44>
 8009258:	4638      	mov	r0, r7
 800925a:	f007 ffbb 	bl	80111d4 <GUI_ALLOC_LockH>
 800925e:	af02      	add	r7, sp, #8
 8009260:	f847 0d04 	str.w	r0, [r7, #-4]!
 8009264:	f7f6 ffd4 	bl	8000210 <strlen>
 8009268:	f100 0901 	add.w	r9, r0, #1
 800926c:	4638      	mov	r0, r7
 800926e:	f007 ffbf 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8009272:	e000      	b.n	8009276 <EDIT_SetText+0x46>
 8009274:	46b9      	mov	r9, r7
 8009276:	4620      	mov	r0, r4
 8009278:	f005 f800 	bl	800e27c <GUI__GetNumChars>
 800927c:	fa0f f788 	sxth.w	r7, r8
 8009280:	42b8      	cmp	r0, r7
 8009282:	bfb8      	it	lt
 8009284:	4607      	movlt	r7, r0
 8009286:	4639      	mov	r1, r7
 8009288:	4620      	mov	r0, r4
 800928a:	f005 fa95 	bl	800e7b8 <GUI_UC__NumChars2NumBytes>
 800928e:	f100 0801 	add.w	r8, r0, #1
 8009292:	ebc9 0108 	rsb	r1, r9, r8
 8009296:	4630      	mov	r0, r6
 8009298:	f7ff fd0d 	bl	8008cb6 <_IsSpaceInBuffer>
 800929c:	2800      	cmp	r0, #0
 800929e:	d02e      	beq.n	80092fe <EDIT_SetText+0xce>
 80092a0:	4630      	mov	r0, r6
 80092a2:	f007 ff97 	bl	80111d4 <GUI_ALLOC_LockH>
 80092a6:	9000      	str	r0, [sp, #0]
 80092a8:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80092aa:	f007 ff93 	bl	80111d4 <GUI_ALLOC_LockH>
 80092ae:	4642      	mov	r2, r8
 80092b0:	4621      	mov	r1, r4
 80092b2:	9001      	str	r0, [sp, #4]
 80092b4:	f00c f9cd 	bl	8015652 <memcpy>
 80092b8:	9b01      	ldr	r3, [sp, #4]
 80092ba:	4443      	add	r3, r8
 80092bc:	2200      	movs	r2, #0
 80092be:	f803 2c01 	strb.w	r2, [r3, #-1]
 80092c2:	9b00      	ldr	r3, [sp, #0]
 80092c4:	f9b3 2038 	ldrsh.w	r2, [r3, #56]	; 0x38
 80092c8:	64df      	str	r7, [r3, #76]	; 0x4c
 80092ca:	4297      	cmp	r7, r2
 80092cc:	d106      	bne.n	80092dc <EDIT_SetText+0xac>
 80092ce:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80092d2:	2a01      	cmp	r2, #1
 80092d4:	bf04      	itt	eq
 80092d6:	f107 37ff 	addeq.w	r7, r7, #4294967295
 80092da:	64df      	streq	r7, [r3, #76]	; 0x4c
 80092dc:	a801      	add	r0, sp, #4
 80092de:	f007 ff87 	bl	80111f0 <GUI_ALLOC_UnlockH>
 80092e2:	e009      	b.n	80092f8 <EDIT_SetText+0xc8>
 80092e4:	4630      	mov	r0, r6
 80092e6:	f007 ff75 	bl	80111d4 <GUI_ALLOC_LockH>
 80092ea:	9000      	str	r0, [sp, #0]
 80092ec:	3034      	adds	r0, #52	; 0x34
 80092ee:	f008 f9c9 	bl	8011684 <GUI_ALLOC_FreePtr>
 80092f2:	9b00      	ldr	r3, [sp, #0]
 80092f4:	875c      	strh	r4, [r3, #58]	; 0x3a
 80092f6:	64dc      	str	r4, [r3, #76]	; 0x4c
 80092f8:	4668      	mov	r0, sp
 80092fa:	f007 ff79 	bl	80111f0 <GUI_ALLOC_UnlockH>
 80092fe:	4630      	mov	r0, r6
 8009300:	f001 fad5 	bl	800a8ae <WM_InvalidateWindow>
 8009304:	b003      	add	sp, #12
 8009306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800930a <EDIT_SetTextAlign>:
 800930a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800930c:	460c      	mov	r4, r1
 800930e:	4605      	mov	r5, r0
 8009310:	b150      	cbz	r0, 8009328 <EDIT_SetTextAlign+0x1e>
 8009312:	f007 ff5f 	bl	80111d4 <GUI_ALLOC_LockH>
 8009316:	9001      	str	r0, [sp, #4]
 8009318:	b118      	cbz	r0, 8009322 <EDIT_SetTextAlign+0x18>
 800931a:	6604      	str	r4, [r0, #96]	; 0x60
 800931c:	4628      	mov	r0, r5
 800931e:	f001 fac6 	bl	800a8ae <WM_InvalidateWindow>
 8009322:	a801      	add	r0, sp, #4
 8009324:	f007 ff64 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8009328:	b003      	add	sp, #12
 800932a:	bd30      	pop	{r4, r5, pc}

0800932c <GUI_CreateDialogBox>:
 800932c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009330:	4606      	mov	r6, r0
 8009332:	4688      	mov	r8, r1
 8009334:	4614      	mov	r4, r2
 8009336:	461d      	mov	r5, r3
 8009338:	b913      	cbnz	r3, 8009340 <GUI_CreateDialogBox+0x14>
 800933a:	f000 fda3 	bl	8009e84 <WM_GetDesktopWindow>
 800933e:	4605      	mov	r5, r0
 8009340:	9400      	str	r4, [sp, #0]
 8009342:	4630      	mov	r0, r6
 8009344:	6834      	ldr	r4, [r6, #0]
 8009346:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009348:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800934a:	4629      	mov	r1, r5
 800934c:	47a0      	blx	r4
 800934e:	4604      	mov	r4, r0
 8009350:	2800      	cmp	r0, #0
 8009352:	d039      	beq.n	80093c8 <GUI_CreateDialogBox+0x9c>
 8009354:	f000 fda2 	bl	8009e9c <WM_GetClientWindow>
 8009358:	8a71      	ldrh	r1, [r6, #18]
 800935a:	4607      	mov	r7, r0
 800935c:	4620      	mov	r0, r4
 800935e:	f7fe fee9 	bl	8008134 <WIDGET_OrState>
 8009362:	4620      	mov	r0, r4
 8009364:	f000 fa83 	bl	800986e <WM_ShowWindow>
 8009368:	4638      	mov	r0, r7
 800936a:	f108 38ff 	add.w	r8, r8, #4294967295
 800936e:	f000 fa7e 	bl	800986e <WM_ShowWindow>
 8009372:	f1b8 0f00 	cmp.w	r8, #0
 8009376:	dd0f      	ble.n	8009398 <GUI_CreateDialogBox+0x6c>
 8009378:	f856 cf1c 	ldr.w	ip, [r6, #28]!
 800937c:	2200      	movs	r2, #0
 800937e:	9200      	str	r2, [sp, #0]
 8009380:	4630      	mov	r0, r6
 8009382:	4639      	mov	r1, r7
 8009384:	4613      	mov	r3, r2
 8009386:	47e0      	blx	ip
 8009388:	4681      	mov	r9, r0
 800938a:	2800      	cmp	r0, #0
 800938c:	d1ed      	bne.n	800936a <GUI_CreateDialogBox+0x3e>
 800938e:	4620      	mov	r0, r4
 8009390:	f001 fb78 	bl	800aa84 <WM_DeleteWindow>
 8009394:	4648      	mov	r0, r9
 8009396:	e018      	b.n	80093ca <GUI_CreateDialogBox+0x9e>
 8009398:	4638      	mov	r0, r7
 800939a:	211d      	movs	r1, #29
 800939c:	f000 fb9c 	bl	8009ad8 <WM_SendMessageNoPara>
 80093a0:	1c6b      	adds	r3, r5, #1
 80093a2:	d011      	beq.n	80093c8 <GUI_CreateDialogBox+0x9c>
 80093a4:	f000 fd3a 	bl	8009e1c <WM_GetFocussedWindow>
 80093a8:	b150      	cbz	r0, 80093c0 <GUI_CreateDialogBox+0x94>
 80093aa:	f007 ff09 	bl	80111c0 <GUI_ALLOC_h2p>
 80093ae:	6980      	ldr	r0, [r0, #24]
 80093b0:	42a0      	cmp	r0, r4
 80093b2:	d00a      	beq.n	80093ca <GUI_CreateDialogBox+0x9e>
 80093b4:	2800      	cmp	r0, #0
 80093b6:	d1f8      	bne.n	80093aa <GUI_CreateDialogBox+0x7e>
 80093b8:	4620      	mov	r0, r4
 80093ba:	f000 fb05 	bl	80099c8 <WM_SetFocusOnNextChild>
 80093be:	e003      	b.n	80093c8 <GUI_CreateDialogBox+0x9c>
 80093c0:	42a5      	cmp	r5, r4
 80093c2:	d1f9      	bne.n	80093b8 <GUI_CreateDialogBox+0x8c>
 80093c4:	4628      	mov	r0, r5
 80093c6:	e000      	b.n	80093ca <GUI_CreateDialogBox+0x9e>
 80093c8:	4620      	mov	r0, r4
 80093ca:	b003      	add	sp, #12
 80093cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080093d0 <BUTTON_CreateIndirect>:
 80093d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093d2:	b087      	sub	sp, #28
 80093d4:	4604      	mov	r4, r0
 80093d6:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 80093da:	9100      	str	r1, [sp, #0]
 80093dc:	2100      	movs	r1, #0
 80093de:	f9b4 e00c 	ldrsh.w	lr, [r4, #12]
 80093e2:	f9b4 700e 	ldrsh.w	r7, [r4, #14]
 80093e6:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
 80093ea:	9101      	str	r1, [sp, #4]
 80093ec:	8a61      	ldrh	r1, [r4, #18]
 80093ee:	69a5      	ldr	r5, [r4, #24]
 80093f0:	9102      	str	r1, [sp, #8]
 80093f2:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80093f6:	9103      	str	r1, [sp, #12]
 80093f8:	9504      	str	r5, [sp, #16]
 80093fa:	eb0e 0103 	add.w	r1, lr, r3
 80093fe:	4410      	add	r0, r2
 8009400:	4633      	mov	r3, r6
 8009402:	463a      	mov	r2, r7
 8009404:	f000 f8ce 	bl	80095a4 <BUTTON_CreateUser>
 8009408:	6861      	ldr	r1, [r4, #4]
 800940a:	4605      	mov	r5, r0
 800940c:	f000 f902 	bl	8009614 <BUTTON_SetText>
 8009410:	4628      	mov	r0, r5
 8009412:	b007      	add	sp, #28
 8009414:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009416 <_OnButtonPressed>:
 8009416:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009418:	f44f 7180 	mov.w	r1, #256	; 0x100
 800941c:	4604      	mov	r4, r0
 800941e:	f7fe fe89 	bl	8008134 <WIDGET_OrState>
 8009422:	4620      	mov	r0, r4
 8009424:	f007 fed6 	bl	80111d4 <GUI_ALLOC_LockH>
 8009428:	ab02      	add	r3, sp, #8
 800942a:	6a85      	ldr	r5, [r0, #40]	; 0x28
 800942c:	f843 0d04 	str.w	r0, [r3, #-4]!
 8009430:	4618      	mov	r0, r3
 8009432:	f007 fedd 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8009436:	07ab      	lsls	r3, r5, #30
 8009438:	d503      	bpl.n	8009442 <_OnButtonPressed+0x2c>
 800943a:	4620      	mov	r0, r4
 800943c:	2101      	movs	r1, #1
 800943e:	f000 fbc8 	bl	8009bd2 <WM_NotifyParent>
 8009442:	b003      	add	sp, #12
 8009444:	bd30      	pop	{r4, r5, pc}

08009446 <_OnButtonReleased>:
 8009446:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009448:	4605      	mov	r5, r0
 800944a:	460c      	mov	r4, r1
 800944c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009450:	f7fe fe86 	bl	8008160 <WIDGET_AndState>
 8009454:	4628      	mov	r0, r5
 8009456:	f007 febd 	bl	80111d4 <GUI_ALLOC_LockH>
 800945a:	4602      	mov	r2, r0
 800945c:	a802      	add	r0, sp, #8
 800945e:	6a96      	ldr	r6, [r2, #40]	; 0x28
 8009460:	f840 2d04 	str.w	r2, [r0, #-4]!
 8009464:	8e17      	ldrh	r7, [r2, #48]	; 0x30
 8009466:	f007 fec3 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800946a:	2c02      	cmp	r4, #2
 800946c:	d102      	bne.n	8009474 <_OnButtonReleased+0x2e>
 800946e:	4638      	mov	r0, r7
 8009470:	f006 f824 	bl	800f4bc <GUI_StoreKey>
 8009474:	07b3      	lsls	r3, r6, #30
 8009476:	d503      	bpl.n	8009480 <_OnButtonReleased+0x3a>
 8009478:	4628      	mov	r0, r5
 800947a:	4621      	mov	r1, r4
 800947c:	f000 fba9 	bl	8009bd2 <WM_NotifyParent>
 8009480:	b003      	add	sp, #12
 8009482:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009484 <_OnTouchDefault>:
 8009484:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009486:	460d      	mov	r5, r1
 8009488:	4604      	mov	r4, r0
 800948a:	f007 fea3 	bl	80111d4 <GUI_ALLOC_LockH>
 800948e:	ab02      	add	r3, sp, #8
 8009490:	8e46      	ldrh	r6, [r0, #50]	; 0x32
 8009492:	f843 0d04 	str.w	r0, [r3, #-4]!
 8009496:	4618      	mov	r0, r3
 8009498:	f007 feaa 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800949c:	68ea      	ldr	r2, [r5, #12]
 800949e:	b162      	cbz	r2, 80094ba <_OnTouchDefault+0x36>
 80094a0:	7a12      	ldrb	r2, [r2, #8]
 80094a2:	f406 7380 	and.w	r3, r6, #256	; 0x100
 80094a6:	b122      	cbz	r2, 80094b2 <_OnTouchDefault+0x2e>
 80094a8:	b95b      	cbnz	r3, 80094c2 <_OnTouchDefault+0x3e>
 80094aa:	4620      	mov	r0, r4
 80094ac:	f7ff ffb3 	bl	8009416 <_OnButtonPressed>
 80094b0:	e007      	b.n	80094c2 <_OnTouchDefault+0x3e>
 80094b2:	b133      	cbz	r3, 80094c2 <_OnTouchDefault+0x3e>
 80094b4:	4620      	mov	r0, r4
 80094b6:	2102      	movs	r1, #2
 80094b8:	e001      	b.n	80094be <_OnTouchDefault+0x3a>
 80094ba:	4620      	mov	r0, r4
 80094bc:	2103      	movs	r1, #3
 80094be:	f7ff ffc2 	bl	8009446 <_OnButtonReleased>
 80094c2:	b002      	add	sp, #8
 80094c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080094c8 <BUTTON_Callback>:
 80094c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80094ca:	6844      	ldr	r4, [r0, #4]
 80094cc:	4605      	mov	r5, r0
 80094ce:	4629      	mov	r1, r5
 80094d0:	4620      	mov	r0, r4
 80094d2:	f7fe fe63 	bl	800819c <WIDGET_HandleActive>
 80094d6:	2800      	cmp	r0, #0
 80094d8:	d05d      	beq.n	8009596 <BUTTON_Callback+0xce>
 80094da:	682b      	ldr	r3, [r5, #0]
 80094dc:	2b0f      	cmp	r3, #15
 80094de:	d016      	beq.n	800950e <BUTTON_Callback+0x46>
 80094e0:	dc04      	bgt.n	80094ec <BUTTON_Callback+0x24>
 80094e2:	2b0b      	cmp	r3, #11
 80094e4:	d023      	beq.n	800952e <BUTTON_Callback+0x66>
 80094e6:	2b0e      	cmp	r3, #14
 80094e8:	d033      	beq.n	8009552 <BUTTON_Callback+0x8a>
 80094ea:	e051      	b.n	8009590 <BUTTON_Callback+0xc8>
 80094ec:	2b28      	cmp	r3, #40	; 0x28
 80094ee:	d048      	beq.n	8009582 <BUTTON_Callback+0xba>
 80094f0:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80094f4:	d005      	beq.n	8009502 <BUTTON_Callback+0x3a>
 80094f6:	2b11      	cmp	r3, #17
 80094f8:	d14a      	bne.n	8009590 <BUTTON_Callback+0xc8>
 80094fa:	4b28      	ldr	r3, [pc, #160]	; (800959c <BUTTON_Callback+0xd4>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	b913      	cbnz	r3, 8009506 <BUTTON_Callback+0x3e>
 8009500:	e049      	b.n	8009596 <BUTTON_Callback+0xce>
 8009502:	4b27      	ldr	r3, [pc, #156]	; (80095a0 <BUTTON_Callback+0xd8>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4620      	mov	r0, r4
 8009508:	4629      	mov	r1, r5
 800950a:	4798      	blx	r3
 800950c:	e043      	b.n	8009596 <BUTTON_Callback+0xce>
 800950e:	4620      	mov	r0, r4
 8009510:	f007 fe60 	bl	80111d4 <GUI_ALLOC_LockH>
 8009514:	ab02      	add	r3, sp, #8
 8009516:	f843 0d04 	str.w	r0, [r3, #-4]!
 800951a:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800951c:	6815      	ldr	r5, [r2, #0]
 800951e:	4618      	mov	r0, r3
 8009520:	f007 fe66 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8009524:	2d00      	cmp	r5, #0
 8009526:	d036      	beq.n	8009596 <BUTTON_Callback+0xce>
 8009528:	4620      	mov	r0, r4
 800952a:	47a8      	blx	r5
 800952c:	e033      	b.n	8009596 <BUTTON_Callback+0xce>
 800952e:	4620      	mov	r0, r4
 8009530:	f007 fe50 	bl	80111d4 <GUI_ALLOC_LockH>
 8009534:	ac02      	add	r4, sp, #8
 8009536:	9001      	str	r0, [sp, #4]
 8009538:	3068      	adds	r0, #104	; 0x68
 800953a:	f008 f8a3 	bl	8011684 <GUI_ALLOC_FreePtr>
 800953e:	f854 0d04 	ldr.w	r0, [r4, #-4]!
 8009542:	2103      	movs	r1, #3
 8009544:	306c      	adds	r0, #108	; 0x6c
 8009546:	f008 f8a5 	bl	8011694 <GUI_ALLOC_FreePtrArray>
 800954a:	4620      	mov	r0, r4
 800954c:	f007 fe50 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8009550:	e01e      	b.n	8009590 <BUTTON_Callback+0xc8>
 8009552:	68ea      	ldr	r2, [r5, #12]
 8009554:	ca0c      	ldmia	r2, {r2, r3}
 8009556:	2a0d      	cmp	r2, #13
 8009558:	d002      	beq.n	8009560 <BUTTON_Callback+0x98>
 800955a:	2a20      	cmp	r2, #32
 800955c:	d007      	beq.n	800956e <BUTTON_Callback+0xa6>
 800955e:	e010      	b.n	8009582 <BUTTON_Callback+0xba>
 8009560:	2b00      	cmp	r3, #0
 8009562:	dd0e      	ble.n	8009582 <BUTTON_Callback+0xba>
 8009564:	4620      	mov	r0, r4
 8009566:	f7ff ff56 	bl	8009416 <_OnButtonPressed>
 800956a:	4620      	mov	r0, r4
 800956c:	e005      	b.n	800957a <BUTTON_Callback+0xb2>
 800956e:	2b00      	cmp	r3, #0
 8009570:	4620      	mov	r0, r4
 8009572:	dd02      	ble.n	800957a <BUTTON_Callback+0xb2>
 8009574:	f7ff ff4f 	bl	8009416 <_OnButtonPressed>
 8009578:	e00d      	b.n	8009596 <BUTTON_Callback+0xce>
 800957a:	2102      	movs	r1, #2
 800957c:	f7ff ff63 	bl	8009446 <_OnButtonReleased>
 8009580:	e009      	b.n	8009596 <BUTTON_Callback+0xce>
 8009582:	68eb      	ldr	r3, [r5, #12]
 8009584:	b923      	cbnz	r3, 8009590 <BUTTON_Callback+0xc8>
 8009586:	4620      	mov	r0, r4
 8009588:	f44f 7180 	mov.w	r1, #256	; 0x100
 800958c:	f7fe fde8 	bl	8008160 <WIDGET_AndState>
 8009590:	4628      	mov	r0, r5
 8009592:	f001 fdaf 	bl	800b0f4 <WM_DefaultProc>
 8009596:	b003      	add	sp, #12
 8009598:	bd30      	pop	{r4, r5, pc}
 800959a:	bf00      	nop
 800959c:	200193f4 	.word	0x200193f4
 80095a0:	200001cc 	.word	0x200001cc

080095a4 <BUTTON_CreateUser>:
 80095a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095a6:	b087      	sub	sp, #28
 80095a8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80095aa:	9400      	str	r4, [sp, #0]
 80095ac:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80095ae:	9401      	str	r4, [sp, #4]
 80095b0:	4c15      	ldr	r4, [pc, #84]	; (8009608 <BUTTON_CreateUser+0x64>)
 80095b2:	9402      	str	r4, [sp, #8]
 80095b4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80095b6:	344c      	adds	r4, #76	; 0x4c
 80095b8:	9403      	str	r4, [sp, #12]
 80095ba:	f001 f9b9 	bl	800a930 <WM_CreateWindowAsChild>
 80095be:	4607      	mov	r7, r0
 80095c0:	b1f8      	cbz	r0, 8009602 <BUTTON_CreateUser+0x5e>
 80095c2:	f007 fe07 	bl	80111d4 <GUI_ALLOC_LockH>
 80095c6:	4d11      	ldr	r5, [pc, #68]	; (800960c <BUTTON_CreateUser+0x68>)
 80095c8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80095ca:	9005      	str	r0, [sp, #20]
 80095cc:	2210      	movs	r2, #16
 80095ce:	f7fe fddd 	bl	800818c <WIDGET__Init>
 80095d2:	ae06      	add	r6, sp, #24
 80095d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80095d6:	f856 ed04 	ldr.w	lr, [r6, #-4]!
 80095da:	f10e 0434 	add.w	r4, lr, #52	; 0x34
 80095de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80095e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80095e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80095e4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80095e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80095ec:	4c08      	ldr	r4, [pc, #32]	; (8009610 <BUTTON_CreateUser+0x6c>)
 80095ee:	6823      	ldr	r3, [r4, #0]
 80095f0:	f8ce 3064 	str.w	r3, [lr, #100]	; 0x64
 80095f4:	4630      	mov	r0, r6
 80095f6:	f007 fdfb 	bl	80111f0 <GUI_ALLOC_UnlockH>
 80095fa:	6823      	ldr	r3, [r4, #0]
 80095fc:	4638      	mov	r0, r7
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	4798      	blx	r3
 8009602:	4638      	mov	r0, r7
 8009604:	b007      	add	sp, #28
 8009606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009608:	080094c9 	.word	0x080094c9
 800960c:	200001d0 	.word	0x200001d0
 8009610:	20000200 	.word	0x20000200

08009614 <BUTTON_SetText>:
 8009614:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009616:	460c      	mov	r4, r1
 8009618:	4605      	mov	r5, r0
 800961a:	b300      	cbz	r0, 800965e <BUTTON_SetText+0x4a>
 800961c:	f007 fdda 	bl	80111d4 <GUI_ALLOC_LockH>
 8009620:	6e86      	ldr	r6, [r0, #104]	; 0x68
 8009622:	9000      	str	r0, [sp, #0]
 8009624:	4668      	mov	r0, sp
 8009626:	9601      	str	r6, [sp, #4]
 8009628:	f007 fde2 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800962c:	4621      	mov	r1, r4
 800962e:	a801      	add	r0, sp, #4
 8009630:	f004 fd0e 	bl	800e050 <GUI__SetText>
 8009634:	f1d0 0401 	rsbs	r4, r0, #1
 8009638:	bf38      	it	cc
 800963a:	2400      	movcc	r4, #0
 800963c:	b984      	cbnz	r4, 8009660 <BUTTON_SetText+0x4c>
 800963e:	9b01      	ldr	r3, [sp, #4]
 8009640:	42b3      	cmp	r3, r6
 8009642:	d008      	beq.n	8009656 <BUTTON_SetText+0x42>
 8009644:	4628      	mov	r0, r5
 8009646:	f007 fdc5 	bl	80111d4 <GUI_ALLOC_LockH>
 800964a:	9b01      	ldr	r3, [sp, #4]
 800964c:	9000      	str	r0, [sp, #0]
 800964e:	6683      	str	r3, [r0, #104]	; 0x68
 8009650:	4668      	mov	r0, sp
 8009652:	f007 fdcd 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8009656:	4628      	mov	r0, r5
 8009658:	f001 f929 	bl	800a8ae <WM_InvalidateWindow>
 800965c:	e000      	b.n	8009660 <BUTTON_SetText+0x4c>
 800965e:	2401      	movs	r4, #1
 8009660:	4620      	mov	r0, r4
 8009662:	b002      	add	sp, #8
 8009664:	bd70      	pop	{r4, r5, r6, pc}

08009666 <WM__UpdateChildPositions>:
 8009666:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800966a:	b087      	sub	sp, #28
 800966c:	69c4      	ldr	r4, [r0, #28]
 800966e:	9303      	str	r3, [sp, #12]
 8009670:	468a      	mov	sl, r1
 8009672:	4693      	mov	fp, r2
 8009674:	2c00      	cmp	r4, #0
 8009676:	d06d      	beq.n	8009754 <WM__UpdateChildPositions+0xee>
 8009678:	4620      	mov	r0, r4
 800967a:	f007 fdab 	bl	80111d4 <GUI_ALLOC_LockH>
 800967e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8009680:	9005      	str	r0, [sp, #20]
 8009682:	f401 7320 	and.w	r3, r1, #640	; 0x280
 8009686:	2b80      	cmp	r3, #128	; 0x80
 8009688:	f8b0 8000 	ldrh.w	r8, [r0]
 800968c:	8842      	ldrh	r2, [r0, #2]
 800968e:	8886      	ldrh	r6, [r0, #4]
 8009690:	88c5      	ldrh	r5, [r0, #6]
 8009692:	d008      	beq.n	80096a6 <WM__UpdateChildPositions+0x40>
 8009694:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8009698:	d108      	bne.n	80096ac <WM__UpdateChildPositions+0x46>
 800969a:	eb08 090a 	add.w	r9, r8, sl
 800969e:	fa1f f989 	uxth.w	r9, r9
 80096a2:	9b03      	ldr	r3, [sp, #12]
 80096a4:	e008      	b.n	80096b8 <WM__UpdateChildPositions+0x52>
 80096a6:	9803      	ldr	r0, [sp, #12]
 80096a8:	b283      	uxth	r3, r0
 80096aa:	e001      	b.n	80096b0 <WM__UpdateChildPositions+0x4a>
 80096ac:	fa1f f38a 	uxth.w	r3, sl
 80096b0:	eb03 0908 	add.w	r9, r3, r8
 80096b4:	fa1f f989 	uxth.w	r9, r9
 80096b8:	f401 61a0 	and.w	r1, r1, #1280	; 0x500
 80096bc:	4433      	add	r3, r6
 80096be:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	d008      	beq.n	80096d8 <WM__UpdateChildPositions+0x72>
 80096c6:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 80096ca:	d108      	bne.n	80096de <WM__UpdateChildPositions+0x78>
 80096cc:	eb02 0c0b 	add.w	ip, r2, fp
 80096d0:	fa1f fc8c 	uxth.w	ip, ip
 80096d4:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80096d6:	e008      	b.n	80096ea <WM__UpdateChildPositions+0x84>
 80096d8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80096da:	b28f      	uxth	r7, r1
 80096dc:	e001      	b.n	80096e2 <WM__UpdateChildPositions+0x7c>
 80096de:	fa1f f78b 	uxth.w	r7, fp
 80096e2:	eb07 0c02 	add.w	ip, r7, r2
 80096e6:	fa1f fc8c 	uxth.w	ip, ip
 80096ea:	fa0f f989 	sxth.w	r9, r9
 80096ee:	fa0f f888 	sxth.w	r8, r8
 80096f2:	b212      	sxth	r2, r2
 80096f4:	442f      	add	r7, r5
 80096f6:	fa0f fc8c 	sxth.w	ip, ip
 80096fa:	ebb9 0108 	subs.w	r1, r9, r8
 80096fe:	9202      	str	r2, [sp, #8]
 8009700:	b2bf      	uxth	r7, r7
 8009702:	ebc2 020c 	rsb	r2, r2, ip
 8009706:	d100      	bne.n	800970a <WM__UpdateChildPositions+0xa4>
 8009708:	b142      	cbz	r2, 800971c <WM__UpdateChildPositions+0xb6>
 800970a:	4620      	mov	r0, r4
 800970c:	9301      	str	r3, [sp, #4]
 800970e:	f8cd c000 	str.w	ip, [sp]
 8009712:	f000 faf2 	bl	8009cfa <WM_MoveWindow>
 8009716:	f8dd c000 	ldr.w	ip, [sp]
 800971a:	9b01      	ldr	r3, [sp, #4]
 800971c:	b21b      	sxth	r3, r3
 800971e:	ebc9 0903 	rsb	r9, r9, r3
 8009722:	b236      	sxth	r6, r6
 8009724:	9b02      	ldr	r3, [sp, #8]
 8009726:	ebc6 0808 	rsb	r8, r6, r8
 800972a:	b23f      	sxth	r7, r7
 800972c:	b22d      	sxth	r5, r5
 800972e:	ebcc 0c07 	rsb	ip, ip, r7
 8009732:	1b5d      	subs	r5, r3, r5
 8009734:	eb19 0108 	adds.w	r1, r9, r8
 8009738:	eb0c 0205 	add.w	r2, ip, r5
 800973c:	d100      	bne.n	8009740 <WM__UpdateChildPositions+0xda>
 800973e:	b112      	cbz	r2, 8009746 <WM__UpdateChildPositions+0xe0>
 8009740:	4620      	mov	r0, r4
 8009742:	f000 f9cb 	bl	8009adc <WM_ResizeWindow>
 8009746:	a806      	add	r0, sp, #24
 8009748:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 800974c:	6a1c      	ldr	r4, [r3, #32]
 800974e:	f007 fd4f 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8009752:	e78f      	b.n	8009674 <WM__UpdateChildPositions+0xe>
 8009754:	b007      	add	sp, #28
 8009756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800975a <WM__Screen2Client>:
 800975a:	f9b0 3000 	ldrsh.w	r3, [r0]
 800975e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8009762:	4608      	mov	r0, r1
 8009764:	4252      	negs	r2, r2
 8009766:	4259      	negs	r1, r3
 8009768:	f005 becc 	b.w	800f504 <GUI_MoveRect>

0800976c <WM__IsEnabled>:
 800976c:	b508      	push	{r3, lr}
 800976e:	f007 fd27 	bl	80111c0 <GUI_ALLOC_h2p>
 8009772:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8009774:	f080 0010 	eor.w	r0, r0, #16
 8009778:	f3c0 1000 	ubfx	r0, r0, #4, #1
 800977c:	bd08      	pop	{r3, pc}

0800977e <WM__IsAncestor>:
 800977e:	b510      	push	{r4, lr}
 8009780:	460c      	mov	r4, r1
 8009782:	b908      	cbnz	r0, 8009788 <WM__IsAncestor+0xa>
 8009784:	2000      	movs	r0, #0
 8009786:	bd10      	pop	{r4, pc}
 8009788:	2900      	cmp	r1, #0
 800978a:	d0fb      	beq.n	8009784 <WM__IsAncestor+0x6>
 800978c:	f007 fd18 	bl	80111c0 <GUI_ALLOC_h2p>
 8009790:	6980      	ldr	r0, [r0, #24]
 8009792:	42a0      	cmp	r0, r4
 8009794:	d002      	beq.n	800979c <WM__IsAncestor+0x1e>
 8009796:	2800      	cmp	r0, #0
 8009798:	d1f8      	bne.n	800978c <WM__IsAncestor+0xe>
 800979a:	e7f3      	b.n	8009784 <WM__IsAncestor+0x6>
 800979c:	2001      	movs	r0, #1
 800979e:	bd10      	pop	{r4, pc}

080097a0 <WM__IsAncestorOrSelf>:
 80097a0:	4288      	cmp	r0, r1
 80097a2:	d001      	beq.n	80097a8 <WM__IsAncestorOrSelf+0x8>
 80097a4:	f7ff bfeb 	b.w	800977e <WM__IsAncestor>
 80097a8:	2001      	movs	r0, #1
 80097aa:	4770      	bx	lr

080097ac <WM_DeleteTimer>:
 80097ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097ae:	4605      	mov	r5, r0
 80097b0:	b168      	cbz	r0, 80097ce <WM_DeleteTimer+0x22>
 80097b2:	f007 fd0f 	bl	80111d4 <GUI_ALLOC_LockH>
 80097b6:	ac02      	add	r4, sp, #8
 80097b8:	f844 0d04 	str.w	r0, [r4, #-4]!
 80097bc:	6800      	ldr	r0, [r0, #0]
 80097be:	f005 f8c9 	bl	800e954 <GUI_TIMER_Delete>
 80097c2:	4620      	mov	r0, r4
 80097c4:	f007 fd14 	bl	80111f0 <GUI_ALLOC_UnlockH>
 80097c8:	4628      	mov	r0, r5
 80097ca:	f007 fd3d 	bl	8011248 <GUI_ALLOC_Free>
 80097ce:	b003      	add	sp, #12
 80097d0:	bd30      	pop	{r4, r5, pc}

080097d2 <WM__DeleteAssocTimer>:
 80097d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80097d4:	4605      	mov	r5, r0
 80097d6:	a801      	add	r0, sp, #4
 80097d8:	f005 f888 	bl	800e8ec <GUI_TIMER__GetFirstTimer>
 80097dc:	4604      	mov	r4, r0
 80097de:	b1dc      	cbz	r4, 8009818 <WM__DeleteAssocTimer+0x46>
 80097e0:	4620      	mov	r0, r4
 80097e2:	2101      	movs	r1, #1
 80097e4:	f005 f911 	bl	800ea0a <GUI_TIMER_GetFlag>
 80097e8:	9b01      	ldr	r3, [sp, #4]
 80097ea:	b183      	cbz	r3, 800980e <WM__DeleteAssocTimer+0x3c>
 80097ec:	b178      	cbz	r0, 800980e <WM__DeleteAssocTimer+0x3c>
 80097ee:	4618      	mov	r0, r3
 80097f0:	f007 fce6 	bl	80111c0 <GUI_ALLOC_h2p>
 80097f4:	6843      	ldr	r3, [r0, #4]
 80097f6:	42ab      	cmp	r3, r5
 80097f8:	d109      	bne.n	800980e <WM__DeleteAssocTimer+0x3c>
 80097fa:	4620      	mov	r0, r4
 80097fc:	a901      	add	r1, sp, #4
 80097fe:	9e01      	ldr	r6, [sp, #4]
 8009800:	f005 f88c 	bl	800e91c <GUI_TIMER__GetNextTimerLin>
 8009804:	4604      	mov	r4, r0
 8009806:	4630      	mov	r0, r6
 8009808:	f7ff ffd0 	bl	80097ac <WM_DeleteTimer>
 800980c:	e7e7      	b.n	80097de <WM__DeleteAssocTimer+0xc>
 800980e:	4620      	mov	r0, r4
 8009810:	a901      	add	r1, sp, #4
 8009812:	f005 f883 	bl	800e91c <GUI_TIMER__GetNextTimerLin>
 8009816:	e7e1      	b.n	80097dc <WM__DeleteAssocTimer+0xa>
 8009818:	b002      	add	sp, #8
 800981a:	bd70      	pop	{r4, r5, r6, pc}

0800981c <WM_RestartTimer>:
 800981c:	b513      	push	{r0, r1, r4, lr}
 800981e:	460c      	mov	r4, r1
 8009820:	b180      	cbz	r0, 8009844 <WM_RestartTimer+0x28>
 8009822:	f007 fcd7 	bl	80111d4 <GUI_ALLOC_LockH>
 8009826:	9001      	str	r0, [sp, #4]
 8009828:	b11c      	cbz	r4, 8009832 <WM_RestartTimer+0x16>
 800982a:	6800      	ldr	r0, [r0, #0]
 800982c:	4621      	mov	r1, r4
 800982e:	f005 f8c5 	bl	800e9bc <GUI_TIMER_SetPeriod>
 8009832:	ac02      	add	r4, sp, #8
 8009834:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 8009838:	6818      	ldr	r0, [r3, #0]
 800983a:	f005 f8cd 	bl	800e9d8 <GUI_TIMER_Restart>
 800983e:	4620      	mov	r0, r4
 8009840:	f007 fcd6 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8009844:	b002      	add	sp, #8
 8009846:	bd10      	pop	{r4, pc}

08009848 <WM_InvalidateWindowAndDescs>:
 8009848:	b510      	push	{r4, lr}
 800984a:	4604      	mov	r4, r0
 800984c:	b170      	cbz	r0, 800986c <WM_InvalidateWindowAndDescs+0x24>
 800984e:	f001 f82e 	bl	800a8ae <WM_InvalidateWindow>
 8009852:	4620      	mov	r0, r4
 8009854:	f000 faec 	bl	8009e30 <WM_GetFirstChild>
 8009858:	4604      	mov	r4, r0
 800985a:	b13c      	cbz	r4, 800986c <WM_InvalidateWindowAndDescs+0x24>
 800985c:	4620      	mov	r0, r4
 800985e:	f7ff fff3 	bl	8009848 <WM_InvalidateWindowAndDescs>
 8009862:	4620      	mov	r0, r4
 8009864:	f007 fcac 	bl	80111c0 <GUI_ALLOC_h2p>
 8009868:	6a04      	ldr	r4, [r0, #32]
 800986a:	e7f6      	b.n	800985a <WM_InvalidateWindowAndDescs+0x12>
 800986c:	bd10      	pop	{r4, pc}

0800986e <WM_ShowWindow>:
 800986e:	b513      	push	{r0, r1, r4, lr}
 8009870:	4604      	mov	r4, r0
 8009872:	b170      	cbz	r0, 8009892 <WM_ShowWindow+0x24>
 8009874:	f007 fcae 	bl	80111d4 <GUI_ALLOC_LockH>
 8009878:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800987a:	9001      	str	r0, [sp, #4]
 800987c:	0793      	lsls	r3, r2, #30
 800987e:	d405      	bmi.n	800988c <WM_ShowWindow+0x1e>
 8009880:	f042 0202 	orr.w	r2, r2, #2
 8009884:	6282      	str	r2, [r0, #40]	; 0x28
 8009886:	4620      	mov	r0, r4
 8009888:	f7ff ffde 	bl	8009848 <WM_InvalidateWindowAndDescs>
 800988c:	a801      	add	r0, sp, #4
 800988e:	f007 fcaf 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8009892:	b002      	add	sp, #8
 8009894:	bd10      	pop	{r4, pc}
	...

08009898 <WM_SetUserClipRect>:
 8009898:	4b04      	ldr	r3, [pc, #16]	; (80098ac <WM_SetUserClipRect+0x14>)
 800989a:	b510      	push	{r4, lr}
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 80098a0:	6458      	str	r0, [r3, #68]	; 0x44
 80098a2:	f000 fe5d 	bl	800a560 <WM__ActivateClipRect>
 80098a6:	4620      	mov	r0, r4
 80098a8:	bd10      	pop	{r4, pc}
 80098aa:	bf00      	nop
 80098ac:	20000238 	.word	0x20000238

080098b0 <WM_SetHasTrans>:
 80098b0:	b513      	push	{r0, r1, r4, lr}
 80098b2:	4604      	mov	r4, r0
 80098b4:	b1b8      	cbz	r0, 80098e6 <WM_SetHasTrans+0x36>
 80098b6:	f007 fc8d 	bl	80111d4 <GUI_ALLOC_LockH>
 80098ba:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80098bc:	9001      	str	r0, [sp, #4]
 80098be:	07db      	lsls	r3, r3, #31
 80098c0:	d40e      	bmi.n	80098e0 <WM_SetHasTrans+0x30>
 80098c2:	4620      	mov	r0, r4
 80098c4:	f008 fa64 	bl	8011d90 <WM_ValidateWindow>
 80098c8:	9b01      	ldr	r3, [sp, #4]
 80098ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80098cc:	f042 0201 	orr.w	r2, r2, #1
 80098d0:	629a      	str	r2, [r3, #40]	; 0x28
 80098d2:	4b06      	ldr	r3, [pc, #24]	; (80098ec <WM_SetHasTrans+0x3c>)
 80098d4:	681a      	ldr	r2, [r3, #0]
 80098d6:	4620      	mov	r0, r4
 80098d8:	3201      	adds	r2, #1
 80098da:	601a      	str	r2, [r3, #0]
 80098dc:	f000 ffe7 	bl	800a8ae <WM_InvalidateWindow>
 80098e0:	a801      	add	r0, sp, #4
 80098e2:	f007 fc85 	bl	80111f0 <GUI_ALLOC_UnlockH>
 80098e6:	b002      	add	sp, #8
 80098e8:	bd10      	pop	{r4, pc}
 80098ea:	bf00      	nop
 80098ec:	2001b270 	.word	0x2001b270

080098f0 <WM_GetHasTrans>:
 80098f0:	b508      	push	{r3, lr}
 80098f2:	b128      	cbz	r0, 8009900 <WM_GetHasTrans+0x10>
 80098f4:	f007 fc64 	bl	80111c0 <GUI_ALLOC_h2p>
 80098f8:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80098fa:	f000 0001 	and.w	r0, r0, #1
 80098fe:	bd08      	pop	{r3, pc}
 8009900:	bd08      	pop	{r3, pc}

08009902 <WM_SetSize>:
 8009902:	e92d 41e7 	stmdb	sp!, {r0, r1, r2, r5, r6, r7, r8, lr}
 8009906:	460e      	mov	r6, r1
 8009908:	4690      	mov	r8, r2
 800990a:	4607      	mov	r7, r0
 800990c:	b1d0      	cbz	r0, 8009944 <WM_SetSize+0x42>
 800990e:	f007 fc61 	bl	80111d4 <GUI_ALLOC_LockH>
 8009912:	4603      	mov	r3, r0
 8009914:	a802      	add	r0, sp, #8
 8009916:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800991a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800991e:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 8009922:	f840 3d04 	str.w	r3, [r0, #-4]!
 8009926:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800992a:	1a8a      	subs	r2, r1, r2
 800992c:	1aed      	subs	r5, r5, r3
 800992e:	43d2      	mvns	r2, r2
 8009930:	43ed      	mvns	r5, r5
 8009932:	4416      	add	r6, r2
 8009934:	4445      	add	r5, r8
 8009936:	f007 fc5b 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800993a:	4638      	mov	r0, r7
 800993c:	4631      	mov	r1, r6
 800993e:	462a      	mov	r2, r5
 8009940:	f000 f8cc 	bl	8009adc <WM_ResizeWindow>
 8009944:	b003      	add	sp, #12
 8009946:	e8bd 81e0 	ldmia.w	sp!, {r5, r6, r7, r8, pc}

0800994a <_GetPrevChild>:
 800994a:	b510      	push	{r4, lr}
 800994c:	4604      	mov	r4, r0
 800994e:	b918      	cbnz	r0, 8009958 <_GetPrevChild+0xe>
 8009950:	4620      	mov	r0, r4
 8009952:	f008 f9f4 	bl	8011d3e <WM__GetLastSibling>
 8009956:	e003      	b.n	8009960 <_GetPrevChild+0x16>
 8009958:	f008 f9de 	bl	8011d18 <WM__GetPrevSibling>
 800995c:	2800      	cmp	r0, #0
 800995e:	d0f7      	beq.n	8009950 <_GetPrevChild+0x6>
 8009960:	42a0      	cmp	r0, r4
 8009962:	bf08      	it	eq
 8009964:	2000      	moveq	r0, #0
 8009966:	bd10      	pop	{r4, pc}

08009968 <WM_SetFocusOnPrevChild>:
 8009968:	b538      	push	{r3, r4, r5, lr}
 800996a:	4604      	mov	r4, r0
 800996c:	b1b0      	cbz	r0, 800999c <WM_SetFocusOnPrevChild+0x34>
 800996e:	f008 f9f3 	bl	8011d58 <WM__GetFocussedChild>
 8009972:	f7ff ffea 	bl	800994a <_GetPrevChild>
 8009976:	4605      	mov	r5, r0
 8009978:	4604      	mov	r4, r0
 800997a:	4620      	mov	r0, r4
 800997c:	f000 f9c1 	bl	8009d02 <WM_IsFocussable>
 8009980:	b930      	cbnz	r0, 8009990 <WM_SetFocusOnPrevChild+0x28>
 8009982:	b12c      	cbz	r4, 8009990 <WM_SetFocusOnPrevChild+0x28>
 8009984:	4620      	mov	r0, r4
 8009986:	f7ff ffe0 	bl	800994a <_GetPrevChild>
 800998a:	42a8      	cmp	r0, r5
 800998c:	4604      	mov	r4, r0
 800998e:	d1f4      	bne.n	800997a <WM_SetFocusOnPrevChild+0x12>
 8009990:	4620      	mov	r0, r4
 8009992:	f000 f84b 	bl	8009a2c <WM_SetFocus>
 8009996:	2800      	cmp	r0, #0
 8009998:	bf18      	it	ne
 800999a:	2400      	movne	r4, #0
 800999c:	4620      	mov	r0, r4
 800999e:	bd38      	pop	{r3, r4, r5, pc}

080099a0 <_GetNextChild>:
 80099a0:	b538      	push	{r3, r4, r5, lr}
 80099a2:	4605      	mov	r5, r0
 80099a4:	460c      	mov	r4, r1
 80099a6:	b921      	cbnz	r1, 80099b2 <_GetNextChild+0x12>
 80099a8:	4628      	mov	r0, r5
 80099aa:	f007 fc09 	bl	80111c0 <GUI_ALLOC_h2p>
 80099ae:	69c0      	ldr	r0, [r0, #28]
 80099b0:	e005      	b.n	80099be <_GetNextChild+0x1e>
 80099b2:	4608      	mov	r0, r1
 80099b4:	f007 fc04 	bl	80111c0 <GUI_ALLOC_h2p>
 80099b8:	6a00      	ldr	r0, [r0, #32]
 80099ba:	2800      	cmp	r0, #0
 80099bc:	d0f4      	beq.n	80099a8 <_GetNextChild+0x8>
 80099be:	42a0      	cmp	r0, r4
 80099c0:	bf08      	it	eq
 80099c2:	2000      	moveq	r0, #0
 80099c4:	bd38      	pop	{r3, r4, r5, pc}
	...

080099c8 <WM_SetFocusOnNextChild>:
 80099c8:	b570      	push	{r4, r5, r6, lr}
 80099ca:	4605      	mov	r5, r0
 80099cc:	b340      	cbz	r0, 8009a20 <WM_SetFocusOnNextChild+0x58>
 80099ce:	f008 f9c3 	bl	8011d58 <WM__GetFocussedChild>
 80099d2:	4601      	mov	r1, r0
 80099d4:	4628      	mov	r0, r5
 80099d6:	f7ff ffe3 	bl	80099a0 <_GetNextChild>
 80099da:	4606      	mov	r6, r0
 80099dc:	4604      	mov	r4, r0
 80099de:	4620      	mov	r0, r4
 80099e0:	f000 f98f 	bl	8009d02 <WM_IsFocussable>
 80099e4:	b938      	cbnz	r0, 80099f6 <WM_SetFocusOnNextChild+0x2e>
 80099e6:	b13c      	cbz	r4, 80099f8 <WM_SetFocusOnNextChild+0x30>
 80099e8:	4621      	mov	r1, r4
 80099ea:	4628      	mov	r0, r5
 80099ec:	f7ff ffd8 	bl	80099a0 <_GetNextChild>
 80099f0:	42b0      	cmp	r0, r6
 80099f2:	4604      	mov	r4, r0
 80099f4:	d1f3      	bne.n	80099de <WM_SetFocusOnNextChild+0x16>
 80099f6:	b90c      	cbnz	r4, 80099fc <WM_SetFocusOnNextChild+0x34>
 80099f8:	2400      	movs	r4, #0
 80099fa:	e012      	b.n	8009a22 <WM_SetFocusOnNextChild+0x5a>
 80099fc:	4d0a      	ldr	r5, [pc, #40]	; (8009a28 <WM_SetFocusOnNextChild+0x60>)
 80099fe:	4620      	mov	r0, r4
 8009a00:	682e      	ldr	r6, [r5, #0]
 8009a02:	f000 ff57 	bl	800a8b4 <WM__GetTopLevelLayer>
 8009a06:	3001      	adds	r0, #1
 8009a08:	d00b      	beq.n	8009a22 <WM_SetFocusOnNextChild+0x5a>
 8009a0a:	4620      	mov	r0, r4
 8009a0c:	f000 ff52 	bl	800a8b4 <WM__GetTopLevelLayer>
 8009a10:	6028      	str	r0, [r5, #0]
 8009a12:	4620      	mov	r0, r4
 8009a14:	f000 f80a 	bl	8009a2c <WM_SetFocus>
 8009a18:	602e      	str	r6, [r5, #0]
 8009a1a:	2800      	cmp	r0, #0
 8009a1c:	d1ec      	bne.n	80099f8 <WM_SetFocusOnNextChild+0x30>
 8009a1e:	e000      	b.n	8009a22 <WM_SetFocusOnNextChild+0x5a>
 8009a20:	4604      	mov	r4, r0
 8009a22:	4620      	mov	r0, r4
 8009a24:	bd70      	pop	{r4, r5, r6, pc}
 8009a26:	bf00      	nop
 8009a28:	2001b248 	.word	0x2001b248

08009a2c <WM_SetFocus>:
 8009a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a2e:	b087      	sub	sp, #28
 8009a30:	4604      	mov	r4, r0
 8009a32:	2100      	movs	r1, #0
 8009a34:	a802      	add	r0, sp, #8
 8009a36:	2210      	movs	r2, #16
 8009a38:	f00b fe2f 	bl	801569a <memset>
 8009a3c:	2c00      	cmp	r4, #0
 8009a3e:	d03a      	beq.n	8009ab6 <WM_SetFocus+0x8a>
 8009a40:	4b1f      	ldr	r3, [pc, #124]	; (8009ac0 <WM_SetFocus+0x94>)
 8009a42:	4a20      	ldr	r2, [pc, #128]	; (8009ac4 <WM_SetFocus+0x98>)
 8009a44:	6819      	ldr	r1, [r3, #0]
 8009a46:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8009a4a:	4284      	cmp	r4, r0
 8009a4c:	4616      	mov	r6, r2
 8009a4e:	461f      	mov	r7, r3
 8009a50:	d031      	beq.n	8009ab6 <WM_SetFocus+0x8a>
 8009a52:	231e      	movs	r3, #30
 8009a54:	e88d 0011 	stmia.w	sp, {r0, r4}
 8009a58:	9302      	str	r3, [sp, #8]
 8009a5a:	b110      	cbz	r0, 8009a62 <WM_SetFocus+0x36>
 8009a5c:	a902      	add	r1, sp, #8
 8009a5e:	f008 f93d 	bl	8011cdc <WM__SendMessage>
 8009a62:	2301      	movs	r3, #1
 8009a64:	4620      	mov	r0, r4
 8009a66:	a902      	add	r1, sp, #8
 8009a68:	9305      	str	r3, [sp, #20]
 8009a6a:	f008 f937 	bl	8011cdc <WM__SendMessage>
 8009a6e:	9d05      	ldr	r5, [sp, #20]
 8009a70:	bb15      	cbnz	r5, 8009ab8 <WM_SetFocus+0x8c>
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
 8009a78:	4620      	mov	r0, r4
 8009a7a:	f000 f9b7 	bl	8009dec <WM_GetParent>
 8009a7e:	4604      	mov	r4, r0
 8009a80:	b138      	cbz	r0, 8009a92 <WM_SetFocus+0x66>
 8009a82:	2320      	movs	r3, #32
 8009a84:	9302      	str	r3, [sp, #8]
 8009a86:	a902      	add	r1, sp, #8
 8009a88:	ab00      	add	r3, sp, #0
 8009a8a:	9305      	str	r3, [sp, #20]
 8009a8c:	f008 f926 	bl	8011cdc <WM__SendMessage>
 8009a90:	e7f2      	b.n	8009a78 <WM_SetFocus+0x4c>
 8009a92:	9c00      	ldr	r4, [sp, #0]
 8009a94:	4620      	mov	r0, r4
 8009a96:	f000 f932 	bl	8009cfe <WM_IsWindow>
 8009a9a:	b168      	cbz	r0, 8009ab8 <WM_SetFocus+0x8c>
 8009a9c:	4620      	mov	r0, r4
 8009a9e:	f000 f9a5 	bl	8009dec <WM_GetParent>
 8009aa2:	4604      	mov	r4, r0
 8009aa4:	b140      	cbz	r0, 8009ab8 <WM_SetFocus+0x8c>
 8009aa6:	2320      	movs	r3, #32
 8009aa8:	9302      	str	r3, [sp, #8]
 8009aaa:	a902      	add	r1, sp, #8
 8009aac:	ab00      	add	r3, sp, #0
 8009aae:	9305      	str	r3, [sp, #20]
 8009ab0:	f008 f914 	bl	8011cdc <WM__SendMessage>
 8009ab4:	e7f2      	b.n	8009a9c <WM_SetFocus+0x70>
 8009ab6:	2501      	movs	r5, #1
 8009ab8:	4628      	mov	r0, r5
 8009aba:	b007      	add	sp, #28
 8009abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	2001b248 	.word	0x2001b248
 8009ac4:	2001b238 	.word	0x2001b238

08009ac8 <WM_SetCreateFlags>:
 8009ac8:	4b02      	ldr	r3, [pc, #8]	; (8009ad4 <WM_SetCreateFlags+0xc>)
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	6018      	str	r0, [r3, #0]
 8009ace:	4610      	mov	r0, r2
 8009ad0:	4770      	bx	lr
 8009ad2:	bf00      	nop
 8009ad4:	2001b250 	.word	0x2001b250

08009ad8 <WM_SendMessageNoPara>:
 8009ad8:	f008 b8ec 	b.w	8011cb4 <WM__SendMessageNoPara>

08009adc <WM_ResizeWindow>:
 8009adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ae0:	ea51 0302 	orrs.w	r3, r1, r2
 8009ae4:	b08a      	sub	sp, #40	; 0x28
 8009ae6:	4680      	mov	r8, r0
 8009ae8:	460e      	mov	r6, r1
 8009aea:	4617      	mov	r7, r2
 8009aec:	d06e      	beq.n	8009bcc <WM_ResizeWindow+0xf0>
 8009aee:	2800      	cmp	r0, #0
 8009af0:	d06c      	beq.n	8009bcc <WM_ResizeWindow+0xf0>
 8009af2:	f007 fb6f 	bl	80111d4 <GUI_ALLOC_LockH>
 8009af6:	4603      	mov	r3, r0
 8009af8:	9003      	str	r0, [sp, #12]
 8009afa:	c803      	ldmia	r0, {r0, r1}
 8009afc:	ad04      	add	r5, sp, #16
 8009afe:	ac06      	add	r4, sp, #24
 8009b00:	e885 0003 	stmia.w	r5, {r0, r1}
 8009b04:	e884 0003 	stmia.w	r4, {r0, r1}
 8009b08:	b17e      	cbz	r6, 8009b2a <WM_ResizeWindow+0x4e>
 8009b0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009b0c:	f402 7220 	and.w	r2, r2, #640	; 0x280
 8009b10:	2a80      	cmp	r2, #128	; 0x80
 8009b12:	d105      	bne.n	8009b20 <WM_ResizeWindow+0x44>
 8009b14:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8009b18:	1b96      	subs	r6, r2, r6
 8009b1a:	f8ad 6018 	strh.w	r6, [sp, #24]
 8009b1e:	e004      	b.n	8009b2a <WM_ResizeWindow+0x4e>
 8009b20:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8009b24:	4416      	add	r6, r2
 8009b26:	f8ad 601c 	strh.w	r6, [sp, #28]
 8009b2a:	b187      	cbz	r7, 8009b4e <WM_ResizeWindow+0x72>
 8009b2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009b2e:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 8009b32:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8009b36:	d105      	bne.n	8009b44 <WM_ResizeWindow+0x68>
 8009b38:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8009b3c:	1bd7      	subs	r7, r2, r7
 8009b3e:	f8ad 701a 	strh.w	r7, [sp, #26]
 8009b42:	e004      	b.n	8009b4e <WM_ResizeWindow+0x72>
 8009b44:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8009b48:	4417      	add	r7, r2
 8009b4a:	f8ad 701e 	strh.w	r7, [sp, #30]
 8009b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b50:	03da      	lsls	r2, r3, #15
 8009b52:	d502      	bpl.n	8009b5a <WM_ResizeWindow+0x7e>
 8009b54:	4640      	mov	r0, r8
 8009b56:	f000 fd37 	bl	800a5c8 <WM__InvalidateDrawAndDescs>
 8009b5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009b5e:	9b03      	ldr	r3, [sp, #12]
 8009b60:	e883 0003 	stmia.w	r3, {r0, r1}
 8009b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b66:	079b      	lsls	r3, r3, #30
 8009b68:	d50a      	bpl.n	8009b80 <WM_ResizeWindow+0xa4>
 8009b6a:	a808      	add	r0, sp, #32
 8009b6c:	4629      	mov	r1, r5
 8009b6e:	4622      	mov	r2, r4
 8009b70:	f005 fcd8 	bl	800f524 <GUI_MergeRect>
 8009b74:	9b03      	ldr	r3, [sp, #12]
 8009b76:	a808      	add	r0, sp, #32
 8009b78:	6999      	ldr	r1, [r3, #24]
 8009b7a:	6a1a      	ldr	r2, [r3, #32]
 8009b7c:	f000 fe28 	bl	800a7d0 <WM__InvalidateRectEx>
 8009b80:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
 8009b84:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8009b88:	f9bd 701e 	ldrsh.w	r7, [sp, #30]
 8009b8c:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8009b90:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
 8009b94:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 8009b98:	f9bd 501a 	ldrsh.w	r5, [sp, #26]
 8009b9c:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8009ba0:	1ae3      	subs	r3, r4, r3
 8009ba2:	1a38      	subs	r0, r7, r0
 8009ba4:	ac0a      	add	r4, sp, #40	; 0x28
 8009ba6:	1aaa      	subs	r2, r5, r2
 8009ba8:	9000      	str	r0, [sp, #0]
 8009baa:	1a71      	subs	r1, r6, r1
 8009bac:	9803      	ldr	r0, [sp, #12]
 8009bae:	f7ff fd5a 	bl	8009666 <WM__UpdateChildPositions>
 8009bb2:	f854 1d1c 	ldr.w	r1, [r4, #-28]!
 8009bb6:	f101 0008 	add.w	r0, r1, #8
 8009bba:	f004 fb41 	bl	800e240 <GUI__IntersectRect>
 8009bbe:	4640      	mov	r0, r8
 8009bc0:	2105      	movs	r1, #5
 8009bc2:	f000 fe21 	bl	800a808 <WM__SendMsgNoData>
 8009bc6:	4620      	mov	r0, r4
 8009bc8:	f007 fb12 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8009bcc:	b00a      	add	sp, #40	; 0x28
 8009bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009bd2 <WM_NotifyParent>:
 8009bd2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009bd4:	2326      	movs	r3, #38	; 0x26
 8009bd6:	9103      	str	r1, [sp, #12]
 8009bd8:	4669      	mov	r1, sp
 8009bda:	9300      	str	r3, [sp, #0]
 8009bdc:	f008 fb38 	bl	8012250 <WM_SendToParent>
 8009be0:	b005      	add	sp, #20
 8009be2:	f85d fb04 	ldr.w	pc, [sp], #4

08009be6 <_MoveDescendents>:
 8009be6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bea:	b088      	sub	sp, #32
 8009bec:	4606      	mov	r6, r0
 8009bee:	460c      	mov	r4, r1
 8009bf0:	4615      	mov	r5, r2
 8009bf2:	a804      	add	r0, sp, #16
 8009bf4:	2100      	movs	r1, #0
 8009bf6:	2210      	movs	r2, #16
 8009bf8:	f00b fd4f 	bl	801569a <memset>
 8009bfc:	b336      	cbz	r6, 8009c4c <_MoveDescendents+0x66>
 8009bfe:	4630      	mov	r0, r6
 8009c00:	f007 fae8 	bl	80111d4 <GUI_ALLOC_LockH>
 8009c04:	4621      	mov	r1, r4
 8009c06:	462a      	mov	r2, r5
 8009c08:	9001      	str	r0, [sp, #4]
 8009c0a:	f005 fc7b 	bl	800f504 <GUI_MoveRect>
 8009c0e:	9801      	ldr	r0, [sp, #4]
 8009c10:	4621      	mov	r1, r4
 8009c12:	3008      	adds	r0, #8
 8009c14:	462a      	mov	r2, r5
 8009c16:	f005 fc75 	bl	800f504 <GUI_MoveRect>
 8009c1a:	a808      	add	r0, sp, #32
 8009c1c:	f850 2d1c 	ldr.w	r2, [r0, #-28]!
 8009c20:	f8d2 801c 	ldr.w	r8, [r2, #28]
 8009c24:	6a17      	ldr	r7, [r2, #32]
 8009c26:	f007 fae3 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8009c2a:	4640      	mov	r0, r8
 8009c2c:	4621      	mov	r1, r4
 8009c2e:	462a      	mov	r2, r5
 8009c30:	f7ff ffd9 	bl	8009be6 <_MoveDescendents>
 8009c34:	2303      	movs	r3, #3
 8009c36:	9304      	str	r3, [sp, #16]
 8009c38:	4630      	mov	r0, r6
 8009c3a:	ab02      	add	r3, sp, #8
 8009c3c:	a904      	add	r1, sp, #16
 8009c3e:	9307      	str	r3, [sp, #28]
 8009c40:	9402      	str	r4, [sp, #8]
 8009c42:	9503      	str	r5, [sp, #12]
 8009c44:	463e      	mov	r6, r7
 8009c46:	f008 f849 	bl	8011cdc <WM__SendMessage>
 8009c4a:	e7d7      	b.n	8009bfc <_MoveDescendents+0x16>
 8009c4c:	b008      	add	sp, #32
 8009c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009c52 <WM__MoveWindow>:
 8009c52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009c56:	b08b      	sub	sp, #44	; 0x2c
 8009c58:	4606      	mov	r6, r0
 8009c5a:	460d      	mov	r5, r1
 8009c5c:	4614      	mov	r4, r2
 8009c5e:	a806      	add	r0, sp, #24
 8009c60:	2100      	movs	r1, #0
 8009c62:	2210      	movs	r2, #16
 8009c64:	f00b fd19 	bl	801569a <memset>
 8009c68:	2e00      	cmp	r6, #0
 8009c6a:	d043      	beq.n	8009cf4 <WM__MoveWindow+0xa2>
 8009c6c:	b90d      	cbnz	r5, 8009c72 <WM__MoveWindow+0x20>
 8009c6e:	2c00      	cmp	r4, #0
 8009c70:	d040      	beq.n	8009cf4 <WM__MoveWindow+0xa2>
 8009c72:	4630      	mov	r0, r6
 8009c74:	f007 faae 	bl	80111d4 <GUI_ALLOC_LockH>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	9001      	str	r0, [sp, #4]
 8009c7c:	c803      	ldmia	r0, {r0, r1}
 8009c7e:	f10d 0808 	add.w	r8, sp, #8
 8009c82:	e888 0003 	stmia.w	r8, {r0, r1}
 8009c86:	4622      	mov	r2, r4
 8009c88:	4618      	mov	r0, r3
 8009c8a:	4629      	mov	r1, r5
 8009c8c:	f005 fc3a 	bl	800f504 <GUI_MoveRect>
 8009c90:	9801      	ldr	r0, [sp, #4]
 8009c92:	af0a      	add	r7, sp, #40	; 0x28
 8009c94:	4629      	mov	r1, r5
 8009c96:	4622      	mov	r2, r4
 8009c98:	3008      	adds	r0, #8
 8009c9a:	f005 fc33 	bl	800f504 <GUI_MoveRect>
 8009c9e:	f857 3d24 	ldr.w	r3, [r7, #-36]!
 8009ca2:	f8d3 901c 	ldr.w	r9, [r3, #28]
 8009ca6:	4638      	mov	r0, r7
 8009ca8:	f007 faa2 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8009cac:	4622      	mov	r2, r4
 8009cae:	4648      	mov	r0, r9
 8009cb0:	4629      	mov	r1, r5
 8009cb2:	f7ff ff98 	bl	8009be6 <_MoveDescendents>
 8009cb6:	4630      	mov	r0, r6
 8009cb8:	f007 fa8c 	bl	80111d4 <GUI_ALLOC_LockH>
 8009cbc:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8009cbe:	9001      	str	r0, [sp, #4]
 8009cc0:	0792      	lsls	r2, r2, #30
 8009cc2:	d50a      	bpl.n	8009cda <WM__MoveWindow+0x88>
 8009cc4:	6981      	ldr	r1, [r0, #24]
 8009cc6:	b141      	cbz	r1, 8009cda <WM__MoveWindow+0x88>
 8009cc8:	6a02      	ldr	r2, [r0, #32]
 8009cca:	f000 fd6c 	bl	800a7a6 <WM__InvalidateParent>
 8009cce:	9b01      	ldr	r3, [sp, #4]
 8009cd0:	4640      	mov	r0, r8
 8009cd2:	6999      	ldr	r1, [r3, #24]
 8009cd4:	6a1a      	ldr	r2, [r3, #32]
 8009cd6:	f000 fd66 	bl	800a7a6 <WM__InvalidateParent>
 8009cda:	4638      	mov	r0, r7
 8009cdc:	f007 fa88 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8009ce0:	2303      	movs	r3, #3
 8009ce2:	9306      	str	r3, [sp, #24]
 8009ce4:	4630      	mov	r0, r6
 8009ce6:	ab04      	add	r3, sp, #16
 8009ce8:	a906      	add	r1, sp, #24
 8009cea:	9309      	str	r3, [sp, #36]	; 0x24
 8009cec:	9504      	str	r5, [sp, #16]
 8009cee:	9405      	str	r4, [sp, #20]
 8009cf0:	f007 fff4 	bl	8011cdc <WM__SendMessage>
 8009cf4:	b00b      	add	sp, #44	; 0x2c
 8009cf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08009cfa <WM_MoveWindow>:
 8009cfa:	f7ff bfaa 	b.w	8009c52 <WM__MoveWindow>

08009cfe <WM_IsWindow>:
 8009cfe:	f000 bc53 	b.w	800a5a8 <WM__IsWindow>

08009d02 <WM_IsFocussable>:
 8009d02:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d04:	4604      	mov	r4, r0
 8009d06:	b908      	cbnz	r0, 8009d0c <WM_IsFocussable+0xa>
 8009d08:	2000      	movs	r0, #0
 8009d0a:	e011      	b.n	8009d30 <WM_IsFocussable+0x2e>
 8009d0c:	f007 fa58 	bl	80111c0 <GUI_ALLOC_h2p>
 8009d10:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009d12:	079a      	lsls	r2, r3, #30
 8009d14:	d5f8      	bpl.n	8009d08 <WM_IsFocussable+0x6>
 8009d16:	f013 0310 	ands.w	r3, r3, #16
 8009d1a:	d1f5      	bne.n	8009d08 <WM_IsFocussable+0x6>
 8009d1c:	a904      	add	r1, sp, #16
 8009d1e:	9303      	str	r3, [sp, #12]
 8009d20:	231f      	movs	r3, #31
 8009d22:	f841 3d10 	str.w	r3, [r1, #-16]!
 8009d26:	4620      	mov	r0, r4
 8009d28:	4669      	mov	r1, sp
 8009d2a:	f000 fd69 	bl	800a800 <WM_SendMessage>
 8009d2e:	9803      	ldr	r0, [sp, #12]
 8009d30:	b004      	add	sp, #16
 8009d32:	bd10      	pop	{r4, pc}

08009d34 <WM_HideWindow>:
 8009d34:	b513      	push	{r0, r1, r4, lr}
 8009d36:	b188      	cbz	r0, 8009d5c <WM_HideWindow+0x28>
 8009d38:	f007 fa4c 	bl	80111d4 <GUI_ALLOC_LockH>
 8009d3c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8009d3e:	ac02      	add	r4, sp, #8
 8009d40:	0791      	lsls	r1, r2, #30
 8009d42:	f844 0d04 	str.w	r0, [r4, #-4]!
 8009d46:	d506      	bpl.n	8009d56 <WM_HideWindow+0x22>
 8009d48:	f022 0202 	bic.w	r2, r2, #2
 8009d4c:	6282      	str	r2, [r0, #40]	; 0x28
 8009d4e:	6981      	ldr	r1, [r0, #24]
 8009d50:	6a02      	ldr	r2, [r0, #32]
 8009d52:	f000 fd3d 	bl	800a7d0 <WM__InvalidateRectEx>
 8009d56:	4620      	mov	r0, r4
 8009d58:	f007 fa4a 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8009d5c:	b002      	add	sp, #8
 8009d5e:	bd10      	pop	{r4, pc}

08009d60 <WM_HasFocus>:
 8009d60:	4b04      	ldr	r3, [pc, #16]	; (8009d74 <WM_HasFocus+0x14>)
 8009d62:	681a      	ldr	r2, [r3, #0]
 8009d64:	4b04      	ldr	r3, [pc, #16]	; (8009d78 <WM_HasFocus+0x18>)
 8009d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d6a:	1ac3      	subs	r3, r0, r3
 8009d6c:	4258      	negs	r0, r3
 8009d6e:	4158      	adcs	r0, r3
 8009d70:	4770      	bx	lr
 8009d72:	bf00      	nop
 8009d74:	2001b248 	.word	0x2001b248
 8009d78:	2001b238 	.word	0x2001b238

08009d7c <WM__GetWindowSizeX>:
 8009d7c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8009d80:	f9b0 3000 	ldrsh.w	r3, [r0]
 8009d84:	1ad0      	subs	r0, r2, r3
 8009d86:	3001      	adds	r0, #1
 8009d88:	4770      	bx	lr

08009d8a <WM__GetWindowSizeY>:
 8009d8a:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8009d8e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8009d92:	1ad0      	subs	r0, r2, r3
 8009d94:	3001      	adds	r0, #1
 8009d96:	4770      	bx	lr

08009d98 <WM_GetWindowSizeX>:
 8009d98:	b513      	push	{r0, r1, r4, lr}
 8009d9a:	b908      	cbnz	r0, 8009da0 <WM_GetWindowSizeX+0x8>
 8009d9c:	f000 fefc 	bl	800ab98 <WM_GetActiveWindow>
 8009da0:	f007 fa18 	bl	80111d4 <GUI_ALLOC_LockH>
 8009da4:	ab02      	add	r3, sp, #8
 8009da6:	f9b0 2000 	ldrsh.w	r2, [r0]
 8009daa:	f843 0d04 	str.w	r0, [r3, #-4]!
 8009dae:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8009db2:	4618      	mov	r0, r3
 8009db4:	1aa4      	subs	r4, r4, r2
 8009db6:	f007 fa1b 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8009dba:	3401      	adds	r4, #1
 8009dbc:	4620      	mov	r0, r4
 8009dbe:	b002      	add	sp, #8
 8009dc0:	bd10      	pop	{r4, pc}

08009dc2 <WM_GetWindowSizeY>:
 8009dc2:	b513      	push	{r0, r1, r4, lr}
 8009dc4:	b908      	cbnz	r0, 8009dca <WM_GetWindowSizeY+0x8>
 8009dc6:	f000 fee7 	bl	800ab98 <WM_GetActiveWindow>
 8009dca:	f007 fa03 	bl	80111d4 <GUI_ALLOC_LockH>
 8009dce:	ab02      	add	r3, sp, #8
 8009dd0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8009dd4:	f843 0d04 	str.w	r0, [r3, #-4]!
 8009dd8:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 8009ddc:	4618      	mov	r0, r3
 8009dde:	1aa4      	subs	r4, r4, r2
 8009de0:	f007 fa06 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8009de4:	3401      	adds	r4, #1
 8009de6:	4620      	mov	r0, r4
 8009de8:	b002      	add	sp, #8
 8009dea:	bd10      	pop	{r4, pc}

08009dec <WM_GetParent>:
 8009dec:	b508      	push	{r3, lr}
 8009dee:	4603      	mov	r3, r0
 8009df0:	b110      	cbz	r0, 8009df8 <WM_GetParent+0xc>
 8009df2:	f007 f9e5 	bl	80111c0 <GUI_ALLOC_h2p>
 8009df6:	6983      	ldr	r3, [r0, #24]
 8009df8:	4618      	mov	r0, r3
 8009dfa:	bd08      	pop	{r3, pc}

08009dfc <WM_GetId>:
 8009dfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009dfe:	4604      	mov	r4, r0
 8009e00:	2210      	movs	r2, #16
 8009e02:	4668      	mov	r0, sp
 8009e04:	2100      	movs	r1, #0
 8009e06:	f00b fc48 	bl	801569a <memset>
 8009e0a:	2315      	movs	r3, #21
 8009e0c:	4620      	mov	r0, r4
 8009e0e:	4669      	mov	r1, sp
 8009e10:	9300      	str	r3, [sp, #0]
 8009e12:	f000 fcf5 	bl	800a800 <WM_SendMessage>
 8009e16:	9803      	ldr	r0, [sp, #12]
 8009e18:	b004      	add	sp, #16
 8009e1a:	bd10      	pop	{r4, pc}

08009e1c <WM_GetFocussedWindow>:
 8009e1c:	4b02      	ldr	r3, [pc, #8]	; (8009e28 <WM_GetFocussedWindow+0xc>)
 8009e1e:	681a      	ldr	r2, [r3, #0]
 8009e20:	4b02      	ldr	r3, [pc, #8]	; (8009e2c <WM_GetFocussedWindow+0x10>)
 8009e22:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009e26:	4770      	bx	lr
 8009e28:	2001b248 	.word	0x2001b248
 8009e2c:	2001b238 	.word	0x2001b238

08009e30 <WM_GetFirstChild>:
 8009e30:	b508      	push	{r3, lr}
 8009e32:	4603      	mov	r3, r0
 8009e34:	b110      	cbz	r0, 8009e3c <WM_GetFirstChild+0xc>
 8009e36:	f007 f9c3 	bl	80111c0 <GUI_ALLOC_h2p>
 8009e3a:	69c3      	ldr	r3, [r0, #28]
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	bd08      	pop	{r3, pc}

08009e40 <_GetDialogItem>:
 8009e40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e42:	460d      	mov	r5, r1
 8009e44:	f007 f9c6 	bl	80111d4 <GUI_ALLOC_LockH>
 8009e48:	ab02      	add	r3, sp, #8
 8009e4a:	69c4      	ldr	r4, [r0, #28]
 8009e4c:	f843 0d04 	str.w	r0, [r3, #-4]!
 8009e50:	4618      	mov	r0, r3
 8009e52:	f007 f9cd 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8009e56:	4620      	mov	r0, r4
 8009e58:	b16c      	cbz	r4, 8009e76 <_GetDialogItem+0x36>
 8009e5a:	f7ff ffcf 	bl	8009dfc <WM_GetId>
 8009e5e:	42a8      	cmp	r0, r5
 8009e60:	4620      	mov	r0, r4
 8009e62:	d008      	beq.n	8009e76 <_GetDialogItem+0x36>
 8009e64:	4629      	mov	r1, r5
 8009e66:	f7ff ffeb 	bl	8009e40 <_GetDialogItem>
 8009e6a:	b920      	cbnz	r0, 8009e76 <_GetDialogItem+0x36>
 8009e6c:	4620      	mov	r0, r4
 8009e6e:	f007 f9a7 	bl	80111c0 <GUI_ALLOC_h2p>
 8009e72:	6a04      	ldr	r4, [r0, #32]
 8009e74:	e7ef      	b.n	8009e56 <_GetDialogItem+0x16>
 8009e76:	b003      	add	sp, #12
 8009e78:	bd30      	pop	{r4, r5, pc}

08009e7a <WM_GetDialogItem>:
 8009e7a:	b108      	cbz	r0, 8009e80 <WM_GetDialogItem+0x6>
 8009e7c:	f7ff bfe0 	b.w	8009e40 <_GetDialogItem>
 8009e80:	4770      	bx	lr
	...

08009e84 <WM_GetDesktopWindow>:
 8009e84:	4b03      	ldr	r3, [pc, #12]	; (8009e94 <WM_GetDesktopWindow+0x10>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	7c5a      	ldrb	r2, [r3, #17]
 8009e8a:	4b03      	ldr	r3, [pc, #12]	; (8009e98 <WM_GetDesktopWindow+0x14>)
 8009e8c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009e90:	4770      	bx	lr
 8009e92:	bf00      	nop
 8009e94:	20000238 	.word	0x20000238
 8009e98:	2001b228 	.word	0x2001b228

08009e9c <WM_GetClientWindow>:
 8009e9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	a904      	add	r1, sp, #16
 8009ea2:	9303      	str	r3, [sp, #12]
 8009ea4:	2317      	movs	r3, #23
 8009ea6:	f841 3d10 	str.w	r3, [r1, #-16]!
 8009eaa:	4669      	mov	r1, sp
 8009eac:	f000 fca8 	bl	800a800 <WM_SendMessage>
 8009eb0:	9803      	ldr	r0, [sp, #12]
 8009eb2:	b005      	add	sp, #20
 8009eb4:	f85d fb04 	ldr.w	pc, [sp], #4

08009eb8 <WM__GetClientRectEx>:
 8009eb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009eba:	460d      	mov	r5, r1
 8009ebc:	b158      	cbz	r0, 8009ed6 <WM__GetClientRectEx+0x1e>
 8009ebe:	b151      	cbz	r1, 8009ed6 <WM__GetClientRectEx+0x1e>
 8009ec0:	f007 f988 	bl	80111d4 <GUI_ALLOC_LockH>
 8009ec4:	ac02      	add	r4, sp, #8
 8009ec6:	4629      	mov	r1, r5
 8009ec8:	f844 0d04 	str.w	r0, [r4, #-4]!
 8009ecc:	f000 fca7 	bl	800a81e <WM__GetClientRectWin>
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	f007 f98d 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8009ed6:	b003      	add	sp, #12
 8009ed8:	bd30      	pop	{r4, r5, pc}

08009eda <WM_GetClientRectEx>:
 8009eda:	f7ff bfed 	b.w	8009eb8 <WM__GetClientRectEx>
	...

08009ee0 <WM_GetClientRect>:
 8009ee0:	4b04      	ldr	r3, [pc, #16]	; (8009ef4 <WM_GetClientRect+0x14>)
 8009ee2:	4601      	mov	r1, r0
 8009ee4:	6818      	ldr	r0, [r3, #0]
 8009ee6:	b910      	cbnz	r0, 8009eee <WM_GetClientRect+0xe>
 8009ee8:	4b03      	ldr	r3, [pc, #12]	; (8009ef8 <WM_GetClientRect+0x18>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8009eee:	f7ff bfe3 	b.w	8009eb8 <WM__GetClientRectEx>
 8009ef2:	bf00      	nop
 8009ef4:	2001b224 	.word	0x2001b224
 8009ef8:	20000238 	.word	0x20000238

08009efc <_cbInvalidateOne>:
 8009efc:	f000 bcd7 	b.w	800a8ae <WM_InvalidateWindow>

08009f00 <WM_BringToTop>:
 8009f00:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f02:	4605      	mov	r5, r0
 8009f04:	2800      	cmp	r0, #0
 8009f06:	d032      	beq.n	8009f6e <WM_BringToTop+0x6e>
 8009f08:	f007 f964 	bl	80111d4 <GUI_ALLOC_LockH>
 8009f0c:	ac02      	add	r4, sp, #8
 8009f0e:	4603      	mov	r3, r0
 8009f10:	f844 0d08 	str.w	r0, [r4, #-8]!
 8009f14:	6a00      	ldr	r0, [r0, #32]
 8009f16:	b908      	cbnz	r0, 8009f1c <WM_BringToTop+0x1c>
 8009f18:	4668      	mov	r0, sp
 8009f1a:	e00e      	b.n	8009f3a <WM_BringToTop+0x3a>
 8009f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f1e:	071a      	lsls	r2, r3, #28
 8009f20:	d411      	bmi.n	8009f46 <WM_BringToTop+0x46>
 8009f22:	f007 f957 	bl	80111d4 <GUI_ALLOC_LockH>
 8009f26:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009f28:	ae02      	add	r6, sp, #8
 8009f2a:	071b      	lsls	r3, r3, #28
 8009f2c:	f846 0d04 	str.w	r0, [r6, #-4]!
 8009f30:	d506      	bpl.n	8009f40 <WM_BringToTop+0x40>
 8009f32:	4668      	mov	r0, sp
 8009f34:	f007 f95c 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8009f38:	4630      	mov	r0, r6
 8009f3a:	f007 f959 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8009f3e:	e016      	b.n	8009f6e <WM_BringToTop+0x6e>
 8009f40:	4630      	mov	r0, r6
 8009f42:	f007 f955 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8009f46:	9b00      	ldr	r3, [sp, #0]
 8009f48:	4668      	mov	r0, sp
 8009f4a:	699e      	ldr	r6, [r3, #24]
 8009f4c:	f007 f950 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8009f50:	4628      	mov	r0, r5
 8009f52:	f000 fab7 	bl	800a4c4 <WM__RemoveWindowFromList>
 8009f56:	4631      	mov	r1, r6
 8009f58:	4628      	mov	r0, r5
 8009f5a:	f000 fa61 	bl	800a420 <WM__InsertWindowIntoList>
 8009f5e:	4628      	mov	r0, r5
 8009f60:	f000 fca5 	bl	800a8ae <WM_InvalidateWindow>
 8009f64:	4628      	mov	r0, r5
 8009f66:	4903      	ldr	r1, [pc, #12]	; (8009f74 <WM_BringToTop+0x74>)
 8009f68:	2200      	movs	r2, #0
 8009f6a:	f008 fa11 	bl	8012390 <WM_ForEachDesc>
 8009f6e:	b002      	add	sp, #8
 8009f70:	bd70      	pop	{r4, r5, r6, pc}
 8009f72:	bf00      	nop
 8009f74:	08009efd 	.word	0x08009efd

08009f78 <_OnExit>:
 8009f78:	4a0a      	ldr	r2, [pc, #40]	; (8009fa4 <_OnExit+0x2c>)
 8009f7a:	490b      	ldr	r1, [pc, #44]	; (8009fa8 <_OnExit+0x30>)
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	7013      	strb	r3, [r2, #0]
 8009f80:	4a0a      	ldr	r2, [pc, #40]	; (8009fac <_OnExit+0x34>)
 8009f82:	600b      	str	r3, [r1, #0]
 8009f84:	6013      	str	r3, [r2, #0]
 8009f86:	4a0a      	ldr	r2, [pc, #40]	; (8009fb0 <_OnExit+0x38>)
 8009f88:	604b      	str	r3, [r1, #4]
 8009f8a:	6013      	str	r3, [r2, #0]
 8009f8c:	4a09      	ldr	r2, [pc, #36]	; (8009fb4 <_OnExit+0x3c>)
 8009f8e:	6013      	str	r3, [r2, #0]
 8009f90:	6053      	str	r3, [r2, #4]
 8009f92:	4a09      	ldr	r2, [pc, #36]	; (8009fb8 <_OnExit+0x40>)
 8009f94:	6013      	str	r3, [r2, #0]
 8009f96:	4a09      	ldr	r2, [pc, #36]	; (8009fbc <_OnExit+0x44>)
 8009f98:	6013      	str	r3, [r2, #0]
 8009f9a:	4a09      	ldr	r2, [pc, #36]	; (8009fc0 <_OnExit+0x48>)
 8009f9c:	6013      	str	r3, [r2, #0]
 8009f9e:	4a09      	ldr	r2, [pc, #36]	; (8009fc4 <_OnExit+0x4c>)
 8009fa0:	6013      	str	r3, [r2, #0]
 8009fa2:	4770      	bx	lr
 8009fa4:	20019420 	.word	0x20019420
 8009fa8:	2001b238 	.word	0x2001b238
 8009fac:	200193f8 	.word	0x200193f8
 8009fb0:	2001b25c 	.word	0x2001b25c
 8009fb4:	2001b264 	.word	0x2001b264
 8009fb8:	2001b270 	.word	0x2001b270
 8009fbc:	2001b224 	.word	0x2001b224
 8009fc0:	2001b250 	.word	0x2001b250
 8009fc4:	2001b260 	.word	0x2001b260

08009fc8 <_Paint1>:
 8009fc8:	b510      	push	{r4, lr}
 8009fca:	4604      	mov	r4, r0
 8009fcc:	f007 f8f8 	bl	80111c0 <GUI_ALLOC_h2p>
 8009fd0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009fd2:	4a04      	ldr	r2, [pc, #16]	; (8009fe4 <_Paint1+0x1c>)
 8009fd4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8009fd8:	4b03      	ldr	r3, [pc, #12]	; (8009fe8 <_Paint1+0x20>)
 8009fda:	4620      	mov	r0, r4
 8009fdc:	bf08      	it	eq
 8009fde:	4613      	moveq	r3, r2
 8009fe0:	4798      	blx	r3
 8009fe2:	bd10      	pop	{r4, pc}
 8009fe4:	0800ae39 	.word	0x0800ae39
 8009fe8:	0800b475 	.word	0x0800b475

08009fec <_Findy1>:
 8009fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fee:	4605      	mov	r5, r0
 8009ff0:	b085      	sub	sp, #20
 8009ff2:	460c      	mov	r4, r1
 8009ff4:	4616      	mov	r6, r2
 8009ff6:	2d00      	cmp	r5, #0
 8009ff8:	d04c      	beq.n	800a094 <_Findy1+0xa8>
 8009ffa:	4628      	mov	r0, r5
 8009ffc:	f007 f8ea 	bl	80111d4 <GUI_ALLOC_LockH>
 800a000:	6a87      	ldr	r7, [r0, #40]	; 0x28
 800a002:	9001      	str	r0, [sp, #4]
 800a004:	07bb      	lsls	r3, r7, #30
 800a006:	4601      	mov	r1, r0
 800a008:	d53d      	bpl.n	800a086 <_Findy1+0x9a>
 800a00a:	ad02      	add	r5, sp, #8
 800a00c:	b126      	cbz	r6, 800a018 <_Findy1+0x2c>
 800a00e:	4628      	mov	r0, r5
 800a010:	4632      	mov	r2, r6
 800a012:	f004 f8e3 	bl	800e1dc <GUI__IntersectRects>
 800a016:	e002      	b.n	800a01e <_Findy1+0x32>
 800a018:	c803      	ldmia	r0, {r0, r1}
 800a01a:	e885 0003 	stmia.w	r5, {r0, r1}
 800a01e:	4620      	mov	r0, r4
 800a020:	4629      	mov	r1, r5
 800a022:	f005 f96b 	bl	800f2fc <GUI_RectsIntersect>
 800a026:	b370      	cbz	r0, 800a086 <_Findy1+0x9a>
 800a028:	f017 0f01 	tst.w	r7, #1
 800a02c:	9b01      	ldr	r3, [sp, #4]
 800a02e:	d11e      	bne.n	800a06e <_Findy1+0x82>
 800a030:	b13e      	cbz	r6, 800a042 <_Findy1+0x56>
 800a032:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800a036:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 800a03a:	429a      	cmp	r2, r3
 800a03c:	bfa8      	it	ge
 800a03e:	4613      	movge	r3, r2
 800a040:	e001      	b.n	800a046 <_Findy1+0x5a>
 800a042:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a046:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800a04a:	4293      	cmp	r3, r2
 800a04c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800a050:	dd06      	ble.n	800a060 <_Findy1+0x74>
 800a052:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800a056:	b219      	sxth	r1, r3
 800a058:	428a      	cmp	r2, r1
 800a05a:	db14      	blt.n	800a086 <_Findy1+0x9a>
 800a05c:	3b01      	subs	r3, #1
 800a05e:	e004      	b.n	800a06a <_Findy1+0x7e>
 800a060:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800a064:	b219      	sxth	r1, r3
 800a066:	428a      	cmp	r2, r1
 800a068:	dd0d      	ble.n	800a086 <_Findy1+0x9a>
 800a06a:	80e3      	strh	r3, [r4, #6]
 800a06c:	e00b      	b.n	800a086 <_Findy1+0x9a>
 800a06e:	69df      	ldr	r7, [r3, #28]
 800a070:	b14f      	cbz	r7, 800a086 <_Findy1+0x9a>
 800a072:	4638      	mov	r0, r7
 800a074:	4621      	mov	r1, r4
 800a076:	462a      	mov	r2, r5
 800a078:	f7ff ffb8 	bl	8009fec <_Findy1>
 800a07c:	4638      	mov	r0, r7
 800a07e:	f007 f89f 	bl	80111c0 <GUI_ALLOC_h2p>
 800a082:	6a07      	ldr	r7, [r0, #32]
 800a084:	e7f4      	b.n	800a070 <_Findy1+0x84>
 800a086:	a804      	add	r0, sp, #16
 800a088:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 800a08c:	6a1d      	ldr	r5, [r3, #32]
 800a08e:	f007 f8af 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800a092:	e7b0      	b.n	8009ff6 <_Findy1+0xa>
 800a094:	b005      	add	sp, #20
 800a096:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a098 <_Findx0>:
 800a098:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800a09c:	4604      	mov	r4, r0
 800a09e:	460f      	mov	r7, r1
 800a0a0:	4690      	mov	r8, r2
 800a0a2:	2500      	movs	r5, #0
 800a0a4:	2c00      	cmp	r4, #0
 800a0a6:	d037      	beq.n	800a118 <_Findx0+0x80>
 800a0a8:	4620      	mov	r0, r4
 800a0aa:	f007 f893 	bl	80111d4 <GUI_ALLOC_LockH>
 800a0ae:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800a0b0:	9001      	str	r0, [sp, #4]
 800a0b2:	07b2      	lsls	r2, r6, #30
 800a0b4:	4601      	mov	r1, r0
 800a0b6:	d528      	bpl.n	800a10a <_Findx0+0x72>
 800a0b8:	ac02      	add	r4, sp, #8
 800a0ba:	f1b8 0f00 	cmp.w	r8, #0
 800a0be:	d004      	beq.n	800a0ca <_Findx0+0x32>
 800a0c0:	4620      	mov	r0, r4
 800a0c2:	4642      	mov	r2, r8
 800a0c4:	f004 f88a 	bl	800e1dc <GUI__IntersectRects>
 800a0c8:	e002      	b.n	800a0d0 <_Findx0+0x38>
 800a0ca:	c803      	ldmia	r0, {r0, r1}
 800a0cc:	e884 0003 	stmia.w	r4, {r0, r1}
 800a0d0:	4638      	mov	r0, r7
 800a0d2:	4621      	mov	r1, r4
 800a0d4:	f005 f912 	bl	800f2fc <GUI_RectsIntersect>
 800a0d8:	b1b8      	cbz	r0, 800a10a <_Findx0+0x72>
 800a0da:	07f3      	lsls	r3, r6, #31
 800a0dc:	d405      	bmi.n	800a0ea <_Findx0+0x52>
 800a0de:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	803b      	strh	r3, [r7, #0]
 800a0e6:	2501      	movs	r5, #1
 800a0e8:	e00f      	b.n	800a10a <_Findx0+0x72>
 800a0ea:	9b01      	ldr	r3, [sp, #4]
 800a0ec:	69de      	ldr	r6, [r3, #28]
 800a0ee:	b166      	cbz	r6, 800a10a <_Findx0+0x72>
 800a0f0:	4630      	mov	r0, r6
 800a0f2:	4639      	mov	r1, r7
 800a0f4:	4622      	mov	r2, r4
 800a0f6:	f7ff ffcf 	bl	800a098 <_Findx0>
 800a0fa:	2800      	cmp	r0, #0
 800a0fc:	4630      	mov	r0, r6
 800a0fe:	bf18      	it	ne
 800a100:	2501      	movne	r5, #1
 800a102:	f007 f85d 	bl	80111c0 <GUI_ALLOC_h2p>
 800a106:	6a06      	ldr	r6, [r0, #32]
 800a108:	e7f1      	b.n	800a0ee <_Findx0+0x56>
 800a10a:	a804      	add	r0, sp, #16
 800a10c:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 800a110:	6a1c      	ldr	r4, [r3, #32]
 800a112:	f007 f86d 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800a116:	e7c5      	b.n	800a0a4 <_Findx0+0xc>
 800a118:	4628      	mov	r0, r5
 800a11a:	b004      	add	sp, #16
 800a11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a120 <_Findx1>:
 800a120:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a122:	4604      	mov	r4, r0
 800a124:	b085      	sub	sp, #20
 800a126:	460e      	mov	r6, r1
 800a128:	4617      	mov	r7, r2
 800a12a:	2c00      	cmp	r4, #0
 800a12c:	d031      	beq.n	800a192 <_Findx1+0x72>
 800a12e:	4620      	mov	r0, r4
 800a130:	f007 f850 	bl	80111d4 <GUI_ALLOC_LockH>
 800a134:	6a85      	ldr	r5, [r0, #40]	; 0x28
 800a136:	9001      	str	r0, [sp, #4]
 800a138:	07aa      	lsls	r2, r5, #30
 800a13a:	4601      	mov	r1, r0
 800a13c:	d522      	bpl.n	800a184 <_Findx1+0x64>
 800a13e:	ac02      	add	r4, sp, #8
 800a140:	b127      	cbz	r7, 800a14c <_Findx1+0x2c>
 800a142:	4620      	mov	r0, r4
 800a144:	463a      	mov	r2, r7
 800a146:	f004 f849 	bl	800e1dc <GUI__IntersectRects>
 800a14a:	e002      	b.n	800a152 <_Findx1+0x32>
 800a14c:	c803      	ldmia	r0, {r0, r1}
 800a14e:	e884 0003 	stmia.w	r4, {r0, r1}
 800a152:	4630      	mov	r0, r6
 800a154:	4621      	mov	r1, r4
 800a156:	f005 f8d1 	bl	800f2fc <GUI_RectsIntersect>
 800a15a:	b198      	cbz	r0, 800a184 <_Findx1+0x64>
 800a15c:	07eb      	lsls	r3, r5, #31
 800a15e:	d404      	bmi.n	800a16a <_Findx1+0x4a>
 800a160:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800a164:	3b01      	subs	r3, #1
 800a166:	80b3      	strh	r3, [r6, #4]
 800a168:	e00c      	b.n	800a184 <_Findx1+0x64>
 800a16a:	9b01      	ldr	r3, [sp, #4]
 800a16c:	69dd      	ldr	r5, [r3, #28]
 800a16e:	b14d      	cbz	r5, 800a184 <_Findx1+0x64>
 800a170:	4628      	mov	r0, r5
 800a172:	4631      	mov	r1, r6
 800a174:	4622      	mov	r2, r4
 800a176:	f7ff ffd3 	bl	800a120 <_Findx1>
 800a17a:	4628      	mov	r0, r5
 800a17c:	f007 f820 	bl	80111c0 <GUI_ALLOC_h2p>
 800a180:	6a05      	ldr	r5, [r0, #32]
 800a182:	e7f4      	b.n	800a16e <_Findx1+0x4e>
 800a184:	a804      	add	r0, sp, #16
 800a186:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 800a18a:	6a1c      	ldr	r4, [r3, #32]
 800a18c:	f007 f830 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800a190:	e7cb      	b.n	800a12a <_Findx1+0xa>
 800a192:	b005      	add	sp, #20
 800a194:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800a198 <_Paint1Trans>:
 800a198:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a19c:	4d21      	ldr	r5, [pc, #132]	; (800a224 <_Paint1Trans+0x8c>)
 800a19e:	682b      	ldr	r3, [r5, #0]
 800a1a0:	4606      	mov	r6, r0
 800a1a2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800a1a4:	f007 f816 	bl	80111d4 <GUI_ALLOC_LockH>
 800a1a8:	9000      	str	r0, [sp, #0]
 800a1aa:	4630      	mov	r0, r6
 800a1ac:	f007 f812 	bl	80111d4 <GUI_ALLOC_LockH>
 800a1b0:	ac02      	add	r4, sp, #8
 800a1b2:	4601      	mov	r1, r0
 800a1b4:	9001      	str	r0, [sp, #4]
 800a1b6:	f854 0d08 	ldr.w	r0, [r4, #-8]!
 800a1ba:	3008      	adds	r0, #8
 800a1bc:	f005 f89e 	bl	800f2fc <GUI_RectsIntersect>
 800a1c0:	4607      	mov	r7, r0
 800a1c2:	b328      	cbz	r0, 800a210 <_Paint1Trans+0x78>
 800a1c4:	9901      	ldr	r1, [sp, #4]
 800a1c6:	9a00      	ldr	r2, [sp, #0]
 800a1c8:	682b      	ldr	r3, [r5, #0]
 800a1ca:	4c17      	ldr	r4, [pc, #92]	; (800a228 <_Paint1Trans+0x90>)
 800a1cc:	6d1f      	ldr	r7, [r3, #80]	; 0x50
 800a1ce:	f8d3 804c 	ldr.w	r8, [r3, #76]	; 0x4c
 800a1d2:	f101 0008 	add.w	r0, r1, #8
 800a1d6:	3208      	adds	r2, #8
 800a1d8:	f004 f800 	bl	800e1dc <GUI__IntersectRects>
 800a1dc:	4668      	mov	r0, sp
 800a1de:	f007 f807 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800a1e2:	9a01      	ldr	r2, [sp, #4]
 800a1e4:	682b      	ldr	r3, [r5, #0]
 800a1e6:	f9b2 1000 	ldrsh.w	r1, [r2]
 800a1ea:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800a1ee:	64d9      	str	r1, [r3, #76]	; 0x4c
 800a1f0:	651a      	str	r2, [r3, #80]	; 0x50
 800a1f2:	a801      	add	r0, sp, #4
 800a1f4:	6026      	str	r6, [r4, #0]
 800a1f6:	f006 fffb 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800a1fa:	4630      	mov	r0, r6
 800a1fc:	f7ff fee4 	bl	8009fc8 <_Paint1>
 800a200:	2300      	movs	r3, #0
 800a202:	6023      	str	r3, [r4, #0]
 800a204:	682b      	ldr	r3, [r5, #0]
 800a206:	651f      	str	r7, [r3, #80]	; 0x50
 800a208:	f8c3 804c 	str.w	r8, [r3, #76]	; 0x4c
 800a20c:	2701      	movs	r7, #1
 800a20e:	e005      	b.n	800a21c <_Paint1Trans+0x84>
 800a210:	4668      	mov	r0, sp
 800a212:	f006 ffed 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800a216:	a801      	add	r0, sp, #4
 800a218:	f006 ffea 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800a21c:	4638      	mov	r0, r7
 800a21e:	b002      	add	sp, #8
 800a220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a224:	20000238 	.word	0x20000238
 800a228:	2001b224 	.word	0x2001b224

0800a22c <_PaintTransChildren>:
 800a22c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800a230:	4606      	mov	r6, r0
 800a232:	f006 ffcf 	bl	80111d4 <GUI_ALLOC_LockH>
 800a236:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a238:	9001      	str	r0, [sp, #4]
 800a23a:	079b      	lsls	r3, r3, #30
 800a23c:	d405      	bmi.n	800a24a <_PaintTransChildren+0x1e>
 800a23e:	a801      	add	r0, sp, #4
 800a240:	f006 ffd6 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800a244:	b002      	add	sp, #8
 800a246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a24a:	69c4      	ldr	r4, [r0, #28]
 800a24c:	2c00      	cmp	r4, #0
 800a24e:	d0f6      	beq.n	800a23e <_PaintTransChildren+0x12>
 800a250:	4620      	mov	r0, r4
 800a252:	f006 ffbf 	bl	80111d4 <GUI_ALLOC_LockH>
 800a256:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a258:	ad02      	add	r5, sp, #8
 800a25a:	f003 0303 	and.w	r3, r3, #3
 800a25e:	2b03      	cmp	r3, #3
 800a260:	f845 0d08 	str.w	r0, [r5, #-8]!
 800a264:	d137      	bne.n	800a2d6 <_PaintTransChildren+0xaa>
 800a266:	9901      	ldr	r1, [sp, #4]
 800a268:	3108      	adds	r1, #8
 800a26a:	f005 f847 	bl	800f2fc <GUI_RectsIntersect>
 800a26e:	2800      	cmp	r0, #0
 800a270:	d031      	beq.n	800a2d6 <_PaintTransChildren+0xaa>
 800a272:	a802      	add	r0, sp, #8
 800a274:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 800a278:	f8b3 9008 	ldrh.w	r9, [r3, #8]
 800a27c:	f8b3 800a 	ldrh.w	r8, [r3, #10]
 800a280:	899f      	ldrh	r7, [r3, #12]
 800a282:	f8b3 a00e 	ldrh.w	sl, [r3, #14]
 800a286:	f006 ffb3 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800a28a:	4668      	mov	r0, sp
 800a28c:	f006 ffb0 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800a290:	4620      	mov	r0, r4
 800a292:	f7ff ff81 	bl	800a198 <_Paint1Trans>
 800a296:	b170      	cbz	r0, 800a2b6 <_PaintTransChildren+0x8a>
 800a298:	4620      	mov	r0, r4
 800a29a:	f006 ff91 	bl	80111c0 <GUI_ALLOC_h2p>
 800a29e:	9000      	str	r0, [sp, #0]
 800a2a0:	4620      	mov	r0, r4
 800a2a2:	f7ff ffc3 	bl	800a22c <_PaintTransChildren>
 800a2a6:	4620      	mov	r0, r4
 800a2a8:	f006 ff8a 	bl	80111c0 <GUI_ALLOC_h2p>
 800a2ac:	9000      	str	r0, [sp, #0]
 800a2ae:	4630      	mov	r0, r6
 800a2b0:	f006 ff86 	bl	80111c0 <GUI_ALLOC_h2p>
 800a2b4:	9001      	str	r0, [sp, #4]
 800a2b6:	4630      	mov	r0, r6
 800a2b8:	f006 ff8c 	bl	80111d4 <GUI_ALLOC_LockH>
 800a2bc:	9001      	str	r0, [sp, #4]
 800a2be:	4620      	mov	r0, r4
 800a2c0:	f006 ff88 	bl	80111d4 <GUI_ALLOC_LockH>
 800a2c4:	9b01      	ldr	r3, [sp, #4]
 800a2c6:	9000      	str	r0, [sp, #0]
 800a2c8:	f8a3 9008 	strh.w	r9, [r3, #8]
 800a2cc:	f8a3 800a 	strh.w	r8, [r3, #10]
 800a2d0:	819f      	strh	r7, [r3, #12]
 800a2d2:	f8a3 a00e 	strh.w	sl, [r3, #14]
 800a2d6:	9b00      	ldr	r3, [sp, #0]
 800a2d8:	4668      	mov	r0, sp
 800a2da:	6a1c      	ldr	r4, [r3, #32]
 800a2dc:	f006 ff88 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800a2e0:	e7b4      	b.n	800a24c <_PaintTransChildren+0x20>
	...

0800a2e4 <WM__PaintWinAndOverlays>:
 800a2e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2e6:	4604      	mov	r4, r0
 800a2e8:	f006 ff74 	bl	80111d4 <GUI_ALLOC_LockH>
 800a2ec:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800a2ee:	9001      	str	r0, [sp, #4]
 800a2f0:	f640 0301 	movw	r3, #2049	; 0x801
 800a2f4:	4013      	ands	r3, r2
 800a2f6:	2b01      	cmp	r3, #1
 800a2f8:	d005      	beq.n	800a306 <WM__PaintWinAndOverlays+0x22>
 800a2fa:	a801      	add	r0, sp, #4
 800a2fc:	f006 ff78 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800a300:	4620      	mov	r0, r4
 800a302:	f7ff fe61 	bl	8009fc8 <_Paint1>
 800a306:	4b14      	ldr	r3, [pc, #80]	; (800a358 <WM__PaintWinAndOverlays+0x74>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	b313      	cbz	r3, 800a352 <WM__PaintWinAndOverlays+0x6e>
 800a30c:	4620      	mov	r0, r4
 800a30e:	f7ff ff8d 	bl	800a22c <_PaintTransChildren>
 800a312:	4620      	mov	r0, r4
 800a314:	f006 ff54 	bl	80111c0 <GUI_ALLOC_h2p>
 800a318:	6985      	ldr	r5, [r0, #24]
 800a31a:	6a04      	ldr	r4, [r0, #32]
 800a31c:	b1cd      	cbz	r5, 800a352 <WM__PaintWinAndOverlays+0x6e>
 800a31e:	b194      	cbz	r4, 800a346 <WM__PaintWinAndOverlays+0x62>
 800a320:	4620      	mov	r0, r4
 800a322:	f006 ff4d 	bl	80111c0 <GUI_ALLOC_h2p>
 800a326:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a328:	f003 0303 	and.w	r3, r3, #3
 800a32c:	2b03      	cmp	r3, #3
 800a32e:	d102      	bne.n	800a336 <WM__PaintWinAndOverlays+0x52>
 800a330:	4620      	mov	r0, r4
 800a332:	f7ff ff31 	bl	800a198 <_Paint1Trans>
 800a336:	4620      	mov	r0, r4
 800a338:	f7ff ff78 	bl	800a22c <_PaintTransChildren>
 800a33c:	4620      	mov	r0, r4
 800a33e:	f006 ff3f 	bl	80111c0 <GUI_ALLOC_h2p>
 800a342:	6a04      	ldr	r4, [r0, #32]
 800a344:	e7eb      	b.n	800a31e <WM__PaintWinAndOverlays+0x3a>
 800a346:	4628      	mov	r0, r5
 800a348:	f006 ff3a 	bl	80111c0 <GUI_ALLOC_h2p>
 800a34c:	6a04      	ldr	r4, [r0, #32]
 800a34e:	6985      	ldr	r5, [r0, #24]
 800a350:	e7e4      	b.n	800a31c <WM__PaintWinAndOverlays+0x38>
 800a352:	b003      	add	sp, #12
 800a354:	bd30      	pop	{r4, r5, pc}
 800a356:	bf00      	nop
 800a358:	2001b270 	.word	0x2001b270

0800a35c <_cbPaintMemDev>:
 800a35c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800a360:	4d17      	ldr	r5, [pc, #92]	; (800a3c0 <_cbPaintMemDev+0x64>)
 800a362:	682b      	ldr	r3, [r5, #0]
 800a364:	4606      	mov	r6, r0
 800a366:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800a368:	f006 ff34 	bl	80111d4 <GUI_ALLOC_LockH>
 800a36c:	682a      	ldr	r2, [r5, #0]
 800a36e:	f8b0 a008 	ldrh.w	sl, [r0, #8]
 800a372:	f8b0 900a 	ldrh.w	r9, [r0, #10]
 800a376:	f8b0 800c 	ldrh.w	r8, [r0, #12]
 800a37a:	89c7      	ldrh	r7, [r0, #14]
 800a37c:	ac02      	add	r4, sp, #8
 800a37e:	3208      	adds	r2, #8
 800a380:	f844 0d04 	str.w	r0, [r4, #-4]!
 800a384:	f100 0308 	add.w	r3, r0, #8
 800a388:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a38c:	e883 0003 	stmia.w	r3, {r0, r1}
 800a390:	4620      	mov	r0, r4
 800a392:	f006 ff2d 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800a396:	6830      	ldr	r0, [r6, #0]
 800a398:	f7ff ffa4 	bl	800a2e4 <WM__PaintWinAndOverlays>
 800a39c:	682b      	ldr	r3, [r5, #0]
 800a39e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800a3a0:	f006 ff18 	bl	80111d4 <GUI_ALLOC_LockH>
 800a3a4:	9001      	str	r0, [sp, #4]
 800a3a6:	f8a0 a008 	strh.w	sl, [r0, #8]
 800a3aa:	f8a0 900a 	strh.w	r9, [r0, #10]
 800a3ae:	f8a0 800c 	strh.w	r8, [r0, #12]
 800a3b2:	81c7      	strh	r7, [r0, #14]
 800a3b4:	4620      	mov	r0, r4
 800a3b6:	f006 ff1b 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800a3ba:	b002      	add	sp, #8
 800a3bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3c0:	20000238 	.word	0x20000238

0800a3c4 <WM__ClipAtParentBorders>:
 800a3c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3c6:	4607      	mov	r7, r0
 800a3c8:	460d      	mov	r5, r1
 800a3ca:	4628      	mov	r0, r5
 800a3cc:	f006 ff02 	bl	80111d4 <GUI_ALLOC_LockH>
 800a3d0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a3d2:	ac02      	add	r4, sp, #8
 800a3d4:	f013 0602 	ands.w	r6, r3, #2
 800a3d8:	4601      	mov	r1, r0
 800a3da:	f844 0d04 	str.w	r0, [r4, #-4]!
 800a3de:	d104      	bne.n	800a3ea <WM__ClipAtParentBorders+0x26>
 800a3e0:	4620      	mov	r0, r4
 800a3e2:	f006 ff05 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800a3e6:	4630      	mov	r0, r6
 800a3e8:	e016      	b.n	800a418 <WM__ClipAtParentBorders+0x54>
 800a3ea:	4638      	mov	r0, r7
 800a3ec:	f003 ff28 	bl	800e240 <GUI__IntersectRect>
 800a3f0:	9b01      	ldr	r3, [sp, #4]
 800a3f2:	699e      	ldr	r6, [r3, #24]
 800a3f4:	4620      	mov	r0, r4
 800a3f6:	b956      	cbnz	r6, 800a40e <WM__ClipAtParentBorders+0x4a>
 800a3f8:	f006 fefa 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800a3fc:	4b07      	ldr	r3, [pc, #28]	; (800a41c <WM__ClipAtParentBorders+0x58>)
 800a3fe:	681a      	ldr	r2, [r3, #0]
 800a400:	4295      	cmp	r5, r2
 800a402:	d008      	beq.n	800a416 <WM__ClipAtParentBorders+0x52>
 800a404:	6858      	ldr	r0, [r3, #4]
 800a406:	1a2b      	subs	r3, r5, r0
 800a408:	4258      	negs	r0, r3
 800a40a:	4158      	adcs	r0, r3
 800a40c:	e004      	b.n	800a418 <WM__ClipAtParentBorders+0x54>
 800a40e:	f006 feef 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800a412:	4635      	mov	r5, r6
 800a414:	e7d9      	b.n	800a3ca <WM__ClipAtParentBorders+0x6>
 800a416:	2001      	movs	r0, #1
 800a418:	b003      	add	sp, #12
 800a41a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a41c:	2001b228 	.word	0x2001b228

0800a420 <WM__InsertWindowIntoList>:
 800a420:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a422:	4604      	mov	r4, r0
 800a424:	b085      	sub	sp, #20
 800a426:	460d      	mov	r5, r1
 800a428:	2900      	cmp	r1, #0
 800a42a:	d049      	beq.n	800a4c0 <WM__InsertWindowIntoList+0xa0>
 800a42c:	f006 fed2 	bl	80111d4 <GUI_ALLOC_LockH>
 800a430:	2300      	movs	r3, #0
 800a432:	6203      	str	r3, [r0, #32]
 800a434:	6185      	str	r5, [r0, #24]
 800a436:	9001      	str	r0, [sp, #4]
 800a438:	4628      	mov	r0, r5
 800a43a:	f006 fecb 	bl	80111d4 <GUI_ALLOC_LockH>
 800a43e:	9b01      	ldr	r3, [sp, #4]
 800a440:	69c5      	ldr	r5, [r0, #28]
 800a442:	9002      	str	r0, [sp, #8]
 800a444:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 800a446:	b92d      	cbnz	r5, 800a454 <WM__InsertWindowIntoList+0x34>
 800a448:	61c4      	str	r4, [r0, #28]
 800a44a:	a801      	add	r0, sp, #4
 800a44c:	f006 fed0 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800a450:	a802      	add	r0, sp, #8
 800a452:	e033      	b.n	800a4bc <WM__InsertWindowIntoList+0x9c>
 800a454:	4628      	mov	r0, r5
 800a456:	f006 febd 	bl	80111d4 <GUI_ALLOC_LockH>
 800a45a:	ae04      	add	r6, sp, #16
 800a45c:	f007 0708 	and.w	r7, r7, #8
 800a460:	f846 0d04 	str.w	r0, [r6, #-4]!
 800a464:	b977      	cbnz	r7, 800a484 <WM__InsertWindowIntoList+0x64>
 800a466:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a468:	071a      	lsls	r2, r3, #28
 800a46a:	d50b      	bpl.n	800a484 <WM__InsertWindowIntoList+0x64>
 800a46c:	9b01      	ldr	r3, [sp, #4]
 800a46e:	621d      	str	r5, [r3, #32]
 800a470:	9b02      	ldr	r3, [sp, #8]
 800a472:	a801      	add	r0, sp, #4
 800a474:	61dc      	str	r4, [r3, #28]
 800a476:	f006 febb 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800a47a:	a802      	add	r0, sp, #8
 800a47c:	f006 feb8 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800a480:	4630      	mov	r0, r6
 800a482:	e01b      	b.n	800a4bc <WM__InsertWindowIntoList+0x9c>
 800a484:	a802      	add	r0, sp, #8
 800a486:	f006 feb3 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800a48a:	4630      	mov	r0, r6
 800a48c:	f006 feb0 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800a490:	4628      	mov	r0, r5
 800a492:	f006 fe95 	bl	80111c0 <GUI_ALLOC_h2p>
 800a496:	9003      	str	r0, [sp, #12]
 800a498:	9b03      	ldr	r3, [sp, #12]
 800a49a:	6a1d      	ldr	r5, [r3, #32]
 800a49c:	b90d      	cbnz	r5, 800a4a2 <WM__InsertWindowIntoList+0x82>
 800a49e:	621c      	str	r4, [r3, #32]
 800a4a0:	e00b      	b.n	800a4ba <WM__InsertWindowIntoList+0x9a>
 800a4a2:	4628      	mov	r0, r5
 800a4a4:	f006 fe8c 	bl	80111c0 <GUI_ALLOC_h2p>
 800a4a8:	2f00      	cmp	r7, #0
 800a4aa:	d1f4      	bne.n	800a496 <WM__InsertWindowIntoList+0x76>
 800a4ac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a4ae:	071b      	lsls	r3, r3, #28
 800a4b0:	d5f1      	bpl.n	800a496 <WM__InsertWindowIntoList+0x76>
 800a4b2:	9b03      	ldr	r3, [sp, #12]
 800a4b4:	621c      	str	r4, [r3, #32]
 800a4b6:	9b01      	ldr	r3, [sp, #4]
 800a4b8:	621d      	str	r5, [r3, #32]
 800a4ba:	a801      	add	r0, sp, #4
 800a4bc:	f006 fe98 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800a4c0:	b005      	add	sp, #20
 800a4c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a4c4 <WM__RemoveWindowFromList>:
 800a4c4:	b570      	push	{r4, r5, r6, lr}
 800a4c6:	4604      	mov	r4, r0
 800a4c8:	f006 fe7a 	bl	80111c0 <GUI_ALLOC_h2p>
 800a4cc:	4605      	mov	r5, r0
 800a4ce:	6980      	ldr	r0, [r0, #24]
 800a4d0:	b1a8      	cbz	r0, 800a4fe <WM__RemoveWindowFromList+0x3a>
 800a4d2:	f006 fe75 	bl	80111c0 <GUI_ALLOC_h2p>
 800a4d6:	69c3      	ldr	r3, [r0, #28]
 800a4d8:	42a3      	cmp	r3, r4
 800a4da:	4606      	mov	r6, r0
 800a4dc:	d105      	bne.n	800a4ea <WM__RemoveWindowFromList+0x26>
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f006 fe6e 	bl	80111c0 <GUI_ALLOC_h2p>
 800a4e4:	6a03      	ldr	r3, [r0, #32]
 800a4e6:	61f3      	str	r3, [r6, #28]
 800a4e8:	bd70      	pop	{r4, r5, r6, pc}
 800a4ea:	b143      	cbz	r3, 800a4fe <WM__RemoveWindowFromList+0x3a>
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f006 fe67 	bl	80111c0 <GUI_ALLOC_h2p>
 800a4f2:	6a03      	ldr	r3, [r0, #32]
 800a4f4:	42a3      	cmp	r3, r4
 800a4f6:	d1f8      	bne.n	800a4ea <WM__RemoveWindowFromList+0x26>
 800a4f8:	6a2b      	ldr	r3, [r5, #32]
 800a4fa:	6203      	str	r3, [r0, #32]
 800a4fc:	bd70      	pop	{r4, r5, r6, pc}
 800a4fe:	bd70      	pop	{r4, r5, r6, pc}

0800a500 <WM__Client2Screen>:
 800a500:	4603      	mov	r3, r0
 800a502:	4608      	mov	r0, r1
 800a504:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800a508:	f9b3 1000 	ldrsh.w	r1, [r3]
 800a50c:	f004 bffa 	b.w	800f504 <GUI_MoveRect>

0800a510 <_SetClipRectUserIntersect>:
 800a510:	4b11      	ldr	r3, [pc, #68]	; (800a558 <_SetClipRectUserIntersect+0x48>)
 800a512:	b530      	push	{r4, r5, lr}
 800a514:	681c      	ldr	r4, [r3, #0]
 800a516:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800a518:	b085      	sub	sp, #20
 800a51a:	4605      	mov	r5, r0
 800a51c:	b1ba      	cbz	r2, 800a54e <_SetClipRectUserIntersect+0x3e>
 800a51e:	6810      	ldr	r0, [r2, #0]
 800a520:	6851      	ldr	r1, [r2, #4]
 800a522:	ab02      	add	r3, sp, #8
 800a524:	c303      	stmia	r3!, {r0, r1}
 800a526:	4b0d      	ldr	r3, [pc, #52]	; (800a55c <_SetClipRectUserIntersect+0x4c>)
 800a528:	6818      	ldr	r0, [r3, #0]
 800a52a:	b900      	cbnz	r0, 800a52e <_SetClipRectUserIntersect+0x1e>
 800a52c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a52e:	f006 fe51 	bl	80111d4 <GUI_ALLOC_LockH>
 800a532:	ac04      	add	r4, sp, #16
 800a534:	a902      	add	r1, sp, #8
 800a536:	f844 0d0c 	str.w	r0, [r4, #-12]!
 800a53a:	f7ff ffe1 	bl	800a500 <WM__Client2Screen>
 800a53e:	4620      	mov	r0, r4
 800a540:	f006 fe56 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800a544:	a802      	add	r0, sp, #8
 800a546:	4629      	mov	r1, r5
 800a548:	f003 fe7a 	bl	800e240 <GUI__IntersectRect>
 800a54c:	a802      	add	r0, sp, #8
 800a54e:	f003 f835 	bl	800d5bc <LCD_SetClipRectEx>
 800a552:	b005      	add	sp, #20
 800a554:	bd30      	pop	{r4, r5, pc}
 800a556:	bf00      	nop
 800a558:	20000238 	.word	0x20000238
 800a55c:	2001b224 	.word	0x2001b224

0800a560 <WM__ActivateClipRect>:
 800a560:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a562:	4b0e      	ldr	r3, [pc, #56]	; (800a59c <WM__ActivateClipRect+0x3c>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800a56a:	b10a      	cbz	r2, 800a570 <WM__ActivateClipRect+0x10>
 800a56c:	480c      	ldr	r0, [pc, #48]	; (800a5a0 <WM__ActivateClipRect+0x40>)
 800a56e:	e011      	b.n	800a594 <WM__ActivateClipRect+0x34>
 800a570:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800a572:	f006 fe2f 	bl	80111d4 <GUI_ALLOC_LockH>
 800a576:	9001      	str	r0, [sp, #4]
 800a578:	c803      	ldmia	r0, {r0, r1}
 800a57a:	ac02      	add	r4, sp, #8
 800a57c:	e884 0003 	stmia.w	r4, {r0, r1}
 800a580:	a801      	add	r0, sp, #4
 800a582:	f006 fe35 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800a586:	4b07      	ldr	r3, [pc, #28]	; (800a5a4 <WM__ActivateClipRect+0x44>)
 800a588:	6819      	ldr	r1, [r3, #0]
 800a58a:	b111      	cbz	r1, 800a592 <WM__ActivateClipRect+0x32>
 800a58c:	4620      	mov	r0, r4
 800a58e:	f7ff ff19 	bl	800a3c4 <WM__ClipAtParentBorders>
 800a592:	4620      	mov	r0, r4
 800a594:	f7ff ffbc 	bl	800a510 <_SetClipRectUserIntersect>
 800a598:	b004      	add	sp, #16
 800a59a:	bd10      	pop	{r4, pc}
 800a59c:	20000238 	.word	0x20000238
 800a5a0:	20019404 	.word	0x20019404
 800a5a4:	2001b224 	.word	0x2001b224

0800a5a8 <WM__IsWindow>:
 800a5a8:	4b06      	ldr	r3, [pc, #24]	; (800a5c4 <WM__IsWindow+0x1c>)
 800a5aa:	b510      	push	{r4, lr}
 800a5ac:	4604      	mov	r4, r0
 800a5ae:	6818      	ldr	r0, [r3, #0]
 800a5b0:	b128      	cbz	r0, 800a5be <WM__IsWindow+0x16>
 800a5b2:	42a0      	cmp	r0, r4
 800a5b4:	d004      	beq.n	800a5c0 <WM__IsWindow+0x18>
 800a5b6:	f006 fe03 	bl	80111c0 <GUI_ALLOC_h2p>
 800a5ba:	6940      	ldr	r0, [r0, #20]
 800a5bc:	e7f8      	b.n	800a5b0 <WM__IsWindow+0x8>
 800a5be:	bd10      	pop	{r4, pc}
 800a5c0:	2001      	movs	r0, #1
 800a5c2:	bd10      	pop	{r4, pc}
 800a5c4:	2001b244 	.word	0x2001b244

0800a5c8 <WM__InvalidateDrawAndDescs>:
 800a5c8:	b513      	push	{r0, r1, r4, lr}
 800a5ca:	4604      	mov	r4, r0
 800a5cc:	b300      	cbz	r0, 800a610 <WM__InvalidateDrawAndDescs+0x48>
 800a5ce:	f006 fe01 	bl	80111d4 <GUI_ALLOC_LockH>
 800a5d2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800a5d4:	9001      	str	r0, [sp, #4]
 800a5d6:	0793      	lsls	r3, r2, #30
 800a5d8:	d517      	bpl.n	800a60a <WM__InvalidateDrawAndDescs+0x42>
 800a5da:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800a5dc:	b140      	cbz	r0, 800a5f0 <WM__InvalidateDrawAndDescs+0x28>
 800a5de:	4b0d      	ldr	r3, [pc, #52]	; (800a614 <WM__InvalidateDrawAndDescs+0x4c>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	42a3      	cmp	r3, r4
 800a5e4:	d004      	beq.n	800a5f0 <WM__InvalidateDrawAndDescs+0x28>
 800a5e6:	f001 fe61 	bl	800c2ac <GUI_MEMDEV_Delete>
 800a5ea:	9b01      	ldr	r3, [sp, #4]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	625a      	str	r2, [r3, #36]	; 0x24
 800a5f0:	4620      	mov	r0, r4
 800a5f2:	f7ff fc1d 	bl	8009e30 <WM_GetFirstChild>
 800a5f6:	4604      	mov	r4, r0
 800a5f8:	b13c      	cbz	r4, 800a60a <WM__InvalidateDrawAndDescs+0x42>
 800a5fa:	4620      	mov	r0, r4
 800a5fc:	f7ff ffe4 	bl	800a5c8 <WM__InvalidateDrawAndDescs>
 800a600:	4620      	mov	r0, r4
 800a602:	f006 fddd 	bl	80111c0 <GUI_ALLOC_h2p>
 800a606:	6a04      	ldr	r4, [r0, #32]
 800a608:	e7f6      	b.n	800a5f8 <WM__InvalidateDrawAndDescs+0x30>
 800a60a:	a801      	add	r0, sp, #4
 800a60c:	f006 fdf0 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800a610:	b002      	add	sp, #8
 800a612:	bd10      	pop	{r4, pc}
 800a614:	2001b26c 	.word	0x2001b26c

0800a618 <WM__RectIsNZ>:
 800a618:	f9b0 2000 	ldrsh.w	r2, [r0]
 800a61c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800a620:	429a      	cmp	r2, r3
 800a622:	dc08      	bgt.n	800a636 <WM__RectIsNZ+0x1e>
 800a624:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800a628:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800a62c:	429a      	cmp	r2, r3
 800a62e:	bfcc      	ite	gt
 800a630:	2000      	movgt	r0, #0
 800a632:	2001      	movle	r0, #1
 800a634:	4770      	bx	lr
 800a636:	2000      	movs	r0, #0
 800a638:	4770      	bx	lr
	...

0800a63c <_Invalidate1Abs>:
 800a63c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a63e:	b085      	sub	sp, #20
 800a640:	4606      	mov	r6, r0
 800a642:	460d      	mov	r5, r1
 800a644:	4617      	mov	r7, r2
 800a646:	f006 fdbb 	bl	80111c0 <GUI_ALLOC_h2p>
 800a64a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800a64c:	9001      	str	r0, [sp, #4]
 800a64e:	07a3      	lsls	r3, r4, #30
 800a650:	d534      	bpl.n	800a6bc <_Invalidate1Abs+0x80>
 800a652:	4628      	mov	r0, r5
 800a654:	f7ff ffe0 	bl	800a618 <WM__RectIsNZ>
 800a658:	2800      	cmp	r0, #0
 800a65a:	d02f      	beq.n	800a6bc <_Invalidate1Abs+0x80>
 800a65c:	f640 0301 	movw	r3, #2049	; 0x801
 800a660:	4023      	ands	r3, r4
 800a662:	2b01      	cmp	r3, #1
 800a664:	d02a      	beq.n	800a6bc <_Invalidate1Abs+0x80>
 800a666:	4630      	mov	r0, r6
 800a668:	f006 fdb4 	bl	80111d4 <GUI_ALLOC_LockH>
 800a66c:	ac02      	add	r4, sp, #8
 800a66e:	4602      	mov	r2, r0
 800a670:	9001      	str	r0, [sp, #4]
 800a672:	4629      	mov	r1, r5
 800a674:	4620      	mov	r0, r4
 800a676:	f003 fdb1 	bl	800e1dc <GUI__IntersectRects>
 800a67a:	4620      	mov	r0, r4
 800a67c:	f7ff ffcc 	bl	800a618 <WM__RectIsNZ>
 800a680:	b1c8      	cbz	r0, 800a6b6 <_Invalidate1Abs+0x7a>
 800a682:	9b01      	ldr	r3, [sp, #4]
 800a684:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 800a686:	f244 0120 	movw	r1, #16416	; 0x4020
 800a68a:	4031      	ands	r1, r6
 800a68c:	f103 0508 	add.w	r5, r3, #8
 800a690:	b129      	cbz	r1, 800a69e <_Invalidate1Abs+0x62>
 800a692:	4628      	mov	r0, r5
 800a694:	4629      	mov	r1, r5
 800a696:	4622      	mov	r2, r4
 800a698:	f004 ff44 	bl	800f524 <GUI_MergeRect>
 800a69c:	e00b      	b.n	800a6b6 <_Invalidate1Abs+0x7a>
 800a69e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a6a2:	433e      	orrs	r6, r7
 800a6a4:	e885 0003 	stmia.w	r5, {r0, r1}
 800a6a8:	629e      	str	r6, [r3, #40]	; 0x28
 800a6aa:	4b05      	ldr	r3, [pc, #20]	; (800a6c0 <_Invalidate1Abs+0x84>)
 800a6ac:	881a      	ldrh	r2, [r3, #0]
 800a6ae:	3201      	adds	r2, #1
 800a6b0:	801a      	strh	r2, [r3, #0]
 800a6b2:	f004 f845 	bl	800e740 <GUI_SignalEvent>
 800a6b6:	a801      	add	r0, sp, #4
 800a6b8:	f006 fd9a 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800a6bc:	b005      	add	sp, #20
 800a6be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6c0:	2001b240 	.word	0x2001b240

0800a6c4 <WM__Invalidate1Abs>:
 800a6c4:	2220      	movs	r2, #32
 800a6c6:	f7ff bfb9 	b.w	800a63c <_Invalidate1Abs>

0800a6ca <WM_InvalidateWindowAndDescsEx>:
 800a6ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6cc:	460f      	mov	r7, r1
 800a6ce:	b085      	sub	sp, #20
 800a6d0:	4615      	mov	r5, r2
 800a6d2:	4606      	mov	r6, r0
 800a6d4:	b348      	cbz	r0, 800a72a <WM_InvalidateWindowAndDescsEx+0x60>
 800a6d6:	f006 fd7d 	bl	80111d4 <GUI_ALLOC_LockH>
 800a6da:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a6dc:	ac04      	add	r4, sp, #16
 800a6de:	079b      	lsls	r3, r3, #30
 800a6e0:	4602      	mov	r2, r0
 800a6e2:	f844 0d0c 	str.w	r0, [r4, #-12]!
 800a6e6:	d403      	bmi.n	800a6f0 <WM_InvalidateWindowAndDescsEx+0x26>
 800a6e8:	4620      	mov	r0, r4
 800a6ea:	f006 fd81 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800a6ee:	e01c      	b.n	800a72a <WM_InvalidateWindowAndDescsEx+0x60>
 800a6f0:	a802      	add	r0, sp, #8
 800a6f2:	4639      	mov	r1, r7
 800a6f4:	f003 fd72 	bl	800e1dc <GUI__IntersectRects>
 800a6f8:	2800      	cmp	r0, #0
 800a6fa:	d0f5      	beq.n	800a6e8 <WM_InvalidateWindowAndDescsEx+0x1e>
 800a6fc:	4620      	mov	r0, r4
 800a6fe:	f006 fd77 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800a702:	4630      	mov	r0, r6
 800a704:	a902      	add	r1, sp, #8
 800a706:	462a      	mov	r2, r5
 800a708:	f7ff ff98 	bl	800a63c <_Invalidate1Abs>
 800a70c:	4630      	mov	r0, r6
 800a70e:	f7ff fb8f 	bl	8009e30 <WM_GetFirstChild>
 800a712:	4604      	mov	r4, r0
 800a714:	b14c      	cbz	r4, 800a72a <WM_InvalidateWindowAndDescsEx+0x60>
 800a716:	4620      	mov	r0, r4
 800a718:	a902      	add	r1, sp, #8
 800a71a:	462a      	mov	r2, r5
 800a71c:	f7ff ffd5 	bl	800a6ca <WM_InvalidateWindowAndDescsEx>
 800a720:	4620      	mov	r0, r4
 800a722:	f006 fd4d 	bl	80111c0 <GUI_ALLOC_h2p>
 800a726:	6a04      	ldr	r4, [r0, #32]
 800a728:	e7f4      	b.n	800a714 <WM_InvalidateWindowAndDescsEx+0x4a>
 800a72a:	b005      	add	sp, #20
 800a72c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a72e <WM__InvalidateRect>:
 800a72e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800a732:	4680      	mov	r8, r0
 800a734:	4617      	mov	r7, r2
 800a736:	461d      	mov	r5, r3
 800a738:	460c      	mov	r4, r1
 800a73a:	2900      	cmp	r1, #0
 800a73c:	d030      	beq.n	800a7a0 <WM__InvalidateRect+0x72>
 800a73e:	4608      	mov	r0, r1
 800a740:	f006 fd48 	bl	80111d4 <GUI_ALLOC_LockH>
 800a744:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800a746:	9001      	str	r0, [sp, #4]
 800a748:	07b3      	lsls	r3, r6, #30
 800a74a:	4602      	mov	r2, r0
 800a74c:	d525      	bpl.n	800a79a <WM__InvalidateRect+0x6c>
 800a74e:	a802      	add	r0, sp, #8
 800a750:	4641      	mov	r1, r8
 800a752:	f003 fd43 	bl	800e1dc <GUI__IntersectRects>
 800a756:	b300      	cbz	r0, 800a79a <WM__InvalidateRect+0x6c>
 800a758:	f640 0301 	movw	r3, #2049	; 0x801
 800a75c:	4033      	ands	r3, r6
 800a75e:	2b01      	cmp	r3, #1
 800a760:	d107      	bne.n	800a772 <WM__InvalidateRect+0x44>
 800a762:	9b01      	ldr	r3, [sp, #4]
 800a764:	a802      	add	r0, sp, #8
 800a766:	6999      	ldr	r1, [r3, #24]
 800a768:	6a1a      	ldr	r2, [r3, #32]
 800a76a:	462b      	mov	r3, r5
 800a76c:	f7ff ffdf 	bl	800a72e <WM__InvalidateRect>
 800a770:	e004      	b.n	800a77c <WM__InvalidateRect+0x4e>
 800a772:	4620      	mov	r0, r4
 800a774:	a902      	add	r1, sp, #8
 800a776:	462a      	mov	r2, r5
 800a778:	f7ff ff60 	bl	800a63c <_Invalidate1Abs>
 800a77c:	9b01      	ldr	r3, [sp, #4]
 800a77e:	69dc      	ldr	r4, [r3, #28]
 800a780:	b15c      	cbz	r4, 800a79a <WM__InvalidateRect+0x6c>
 800a782:	42bc      	cmp	r4, r7
 800a784:	d009      	beq.n	800a79a <WM__InvalidateRect+0x6c>
 800a786:	4620      	mov	r0, r4
 800a788:	a902      	add	r1, sp, #8
 800a78a:	462a      	mov	r2, r5
 800a78c:	f7ff ff9d 	bl	800a6ca <WM_InvalidateWindowAndDescsEx>
 800a790:	4620      	mov	r0, r4
 800a792:	f006 fd15 	bl	80111c0 <GUI_ALLOC_h2p>
 800a796:	6a04      	ldr	r4, [r0, #32]
 800a798:	e7f2      	b.n	800a780 <WM__InvalidateRect+0x52>
 800a79a:	a801      	add	r0, sp, #4
 800a79c:	f006 fd28 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800a7a0:	b004      	add	sp, #16
 800a7a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a7a6 <WM__InvalidateParent>:
 800a7a6:	b570      	push	{r4, r5, r6, lr}
 800a7a8:	4605      	mov	r5, r0
 800a7aa:	4608      	mov	r0, r1
 800a7ac:	460c      	mov	r4, r1
 800a7ae:	4616      	mov	r6, r2
 800a7b0:	f006 fd06 	bl	80111c0 <GUI_ALLOC_h2p>
 800a7b4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a7b6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800a7ba:	4628      	mov	r0, r5
 800a7bc:	4621      	mov	r1, r4
 800a7be:	4632      	mov	r2, r6
 800a7c0:	bf0c      	ite	eq
 800a7c2:	2320      	moveq	r3, #32
 800a7c4:	f44f 4380 	movne.w	r3, #16384	; 0x4000
 800a7c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a7cc:	f7ff bfaf 	b.w	800a72e <WM__InvalidateRect>

0800a7d0 <WM__InvalidateRectEx>:
 800a7d0:	2320      	movs	r3, #32
 800a7d2:	f7ff bfac 	b.w	800a72e <WM__InvalidateRect>

0800a7d6 <WM__DetachWindow>:
 800a7d6:	b513      	push	{r0, r1, r4, lr}
 800a7d8:	4604      	mov	r4, r0
 800a7da:	f006 fcfb 	bl	80111d4 <GUI_ALLOC_LockH>
 800a7de:	6981      	ldr	r1, [r0, #24]
 800a7e0:	9001      	str	r0, [sp, #4]
 800a7e2:	b141      	cbz	r1, 800a7f6 <WM__DetachWindow+0x20>
 800a7e4:	6a02      	ldr	r2, [r0, #32]
 800a7e6:	f7ff fff3 	bl	800a7d0 <WM__InvalidateRectEx>
 800a7ea:	4620      	mov	r0, r4
 800a7ec:	f7ff fe6a 	bl	800a4c4 <WM__RemoveWindowFromList>
 800a7f0:	9b01      	ldr	r3, [sp, #4]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	619a      	str	r2, [r3, #24]
 800a7f6:	a801      	add	r0, sp, #4
 800a7f8:	f006 fcfa 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800a7fc:	b002      	add	sp, #8
 800a7fe:	bd10      	pop	{r4, pc}

0800a800 <WM_SendMessage>:
 800a800:	b108      	cbz	r0, 800a806 <WM_SendMessage+0x6>
 800a802:	f007 ba6b 	b.w	8011cdc <WM__SendMessage>
 800a806:	4770      	bx	lr

0800a808 <WM__SendMsgNoData>:
 800a808:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a80a:	ab04      	add	r3, sp, #16
 800a80c:	9001      	str	r0, [sp, #4]
 800a80e:	f843 1d10 	str.w	r1, [r3, #-16]!
 800a812:	4669      	mov	r1, sp
 800a814:	f007 fa62 	bl	8011cdc <WM__SendMessage>
 800a818:	b005      	add	sp, #20
 800a81a:	f85d fb04 	ldr.w	pc, [sp], #4

0800a81e <WM__GetClientRectWin>:
 800a81e:	2300      	movs	r3, #0
 800a820:	800b      	strh	r3, [r1, #0]
 800a822:	8882      	ldrh	r2, [r0, #4]
 800a824:	804b      	strh	r3, [r1, #2]
 800a826:	8803      	ldrh	r3, [r0, #0]
 800a828:	1ad3      	subs	r3, r2, r3
 800a82a:	808b      	strh	r3, [r1, #4]
 800a82c:	88c2      	ldrh	r2, [r0, #6]
 800a82e:	8843      	ldrh	r3, [r0, #2]
 800a830:	1ad3      	subs	r3, r2, r3
 800a832:	80cb      	strh	r3, [r1, #6]
 800a834:	4770      	bx	lr

0800a836 <WM_InvalidateRect>:
 800a836:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a838:	460f      	mov	r7, r1
 800a83a:	b087      	sub	sp, #28
 800a83c:	4605      	mov	r5, r0
 800a83e:	2800      	cmp	r0, #0
 800a840:	d033      	beq.n	800a8aa <WM_InvalidateRect+0x74>
 800a842:	f006 fcc7 	bl	80111d4 <GUI_ALLOC_LockH>
 800a846:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800a848:	9001      	str	r0, [sp, #4]
 800a84a:	07b2      	lsls	r2, r6, #30
 800a84c:	d52a      	bpl.n	800a8a4 <WM_InvalidateRect+0x6e>
 800a84e:	c803      	ldmia	r0, {r0, r1}
 800a850:	ac04      	add	r4, sp, #16
 800a852:	03f3      	lsls	r3, r6, #15
 800a854:	e884 0003 	stmia.w	r4, {r0, r1}
 800a858:	d502      	bpl.n	800a860 <WM_InvalidateRect+0x2a>
 800a85a:	4628      	mov	r0, r5
 800a85c:	f7ff feb4 	bl	800a5c8 <WM__InvalidateDrawAndDescs>
 800a860:	b15f      	cbz	r7, 800a87a <WM_InvalidateRect+0x44>
 800a862:	6838      	ldr	r0, [r7, #0]
 800a864:	6879      	ldr	r1, [r7, #4]
 800a866:	ab02      	add	r3, sp, #8
 800a868:	c303      	stmia	r3!, {r0, r1}
 800a86a:	9801      	ldr	r0, [sp, #4]
 800a86c:	a902      	add	r1, sp, #8
 800a86e:	f7ff fe47 	bl	800a500 <WM__Client2Screen>
 800a872:	4620      	mov	r0, r4
 800a874:	a902      	add	r1, sp, #8
 800a876:	f003 fce3 	bl	800e240 <GUI__IntersectRect>
 800a87a:	4620      	mov	r0, r4
 800a87c:	4629      	mov	r1, r5
 800a87e:	f7ff fda1 	bl	800a3c4 <WM__ClipAtParentBorders>
 800a882:	b178      	cbz	r0, 800a8a4 <WM_InvalidateRect+0x6e>
 800a884:	f640 0301 	movw	r3, #2049	; 0x801
 800a888:	4033      	ands	r3, r6
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	d106      	bne.n	800a89c <WM_InvalidateRect+0x66>
 800a88e:	9b01      	ldr	r3, [sp, #4]
 800a890:	4620      	mov	r0, r4
 800a892:	6999      	ldr	r1, [r3, #24]
 800a894:	6a1a      	ldr	r2, [r3, #32]
 800a896:	f7ff ff9b 	bl	800a7d0 <WM__InvalidateRectEx>
 800a89a:	e003      	b.n	800a8a4 <WM_InvalidateRect+0x6e>
 800a89c:	4628      	mov	r0, r5
 800a89e:	4621      	mov	r1, r4
 800a8a0:	f7ff ff10 	bl	800a6c4 <WM__Invalidate1Abs>
 800a8a4:	a801      	add	r0, sp, #4
 800a8a6:	f006 fca3 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800a8aa:	b007      	add	sp, #28
 800a8ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a8ae <WM_InvalidateWindow>:
 800a8ae:	2100      	movs	r1, #0
 800a8b0:	f7ff bfc1 	b.w	800a836 <WM_InvalidateRect>

0800a8b4 <WM__GetTopLevelLayer>:
 800a8b4:	b510      	push	{r4, lr}
 800a8b6:	4604      	mov	r4, r0
 800a8b8:	f006 fc82 	bl	80111c0 <GUI_ALLOC_h2p>
 800a8bc:	6980      	ldr	r0, [r0, #24]
 800a8be:	2800      	cmp	r0, #0
 800a8c0:	d1f9      	bne.n	800a8b6 <WM__GetTopLevelLayer+0x2>
 800a8c2:	4b05      	ldr	r3, [pc, #20]	; (800a8d8 <WM__GetTopLevelLayer+0x24>)
 800a8c4:	681a      	ldr	r2, [r3, #0]
 800a8c6:	4294      	cmp	r4, r2
 800a8c8:	d005      	beq.n	800a8d6 <WM__GetTopLevelLayer+0x22>
 800a8ca:	6858      	ldr	r0, [r3, #4]
 800a8cc:	4284      	cmp	r4, r0
 800a8ce:	bf14      	ite	ne
 800a8d0:	f04f 30ff 	movne.w	r0, #4294967295
 800a8d4:	2001      	moveq	r0, #1
 800a8d6:	bd10      	pop	{r4, pc}
 800a8d8:	2001b228 	.word	0x2001b228

0800a8dc <WM__SelectTopLevelLayer>:
 800a8dc:	b508      	push	{r3, lr}
 800a8de:	f7ff ffe9 	bl	800a8b4 <WM__GetTopLevelLayer>
 800a8e2:	2800      	cmp	r0, #0
 800a8e4:	db03      	blt.n	800a8ee <WM__SelectTopLevelLayer+0x12>
 800a8e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a8ea:	f004 bcd1 	b.w	800f290 <GUI_SelectLayer>
 800a8ee:	bd08      	pop	{r3, pc}

0800a8f0 <WM_SelectWindow>:
 800a8f0:	4a0d      	ldr	r2, [pc, #52]	; (800a928 <WM_SelectWindow+0x38>)
 800a8f2:	6813      	ldr	r3, [r2, #0]
 800a8f4:	b570      	push	{r4, r5, r6, lr}
 800a8f6:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 800a8f8:	4604      	mov	r4, r0
 800a8fa:	4616      	mov	r6, r2
 800a8fc:	b908      	cbnz	r0, 800a902 <WM_SelectWindow+0x12>
 800a8fe:	4a0b      	ldr	r2, [pc, #44]	; (800a92c <WM_SelectWindow+0x3c>)
 800a900:	6814      	ldr	r4, [r2, #0]
 800a902:	649c      	str	r4, [r3, #72]	; 0x48
 800a904:	4620      	mov	r0, r4
 800a906:	f7ff ffe9 	bl	800a8dc <WM__SelectTopLevelLayer>
 800a90a:	f003 fa87 	bl	800de1c <LCD_SetClipRectMax>
 800a90e:	4620      	mov	r0, r4
 800a910:	f006 fc56 	bl	80111c0 <GUI_ALLOC_h2p>
 800a914:	6833      	ldr	r3, [r6, #0]
 800a916:	f9b0 1000 	ldrsh.w	r1, [r0]
 800a91a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800a91e:	64d9      	str	r1, [r3, #76]	; 0x4c
 800a920:	651a      	str	r2, [r3, #80]	; 0x50
 800a922:	4628      	mov	r0, r5
 800a924:	bd70      	pop	{r4, r5, r6, pc}
 800a926:	bf00      	nop
 800a928:	20000238 	.word	0x20000238
 800a92c:	2001b244 	.word	0x2001b244

0800a930 <WM_CreateWindowAsChild>:
 800a930:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a934:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a936:	469b      	mov	fp, r3
 800a938:	4b4b      	ldr	r3, [pc, #300]	; (800aa68 <WM_CreateWindowAsChild+0x138>)
 800a93a:	4607      	mov	r7, r0
 800a93c:	4688      	mov	r8, r1
 800a93e:	4692      	mov	sl, r2
 800a940:	681e      	ldr	r6, [r3, #0]
 800a942:	bb65      	cbnz	r5, 800a99e <WM_CreateWindowAsChild+0x6e>
 800a944:	4b49      	ldr	r3, [pc, #292]	; (800aa6c <WM_CreateWindowAsChild+0x13c>)
 800a946:	881b      	ldrh	r3, [r3, #0]
 800a948:	b363      	cbz	r3, 800a9a4 <WM_CreateWindowAsChild+0x74>
 800a94a:	4b49      	ldr	r3, [pc, #292]	; (800aa70 <WM_CreateWindowAsChild+0x140>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	7c5a      	ldrb	r2, [r3, #17]
 800a950:	4b48      	ldr	r3, [pc, #288]	; (800aa74 <WM_CreateWindowAsChild+0x144>)
 800a952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a956:	1c5a      	adds	r2, r3, #1
 800a958:	d024      	beq.n	800a9a4 <WM_CreateWindowAsChild+0x74>
 800a95a:	b31b      	cbz	r3, 800a9a4 <WM_CreateWindowAsChild+0x74>
 800a95c:	461d      	mov	r5, r3
 800a95e:	4628      	mov	r0, r5
 800a960:	f006 fc38 	bl	80111d4 <GUI_ALLOC_LockH>
 800a964:	f9b0 2000 	ldrsh.w	r2, [r0]
 800a968:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800a96c:	9001      	str	r0, [sp, #4]
 800a96e:	4417      	add	r7, r2
 800a970:	4498      	add	r8, r3
 800a972:	f1ba 0f00 	cmp.w	sl, #0
 800a976:	d105      	bne.n	800a984 <WM_CreateWindowAsChild+0x54>
 800a978:	f9b0 a004 	ldrsh.w	sl, [r0, #4]
 800a97c:	ebc2 0a0a 	rsb	sl, r2, sl
 800a980:	f10a 0a01 	add.w	sl, sl, #1
 800a984:	f1bb 0f00 	cmp.w	fp, #0
 800a988:	d105      	bne.n	800a996 <WM_CreateWindowAsChild+0x66>
 800a98a:	f9b0 b006 	ldrsh.w	fp, [r0, #6]
 800a98e:	ebc3 0b0b 	rsb	fp, r3, fp
 800a992:	f10b 0b01 	add.w	fp, fp, #1
 800a996:	a801      	add	r0, sp, #4
 800a998:	f006 fc2a 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800a99c:	e002      	b.n	800a9a4 <WM_CreateWindowAsChild+0x74>
 800a99e:	1c6b      	adds	r3, r5, #1
 800a9a0:	d1dd      	bne.n	800a95e <WM_CreateWindowAsChild+0x2e>
 800a9a2:	2500      	movs	r5, #0
 800a9a4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800a9a6:	302c      	adds	r0, #44	; 0x2c
 800a9a8:	f006 fe81 	bl	80116ae <GUI_ALLOC_AllocZero>
 800a9ac:	4604      	mov	r4, r0
 800a9ae:	2800      	cmp	r0, #0
 800a9b0:	d056      	beq.n	800aa60 <WM_CreateWindowAsChild+0x130>
 800a9b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a9b4:	431e      	orrs	r6, r3
 800a9b6:	4b2d      	ldr	r3, [pc, #180]	; (800aa6c <WM_CreateWindowAsChild+0x13c>)
 800a9b8:	881a      	ldrh	r2, [r3, #0]
 800a9ba:	3201      	adds	r2, #1
 800a9bc:	801a      	strh	r2, [r3, #0]
 800a9be:	f006 fc09 	bl	80111d4 <GUI_ALLOC_LockH>
 800a9c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a9c4:	6103      	str	r3, [r0, #16]
 800a9c6:	f10d 0908 	add.w	r9, sp, #8
 800a9ca:	4b2b      	ldr	r3, [pc, #172]	; (800aa78 <WM_CreateWindowAsChild+0x148>)
 800a9cc:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800a9ce:	f849 0d08 	str.w	r0, [r9, #-8]!
 800a9d2:	4033      	ands	r3, r6
 800a9d4:	8007      	strh	r7, [r0, #0]
 800a9d6:	f8a0 8002 	strh.w	r8, [r0, #2]
 800a9da:	4457      	add	r7, sl
 800a9dc:	44d8      	add	r8, fp
 800a9de:	4313      	orrs	r3, r2
 800a9e0:	3f01      	subs	r7, #1
 800a9e2:	f108 38ff 	add.w	r8, r8, #4294967295
 800a9e6:	6283      	str	r3, [r0, #40]	; 0x28
 800a9e8:	8087      	strh	r7, [r0, #4]
 800a9ea:	f8a0 8006 	strh.w	r8, [r0, #6]
 800a9ee:	4668      	mov	r0, sp
 800a9f0:	f006 fbfe 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800a9f4:	4b21      	ldr	r3, [pc, #132]	; (800aa7c <WM_CreateWindowAsChild+0x14c>)
 800a9f6:	6818      	ldr	r0, [r3, #0]
 800a9f8:	b148      	cbz	r0, 800aa0e <WM_CreateWindowAsChild+0xde>
 800a9fa:	f006 fbe1 	bl	80111c0 <GUI_ALLOC_h2p>
 800a9fe:	4607      	mov	r7, r0
 800aa00:	4620      	mov	r0, r4
 800aa02:	f006 fbdd 	bl	80111c0 <GUI_ALLOC_h2p>
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	6143      	str	r3, [r0, #20]
 800aa0a:	617c      	str	r4, [r7, #20]
 800aa0c:	e000      	b.n	800aa10 <WM_CreateWindowAsChild+0xe0>
 800aa0e:	601c      	str	r4, [r3, #0]
 800aa10:	4629      	mov	r1, r5
 800aa12:	4620      	mov	r0, r4
 800aa14:	f7ff fd04 	bl	800a420 <WM__InsertWindowIntoList>
 800aa18:	06b5      	lsls	r5, r6, #26
 800aa1a:	d502      	bpl.n	800aa22 <WM_CreateWindowAsChild+0xf2>
 800aa1c:	4620      	mov	r0, r4
 800aa1e:	f7ff ff67 	bl	800a8f0 <WM_SelectWindow>
 800aa22:	07f0      	lsls	r0, r6, #31
 800aa24:	d503      	bpl.n	800aa2e <WM_CreateWindowAsChild+0xfe>
 800aa26:	4b16      	ldr	r3, [pc, #88]	; (800aa80 <WM_CreateWindowAsChild+0x150>)
 800aa28:	681a      	ldr	r2, [r3, #0]
 800aa2a:	3201      	adds	r2, #1
 800aa2c:	601a      	str	r2, [r3, #0]
 800aa2e:	0671      	lsls	r1, r6, #25
 800aa30:	d502      	bpl.n	800aa38 <WM_CreateWindowAsChild+0x108>
 800aa32:	4620      	mov	r0, r4
 800aa34:	f007 fccc 	bl	80123d0 <WM_BringToBottom>
 800aa38:	07b2      	lsls	r2, r6, #30
 800aa3a:	d50d      	bpl.n	800aa58 <WM_CreateWindowAsChild+0x128>
 800aa3c:	4620      	mov	r0, r4
 800aa3e:	f006 fbc9 	bl	80111d4 <GUI_ALLOC_LockH>
 800aa42:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800aa44:	9000      	str	r0, [sp, #0]
 800aa46:	f043 0302 	orr.w	r3, r3, #2
 800aa4a:	6283      	str	r3, [r0, #40]	; 0x28
 800aa4c:	4668      	mov	r0, sp
 800aa4e:	f006 fbcf 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800aa52:	4620      	mov	r0, r4
 800aa54:	f7ff ff2b 	bl	800a8ae <WM_InvalidateWindow>
 800aa58:	4620      	mov	r0, r4
 800aa5a:	2101      	movs	r1, #1
 800aa5c:	f7ff fed4 	bl	800a808 <WM__SendMsgNoData>
 800aa60:	4620      	mov	r0, r4
 800aa62:	b003      	add	sp, #12
 800aa64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa68:	2001b250 	.word	0x2001b250
 800aa6c:	2001b220 	.word	0x2001b220
 800aa70:	20000238 	.word	0x20000238
 800aa74:	2001b228 	.word	0x2001b228
 800aa78:	003f3f9f 	.word	0x003f3f9f
 800aa7c:	2001b244 	.word	0x2001b244
 800aa80:	2001b270 	.word	0x2001b270

0800aa84 <WM_DeleteWindow>:
 800aa84:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aa86:	4604      	mov	r4, r0
 800aa88:	2800      	cmp	r0, #0
 800aa8a:	d06e      	beq.n	800ab6a <WM_DeleteWindow+0xe6>
 800aa8c:	f7ff fd8c 	bl	800a5a8 <WM__IsWindow>
 800aa90:	2800      	cmp	r0, #0
 800aa92:	d06a      	beq.n	800ab6a <WM_DeleteWindow+0xe6>
 800aa94:	4620      	mov	r0, r4
 800aa96:	f7ff ff0d 	bl	800a8b4 <WM__GetTopLevelLayer>
 800aa9a:	210b      	movs	r1, #11
 800aa9c:	4605      	mov	r5, r0
 800aa9e:	4620      	mov	r0, r4
 800aaa0:	f7ff feb2 	bl	800a808 <WM__SendMsgNoData>
 800aaa4:	4620      	mov	r0, r4
 800aaa6:	f7fe fe94 	bl	80097d2 <WM__DeleteAssocTimer>
 800aaaa:	4620      	mov	r0, r4
 800aaac:	f006 fb92 	bl	80111d4 <GUI_ALLOC_LockH>
 800aab0:	9001      	str	r0, [sp, #4]
 800aab2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800aab4:	b108      	cbz	r0, 800aaba <WM_DeleteWindow+0x36>
 800aab6:	f001 fbf9 	bl	800c2ac <GUI_MEMDEV_Delete>
 800aaba:	4b2d      	ldr	r3, [pc, #180]	; (800ab70 <WM_DeleteWindow+0xec>)
 800aabc:	4a2d      	ldr	r2, [pc, #180]	; (800ab74 <WM_DeleteWindow+0xf0>)
 800aabe:	2100      	movs	r1, #0
 800aac0:	6019      	str	r1, [r3, #0]
 800aac2:	4b2d      	ldr	r3, [pc, #180]	; (800ab78 <WM_DeleteWindow+0xf4>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800aaca:	42a0      	cmp	r0, r4
 800aacc:	bf08      	it	eq
 800aace:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 800aad2:	4a2a      	ldr	r2, [pc, #168]	; (800ab7c <WM_DeleteWindow+0xf8>)
 800aad4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800aad8:	42a1      	cmp	r1, r4
 800aada:	bf04      	itt	eq
 800aadc:	2100      	moveq	r1, #0
 800aade:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 800aae2:	4b27      	ldr	r3, [pc, #156]	; (800ab80 <WM_DeleteWindow+0xfc>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	b12b      	cbz	r3, 800aaf4 <WM_DeleteWindow+0x70>
 800aae8:	685a      	ldr	r2, [r3, #4]
 800aaea:	42a2      	cmp	r2, r4
 800aaec:	bf04      	itt	eq
 800aaee:	2200      	moveq	r2, #0
 800aaf0:	605a      	streq	r2, [r3, #4]
 800aaf2:	e7f7      	b.n	800aae4 <WM_DeleteWindow+0x60>
 800aaf4:	4620      	mov	r0, r4
 800aaf6:	2107      	movs	r1, #7
 800aaf8:	f7ff f86b 	bl	8009bd2 <WM_NotifyParent>
 800aafc:	9e01      	ldr	r6, [sp, #4]
 800aafe:	69f0      	ldr	r0, [r6, #28]
 800ab00:	f7ff ffc0 	bl	800aa84 <WM_DeleteWindow>
 800ab04:	69f3      	ldr	r3, [r6, #28]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d1f9      	bne.n	800aafe <WM_DeleteWindow+0x7a>
 800ab0a:	4620      	mov	r0, r4
 800ab0c:	f7ff fe63 	bl	800a7d6 <WM__DetachWindow>
 800ab10:	4b1c      	ldr	r3, [pc, #112]	; (800ab84 <WM_DeleteWindow+0x100>)
 800ab12:	6818      	ldr	r0, [r3, #0]
 800ab14:	b150      	cbz	r0, 800ab2c <WM_DeleteWindow+0xa8>
 800ab16:	f006 fb53 	bl	80111c0 <GUI_ALLOC_h2p>
 800ab1a:	4606      	mov	r6, r0
 800ab1c:	6940      	ldr	r0, [r0, #20]
 800ab1e:	42a0      	cmp	r0, r4
 800ab20:	d1f8      	bne.n	800ab14 <WM_DeleteWindow+0x90>
 800ab22:	4620      	mov	r0, r4
 800ab24:	f006 fb4c 	bl	80111c0 <GUI_ALLOC_h2p>
 800ab28:	6943      	ldr	r3, [r0, #20]
 800ab2a:	6173      	str	r3, [r6, #20]
 800ab2c:	9b01      	ldr	r3, [sp, #4]
 800ab2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab30:	07da      	lsls	r2, r3, #31
 800ab32:	d503      	bpl.n	800ab3c <WM_DeleteWindow+0xb8>
 800ab34:	4a14      	ldr	r2, [pc, #80]	; (800ab88 <WM_DeleteWindow+0x104>)
 800ab36:	6811      	ldr	r1, [r2, #0]
 800ab38:	3901      	subs	r1, #1
 800ab3a:	6011      	str	r1, [r2, #0]
 800ab3c:	069b      	lsls	r3, r3, #26
 800ab3e:	d503      	bpl.n	800ab48 <WM_DeleteWindow+0xc4>
 800ab40:	4b12      	ldr	r3, [pc, #72]	; (800ab8c <WM_DeleteWindow+0x108>)
 800ab42:	881a      	ldrh	r2, [r3, #0]
 800ab44:	3a01      	subs	r2, #1
 800ab46:	801a      	strh	r2, [r3, #0]
 800ab48:	a801      	add	r0, sp, #4
 800ab4a:	f006 fb51 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800ab4e:	4b10      	ldr	r3, [pc, #64]	; (800ab90 <WM_DeleteWindow+0x10c>)
 800ab50:	881a      	ldrh	r2, [r3, #0]
 800ab52:	4620      	mov	r0, r4
 800ab54:	3a01      	subs	r2, #1
 800ab56:	801a      	strh	r2, [r3, #0]
 800ab58:	f006 fb76 	bl	8011248 <GUI_ALLOC_Free>
 800ab5c:	2d00      	cmp	r5, #0
 800ab5e:	db04      	blt.n	800ab6a <WM_DeleteWindow+0xe6>
 800ab60:	4b0c      	ldr	r3, [pc, #48]	; (800ab94 <WM_DeleteWindow+0x110>)
 800ab62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ab66:	f7ff fec3 	bl	800a8f0 <WM_SelectWindow>
 800ab6a:	b002      	add	sp, #8
 800ab6c:	bd70      	pop	{r4, r5, r6, pc}
 800ab6e:	bf00      	nop
 800ab70:	20019414 	.word	0x20019414
 800ab74:	2001b238 	.word	0x2001b238
 800ab78:	2001b248 	.word	0x2001b248
 800ab7c:	2001b264 	.word	0x2001b264
 800ab80:	2001b25c 	.word	0x2001b25c
 800ab84:	2001b244 	.word	0x2001b244
 800ab88:	2001b270 	.word	0x2001b270
 800ab8c:	2001b240 	.word	0x2001b240
 800ab90:	2001b220 	.word	0x2001b220
 800ab94:	2001b228 	.word	0x2001b228

0800ab98 <WM_GetActiveWindow>:
 800ab98:	4b01      	ldr	r3, [pc, #4]	; (800aba0 <WM_GetActiveWindow+0x8>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800ab9e:	4770      	bx	lr
 800aba0:	20000238 	.word	0x20000238

0800aba4 <WM__GetNextIVR>:
 800aba4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800aba8:	4f5d      	ldr	r7, [pc, #372]	; (800ad20 <WM__GetNextIVR+0x17c>)
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 800abb0:	2800      	cmp	r0, #0
 800abb2:	f000 80b2 	beq.w	800ad1a <WM__GetNextIVR+0x176>
 800abb6:	4b5b      	ldr	r3, [pc, #364]	; (800ad24 <WM__GetNextIVR+0x180>)
 800abb8:	695a      	ldr	r2, [r3, #20]
 800abba:	2a01      	cmp	r2, #1
 800abbc:	461c      	mov	r4, r3
 800abbe:	dd03      	ble.n	800abc8 <WM__GetNextIVR+0x24>
 800abc0:	3a01      	subs	r2, #1
 800abc2:	615a      	str	r2, [r3, #20]
 800abc4:	2000      	movs	r0, #0
 800abc6:	e0a8      	b.n	800ad1a <WM__GetNextIVR+0x176>
 800abc8:	f104 0608 	add.w	r6, r4, #8
 800abcc:	691b      	ldr	r3, [r3, #16]
 800abce:	e896 0003 	ldmia.w	r6, {r0, r1}
 800abd2:	3301      	adds	r3, #1
 800abd4:	ad02      	add	r5, sp, #8
 800abd6:	6123      	str	r3, [r4, #16]
 800abd8:	e885 0003 	stmia.w	r5, {r0, r1}
 800abdc:	b923      	cbnz	r3, 800abe8 <WM__GetNextIVR+0x44>
 800abde:	8823      	ldrh	r3, [r4, #0]
 800abe0:	f8ad 3008 	strh.w	r3, [sp, #8]
 800abe4:	8863      	ldrh	r3, [r4, #2]
 800abe6:	e011      	b.n	800ac0c <WM__GetNextIVR+0x68>
 800abe8:	89a3      	ldrh	r3, [r4, #12]
 800abea:	8962      	ldrh	r2, [r4, #10]
 800abec:	f8ad 200a 	strh.w	r2, [sp, #10]
 800abf0:	3301      	adds	r3, #1
 800abf2:	b29b      	uxth	r3, r3
 800abf4:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800abf8:	f8ad 3008 	strh.w	r3, [sp, #8]
 800abfc:	b21b      	sxth	r3, r3
 800abfe:	429a      	cmp	r2, r3
 800ac00:	da06      	bge.n	800ac10 <WM__GetNextIVR+0x6c>
 800ac02:	8823      	ldrh	r3, [r4, #0]
 800ac04:	f8ad 3008 	strh.w	r3, [sp, #8]
 800ac08:	89e3      	ldrh	r3, [r4, #14]
 800ac0a:	3301      	adds	r3, #1
 800ac0c:	f8ad 300a 	strh.w	r3, [sp, #10]
 800ac10:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 800ac14:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800ac18:	f8df 8108 	ldr.w	r8, [pc, #264]	; 800ad24 <WM__GetNextIVR+0x180>
 800ac1c:	429a      	cmp	r2, r3
 800ac1e:	dd04      	ble.n	800ac2a <WM__GetNextIVR+0x86>
 800ac20:	6963      	ldr	r3, [r4, #20]
 800ac22:	3b01      	subs	r3, #1
 800ac24:	2000      	movs	r0, #0
 800ac26:	6163      	str	r3, [r4, #20]
 800ac28:	e077      	b.n	800ad1a <WM__GetNextIVR+0x176>
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800ac2e:	f006 fad1 	bl	80111d4 <GUI_ALLOC_LockH>
 800ac32:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 800ac36:	f9b8 3000 	ldrsh.w	r3, [r8]
 800ac3a:	9001      	str	r0, [sp, #4]
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d11c      	bne.n	800ac7a <WM__GetNextIVR+0xd6>
 800ac40:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800ac44:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ac48:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800ac4c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ac50:	4b33      	ldr	r3, [pc, #204]	; (800ad20 <WM__GetNextIVR+0x17c>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ac56:	b15a      	cbz	r2, 800ac70 <WM__GetNextIVR+0xcc>
 800ac58:	4610      	mov	r0, r2
 800ac5a:	f006 fab1 	bl	80111c0 <GUI_ALLOC_h2p>
 800ac5e:	4680      	mov	r8, r0
 800ac60:	2200      	movs	r2, #0
 800ac62:	6a00      	ldr	r0, [r0, #32]
 800ac64:	4629      	mov	r1, r5
 800ac66:	f7ff f9c1 	bl	8009fec <_Findy1>
 800ac6a:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800ac6e:	e7f2      	b.n	800ac56 <WM__GetNextIVR+0xb2>
 800ac70:	9b01      	ldr	r3, [sp, #4]
 800ac72:	4629      	mov	r1, r5
 800ac74:	69d8      	ldr	r0, [r3, #28]
 800ac76:	f7ff f9b9 	bl	8009fec <_Findy1>
 800ac7a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800ac7e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ac86:	b16a      	cbz	r2, 800aca4 <WM__GetNextIVR+0x100>
 800ac88:	4610      	mov	r0, r2
 800ac8a:	f006 fa99 	bl	80111c0 <GUI_ALLOC_h2p>
 800ac8e:	4629      	mov	r1, r5
 800ac90:	4680      	mov	r8, r0
 800ac92:	2200      	movs	r2, #0
 800ac94:	6a00      	ldr	r0, [r0, #32]
 800ac96:	f7ff f9ff 	bl	800a098 <_Findx0>
 800ac9a:	2800      	cmp	r0, #0
 800ac9c:	d1ed      	bne.n	800ac7a <WM__GetNextIVR+0xd6>
 800ac9e:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800aca2:	e7f0      	b.n	800ac86 <WM__GetNextIVR+0xe2>
 800aca4:	9b01      	ldr	r3, [sp, #4]
 800aca6:	4629      	mov	r1, r5
 800aca8:	69d8      	ldr	r0, [r3, #28]
 800acaa:	f7ff f9f5 	bl	800a098 <_Findx0>
 800acae:	2800      	cmp	r0, #0
 800acb0:	d1e3      	bne.n	800ac7a <WM__GetNextIVR+0xd6>
 800acb2:	88a3      	ldrh	r3, [r4, #4]
 800acb4:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 800acb8:	f8ad 300c 	strh.w	r3, [sp, #12]
 800acbc:	b21b      	sxth	r3, r3
 800acbe:	429a      	cmp	r2, r3
 800acc0:	dd07      	ble.n	800acd2 <WM__GetNextIVR+0x12e>
 800acc2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800acc6:	e886 0003 	stmia.w	r6, {r0, r1}
 800acca:	a801      	add	r0, sp, #4
 800accc:	f006 fa90 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800acd0:	e797      	b.n	800ac02 <WM__GetNextIVR+0x5e>
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800acd6:	b152      	cbz	r2, 800acee <WM__GetNextIVR+0x14a>
 800acd8:	4610      	mov	r0, r2
 800acda:	f006 fa71 	bl	80111c0 <GUI_ALLOC_h2p>
 800acde:	4607      	mov	r7, r0
 800ace0:	2200      	movs	r2, #0
 800ace2:	6a00      	ldr	r0, [r0, #32]
 800ace4:	4629      	mov	r1, r5
 800ace6:	f7ff fa1b 	bl	800a120 <_Findx1>
 800acea:	69ba      	ldr	r2, [r7, #24]
 800acec:	e7f3      	b.n	800acd6 <WM__GetNextIVR+0x132>
 800acee:	af04      	add	r7, sp, #16
 800acf0:	4629      	mov	r1, r5
 800acf2:	f857 3d0c 	ldr.w	r3, [r7, #-12]!
 800acf6:	69d8      	ldr	r0, [r3, #28]
 800acf8:	f7ff fa12 	bl	800a120 <_Findx1>
 800acfc:	4638      	mov	r0, r7
 800acfe:	f006 fa77 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800ad02:	6923      	ldr	r3, [r4, #16]
 800ad04:	f644 6220 	movw	r2, #20000	; 0x4e20
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	dc89      	bgt.n	800ac20 <WM__GetNextIVR+0x7c>
 800ad0c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ad10:	e886 0003 	stmia.w	r6, {r0, r1}
 800ad14:	f7ff fc24 	bl	800a560 <WM__ActivateClipRect>
 800ad18:	2001      	movs	r0, #1
 800ad1a:	b004      	add	sp, #16
 800ad1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad20:	20000238 	.word	0x20000238
 800ad24:	200193fc 	.word	0x200193fc

0800ad28 <WM__InitIVRSearch>:
 800ad28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad2c:	4f39      	ldr	r7, [pc, #228]	; (800ae14 <WM__InitIVRSearch+0xec>)
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800ad34:	b086      	sub	sp, #24
 800ad36:	4606      	mov	r6, r0
 800ad38:	b912      	cbnz	r2, 800ad40 <WM__InitIVRSearch+0x18>
 800ad3a:	f7ff fc11 	bl	800a560 <WM__ActivateClipRect>
 800ad3e:	e064      	b.n	800ae0a <WM__InitIVRSearch+0xe2>
 800ad40:	4d35      	ldr	r5, [pc, #212]	; (800ae18 <WM__InitIVRSearch+0xf0>)
 800ad42:	696a      	ldr	r2, [r5, #20]
 800ad44:	3201      	adds	r2, #1
 800ad46:	2a01      	cmp	r2, #1
 800ad48:	616a      	str	r2, [r5, #20]
 800ad4a:	462c      	mov	r4, r5
 800ad4c:	dc5d      	bgt.n	800ae0a <WM__InitIVRSearch+0xe2>
 800ad4e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800ad50:	f006 fa40 	bl	80111d4 <GUI_ALLOC_LockH>
 800ad54:	f04f 32ff 	mov.w	r2, #4294967295
 800ad58:	612a      	str	r2, [r5, #16]
 800ad5a:	4a30      	ldr	r2, [pc, #192]	; (800ae1c <WM__InitIVRSearch+0xf4>)
 800ad5c:	9000      	str	r0, [sp, #0]
 800ad5e:	7812      	ldrb	r2, [r2, #0]
 800ad60:	b12a      	cbz	r2, 800ad6e <WM__InitIVRSearch+0x46>
 800ad62:	f100 0308 	add.w	r3, r0, #8
 800ad66:	aa02      	add	r2, sp, #8
 800ad68:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ad6c:	e005      	b.n	800ad7a <WM__InitIVRSearch+0x52>
 800ad6e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800ad70:	f012 0802 	ands.w	r8, r2, #2
 800ad74:	d00a      	beq.n	800ad8c <WM__InitIVRSearch+0x64>
 800ad76:	c803      	ldmia	r0, {r0, r1}
 800ad78:	aa02      	add	r2, sp, #8
 800ad7a:	e882 0003 	stmia.w	r2, {r0, r1}
 800ad7e:	ad02      	add	r5, sp, #8
 800ad80:	b166      	cbz	r6, 800ad9c <WM__InitIVRSearch+0x74>
 800ad82:	4628      	mov	r0, r5
 800ad84:	4631      	mov	r1, r6
 800ad86:	f003 fa5b 	bl	800e240 <GUI__IntersectRect>
 800ad8a:	e007      	b.n	800ad9c <WM__InitIVRSearch+0x74>
 800ad8c:	696b      	ldr	r3, [r5, #20]
 800ad8e:	4668      	mov	r0, sp
 800ad90:	3b01      	subs	r3, #1
 800ad92:	616b      	str	r3, [r5, #20]
 800ad94:	f006 fa2c 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800ad98:	4640      	mov	r0, r8
 800ad9a:	e037      	b.n	800ae0c <WM__InitIVRSearch+0xe4>
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	4e20      	ldr	r6, [pc, #128]	; (800ae20 <WM__InitIVRSearch+0xf8>)
 800ada0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ada2:	b1c2      	cbz	r2, 800add6 <WM__InitIVRSearch+0xae>
 800ada4:	9b00      	ldr	r3, [sp, #0]
 800ada6:	6810      	ldr	r0, [r2, #0]
 800ada8:	6851      	ldr	r1, [r2, #4]
 800adaa:	9301      	str	r3, [sp, #4]
 800adac:	ab04      	add	r3, sp, #16
 800adae:	c303      	stmia	r3!, {r0, r1}
 800adb0:	6833      	ldr	r3, [r6, #0]
 800adb2:	b133      	cbz	r3, 800adc2 <WM__InitIVRSearch+0x9a>
 800adb4:	a801      	add	r0, sp, #4
 800adb6:	f006 fa1b 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800adba:	6830      	ldr	r0, [r6, #0]
 800adbc:	f006 fa0a 	bl	80111d4 <GUI_ALLOC_LockH>
 800adc0:	9001      	str	r0, [sp, #4]
 800adc2:	9801      	ldr	r0, [sp, #4]
 800adc4:	a904      	add	r1, sp, #16
 800adc6:	f7ff fb9b 	bl	800a500 <WM__Client2Screen>
 800adca:	4628      	mov	r0, r5
 800adcc:	a904      	add	r1, sp, #16
 800adce:	f003 fa37 	bl	800e240 <GUI__IntersectRect>
 800add2:	a801      	add	r0, sp, #4
 800add4:	e000      	b.n	800add8 <WM__InitIVRSearch+0xb0>
 800add6:	4668      	mov	r0, sp
 800add8:	f006 fa0a 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800addc:	6831      	ldr	r1, [r6, #0]
 800adde:	b119      	cbz	r1, 800ade8 <WM__InitIVRSearch+0xc0>
 800ade0:	4628      	mov	r0, r5
 800ade2:	f7ff faef 	bl	800a3c4 <WM__ClipAtParentBorders>
 800ade6:	b128      	cbz	r0, 800adf4 <WM__InitIVRSearch+0xcc>
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	4628      	mov	r0, r5
 800adec:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800adee:	f7ff fae9 	bl	800a3c4 <WM__ClipAtParentBorders>
 800adf2:	b918      	cbnz	r0, 800adfc <WM__InitIVRSearch+0xd4>
 800adf4:	6963      	ldr	r3, [r4, #20]
 800adf6:	3b01      	subs	r3, #1
 800adf8:	6163      	str	r3, [r4, #20]
 800adfa:	e007      	b.n	800ae0c <WM__InitIVRSearch+0xe4>
 800adfc:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ae00:	e884 0003 	stmia.w	r4, {r0, r1}
 800ae04:	f7ff fece 	bl	800aba4 <WM__GetNextIVR>
 800ae08:	e000      	b.n	800ae0c <WM__InitIVRSearch+0xe4>
 800ae0a:	2001      	movs	r0, #1
 800ae0c:	b006      	add	sp, #24
 800ae0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae12:	bf00      	nop
 800ae14:	20000238 	.word	0x20000238
 800ae18:	200193fc 	.word	0x200193fc
 800ae1c:	2001b24d 	.word	0x2001b24d
 800ae20:	2001b224 	.word	0x2001b224

0800ae24 <WM_SetDefault>:
 800ae24:	b508      	push	{r3, lr}
 800ae26:	f004 f9e9 	bl	800f1fc <GL_SetDefault>
 800ae2a:	4b02      	ldr	r3, [pc, #8]	; (800ae34 <WM_SetDefault+0x10>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	645a      	str	r2, [r3, #68]	; 0x44
 800ae32:	bd08      	pop	{r3, pc}
 800ae34:	20000238 	.word	0x20000238

0800ae38 <WM__Paint1>:
 800ae38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae3a:	b089      	sub	sp, #36	; 0x24
 800ae3c:	4604      	mov	r4, r0
 800ae3e:	f006 f9c9 	bl	80111d4 <GUI_ALLOC_LockH>
 800ae42:	6907      	ldr	r7, [r0, #16]
 800ae44:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800ae46:	9001      	str	r0, [sp, #4]
 800ae48:	3008      	adds	r0, #8
 800ae4a:	c803      	ldmia	r0, {r0, r1}
 800ae4c:	ad02      	add	r5, sp, #8
 800ae4e:	e885 0003 	stmia.w	r5, {r0, r1}
 800ae52:	a801      	add	r0, sp, #4
 800ae54:	f006 f9cc 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800ae58:	2f00      	cmp	r7, #0
 800ae5a:	d031      	beq.n	800aec0 <WM__Paint1+0x88>
 800ae5c:	07b3      	lsls	r3, r6, #30
 800ae5e:	d52f      	bpl.n	800aec0 <WM__Paint1+0x88>
 800ae60:	4620      	mov	r0, r4
 800ae62:	212e      	movs	r1, #46	; 0x2e
 800ae64:	f7fe fe38 	bl	8009ad8 <WM_SendMessageNoPara>
 800ae68:	4b16      	ldr	r3, [pc, #88]	; (800aec4 <WM__Paint1+0x8c>)
 800ae6a:	781a      	ldrb	r2, [r3, #0]
 800ae6c:	f416 5f80 	tst.w	r6, #4096	; 0x1000
 800ae70:	f102 0201 	add.w	r2, r2, #1
 800ae74:	701a      	strb	r2, [r3, #0]
 800ae76:	461e      	mov	r6, r3
 800ae78:	d00a      	beq.n	800ae90 <WM__Paint1+0x58>
 800ae7a:	230f      	movs	r3, #15
 800ae7c:	9405      	str	r4, [sp, #20]
 800ae7e:	9304      	str	r3, [sp, #16]
 800ae80:	9507      	str	r5, [sp, #28]
 800ae82:	f7ff ffcf 	bl	800ae24 <WM_SetDefault>
 800ae86:	4620      	mov	r0, r4
 800ae88:	a904      	add	r1, sp, #16
 800ae8a:	f006 ff27 	bl	8011cdc <WM__SendMessage>
 800ae8e:	e010      	b.n	800aeb2 <WM__Paint1+0x7a>
 800ae90:	4628      	mov	r0, r5
 800ae92:	f7ff ff49 	bl	800ad28 <WM__InitIVRSearch>
 800ae96:	b160      	cbz	r0, 800aeb2 <WM__Paint1+0x7a>
 800ae98:	230f      	movs	r3, #15
 800ae9a:	9304      	str	r3, [sp, #16]
 800ae9c:	9405      	str	r4, [sp, #20]
 800ae9e:	9507      	str	r5, [sp, #28]
 800aea0:	f7ff ffc0 	bl	800ae24 <WM_SetDefault>
 800aea4:	4620      	mov	r0, r4
 800aea6:	a904      	add	r1, sp, #16
 800aea8:	f006 ff18 	bl	8011cdc <WM__SendMessage>
 800aeac:	f7ff fe7a 	bl	800aba4 <WM__GetNextIVR>
 800aeb0:	e7f1      	b.n	800ae96 <WM__Paint1+0x5e>
 800aeb2:	7833      	ldrb	r3, [r6, #0]
 800aeb4:	4620      	mov	r0, r4
 800aeb6:	3b01      	subs	r3, #1
 800aeb8:	212f      	movs	r1, #47	; 0x2f
 800aeba:	7033      	strb	r3, [r6, #0]
 800aebc:	f7fe fe0c 	bl	8009ad8 <WM_SendMessageNoPara>
 800aec0:	b009      	add	sp, #36	; 0x24
 800aec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aec4:	2001b24d 	.word	0x2001b24d

0800aec8 <WM__Paint>:
 800aec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aeca:	b089      	sub	sp, #36	; 0x24
 800aecc:	ac06      	add	r4, sp, #24
 800aece:	9003      	str	r0, [sp, #12]
 800aed0:	f006 f980 	bl	80111d4 <GUI_ALLOC_LockH>
 800aed4:	f100 0208 	add.w	r2, r0, #8
 800aed8:	4603      	mov	r3, r0
 800aeda:	9005      	str	r0, [sp, #20]
 800aedc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800aee0:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800aee2:	699e      	ldr	r6, [r3, #24]
 800aee4:	691f      	ldr	r7, [r3, #16]
 800aee6:	e884 0003 	stmia.w	r4, {r0, r1}
 800aeea:	a805      	add	r0, sp, #20
 800aeec:	f006 f980 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800aef0:	f244 0320 	movw	r3, #16416	; 0x4020
 800aef4:	402b      	ands	r3, r5
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d034      	beq.n	800af64 <WM__Paint+0x9c>
 800aefa:	b1bf      	cbz	r7, 800af2c <WM__Paint+0x64>
 800aefc:	4620      	mov	r0, r4
 800aefe:	9903      	ldr	r1, [sp, #12]
 800af00:	f7ff fa60 	bl	800a3c4 <WM__ClipAtParentBorders>
 800af04:	b190      	cbz	r0, 800af2c <WM__Paint+0x64>
 800af06:	9803      	ldr	r0, [sp, #12]
 800af08:	f7ff fcf2 	bl	800a8f0 <WM_SelectWindow>
 800af0c:	0769      	lsls	r1, r5, #29
 800af0e:	d50f      	bpl.n	800af30 <WM__Paint+0x68>
 800af10:	b126      	cbz	r6, 800af1c <WM__Paint+0x54>
 800af12:	f005 0501 	and.w	r5, r5, #1
 800af16:	f085 0501 	eor.w	r5, r5, #1
 800af1a:	e000      	b.n	800af1e <WM__Paint+0x56>
 800af1c:	2501      	movs	r5, #1
 800af1e:	9500      	str	r5, [sp, #0]
 800af20:	4620      	mov	r0, r4
 800af22:	4912      	ldr	r1, [pc, #72]	; (800af6c <WM__Paint+0xa4>)
 800af24:	aa03      	add	r2, sp, #12
 800af26:	2300      	movs	r3, #0
 800af28:	f000 fb56 	bl	800b5d8 <GUI_MEMDEV_Draw>
 800af2c:	2400      	movs	r4, #0
 800af2e:	e003      	b.n	800af38 <WM__Paint+0x70>
 800af30:	9803      	ldr	r0, [sp, #12]
 800af32:	f7ff f9d7 	bl	800a2e4 <WM__PaintWinAndOverlays>
 800af36:	2401      	movs	r4, #1
 800af38:	9803      	ldr	r0, [sp, #12]
 800af3a:	f006 f94b 	bl	80111d4 <GUI_ALLOC_LockH>
 800af3e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800af40:	9005      	str	r0, [sp, #20]
 800af42:	f422 4380 	bic.w	r3, r2, #16384	; 0x4000
 800af46:	f023 0320 	bic.w	r3, r3, #32
 800af4a:	0492      	lsls	r2, r2, #18
 800af4c:	bf48      	it	mi
 800af4e:	f043 0304 	orrmi.w	r3, r3, #4
 800af52:	6283      	str	r3, [r0, #40]	; 0x28
 800af54:	a805      	add	r0, sp, #20
 800af56:	f006 f94b 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800af5a:	4b05      	ldr	r3, [pc, #20]	; (800af70 <WM__Paint+0xa8>)
 800af5c:	881a      	ldrh	r2, [r3, #0]
 800af5e:	3a01      	subs	r2, #1
 800af60:	801a      	strh	r2, [r3, #0]
 800af62:	e000      	b.n	800af66 <WM__Paint+0x9e>
 800af64:	461c      	mov	r4, r3
 800af66:	4620      	mov	r0, r4
 800af68:	b009      	add	sp, #36	; 0x24
 800af6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af6c:	0800a35d 	.word	0x0800a35d
 800af70:	2001b240 	.word	0x2001b240

0800af74 <WM_Exec>:
 800af74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af78:	4b4c      	ldr	r3, [pc, #304]	; (800b0ac <WM_Exec+0x138>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	b09f      	sub	sp, #124	; 0x7c
 800af7e:	b103      	cbz	r3, 800af82 <WM_Exec+0xe>
 800af80:	4798      	blx	r3
 800af82:	2600      	movs	r6, #0
 800af84:	4d4a      	ldr	r5, [pc, #296]	; (800b0b0 <WM_Exec+0x13c>)
 800af86:	682b      	ldr	r3, [r5, #0]
 800af88:	b1db      	cbz	r3, 800afc2 <WM_Exec+0x4e>
 800af8a:	4b4a      	ldr	r3, [pc, #296]	; (800b0b4 <WM_Exec+0x140>)
 800af8c:	681c      	ldr	r4, [r3, #0]
 800af8e:	b1bc      	cbz	r4, 800afc0 <WM_Exec+0x4c>
 800af90:	4620      	mov	r0, r4
 800af92:	f006 f91f 	bl	80111d4 <GUI_ALLOC_LockH>
 800af96:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800af98:	6947      	ldr	r7, [r0, #20]
 800af9a:	ab1e      	add	r3, sp, #120	; 0x78
 800af9c:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800afa0:	f843 0d70 	str.w	r0, [r3, #-112]!
 800afa4:	d007      	beq.n	800afb6 <WM_Exec+0x42>
 800afa6:	4618      	mov	r0, r3
 800afa8:	f006 f922 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800afac:	4620      	mov	r0, r4
 800afae:	f7ff fd69 	bl	800aa84 <WM_DeleteWindow>
 800afb2:	463c      	mov	r4, r7
 800afb4:	e7eb      	b.n	800af8e <WM_Exec+0x1a>
 800afb6:	4618      	mov	r0, r3
 800afb8:	463c      	mov	r4, r7
 800afba:	f006 f919 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800afbe:	e7e6      	b.n	800af8e <WM_Exec+0x1a>
 800afc0:	602c      	str	r4, [r5, #0]
 800afc2:	4b3d      	ldr	r3, [pc, #244]	; (800b0b8 <WM_Exec+0x144>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	b103      	cbz	r3, 800afca <WM_Exec+0x56>
 800afc8:	4798      	blx	r3
 800afca:	4b3c      	ldr	r3, [pc, #240]	; (800b0bc <WM_Exec+0x148>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	b92b      	cbnz	r3, 800afdc <WM_Exec+0x68>
 800afd0:	4f3b      	ldr	r7, [pc, #236]	; (800b0c0 <WM_Exec+0x14c>)
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800afd8:	b143      	cbz	r3, 800afec <WM_Exec+0x78>
 800afda:	e003      	b.n	800afe4 <WM_Exec+0x70>
 800afdc:	4798      	blx	r3
 800afde:	2800      	cmp	r0, #0
 800afe0:	d0f6      	beq.n	800afd0 <WM_Exec+0x5c>
 800afe2:	e058      	b.n	800b096 <WM_Exec+0x122>
 800afe4:	f004 fa72 	bl	800f4cc <GUI_PollKeyMsg>
 800afe8:	2800      	cmp	r0, #0
 800afea:	d154      	bne.n	800b096 <WM_Exec+0x122>
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	f893 5054 	ldrb.w	r5, [r3, #84]	; 0x54
 800aff2:	b14d      	cbz	r5, 800b008 <WM_Exec+0x94>
 800aff4:	4b33      	ldr	r3, [pc, #204]	; (800b0c4 <WM_Exec+0x150>)
 800aff6:	881d      	ldrh	r5, [r3, #0]
 800aff8:	b135      	cbz	r5, 800b008 <WM_Exec+0x94>
 800affa:	4b33      	ldr	r3, [pc, #204]	; (800b0c8 <WM_Exec+0x154>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d04b      	beq.n	800b09a <WM_Exec+0x126>
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	4798      	blx	r3
 800b006:	2501      	movs	r5, #1
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800b00e:	b913      	cbnz	r3, 800b016 <WM_Exec+0xa2>
 800b010:	2d00      	cmp	r5, #0
 800b012:	d137      	bne.n	800b084 <WM_Exec+0x110>
 800b014:	e045      	b.n	800b0a2 <WM_Exec+0x12e>
 800b016:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800b0c4 <WM_Exec+0x150>
 800b01a:	f8b8 3000 	ldrh.w	r3, [r8]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d0f6      	beq.n	800b010 <WM_Exec+0x9c>
 800b022:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 800b0cc <WM_Exec+0x158>
 800b026:	f8d9 4000 	ldr.w	r4, [r9]
 800b02a:	b90c      	cbnz	r4, 800b030 <WM_Exec+0xbc>
 800b02c:	4b21      	ldr	r3, [pc, #132]	; (800b0b4 <WM_Exec+0x140>)
 800b02e:	681c      	ldr	r4, [r3, #0]
 800b030:	a802      	add	r0, sp, #8
 800b032:	f004 f94f 	bl	800f2d4 <GUI_SaveContext_W>
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	f8d3 b030 	ldr.w	fp, [r3, #48]	; 0x30
 800b03c:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 800b040:	b914      	cbnz	r4, 800b048 <WM_Exec+0xd4>
 800b042:	2400      	movs	r4, #0
 800b044:	e00d      	b.n	800b062 <WM_Exec+0xee>
 800b046:	b963      	cbnz	r3, 800b062 <WM_Exec+0xee>
 800b048:	4620      	mov	r0, r4
 800b04a:	f7ff ff3d 	bl	800aec8 <WM__Paint>
 800b04e:	4603      	mov	r3, r0
 800b050:	4620      	mov	r0, r4
 800b052:	9301      	str	r3, [sp, #4]
 800b054:	f006 f8b4 	bl	80111c0 <GUI_ALLOC_h2p>
 800b058:	6944      	ldr	r4, [r0, #20]
 800b05a:	9b01      	ldr	r3, [sp, #4]
 800b05c:	2c00      	cmp	r4, #0
 800b05e:	d1f2      	bne.n	800b046 <WM_Exec+0xd2>
 800b060:	e7ef      	b.n	800b042 <WM_Exec+0xce>
 800b062:	4658      	mov	r0, fp
 800b064:	f8c9 4000 	str.w	r4, [r9]
 800b068:	f004 f8ea 	bl	800f240 <GUI_SetColor>
 800b06c:	4650      	mov	r0, sl
 800b06e:	f004 f8e5 	bl	800f23c <GUI_SetBkColor>
 800b072:	a802      	add	r0, sp, #8
 800b074:	f004 f938 	bl	800f2e8 <GUI_RestoreContext>
 800b078:	f8b8 3000 	ldrh.w	r3, [r8]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d0c7      	beq.n	800b010 <WM_Exec+0x9c>
 800b080:	2601      	movs	r6, #1
 800b082:	e7c1      	b.n	800b008 <WM_Exec+0x94>
 800b084:	4b10      	ldr	r3, [pc, #64]	; (800b0c8 <WM_Exec+0x154>)
 800b086:	6818      	ldr	r0, [r3, #0]
 800b088:	b110      	cbz	r0, 800b090 <WM_Exec+0x11c>
 800b08a:	6843      	ldr	r3, [r0, #4]
 800b08c:	4798      	blx	r3
 800b08e:	e008      	b.n	800b0a2 <WM_Exec+0x12e>
 800b090:	f003 f89c 	bl	800e1cc <GUI__ManageCache>
 800b094:	e005      	b.n	800b0a2 <WM_Exec+0x12e>
 800b096:	2601      	movs	r6, #1
 800b098:	e774      	b.n	800af84 <WM_Exec+0x10>
 800b09a:	2001      	movs	r0, #1
 800b09c:	f003 f896 	bl	800e1cc <GUI__ManageCache>
 800b0a0:	e7b1      	b.n	800b006 <WM_Exec+0x92>
 800b0a2:	4630      	mov	r0, r6
 800b0a4:	b01f      	add	sp, #124	; 0x7c
 800b0a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0aa:	bf00      	nop
 800b0ac:	2001b234 	.word	0x2001b234
 800b0b0:	200193f8 	.word	0x200193f8
 800b0b4:	2001b244 	.word	0x2001b244
 800b0b8:	2001b230 	.word	0x2001b230
 800b0bc:	2001b2cc 	.word	0x2001b2cc
 800b0c0:	20000238 	.word	0x20000238
 800b0c4:	2001b240 	.word	0x2001b240
 800b0c8:	2001b260 	.word	0x2001b260
 800b0cc:	20019414 	.word	0x20019414

0800b0d0 <WM_Activate>:
 800b0d0:	4b02      	ldr	r3, [pc, #8]	; (800b0dc <WM_Activate+0xc>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	2201      	movs	r2, #1
 800b0d6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800b0da:	4770      	bx	lr
 800b0dc:	20000238 	.word	0x20000238

0800b0e0 <WM_Deactivate>:
 800b0e0:	4b03      	ldr	r3, [pc, #12]	; (800b0f0 <WM_Deactivate+0x10>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800b0ea:	f002 be97 	b.w	800de1c <LCD_SetClipRectMax>
 800b0ee:	bf00      	nop
 800b0f0:	20000238 	.word	0x20000238

0800b0f4 <WM_DefaultProc>:
 800b0f4:	b510      	push	{r4, lr}
 800b0f6:	4604      	mov	r4, r0
 800b0f8:	6840      	ldr	r0, [r0, #4]
 800b0fa:	6823      	ldr	r3, [r4, #0]
 800b0fc:	68e1      	ldr	r1, [r4, #12]
 800b0fe:	2b17      	cmp	r3, #23
 800b100:	d00f      	beq.n	800b122 <WM_DefaultProc+0x2e>
 800b102:	dc06      	bgt.n	800b112 <WM_DefaultProc+0x1e>
 800b104:	2b0e      	cmp	r3, #14
 800b106:	d00e      	beq.n	800b126 <WM_DefaultProc+0x32>
 800b108:	2b14      	cmp	r3, #20
 800b10a:	d114      	bne.n	800b136 <WM_DefaultProc+0x42>
 800b10c:	f7fe fed4 	bl	8009eb8 <WM__GetClientRectEx>
 800b110:	e011      	b.n	800b136 <WM_DefaultProc+0x42>
 800b112:	2b22      	cmp	r3, #34	; 0x22
 800b114:	d00c      	beq.n	800b130 <WM_DefaultProc+0x3c>
 800b116:	2b28      	cmp	r3, #40	; 0x28
 800b118:	d10d      	bne.n	800b136 <WM_DefaultProc+0x42>
 800b11a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b11e:	f7ff bbc6 	b.w	800a8ae <WM_InvalidateWindow>
 800b122:	60e0      	str	r0, [r4, #12]
 800b124:	bd10      	pop	{r4, pc}
 800b126:	4621      	mov	r1, r4
 800b128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b12c:	f007 b890 	b.w	8012250 <WM_SendToParent>
 800b130:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800b134:	e000      	b.n	800b138 <WM_DefaultProc+0x44>
 800b136:	2300      	movs	r3, #0
 800b138:	60e3      	str	r3, [r4, #12]
 800b13a:	bd10      	pop	{r4, pc}

0800b13c <_cbBackWin>:
 800b13c:	6803      	ldr	r3, [r0, #0]
 800b13e:	2b0e      	cmp	r3, #14
 800b140:	b510      	push	{r4, lr}
 800b142:	4604      	mov	r4, r0
 800b144:	d002      	beq.n	800b14c <_cbBackWin+0x10>
 800b146:	2b0f      	cmp	r3, #15
 800b148:	d009      	beq.n	800b15e <_cbBackWin+0x22>
 800b14a:	e020      	b.n	800b18e <_cbBackWin+0x52>
 800b14c:	68c3      	ldr	r3, [r0, #12]
 800b14e:	685a      	ldr	r2, [r3, #4]
 800b150:	2a01      	cmp	r2, #1
 800b152:	d121      	bne.n	800b198 <_cbBackWin+0x5c>
 800b154:	6818      	ldr	r0, [r3, #0]
 800b156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b15a:	f004 b9af 	b.w	800f4bc <GUI_StoreKey>
 800b15e:	4a0f      	ldr	r2, [pc, #60]	; (800b19c <_cbBackWin+0x60>)
 800b160:	6843      	ldr	r3, [r0, #4]
 800b162:	6811      	ldr	r1, [r2, #0]
 800b164:	428b      	cmp	r3, r1
 800b166:	d006      	beq.n	800b176 <_cbBackWin+0x3a>
 800b168:	6852      	ldr	r2, [r2, #4]
 800b16a:	4293      	cmp	r3, r2
 800b16c:	bf14      	ite	ne
 800b16e:	f04f 33ff 	movne.w	r3, #4294967295
 800b172:	2301      	moveq	r3, #1
 800b174:	e000      	b.n	800b178 <_cbBackWin+0x3c>
 800b176:	2300      	movs	r3, #0
 800b178:	4a09      	ldr	r2, [pc, #36]	; (800b1a0 <_cbBackWin+0x64>)
 800b17a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b17e:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800b182:	4298      	cmp	r0, r3
 800b184:	d003      	beq.n	800b18e <_cbBackWin+0x52>
 800b186:	f004 f859 	bl	800f23c <GUI_SetBkColor>
 800b18a:	f004 fd37 	bl	800fbfc <GUI_Clear>
 800b18e:	4620      	mov	r0, r4
 800b190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b194:	f7ff bfae 	b.w	800b0f4 <WM_DefaultProc>
 800b198:	bd10      	pop	{r4, pc}
 800b19a:	bf00      	nop
 800b19c:	2001b228 	.word	0x2001b228
 800b1a0:	2001b254 	.word	0x2001b254

0800b1a4 <WM_Init>:
 800b1a4:	b530      	push	{r4, r5, lr}
 800b1a6:	4b2b      	ldr	r3, [pc, #172]	; (800b254 <WM_Init+0xb0>)
 800b1a8:	7818      	ldrb	r0, [r3, #0]
 800b1aa:	b085      	sub	sp, #20
 800b1ac:	461d      	mov	r5, r3
 800b1ae:	2800      	cmp	r0, #0
 800b1b0:	d14d      	bne.n	800b24e <WM_Init+0xaa>
 800b1b2:	4b29      	ldr	r3, [pc, #164]	; (800b258 <WM_Init+0xb4>)
 800b1b4:	6018      	str	r0, [r3, #0]
 800b1b6:	4b29      	ldr	r3, [pc, #164]	; (800b25c <WM_Init+0xb8>)
 800b1b8:	6018      	str	r0, [r3, #0]
 800b1ba:	4b29      	ldr	r3, [pc, #164]	; (800b260 <WM_Init+0xbc>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	6458      	str	r0, [r3, #68]	; 0x44
 800b1c0:	4b28      	ldr	r3, [pc, #160]	; (800b264 <WM_Init+0xc0>)
 800b1c2:	8018      	strh	r0, [r3, #0]
 800b1c4:	4b28      	ldr	r3, [pc, #160]	; (800b268 <WM_Init+0xc4>)
 800b1c6:	4604      	mov	r4, r0
 800b1c8:	8018      	strh	r0, [r3, #0]
 800b1ca:	4620      	mov	r0, r4
 800b1cc:	f004 fbec 	bl	800f9a8 <GUI_DEVICE__GetpDriver>
 800b1d0:	b1c0      	cbz	r0, 800b204 <WM_Init+0x60>
 800b1d2:	f04f 32ff 	mov.w	r2, #4294967295
 800b1d6:	2302      	movs	r3, #2
 800b1d8:	e88d 000c 	stmia.w	sp, {r2, r3}
 800b1dc:	2000      	movs	r0, #0
 800b1de:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800b1e2:	4b22      	ldr	r3, [pc, #136]	; (800b26c <WM_Init+0xc8>)
 800b1e4:	9302      	str	r3, [sp, #8]
 800b1e6:	9003      	str	r0, [sp, #12]
 800b1e8:	4613      	mov	r3, r2
 800b1ea:	4601      	mov	r1, r0
 800b1ec:	f7ff fba0 	bl	800a930 <WM_CreateWindowAsChild>
 800b1f0:	4b1f      	ldr	r3, [pc, #124]	; (800b270 <WM_Init+0xcc>)
 800b1f2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b1f6:	4b1f      	ldr	r3, [pc, #124]	; (800b274 <WM_Init+0xd0>)
 800b1f8:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800b1fc:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800b200:	f7ff fb55 	bl	800a8ae <WM_InvalidateWindow>
 800b204:	3401      	adds	r4, #1
 800b206:	2c02      	cmp	r4, #2
 800b208:	d1df      	bne.n	800b1ca <WM_Init+0x26>
 800b20a:	481b      	ldr	r0, [pc, #108]	; (800b278 <WM_Init+0xd4>)
 800b20c:	f007 f8c2 	bl	8012394 <WM__AddCriticalHandle>
 800b210:	481a      	ldr	r0, [pc, #104]	; (800b27c <WM_Init+0xd8>)
 800b212:	f007 f8bf 	bl	8012394 <WM__AddCriticalHandle>
 800b216:	481a      	ldr	r0, [pc, #104]	; (800b280 <WM_Init+0xdc>)
 800b218:	f007 f8bc 	bl	8012394 <WM__AddCriticalHandle>
 800b21c:	4819      	ldr	r0, [pc, #100]	; (800b284 <WM_Init+0xe0>)
 800b21e:	f007 f8b9 	bl	8012394 <WM__AddCriticalHandle>
 800b222:	4819      	ldr	r0, [pc, #100]	; (800b288 <WM_Init+0xe4>)
 800b224:	f007 f8b6 	bl	8012394 <WM__AddCriticalHandle>
 800b228:	4818      	ldr	r0, [pc, #96]	; (800b28c <WM_Init+0xe8>)
 800b22a:	f007 f8b3 	bl	8012394 <WM__AddCriticalHandle>
 800b22e:	4b10      	ldr	r3, [pc, #64]	; (800b270 <WM_Init+0xcc>)
 800b230:	6818      	ldr	r0, [r3, #0]
 800b232:	f7ff fb5d 	bl	800a8f0 <WM_SelectWindow>
 800b236:	f7ff ff4b 	bl	800b0d0 <WM_Activate>
 800b23a:	2301      	movs	r3, #1
 800b23c:	702b      	strb	r3, [r5, #0]
 800b23e:	4814      	ldr	r0, [pc, #80]	; (800b290 <WM_Init+0xec>)
 800b240:	4b14      	ldr	r3, [pc, #80]	; (800b294 <WM_Init+0xf0>)
 800b242:	6003      	str	r3, [r0, #0]
 800b244:	b005      	add	sp, #20
 800b246:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b24a:	f004 bce7 	b.w	800fc1c <GUI__RegisterExit>
 800b24e:	b005      	add	sp, #20
 800b250:	bd30      	pop	{r4, r5, pc}
 800b252:	bf00      	nop
 800b254:	20019420 	.word	0x20019420
 800b258:	2001b244 	.word	0x2001b244
 800b25c:	20019414 	.word	0x20019414
 800b260:	20000238 	.word	0x20000238
 800b264:	2001b240 	.word	0x2001b240
 800b268:	2001b220 	.word	0x2001b220
 800b26c:	0800b13d 	.word	0x0800b13d
 800b270:	2001b228 	.word	0x2001b228
 800b274:	2001b254 	.word	0x2001b254
 800b278:	2001b3b0 	.word	0x2001b3b0
 800b27c:	2001b3a0 	.word	0x2001b3a0
 800b280:	2001b390 	.word	0x2001b390
 800b284:	2001b3b8 	.word	0x2001b3b8
 800b288:	2001b3a8 	.word	0x2001b3a8
 800b28c:	2001b398 	.word	0x2001b398
 800b290:	20019418 	.word	0x20019418
 800b294:	08009f79 	.word	0x08009f79

0800b298 <GUI_MEMDEV_WriteAt>:
 800b298:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b29a:	460c      	mov	r4, r1
 800b29c:	4615      	mov	r5, r2
 800b29e:	4606      	mov	r6, r0
 800b2a0:	b330      	cbz	r0, 800b2f0 <GUI_MEMDEV_WriteAt+0x58>
 800b2a2:	f005 ff97 	bl	80111d4 <GUI_ALLOC_LockH>
 800b2a6:	4a13      	ldr	r2, [pc, #76]	; (800b2f4 <GUI_MEMDEV_WriteAt+0x5c>)
 800b2a8:	8943      	ldrh	r3, [r0, #10]
 800b2aa:	9001      	str	r0, [sp, #4]
 800b2ac:	4294      	cmp	r4, r2
 800b2ae:	8902      	ldrh	r2, [r0, #8]
 800b2b0:	bf04      	itt	eq
 800b2b2:	f9b0 4004 	ldrsheq.w	r4, [r0, #4]
 800b2b6:	f9b0 5006 	ldrsheq.w	r5, [r0, #6]
 800b2ba:	f8ad 4008 	strh.w	r4, [sp, #8]
 800b2be:	3a01      	subs	r2, #1
 800b2c0:	3b01      	subs	r3, #1
 800b2c2:	4422      	add	r2, r4
 800b2c4:	442b      	add	r3, r5
 800b2c6:	a801      	add	r0, sp, #4
 800b2c8:	f8ad 200c 	strh.w	r2, [sp, #12]
 800b2cc:	f8ad 500a 	strh.w	r5, [sp, #10]
 800b2d0:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b2d4:	f005 ff8c 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800b2d8:	a802      	add	r0, sp, #8
 800b2da:	f7ff fd25 	bl	800ad28 <WM__InitIVRSearch>
 800b2de:	b138      	cbz	r0, 800b2f0 <GUI_MEMDEV_WriteAt+0x58>
 800b2e0:	4630      	mov	r0, r6
 800b2e2:	4621      	mov	r1, r4
 800b2e4:	462a      	mov	r2, r5
 800b2e6:	f000 ff2d 	bl	800c144 <GUI_MEMDEV__WriteToActiveAt>
 800b2ea:	f7ff fc5b 	bl	800aba4 <WM__GetNextIVR>
 800b2ee:	e7f6      	b.n	800b2de <GUI_MEMDEV_WriteAt+0x46>
 800b2f0:	b004      	add	sp, #16
 800b2f2:	bd70      	pop	{r4, r5, r6, pc}
 800b2f4:	fffff001 	.word	0xfffff001

0800b2f8 <GUI_MEMDEV_Write>:
 800b2f8:	4901      	ldr	r1, [pc, #4]	; (800b300 <GUI_MEMDEV_Write+0x8>)
 800b2fa:	460a      	mov	r2, r1
 800b2fc:	f7ff bfcc 	b.w	800b298 <GUI_MEMDEV_WriteAt>
 800b300:	fffff001 	.word	0xfffff001

0800b304 <_CreateStaticDevice>:
 800b304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b308:	b087      	sub	sp, #28
 800b30a:	4604      	mov	r4, r0
 800b30c:	f005 ff62 	bl	80111d4 <GUI_ALLOC_LockH>
 800b310:	af06      	add	r7, sp, #24
 800b312:	f8b0 8000 	ldrh.w	r8, [r0]
 800b316:	8886      	ldrh	r6, [r0, #4]
 800b318:	f8b0 9002 	ldrh.w	r9, [r0, #2]
 800b31c:	f8b0 b006 	ldrh.w	fp, [r0, #6]
 800b320:	f847 0d04 	str.w	r0, [r7, #-4]!
 800b324:	fa0f f888 	sxth.w	r8, r8
 800b328:	b236      	sxth	r6, r6
 800b32a:	ebc8 0606 	rsb	r6, r8, r6
 800b32e:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
 800b332:	3601      	adds	r6, #1
 800b334:	4638      	mov	r0, r7
 800b336:	fa0f f989 	sxth.w	r9, r9
 800b33a:	fa0f f58b 	sxth.w	r5, fp
 800b33e:	f005 ff57 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800b342:	ebc9 0505 	rsb	r5, r9, r5
 800b346:	2e00      	cmp	r6, #0
 800b348:	f105 0501 	add.w	r5, r5, #1
 800b34c:	dd4d      	ble.n	800b3ea <_CreateStaticDevice+0xe6>
 800b34e:	2d00      	cmp	r5, #0
 800b350:	dd4b      	ble.n	800b3ea <_CreateStaticDevice+0xe6>
 800b352:	f1ba 0f00 	cmp.w	sl, #0
 800b356:	d04a      	beq.n	800b3ee <_CreateStaticDevice+0xea>
 800b358:	4650      	mov	r0, sl
 800b35a:	f005 ff3b 	bl	80111d4 <GUI_ALLOC_LockH>
 800b35e:	ab06      	add	r3, sp, #24
 800b360:	8886      	ldrh	r6, [r0, #4]
 800b362:	f843 0d08 	str.w	r0, [r3, #-8]!
 800b366:	88c5      	ldrh	r5, [r0, #6]
 800b368:	b236      	sxth	r6, r6
 800b36a:	4618      	mov	r0, r3
 800b36c:	f005 ff40 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800b370:	4546      	cmp	r6, r8
 800b372:	d102      	bne.n	800b37a <_CreateStaticDevice+0x76>
 800b374:	b22d      	sxth	r5, r5
 800b376:	454d      	cmp	r5, r9
 800b378:	d032      	beq.n	800b3e0 <_CreateStaticDevice+0xdc>
 800b37a:	4650      	mov	r0, sl
 800b37c:	4641      	mov	r1, r8
 800b37e:	464a      	mov	r2, r9
 800b380:	f000 f886 	bl	800b490 <GUI_MEMDEV_SetOrg>
 800b384:	e02c      	b.n	800b3e0 <_CreateStaticDevice+0xdc>
 800b386:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b38c:	6283      	str	r3, [r0, #40]	; 0x28
 800b38e:	4638      	mov	r0, r7
 800b390:	f005 ff2e 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800b394:	4640      	mov	r0, r8
 800b396:	f000 ffef 	bl	800c378 <GUI_MEMDEV_Select>
 800b39a:	4607      	mov	r7, r0
 800b39c:	4650      	mov	r0, sl
 800b39e:	f003 ff51 	bl	800f244 <GUI__AlphaPreserveTrans>
 800b3a2:	4640      	mov	r0, r8
 800b3a4:	f000 f8e0 	bl	800b568 <GUI_MEMDEV_GetDataPtr>
 800b3a8:	4b2d      	ldr	r3, [pc, #180]	; (800b460 <_CreateStaticDevice+0x15c>)
 800b3aa:	fb05 f206 	mul.w	r2, r5, r6
 800b3ae:	7819      	ldrb	r1, [r3, #0]
 800b3b0:	4d2c      	ldr	r5, [pc, #176]	; (800b464 <_CreateStaticDevice+0x160>)
 800b3b2:	4e2d      	ldr	r6, [pc, #180]	; (800b468 <_CreateStaticDevice+0x164>)
 800b3b4:	0092      	lsls	r2, r2, #2
 800b3b6:	f002 fe21 	bl	800dffc <GUI__memset>
 800b3ba:	4620      	mov	r0, r4
 800b3bc:	f8d5 8000 	ldr.w	r8, [r5]
 800b3c0:	6034      	str	r4, [r6, #0]
 800b3c2:	f006 ffd3 	bl	801236c <WM_GetWindowOrgX>
 800b3c6:	6028      	str	r0, [r5, #0]
 800b3c8:	4620      	mov	r0, r4
 800b3ca:	f7ff fd35 	bl	800ae38 <WM__Paint1>
 800b3ce:	2000      	movs	r0, #0
 800b3d0:	f8c5 8000 	str.w	r8, [r5]
 800b3d4:	6030      	str	r0, [r6, #0]
 800b3d6:	f003 ff35 	bl	800f244 <GUI__AlphaPreserveTrans>
 800b3da:	4638      	mov	r0, r7
 800b3dc:	f000 ffcc 	bl	800c378 <GUI_MEMDEV_Select>
 800b3e0:	4620      	mov	r0, r4
 800b3e2:	f005 feed 	bl	80111c0 <GUI_ALLOC_h2p>
 800b3e6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800b3e8:	e037      	b.n	800b45a <_CreateStaticDevice+0x156>
 800b3ea:	2000      	movs	r0, #0
 800b3ec:	e035      	b.n	800b45a <_CreateStaticDevice+0x156>
 800b3ee:	f7fe fd49 	bl	8009e84 <WM_GetDesktopWindow>
 800b3f2:	4284      	cmp	r4, r0
 800b3f4:	d112      	bne.n	800b41c <_CreateStaticDevice+0x118>
 800b3f6:	f002 f9a3 	bl	800d740 <LCD_GetXSize>
 800b3fa:	4682      	mov	sl, r0
 800b3fc:	f002 f9a8 	bl	800d750 <LCD_GetYSize>
 800b400:	4556      	cmp	r6, sl
 800b402:	dc02      	bgt.n	800b40a <_CreateStaticDevice+0x106>
 800b404:	4285      	cmp	r5, r0
 800b406:	dd09      	ble.n	800b41c <_CreateStaticDevice+0x118>
 800b408:	e000      	b.n	800b40c <_CreateStaticDevice+0x108>
 800b40a:	4656      	mov	r6, sl
 800b40c:	4285      	cmp	r5, r0
 800b40e:	bfa8      	it	ge
 800b410:	4605      	movge	r5, r0
 800b412:	4631      	mov	r1, r6
 800b414:	4620      	mov	r0, r4
 800b416:	462a      	mov	r2, r5
 800b418:	f7fe fa73 	bl	8009902 <WM_SetSize>
 800b41c:	4b13      	ldr	r3, [pc, #76]	; (800b46c <_CreateStaticDevice+0x168>)
 800b41e:	9301      	str	r3, [sp, #4]
 800b420:	f04f 0a01 	mov.w	sl, #1
 800b424:	4b12      	ldr	r3, [pc, #72]	; (800b470 <_CreateStaticDevice+0x16c>)
 800b426:	9302      	str	r3, [sp, #8]
 800b428:	4640      	mov	r0, r8
 800b42a:	4649      	mov	r1, r9
 800b42c:	4632      	mov	r2, r6
 800b42e:	462b      	mov	r3, r5
 800b430:	f8cd a000 	str.w	sl, [sp]
 800b434:	f000 fea2 	bl	800c17c <GUI_MEMDEV__CreateFixed>
 800b438:	4680      	mov	r8, r0
 800b43a:	4620      	mov	r0, r4
 800b43c:	f005 feca 	bl	80111d4 <GUI_ALLOC_LockH>
 800b440:	9005      	str	r0, [sp, #20]
 800b442:	f8c0 8024 	str.w	r8, [r0, #36]	; 0x24
 800b446:	f1b8 0f00 	cmp.w	r8, #0
 800b44a:	d19c      	bne.n	800b386 <_CreateStaticDevice+0x82>
 800b44c:	4638      	mov	r0, r7
 800b44e:	f005 fecf 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800b452:	4620      	mov	r0, r4
 800b454:	f7ff fcf0 	bl	800ae38 <WM__Paint1>
 800b458:	4640      	mov	r0, r8
 800b45a:	b007      	add	sp, #28
 800b45c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b460:	20000204 	.word	0x20000204
 800b464:	2001b298 	.word	0x2001b298
 800b468:	2001b26c 	.word	0x2001b26c
 800b46c:	08017288 	.word	0x08017288
 800b470:	0801a7c8 	.word	0x0801a7c8

0800b474 <GUI_MEMDEV_Paint1Static>:
 800b474:	b538      	push	{r3, r4, r5, lr}
 800b476:	4605      	mov	r5, r0
 800b478:	2405      	movs	r4, #5
 800b47a:	4628      	mov	r0, r5
 800b47c:	f7ff ff42 	bl	800b304 <_CreateStaticDevice>
 800b480:	b910      	cbnz	r0, 800b488 <GUI_MEMDEV_Paint1Static+0x14>
 800b482:	3c01      	subs	r4, #1
 800b484:	d1f9      	bne.n	800b47a <GUI_MEMDEV_Paint1Static+0x6>
 800b486:	bd38      	pop	{r3, r4, r5, pc}
 800b488:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b48c:	f7ff bf34 	b.w	800b2f8 <GUI_MEMDEV_Write>

0800b490 <GUI_MEMDEV_SetOrg>:
 800b490:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b492:	460d      	mov	r5, r1
 800b494:	4614      	mov	r4, r2
 800b496:	b918      	cbnz	r0, 800b4a0 <GUI_MEMDEV_SetOrg+0x10>
 800b498:	4b11      	ldr	r3, [pc, #68]	; (800b4e0 <GUI_MEMDEV_SetOrg+0x50>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800b49e:	b1e8      	cbz	r0, 800b4dc <GUI_MEMDEV_SetOrg+0x4c>
 800b4a0:	f005 fe98 	bl	80111d4 <GUI_ALLOC_LockH>
 800b4a4:	b2a4      	uxth	r4, r4
 800b4a6:	b2ad      	uxth	r5, r5
 800b4a8:	80c4      	strh	r4, [r0, #6]
 800b4aa:	8085      	strh	r5, [r0, #4]
 800b4ac:	9000      	str	r0, [sp, #0]
 800b4ae:	f002 fcb5 	bl	800de1c <LCD_SetClipRectMax>
 800b4b2:	9b00      	ldr	r3, [sp, #0]
 800b4b4:	6958      	ldr	r0, [r3, #20]
 800b4b6:	b170      	cbz	r0, 800b4d6 <GUI_MEMDEV_SetOrg+0x46>
 800b4b8:	f005 fe8c 	bl	80111d4 <GUI_ALLOC_LockH>
 800b4bc:	9b00      	ldr	r3, [sp, #0]
 800b4be:	9001      	str	r0, [sp, #4]
 800b4c0:	891a      	ldrh	r2, [r3, #8]
 800b4c2:	895b      	ldrh	r3, [r3, #10]
 800b4c4:	8082      	strh	r2, [r0, #4]
 800b4c6:	80c3      	strh	r3, [r0, #6]
 800b4c8:	b112      	cbz	r2, 800b4d0 <GUI_MEMDEV_SetOrg+0x40>
 800b4ca:	b10b      	cbz	r3, 800b4d0 <GUI_MEMDEV_SetOrg+0x40>
 800b4cc:	8005      	strh	r5, [r0, #0]
 800b4ce:	8044      	strh	r4, [r0, #2]
 800b4d0:	a801      	add	r0, sp, #4
 800b4d2:	f005 fe8d 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800b4d6:	4668      	mov	r0, sp
 800b4d8:	f005 fe8a 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800b4dc:	b003      	add	sp, #12
 800b4de:	bd30      	pop	{r4, r5, pc}
 800b4e0:	20000238 	.word	0x20000238

0800b4e4 <GUI_MEMDEV_GetYSize>:
 800b4e4:	b513      	push	{r0, r1, r4, lr}
 800b4e6:	b920      	cbnz	r0, 800b4f2 <GUI_MEMDEV_GetYSize+0xe>
 800b4e8:	4b08      	ldr	r3, [pc, #32]	; (800b50c <GUI_MEMDEV_GetYSize+0x28>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800b4ee:	4604      	mov	r4, r0
 800b4f0:	b148      	cbz	r0, 800b506 <GUI_MEMDEV_GetYSize+0x22>
 800b4f2:	f005 fe6f 	bl	80111d4 <GUI_ALLOC_LockH>
 800b4f6:	ab02      	add	r3, sp, #8
 800b4f8:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 800b4fc:	f843 0d04 	str.w	r0, [r3, #-4]!
 800b500:	4618      	mov	r0, r3
 800b502:	f005 fe75 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800b506:	4620      	mov	r0, r4
 800b508:	b002      	add	sp, #8
 800b50a:	bd10      	pop	{r4, pc}
 800b50c:	20000238 	.word	0x20000238

0800b510 <GUI_MEMDEV_GetXPos>:
 800b510:	b513      	push	{r0, r1, r4, lr}
 800b512:	b920      	cbnz	r0, 800b51e <GUI_MEMDEV_GetXPos+0xe>
 800b514:	4b08      	ldr	r3, [pc, #32]	; (800b538 <GUI_MEMDEV_GetXPos+0x28>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800b51a:	4604      	mov	r4, r0
 800b51c:	b148      	cbz	r0, 800b532 <GUI_MEMDEV_GetXPos+0x22>
 800b51e:	f005 fe59 	bl	80111d4 <GUI_ALLOC_LockH>
 800b522:	ab02      	add	r3, sp, #8
 800b524:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800b528:	f843 0d04 	str.w	r0, [r3, #-4]!
 800b52c:	4618      	mov	r0, r3
 800b52e:	f005 fe5f 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800b532:	4620      	mov	r0, r4
 800b534:	b002      	add	sp, #8
 800b536:	bd10      	pop	{r4, pc}
 800b538:	20000238 	.word	0x20000238

0800b53c <GUI_MEMDEV_GetYPos>:
 800b53c:	b513      	push	{r0, r1, r4, lr}
 800b53e:	b920      	cbnz	r0, 800b54a <GUI_MEMDEV_GetYPos+0xe>
 800b540:	4b08      	ldr	r3, [pc, #32]	; (800b564 <GUI_MEMDEV_GetYPos+0x28>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800b546:	4604      	mov	r4, r0
 800b548:	b148      	cbz	r0, 800b55e <GUI_MEMDEV_GetYPos+0x22>
 800b54a:	f005 fe43 	bl	80111d4 <GUI_ALLOC_LockH>
 800b54e:	ab02      	add	r3, sp, #8
 800b550:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 800b554:	f843 0d04 	str.w	r0, [r3, #-4]!
 800b558:	4618      	mov	r0, r3
 800b55a:	f005 fe49 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800b55e:	4620      	mov	r0, r4
 800b560:	b002      	add	sp, #8
 800b562:	bd10      	pop	{r4, pc}
 800b564:	20000238 	.word	0x20000238

0800b568 <GUI_MEMDEV_GetDataPtr>:
 800b568:	b513      	push	{r0, r1, r4, lr}
 800b56a:	b150      	cbz	r0, 800b582 <GUI_MEMDEV_GetDataPtr+0x1a>
 800b56c:	f005 fe32 	bl	80111d4 <GUI_ALLOC_LockH>
 800b570:	4604      	mov	r4, r0
 800b572:	a802      	add	r0, sp, #8
 800b574:	f840 4d04 	str.w	r4, [r0, #-4]!
 800b578:	f005 fe3a 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800b57c:	f104 0018 	add.w	r0, r4, #24
 800b580:	e7ff      	b.n	800b582 <GUI_MEMDEV_GetDataPtr+0x1a>
 800b582:	b002      	add	sp, #8
 800b584:	bd10      	pop	{r4, pc}

0800b586 <GUI_MEMDEV_CreateFixed>:
 800b586:	b570      	push	{r4, r5, r6, lr}
 800b588:	9c06      	ldr	r4, [sp, #24]
 800b58a:	b11c      	cbz	r4, 800b594 <GUI_MEMDEV_CreateFixed+0xe>
 800b58c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b590:	f000 bdf4 	b.w	800c17c <GUI_MEMDEV__CreateFixed>
 800b594:	4620      	mov	r0, r4
 800b596:	bd70      	pop	{r4, r5, r6, pc}

0800b598 <GUI_MEMDEV_Clear>:
 800b598:	b513      	push	{r0, r1, r4, lr}
 800b59a:	b918      	cbnz	r0, 800b5a4 <GUI_MEMDEV_Clear+0xc>
 800b59c:	4b0d      	ldr	r3, [pc, #52]	; (800b5d4 <GUI_MEMDEV_Clear+0x3c>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800b5a2:	b1a8      	cbz	r0, 800b5d0 <GUI_MEMDEV_Clear+0x38>
 800b5a4:	f005 fe16 	bl	80111d4 <GUI_ALLOC_LockH>
 800b5a8:	ab02      	add	r3, sp, #8
 800b5aa:	6944      	ldr	r4, [r0, #20]
 800b5ac:	f843 0d08 	str.w	r0, [r3, #-8]!
 800b5b0:	4668      	mov	r0, sp
 800b5b2:	f005 fe1d 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800b5b6:	b15c      	cbz	r4, 800b5d0 <GUI_MEMDEV_Clear+0x38>
 800b5b8:	4620      	mov	r0, r4
 800b5ba:	f005 fe0b 	bl	80111d4 <GUI_ALLOC_LockH>
 800b5be:	ac02      	add	r4, sp, #8
 800b5c0:	6883      	ldr	r3, [r0, #8]
 800b5c2:	f844 0d04 	str.w	r0, [r4, #-4]!
 800b5c6:	689b      	ldr	r3, [r3, #8]
 800b5c8:	4798      	blx	r3
 800b5ca:	4620      	mov	r0, r4
 800b5cc:	f005 fe10 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800b5d0:	b002      	add	sp, #8
 800b5d2:	bd10      	pop	{r4, pc}
 800b5d4:	20000238 	.word	0x20000238

0800b5d8 <GUI_MEMDEV_Draw>:
 800b5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5dc:	461e      	mov	r6, r3
 800b5de:	b089      	sub	sp, #36	; 0x24
 800b5e0:	4b4e      	ldr	r3, [pc, #312]	; (800b71c <GUI_MEMDEV_Draw+0x144>)
 800b5e2:	9204      	str	r2, [sp, #16]
 800b5e4:	681a      	ldr	r2, [r3, #0]
 800b5e6:	9103      	str	r1, [sp, #12]
 800b5e8:	7c54      	ldrb	r4, [r2, #17]
 800b5ea:	4a4d      	ldr	r2, [pc, #308]	; (800b720 <GUI_MEMDEV_Draw+0x148>)
 800b5ec:	5712      	ldrsb	r2, [r2, r4]
 800b5ee:	2a01      	cmp	r2, #1
 800b5f0:	4605      	mov	r5, r0
 800b5f2:	469b      	mov	fp, r3
 800b5f4:	4620      	mov	r0, r4
 800b5f6:	dd06      	ble.n	800b606 <GUI_MEMDEV_Draw+0x2e>
 800b5f8:	f002 f890 	bl	800d71c <LCD_GetXSizeEx>
 800b5fc:	4607      	mov	r7, r0
 800b5fe:	4620      	mov	r0, r4
 800b600:	f002 f88f 	bl	800d722 <LCD_GetYSizeEx>
 800b604:	e005      	b.n	800b612 <GUI_MEMDEV_Draw+0x3a>
 800b606:	f002 f88f 	bl	800d728 <LCD_GetVXSizeEx>
 800b60a:	4607      	mov	r7, r0
 800b60c:	4620      	mov	r0, r4
 800b60e:	f002 f88e 	bl	800d72e <LCD_GetVYSizeEx>
 800b612:	4604      	mov	r4, r0
 800b614:	b325      	cbz	r5, 800b660 <GUI_MEMDEV_Draw+0x88>
 800b616:	a806      	add	r0, sp, #24
 800b618:	a907      	add	r1, sp, #28
 800b61a:	f003 fff1 	bl	800f600 <GUI_GetOrg>
 800b61e:	9b06      	ldr	r3, [sp, #24]
 800b620:	f9b5 a000 	ldrsh.w	sl, [r5]
 800b624:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800b628:	f9b5 8002 	ldrsh.w	r8, [r5, #2]
 800b62c:	441f      	add	r7, r3
 800b62e:	9b07      	ldr	r3, [sp, #28]
 800b630:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b634:	3f01      	subs	r7, #1
 800b636:	4297      	cmp	r7, r2
 800b638:	bfd4      	ite	le
 800b63a:	ebca 0707 	rsble	r7, sl, r7
 800b63e:	ebca 0702 	rsbgt	r7, sl, r2
 800b642:	441c      	add	r4, r3
 800b644:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 800b648:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800b64c:	3c01      	subs	r4, #1
 800b64e:	4294      	cmp	r4, r2
 800b650:	bfd4      	ite	le
 800b652:	ebc8 0404 	rsble	r4, r8, r4
 800b656:	ebc8 0402 	rsbgt	r4, r8, r2
 800b65a:	3701      	adds	r7, #1
 800b65c:	3401      	adds	r4, #1
 800b65e:	e001      	b.n	800b664 <GUI_MEMDEV_Draw+0x8c>
 800b660:	46a8      	mov	r8, r5
 800b662:	46aa      	mov	sl, r5
 800b664:	b906      	cbnz	r6, 800b668 <GUI_MEMDEV_Draw+0x90>
 800b666:	4266      	negs	r6, r4
 800b668:	2f00      	cmp	r7, #0
 800b66a:	dd52      	ble.n	800b712 <GUI_MEMDEV_Draw+0x13a>
 800b66c:	2c00      	cmp	r4, #0
 800b66e:	dd50      	ble.n	800b712 <GUI_MEMDEV_Draw+0x13a>
 800b670:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b672:	9300      	str	r3, [sp, #0]
 800b674:	4650      	mov	r0, sl
 800b676:	4641      	mov	r1, r8
 800b678:	463a      	mov	r2, r7
 800b67a:	4633      	mov	r3, r6
 800b67c:	f000 fe38 	bl	800c2f0 <GUI_MEMDEV_CreateEx>
 800b680:	4605      	mov	r5, r0
 800b682:	b920      	cbnz	r0, 800b68e <GUI_MEMDEV_Draw+0xb6>
 800b684:	9804      	ldr	r0, [sp, #16]
 800b686:	9b03      	ldr	r3, [sp, #12]
 800b688:	4798      	blx	r3
 800b68a:	2001      	movs	r0, #1
 800b68c:	e042      	b.n	800b714 <GUI_MEMDEV_Draw+0x13c>
 800b68e:	f7ff ff29 	bl	800b4e4 <GUI_MEMDEV_GetYSize>
 800b692:	42a0      	cmp	r0, r4
 800b694:	4606      	mov	r6, r0
 800b696:	d006      	beq.n	800b6a6 <GUI_MEMDEV_Draw+0xce>
 800b698:	f8db 3000 	ldr.w	r3, [fp]
 800b69c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800b69e:	b110      	cbz	r0, 800b6a6 <GUI_MEMDEV_Draw+0xce>
 800b6a0:	2132      	movs	r1, #50	; 0x32
 800b6a2:	f006 fb07 	bl	8011cb4 <WM__SendMessageNoPara>
 800b6a6:	4628      	mov	r0, r5
 800b6a8:	f000 fe66 	bl	800c378 <GUI_MEMDEV_Select>
 800b6ac:	4273      	negs	r3, r6
 800b6ae:	9305      	str	r3, [sp, #20]
 800b6b0:	46a1      	mov	r9, r4
 800b6b2:	2700      	movs	r7, #0
 800b6b4:	45b1      	cmp	r9, r6
 800b6b6:	da03      	bge.n	800b6c0 <GUI_MEMDEV_Draw+0xe8>
 800b6b8:	4628      	mov	r0, r5
 800b6ba:	4649      	mov	r1, r9
 800b6bc:	f007 fc60 	bl	8012f80 <GUI_MEMDEV_ReduceYSize>
 800b6c0:	b147      	cbz	r7, 800b6d4 <GUI_MEMDEV_Draw+0xfc>
 800b6c2:	4628      	mov	r0, r5
 800b6c4:	4651      	mov	r1, sl
 800b6c6:	eb07 0208 	add.w	r2, r7, r8
 800b6ca:	f7ff fee1 	bl	800b490 <GUI_MEMDEV_SetOrg>
 800b6ce:	4628      	mov	r0, r5
 800b6d0:	f7ff ff62 	bl	800b598 <GUI_MEMDEV_Clear>
 800b6d4:	9b03      	ldr	r3, [sp, #12]
 800b6d6:	9804      	ldr	r0, [sp, #16]
 800b6d8:	4798      	blx	r3
 800b6da:	4b12      	ldr	r3, [pc, #72]	; (800b724 <GUI_MEMDEV_Draw+0x14c>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	b10b      	cbz	r3, 800b6e4 <GUI_MEMDEV_Draw+0x10c>
 800b6e0:	2000      	movs	r0, #0
 800b6e2:	4798      	blx	r3
 800b6e4:	4628      	mov	r0, r5
 800b6e6:	f000 febf 	bl	800c468 <GUI_MEMDEV_CopyToLCD>
 800b6ea:	4437      	add	r7, r6
 800b6ec:	9b05      	ldr	r3, [sp, #20]
 800b6ee:	42a7      	cmp	r7, r4
 800b6f0:	4499      	add	r9, r3
 800b6f2:	dbdf      	blt.n	800b6b4 <GUI_MEMDEV_Draw+0xdc>
 800b6f4:	4628      	mov	r0, r5
 800b6f6:	f000 fdd9 	bl	800c2ac <GUI_MEMDEV_Delete>
 800b6fa:	2000      	movs	r0, #0
 800b6fc:	f000 fe3c 	bl	800c378 <GUI_MEMDEV_Select>
 800b700:	42a6      	cmp	r6, r4
 800b702:	d006      	beq.n	800b712 <GUI_MEMDEV_Draw+0x13a>
 800b704:	f8db 3000 	ldr.w	r3, [fp]
 800b708:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800b70a:	b110      	cbz	r0, 800b712 <GUI_MEMDEV_Draw+0x13a>
 800b70c:	2133      	movs	r1, #51	; 0x33
 800b70e:	f006 fad1 	bl	8011cb4 <WM__SendMessageNoPara>
 800b712:	2000      	movs	r0, #0
 800b714:	b009      	add	sp, #36	; 0x24
 800b716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b71a:	bf00      	nop
 800b71c:	20000238 	.word	0x20000238
 800b720:	2001b290 	.word	0x2001b290
 800b724:	20019424 	.word	0x20019424

0800b728 <_GetDevData>:
 800b728:	4802      	ldr	r0, [pc, #8]	; (800b734 <_GetDevData+0xc>)
 800b72a:	2901      	cmp	r1, #1
 800b72c:	bf18      	it	ne
 800b72e:	2000      	movne	r0, #0
 800b730:	4770      	bx	lr
 800b732:	bf00      	nop
 800b734:	08017288 	.word	0x08017288

0800b738 <_GetDevFunc>:
 800b738:	4802      	ldr	r0, [pc, #8]	; (800b744 <_GetDevFunc+0xc>)
 800b73a:	2916      	cmp	r1, #22
 800b73c:	bf18      	it	ne
 800b73e:	2000      	movne	r0, #0
 800b740:	4770      	bx	lr
 800b742:	bf00      	nop
 800b744:	08012bfd 	.word	0x08012bfd

0800b748 <_GetDevProp>:
 800b748:	2908      	cmp	r1, #8
 800b74a:	bf0c      	ite	eq
 800b74c:	2020      	moveq	r0, #32
 800b74e:	2000      	movne	r0, #0
 800b750:	4770      	bx	lr

0800b752 <_SetOrg>:
 800b752:	b508      	push	{r3, lr}
 800b754:	6800      	ldr	r0, [r0, #0]
 800b756:	68c3      	ldr	r3, [r0, #12]
 800b758:	6a1b      	ldr	r3, [r3, #32]
 800b75a:	4798      	blx	r3
 800b75c:	bd08      	pop	{r3, pc}

0800b75e <_GetRect>:
 800b75e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b760:	6880      	ldr	r0, [r0, #8]
 800b762:	460c      	mov	r4, r1
 800b764:	f005 fd36 	bl	80111d4 <GUI_ALLOC_LockH>
 800b768:	4603      	mov	r3, r0
 800b76a:	a802      	add	r0, sp, #8
 800b76c:	8899      	ldrh	r1, [r3, #4]
 800b76e:	88da      	ldrh	r2, [r3, #6]
 800b770:	891d      	ldrh	r5, [r3, #8]
 800b772:	f840 3d04 	str.w	r3, [r0, #-4]!
 800b776:	895b      	ldrh	r3, [r3, #10]
 800b778:	8021      	strh	r1, [r4, #0]
 800b77a:	8062      	strh	r2, [r4, #2]
 800b77c:	4429      	add	r1, r5
 800b77e:	441a      	add	r2, r3
 800b780:	3901      	subs	r1, #1
 800b782:	3a01      	subs	r2, #1
 800b784:	80a1      	strh	r1, [r4, #4]
 800b786:	80e2      	strh	r2, [r4, #6]
 800b788:	f005 fd32 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800b78c:	b003      	add	sp, #12
 800b78e:	bd30      	pop	{r4, r5, pc}

0800b790 <_XY2PTR>:
 800b790:	4b0e      	ldr	r3, [pc, #56]	; (800b7cc <_XY2PTR+0x3c>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b796:	4605      	mov	r5, r0
 800b798:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800b79a:	460e      	mov	r6, r1
 800b79c:	f005 fd1a 	bl	80111d4 <GUI_ALLOC_LockH>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	a802      	add	r0, sp, #8
 800b7a4:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 800b7a8:	f840 3d04 	str.w	r3, [r0, #-4]!
 800b7ac:	f103 0118 	add.w	r1, r3, #24
 800b7b0:	1b36      	subs	r6, r6, r4
 800b7b2:	68dc      	ldr	r4, [r3, #12]
 800b7b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b7b8:	fb04 1406 	mla	r4, r4, r6, r1
 800b7bc:	1aed      	subs	r5, r5, r3
 800b7be:	f005 fd17 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800b7c2:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	b002      	add	sp, #8
 800b7ca:	bd70      	pop	{r4, r5, r6, pc}
 800b7cc:	20000238 	.word	0x20000238

0800b7d0 <_GetPixelIndex>:
 800b7d0:	b508      	push	{r3, lr}
 800b7d2:	4608      	mov	r0, r1
 800b7d4:	4611      	mov	r1, r2
 800b7d6:	f7ff ffdb 	bl	800b790 <_XY2PTR>
 800b7da:	6800      	ldr	r0, [r0, #0]
 800b7dc:	bd08      	pop	{r3, pc}
	...

0800b7e0 <_XorPixel>:
 800b7e0:	4b15      	ldr	r3, [pc, #84]	; (800b838 <_XorPixel+0x58>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b7e6:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800b7e8:	4615      	mov	r5, r2
 800b7ea:	460e      	mov	r6, r1
 800b7ec:	f005 fcf2 	bl	80111d4 <GUI_ALLOC_LockH>
 800b7f0:	4629      	mov	r1, r5
 800b7f2:	9000      	str	r0, [sp, #0]
 800b7f4:	4630      	mov	r0, r6
 800b7f6:	f7ff ffcb 	bl	800b790 <_XY2PTR>
 800b7fa:	9b00      	ldr	r3, [sp, #0]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	691b      	ldr	r3, [r3, #16]
 800b800:	4604      	mov	r4, r0
 800b802:	689b      	ldr	r3, [r3, #8]
 800b804:	4798      	blx	r3
 800b806:	6823      	ldr	r3, [r4, #0]
 800b808:	4058      	eors	r0, r3
 800b80a:	9b00      	ldr	r3, [sp, #0]
 800b80c:	6020      	str	r0, [r4, #0]
 800b80e:	6958      	ldr	r0, [r3, #20]
 800b810:	b160      	cbz	r0, 800b82c <_XorPixel+0x4c>
 800b812:	f005 fcdf 	bl	80111d4 <GUI_ALLOC_LockH>
 800b816:	ac02      	add	r4, sp, #8
 800b818:	6883      	ldr	r3, [r0, #8]
 800b81a:	f844 0d04 	str.w	r0, [r4, #-4]!
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	4631      	mov	r1, r6
 800b822:	462a      	mov	r2, r5
 800b824:	4798      	blx	r3
 800b826:	4620      	mov	r0, r4
 800b828:	f005 fce2 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800b82c:	4668      	mov	r0, sp
 800b82e:	f005 fcdf 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800b832:	b002      	add	sp, #8
 800b834:	bd70      	pop	{r4, r5, r6, pc}
 800b836:	bf00      	nop
 800b838:	20000238 	.word	0x20000238

0800b83c <_SetPixelIndex>:
 800b83c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b83e:	461c      	mov	r4, r3
 800b840:	4b10      	ldr	r3, [pc, #64]	; (800b884 <_SetPixelIndex+0x48>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800b846:	460e      	mov	r6, r1
 800b848:	4615      	mov	r5, r2
 800b84a:	f005 fcc3 	bl	80111d4 <GUI_ALLOC_LockH>
 800b84e:	4629      	mov	r1, r5
 800b850:	9000      	str	r0, [sp, #0]
 800b852:	4630      	mov	r0, r6
 800b854:	f7ff ff9c 	bl	800b790 <_XY2PTR>
 800b858:	9b00      	ldr	r3, [sp, #0]
 800b85a:	6004      	str	r4, [r0, #0]
 800b85c:	6958      	ldr	r0, [r3, #20]
 800b85e:	b160      	cbz	r0, 800b87a <_SetPixelIndex+0x3e>
 800b860:	f005 fcb8 	bl	80111d4 <GUI_ALLOC_LockH>
 800b864:	ac02      	add	r4, sp, #8
 800b866:	6883      	ldr	r3, [r0, #8]
 800b868:	f844 0d04 	str.w	r0, [r4, #-4]!
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	4631      	mov	r1, r6
 800b870:	462a      	mov	r2, r5
 800b872:	4798      	blx	r3
 800b874:	4620      	mov	r0, r4
 800b876:	f005 fcbb 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800b87a:	4668      	mov	r0, sp
 800b87c:	f005 fcb8 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800b880:	b002      	add	sp, #8
 800b882:	bd70      	pop	{r4, r5, r6, pc}
 800b884:	20000238 	.word	0x20000238

0800b888 <_DrawVLine>:
 800b888:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b88c:	4d2c      	ldr	r5, [pc, #176]	; (800b940 <_DrawVLine+0xb8>)
 800b88e:	461e      	mov	r6, r3
 800b890:	682b      	ldr	r3, [r5, #0]
 800b892:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800b894:	460f      	mov	r7, r1
 800b896:	4614      	mov	r4, r2
 800b898:	f005 fc9c 	bl	80111d4 <GUI_ALLOC_LockH>
 800b89c:	9000      	str	r0, [sp, #0]
 800b89e:	6940      	ldr	r0, [r0, #20]
 800b8a0:	46a9      	mov	r9, r5
 800b8a2:	b108      	cbz	r0, 800b8a8 <_DrawVLine+0x20>
 800b8a4:	f005 fc96 	bl	80111d4 <GUI_ALLOC_LockH>
 800b8a8:	9001      	str	r0, [sp, #4]
 800b8aa:	4621      	mov	r1, r4
 800b8ac:	4638      	mov	r0, r7
 800b8ae:	f7ff ff6f 	bl	800b790 <_XY2PTR>
 800b8b2:	f8d9 2000 	ldr.w	r2, [r9]
 800b8b6:	9b00      	ldr	r3, [sp, #0]
 800b8b8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800b8ba:	7c12      	ldrb	r2, [r2, #16]
 800b8bc:	f8d3 800c 	ldr.w	r8, [r3, #12]
 800b8c0:	f8d1 9000 	ldr.w	r9, [r1]
 800b8c4:	07d2      	lsls	r2, r2, #31
 800b8c6:	4605      	mov	r5, r0
 800b8c8:	d51f      	bpl.n	800b90a <_DrawVLine+0x82>
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	691b      	ldr	r3, [r3, #16]
 800b8ce:	689b      	ldr	r3, [r3, #8]
 800b8d0:	4798      	blx	r3
 800b8d2:	4680      	mov	r8, r0
 800b8d4:	9801      	ldr	r0, [sp, #4]
 800b8d6:	b128      	cbz	r0, 800b8e4 <_DrawVLine+0x5c>
 800b8d8:	6882      	ldr	r2, [r0, #8]
 800b8da:	4639      	mov	r1, r7
 800b8dc:	f8d2 c000 	ldr.w	ip, [r2]
 800b8e0:	4622      	mov	r2, r4
 800b8e2:	47e0      	blx	ip
 800b8e4:	682b      	ldr	r3, [r5, #0]
 800b8e6:	ea83 0308 	eor.w	r3, r3, r8
 800b8ea:	602b      	str	r3, [r5, #0]
 800b8ec:	9b00      	ldr	r3, [sp, #0]
 800b8ee:	3401      	adds	r4, #1
 800b8f0:	68db      	ldr	r3, [r3, #12]
 800b8f2:	42b4      	cmp	r4, r6
 800b8f4:	441d      	add	r5, r3
 800b8f6:	dded      	ble.n	800b8d4 <_DrawVLine+0x4c>
 800b8f8:	4668      	mov	r0, sp
 800b8fa:	f005 fc79 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800b8fe:	9b01      	ldr	r3, [sp, #4]
 800b900:	b1d3      	cbz	r3, 800b938 <_DrawVLine+0xb0>
 800b902:	a801      	add	r0, sp, #4
 800b904:	f005 fc74 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800b908:	e016      	b.n	800b938 <_DrawVLine+0xb0>
 800b90a:	9b01      	ldr	r3, [sp, #4]
 800b90c:	b163      	cbz	r3, 800b928 <_DrawVLine+0xa0>
 800b90e:	9801      	ldr	r0, [sp, #4]
 800b910:	6883      	ldr	r3, [r0, #8]
 800b912:	4622      	mov	r2, r4
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	4639      	mov	r1, r7
 800b918:	3401      	adds	r4, #1
 800b91a:	4798      	blx	r3
 800b91c:	42b4      	cmp	r4, r6
 800b91e:	f8c5 9000 	str.w	r9, [r5]
 800b922:	4445      	add	r5, r8
 800b924:	ddf3      	ble.n	800b90e <_DrawVLine+0x86>
 800b926:	e7e7      	b.n	800b8f8 <_DrawVLine+0x70>
 800b928:	1b34      	subs	r4, r6, r4
 800b92a:	3401      	adds	r4, #1
 800b92c:	3c01      	subs	r4, #1
 800b92e:	f8c5 9000 	str.w	r9, [r5]
 800b932:	4445      	add	r5, r8
 800b934:	d1fa      	bne.n	800b92c <_DrawVLine+0xa4>
 800b936:	e7df      	b.n	800b8f8 <_DrawVLine+0x70>
 800b938:	b003      	add	sp, #12
 800b93a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b93e:	bf00      	nop
 800b940:	20000238 	.word	0x20000238

0800b944 <_FillRect>:
 800b944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b948:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800b9f8 <_FillRect+0xb4>
 800b94c:	4614      	mov	r4, r2
 800b94e:	f8db 2000 	ldr.w	r2, [fp]
 800b952:	b085      	sub	sp, #20
 800b954:	6e10      	ldr	r0, [r2, #96]	; 0x60
 800b956:	460f      	mov	r7, r1
 800b958:	461d      	mov	r5, r3
 800b95a:	f005 fc3b 	bl	80111d4 <GUI_ALLOC_LockH>
 800b95e:	4621      	mov	r1, r4
 800b960:	9002      	str	r0, [sp, #8]
 800b962:	4638      	mov	r0, r7
 800b964:	f7ff ff14 	bl	800b790 <_XY2PTR>
 800b968:	9a02      	ldr	r2, [sp, #8]
 800b96a:	f8db 3000 	ldr.w	r3, [fp]
 800b96e:	f8d2 900c 	ldr.w	r9, [r2, #12]
 800b972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b974:	4606      	mov	r6, r0
 800b976:	6950      	ldr	r0, [r2, #20]
 800b978:	f8d3 a000 	ldr.w	sl, [r3]
 800b97c:	1bed      	subs	r5, r5, r7
 800b97e:	3501      	adds	r5, #1
 800b980:	b338      	cbz	r0, 800b9d2 <_FillRect+0x8e>
 800b982:	f005 fc27 	bl	80111d4 <GUI_ALLOC_LockH>
 800b986:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b988:	f10d 0810 	add.w	r8, sp, #16
 800b98c:	1b13      	subs	r3, r2, r4
 800b98e:	f848 0d04 	str.w	r0, [r8, #-4]!
 800b992:	3301      	adds	r3, #1
 800b994:	9300      	str	r3, [sp, #0]
 800b996:	4639      	mov	r1, r7
 800b998:	4622      	mov	r2, r4
 800b99a:	462b      	mov	r3, r5
 800b99c:	f007 fada 	bl	8012f54 <GUI_USAGE_AddRect>
 800b9a0:	4640      	mov	r0, r8
 800b9a2:	f005 fc25 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800b9a6:	e014      	b.n	800b9d2 <_FillRect+0x8e>
 800b9a8:	f8db 3000 	ldr.w	r3, [fp]
 800b9ac:	7c1b      	ldrb	r3, [r3, #16]
 800b9ae:	07db      	lsls	r3, r3, #31
 800b9b0:	d513      	bpl.n	800b9da <_FillRect+0x96>
 800b9b2:	9b02      	ldr	r3, [sp, #8]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	691b      	ldr	r3, [r3, #16]
 800b9b8:	689b      	ldr	r3, [r3, #8]
 800b9ba:	4798      	blx	r3
 800b9bc:	4632      	mov	r2, r6
 800b9be:	462b      	mov	r3, r5
 800b9c0:	6811      	ldr	r1, [r2, #0]
 800b9c2:	3b01      	subs	r3, #1
 800b9c4:	ea81 0100 	eor.w	r1, r1, r0
 800b9c8:	f842 1b04 	str.w	r1, [r2], #4
 800b9cc:	d1f8      	bne.n	800b9c0 <_FillRect+0x7c>
 800b9ce:	444e      	add	r6, r9
 800b9d0:	3401      	adds	r4, #1
 800b9d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b9d4:	429c      	cmp	r4, r3
 800b9d6:	dde7      	ble.n	800b9a8 <_FillRect+0x64>
 800b9d8:	e008      	b.n	800b9ec <_FillRect+0xa8>
 800b9da:	2d00      	cmp	r5, #0
 800b9dc:	ddf7      	ble.n	800b9ce <_FillRect+0x8a>
 800b9de:	462b      	mov	r3, r5
 800b9e0:	4632      	mov	r2, r6
 800b9e2:	3b01      	subs	r3, #1
 800b9e4:	f842 ab04 	str.w	sl, [r2], #4
 800b9e8:	d1fb      	bne.n	800b9e2 <_FillRect+0x9e>
 800b9ea:	e7f0      	b.n	800b9ce <_FillRect+0x8a>
 800b9ec:	a802      	add	r0, sp, #8
 800b9ee:	f005 fbff 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800b9f2:	b005      	add	sp, #20
 800b9f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9f8:	20000238 	.word	0x20000238

0800b9fc <_DrawHLine>:
 800b9fc:	b507      	push	{r0, r1, r2, lr}
 800b9fe:	9200      	str	r2, [sp, #0]
 800ba00:	f7ff ffa0 	bl	800b944 <_FillRect>
 800ba04:	b003      	add	sp, #12
 800ba06:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800ba0c <_DrawBitmap>:
 800ba0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba10:	4c9d      	ldr	r4, [pc, #628]	; (800bc88 <_DrawBitmap+0x27c>)
 800ba12:	469a      	mov	sl, r3
 800ba14:	6823      	ldr	r3, [r4, #0]
 800ba16:	b091      	sub	sp, #68	; 0x44
 800ba18:	4680      	mov	r8, r0
 800ba1a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800ba1c:	9207      	str	r2, [sp, #28]
 800ba1e:	460e      	mov	r6, r1
 800ba20:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 800ba24:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 800ba26:	2800      	cmp	r0, #0
 800ba28:	f000 8387 	beq.w	800c13a <_DrawBitmap+0x72e>
 800ba2c:	f005 fbd2 	bl	80111d4 <GUI_ALLOC_LockH>
 800ba30:	900e      	str	r0, [sp, #56]	; 0x38
 800ba32:	6940      	ldr	r0, [r0, #20]
 800ba34:	b108      	cbz	r0, 800ba3a <_DrawBitmap+0x2e>
 800ba36:	f005 fbcd 	bl	80111d4 <GUI_ALLOC_LockH>
 800ba3a:	900f      	str	r0, [sp, #60]	; 0x3c
 800ba3c:	a810      	add	r0, sp, #64	; 0x40
 800ba3e:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 800ba42:	68db      	ldr	r3, [r3, #12]
 800ba44:	930a      	str	r3, [sp, #40]	; 0x28
 800ba46:	f005 fbd3 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800ba4a:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800ba4c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800ba4e:	4437      	add	r7, r6
 800ba50:	9704      	str	r7, [sp, #16]
 800ba52:	b150      	cbz	r0, 800ba6a <_DrawBitmap+0x5e>
 800ba54:	6823      	ldr	r3, [r4, #0]
 800ba56:	7c1b      	ldrb	r3, [r3, #16]
 800ba58:	079c      	lsls	r4, r3, #30
 800ba5a:	d406      	bmi.n	800ba6a <_DrawBitmap+0x5e>
 800ba5c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800ba5e:	9700      	str	r7, [sp, #0]
 800ba60:	9904      	ldr	r1, [sp, #16]
 800ba62:	9a07      	ldr	r2, [sp, #28]
 800ba64:	4653      	mov	r3, sl
 800ba66:	f007 fa75 	bl	8012f54 <GUI_USAGE_AddRect>
 800ba6a:	9804      	ldr	r0, [sp, #16]
 800ba6c:	9907      	ldr	r1, [sp, #28]
 800ba6e:	f7ff fe8f 	bl	800b790 <_XY2PTR>
 800ba72:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800ba74:	2f17      	cmp	r7, #23
 800ba76:	4606      	mov	r6, r0
 800ba78:	dd64      	ble.n	800bb44 <_DrawBitmap+0x138>
 800ba7a:	ea4f 078a 	mov.w	r7, sl, lsl #2
 800ba7e:	9706      	str	r7, [sp, #24]
 800ba80:	f04f 0900 	mov.w	r9, #0
 800ba84:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800ba86:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800ba88:	45b9      	cmp	r9, r7
 800ba8a:	da57      	bge.n	800bb3c <_DrawBitmap+0x130>
 800ba8c:	b130      	cbz	r0, 800ba9c <_DrawBitmap+0x90>
 800ba8e:	6883      	ldr	r3, [r0, #8]
 800ba90:	9a07      	ldr	r2, [sp, #28]
 800ba92:	685c      	ldr	r4, [r3, #4]
 800ba94:	9904      	ldr	r1, [sp, #16]
 800ba96:	444a      	add	r2, r9
 800ba98:	4653      	mov	r3, sl
 800ba9a:	47a0      	blx	r4
 800ba9c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800baa0:	68d8      	ldr	r0, [r3, #12]
 800baa2:	b128      	cbz	r0, 800bab0 <_DrawBitmap+0xa4>
 800baa4:	4630      	mov	r0, r6
 800baa6:	4659      	mov	r1, fp
 800baa8:	9a06      	ldr	r2, [sp, #24]
 800baaa:	f009 fdd2 	bl	8015652 <memcpy>
 800baae:	e03e      	b.n	800bb2e <_DrawBitmap+0x122>
 800bab0:	685b      	ldr	r3, [r3, #4]
 800bab2:	4798      	blx	r3
 800bab4:	0e00      	lsrs	r0, r0, #24
 800bab6:	9005      	str	r0, [sp, #20]
 800bab8:	4635      	mov	r5, r6
 800baba:	4657      	mov	r7, sl
 800babc:	465c      	mov	r4, fp
 800babe:	463b      	mov	r3, r7
 800bac0:	4622      	mov	r2, r4
 800bac2:	f04f 0c00 	mov.w	ip, #0
 800bac6:	f852 1b04 	ldr.w	r1, [r2], #4
 800baca:	9805      	ldr	r0, [sp, #20]
 800bacc:	0e09      	lsrs	r1, r1, #24
 800bace:	4281      	cmp	r1, r0
 800bad0:	9805      	ldr	r0, [sp, #20]
 800bad2:	bf08      	it	eq
 800bad4:	f10c 0c01 	addeq.w	ip, ip, #1
 800bad8:	4281      	cmp	r1, r0
 800bada:	f103 33ff 	add.w	r3, r3, #4294967295
 800bade:	d014      	beq.n	800bb0a <_DrawBitmap+0xfe>
 800bae0:	f1bc 0f00 	cmp.w	ip, #0
 800bae4:	d014      	beq.n	800bb10 <_DrawBitmap+0x104>
 800bae6:	ea4f 038c 	mov.w	r3, ip, lsl #2
 800baea:	4628      	mov	r0, r5
 800baec:	4621      	mov	r1, r4
 800baee:	461a      	mov	r2, r3
 800baf0:	9303      	str	r3, [sp, #12]
 800baf2:	f8cd c008 	str.w	ip, [sp, #8]
 800baf6:	f009 fdac 	bl	8015652 <memcpy>
 800bafa:	9b03      	ldr	r3, [sp, #12]
 800bafc:	f8dd c008 	ldr.w	ip, [sp, #8]
 800bb00:	441d      	add	r5, r3
 800bb02:	441c      	add	r4, r3
 800bb04:	ebcc 0707 	rsb	r7, ip, r7
 800bb08:	e00f      	b.n	800bb2a <_DrawBitmap+0x11e>
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d1db      	bne.n	800bac6 <_DrawBitmap+0xba>
 800bb0e:	e7e7      	b.n	800bae0 <_DrawBitmap+0xd4>
 800bb10:	6820      	ldr	r0, [r4, #0]
 800bb12:	0e02      	lsrs	r2, r0, #24
 800bb14:	2aff      	cmp	r2, #255	; 0xff
 800bb16:	d005      	beq.n	800bb24 <_DrawBitmap+0x118>
 800bb18:	43d2      	mvns	r2, r2
 800bb1a:	6829      	ldr	r1, [r5, #0]
 800bb1c:	b2d2      	uxtb	r2, r2
 800bb1e:	f002 fc68 	bl	800e3f2 <GUI__MixColors>
 800bb22:	6028      	str	r0, [r5, #0]
 800bb24:	3504      	adds	r5, #4
 800bb26:	3404      	adds	r4, #4
 800bb28:	3f01      	subs	r7, #1
 800bb2a:	2f00      	cmp	r7, #0
 800bb2c:	d1c7      	bne.n	800babe <_DrawBitmap+0xb2>
 800bb2e:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800bb30:	44bb      	add	fp, r7
 800bb32:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800bb34:	f109 0901 	add.w	r9, r9, #1
 800bb38:	443e      	add	r6, r7
 800bb3a:	e7a3      	b.n	800ba84 <_DrawBitmap+0x78>
 800bb3c:	2800      	cmp	r0, #0
 800bb3e:	f040 82f9 	bne.w	800c134 <_DrawBitmap+0x728>
 800bb42:	e2fa      	b.n	800c13a <_DrawBitmap+0x72e>
 800bb44:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800bb46:	2f10      	cmp	r7, #16
 800bb48:	d137      	bne.n	800bbba <_DrawBitmap+0x1ae>
 800bb4a:	1f06      	subs	r6, r0, #4
 800bb4c:	2500      	movs	r5, #0
 800bb4e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800bb50:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800bb52:	42bd      	cmp	r5, r7
 800bb54:	f280 80a0 	bge.w	800bc98 <_DrawBitmap+0x28c>
 800bb58:	9f07      	ldr	r7, [sp, #28]
 800bb5a:	442f      	add	r7, r5
 800bb5c:	b13c      	cbz	r4, 800bb6e <_DrawBitmap+0x162>
 800bb5e:	68a3      	ldr	r3, [r4, #8]
 800bb60:	9904      	ldr	r1, [sp, #16]
 800bb62:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800bb66:	4620      	mov	r0, r4
 800bb68:	463a      	mov	r2, r7
 800bb6a:	4653      	mov	r3, sl
 800bb6c:	47e0      	blx	ip
 800bb6e:	f1ab 0302 	sub.w	r3, fp, #2
 800bb72:	9306      	str	r3, [sp, #24]
 800bb74:	9605      	str	r6, [sp, #20]
 800bb76:	46d1      	mov	r9, sl
 800bb78:	9904      	ldr	r1, [sp, #16]
 800bb7a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800bb7e:	9a06      	ldr	r2, [sp, #24]
 800bb80:	685b      	ldr	r3, [r3, #4]
 800bb82:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 800bb86:	9206      	str	r2, [sp, #24]
 800bb88:	4451      	add	r1, sl
 800bb8a:	ebc9 0101 	rsb	r1, r9, r1
 800bb8e:	9103      	str	r1, [sp, #12]
 800bb90:	4798      	blx	r3
 800bb92:	9b05      	ldr	r3, [sp, #20]
 800bb94:	9903      	ldr	r1, [sp, #12]
 800bb96:	f843 0f04 	str.w	r0, [r3, #4]!
 800bb9a:	9305      	str	r3, [sp, #20]
 800bb9c:	b124      	cbz	r4, 800bba8 <_DrawBitmap+0x19c>
 800bb9e:	68a3      	ldr	r3, [r4, #8]
 800bba0:	4620      	mov	r0, r4
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	463a      	mov	r2, r7
 800bba6:	4798      	blx	r3
 800bba8:	f1b9 0901 	subs.w	r9, r9, #1
 800bbac:	d1e4      	bne.n	800bb78 <_DrawBitmap+0x16c>
 800bbae:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800bbb0:	44bb      	add	fp, r7
 800bbb2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800bbb4:	3501      	adds	r5, #1
 800bbb6:	443e      	add	r6, r7
 800bbb8:	e7c9      	b.n	800bb4e <_DrawBitmap+0x142>
 800bbba:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800bbbc:	2f08      	cmp	r7, #8
 800bbbe:	f100 0604 	add.w	r6, r0, #4
 800bbc2:	d16d      	bne.n	800bca0 <_DrawBitmap+0x294>
 800bbc4:	9f07      	ldr	r7, [sp, #28]
 800bbc6:	9907      	ldr	r1, [sp, #28]
 800bbc8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bbca:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800bbcc:	1a7b      	subs	r3, r7, r1
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	f1a6 0004 	sub.w	r0, r6, #4
 800bbd4:	da60      	bge.n	800bc98 <_DrawBitmap+0x28c>
 800bbd6:	4b2c      	ldr	r3, [pc, #176]	; (800bc88 <_DrawBitmap+0x27c>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	7c1b      	ldrb	r3, [r3, #16]
 800bbdc:	b36d      	cbz	r5, 800bc3a <_DrawBitmap+0x22e>
 800bbde:	f013 0303 	ands.w	r3, r3, #3
 800bbe2:	d005      	beq.n	800bbf0 <_DrawBitmap+0x1e4>
 800bbe4:	2b02      	cmp	r3, #2
 800bbe6:	d151      	bne.n	800bc8c <_DrawBitmap+0x280>
 800bbe8:	46b1      	mov	r9, r6
 800bbea:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800bbee:	e01c      	b.n	800bc2a <_DrawBitmap+0x21e>
 800bbf0:	f81b 2003 	ldrb.w	r2, [fp, r3]
 800bbf4:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800bbf8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800bbfc:	3301      	adds	r3, #1
 800bbfe:	4553      	cmp	r3, sl
 800bc00:	d1f6      	bne.n	800bbf0 <_DrawBitmap+0x1e4>
 800bc02:	e043      	b.n	800bc8c <_DrawBitmap+0x280>
 800bc04:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800bc08:	f849 3c04 	str.w	r3, [r9, #-4]
 800bc0c:	b12c      	cbz	r4, 800bc1a <_DrawBitmap+0x20e>
 800bc0e:	68a3      	ldr	r3, [r4, #8]
 800bc10:	4620      	mov	r0, r4
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	4641      	mov	r1, r8
 800bc16:	463a      	mov	r2, r7
 800bc18:	4798      	blx	r3
 800bc1a:	9b04      	ldr	r3, [sp, #16]
 800bc1c:	f108 0801 	add.w	r8, r8, #1
 800bc20:	4453      	add	r3, sl
 800bc22:	4543      	cmp	r3, r8
 800bc24:	f109 0904 	add.w	r9, r9, #4
 800bc28:	d030      	beq.n	800bc8c <_DrawBitmap+0x280>
 800bc2a:	9804      	ldr	r0, [sp, #16]
 800bc2c:	ebc0 030b 	rsb	r3, r0, fp
 800bc30:	f813 3008 	ldrb.w	r3, [r3, r8]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d0f0      	beq.n	800bc1a <_DrawBitmap+0x20e>
 800bc38:	e7e4      	b.n	800bc04 <_DrawBitmap+0x1f8>
 800bc3a:	f013 0303 	ands.w	r3, r3, #3
 800bc3e:	d005      	beq.n	800bc4c <_DrawBitmap+0x240>
 800bc40:	2b02      	cmp	r3, #2
 800bc42:	d123      	bne.n	800bc8c <_DrawBitmap+0x280>
 800bc44:	46b1      	mov	r9, r6
 800bc46:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800bc4a:	e015      	b.n	800bc78 <_DrawBitmap+0x26c>
 800bc4c:	4659      	mov	r1, fp
 800bc4e:	4652      	mov	r2, sl
 800bc50:	f009 fcff 	bl	8015652 <memcpy>
 800bc54:	e01a      	b.n	800bc8c <_DrawBitmap+0x280>
 800bc56:	f849 3c04 	str.w	r3, [r9, #-4]
 800bc5a:	b12c      	cbz	r4, 800bc68 <_DrawBitmap+0x25c>
 800bc5c:	68a3      	ldr	r3, [r4, #8]
 800bc5e:	4620      	mov	r0, r4
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	4641      	mov	r1, r8
 800bc64:	463a      	mov	r2, r7
 800bc66:	4798      	blx	r3
 800bc68:	9b04      	ldr	r3, [sp, #16]
 800bc6a:	f108 0801 	add.w	r8, r8, #1
 800bc6e:	4453      	add	r3, sl
 800bc70:	4543      	cmp	r3, r8
 800bc72:	f109 0904 	add.w	r9, r9, #4
 800bc76:	d009      	beq.n	800bc8c <_DrawBitmap+0x280>
 800bc78:	9904      	ldr	r1, [sp, #16]
 800bc7a:	ebc1 030b 	rsb	r3, r1, fp
 800bc7e:	f813 3008 	ldrb.w	r3, [r3, r8]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d0f0      	beq.n	800bc68 <_DrawBitmap+0x25c>
 800bc86:	e7e6      	b.n	800bc56 <_DrawBitmap+0x24a>
 800bc88:	20000238 	.word	0x20000238
 800bc8c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800bc8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc90:	4493      	add	fp, r2
 800bc92:	3701      	adds	r7, #1
 800bc94:	441e      	add	r6, r3
 800bc96:	e796      	b.n	800bbc6 <_DrawBitmap+0x1ba>
 800bc98:	2c00      	cmp	r4, #0
 800bc9a:	f040 824b 	bne.w	800c134 <_DrawBitmap+0x728>
 800bc9e:	e24c      	b.n	800c13a <_DrawBitmap+0x72e>
 800bca0:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800bca2:	4bb2      	ldr	r3, [pc, #712]	; (800bf6c <_DrawBitmap+0x560>)
 800bca4:	9609      	str	r6, [sp, #36]	; 0x24
 800bca6:	007f      	lsls	r7, r7, #1
 800bca8:	970c      	str	r7, [sp, #48]	; 0x30
 800bcaa:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800bcac:	00bf      	lsls	r7, r7, #2
 800bcae:	970d      	str	r7, [sp, #52]	; 0x34
 800bcb0:	9f07      	ldr	r7, [sp, #28]
 800bcb2:	9705      	str	r7, [sp, #20]
 800bcb4:	2d00      	cmp	r5, #0
 800bcb6:	bf08      	it	eq
 800bcb8:	461d      	moveq	r5, r3
 800bcba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bcbc:	9807      	ldr	r0, [sp, #28]
 800bcbe:	1f3c      	subs	r4, r7, #4
 800bcc0:	9f05      	ldr	r7, [sp, #20]
 800bcc2:	1a3b      	subs	r3, r7, r0
 800bcc4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800bcc6:	42bb      	cmp	r3, r7
 800bcc8:	f280 8232 	bge.w	800c130 <_DrawBitmap+0x724>
 800bccc:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800bcce:	2f02      	cmp	r7, #2
 800bcd0:	f000 80ad 	beq.w	800be2e <_DrawBitmap+0x422>
 800bcd4:	2f04      	cmp	r7, #4
 800bcd6:	f000 814f 	beq.w	800bf78 <_DrawBitmap+0x56c>
 800bcda:	2f01      	cmp	r7, #1
 800bcdc:	f040 821e 	bne.w	800c11c <_DrawBitmap+0x710>
 800bce0:	f8df 9290 	ldr.w	r9, [pc, #656]	; 800bf74 <_DrawBitmap+0x568>
 800bce4:	f8d9 3000 	ldr.w	r3, [r9]
 800bce8:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800bcea:	f005 fa73 	bl	80111d4 <GUI_ALLOC_LockH>
 800bcee:	f89b 3000 	ldrb.w	r3, [fp]
 800bcf2:	4a9f      	ldr	r2, [pc, #636]	; (800bf70 <_DrawBitmap+0x564>)
 800bcf4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800bcf6:	5cd6      	ldrb	r6, [r2, r3]
 800bcf8:	f8d9 3000 	ldr.w	r3, [r9]
 800bcfc:	900e      	str	r0, [sp, #56]	; 0x38
 800bcfe:	7c1b      	ldrb	r3, [r3, #16]
 800bd00:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 800bd04:	f003 0303 	and.w	r3, r3, #3
 800bd08:	2b02      	cmp	r3, #2
 800bd0a:	4657      	mov	r7, sl
 800bd0c:	f1c1 0808 	rsb	r8, r1, #8
 800bd10:	fa46 f601 	asr.w	r6, r6, r1
 800bd14:	d020      	beq.n	800bd58 <_DrawBitmap+0x34c>
 800bd16:	2b03      	cmp	r3, #3
 800bd18:	d061      	beq.n	800bdde <_DrawBitmap+0x3d2>
 800bd1a:	2b01      	cmp	r3, #1
 800bd1c:	d05f      	beq.n	800bdde <_DrawBitmap+0x3d2>
 800bd1e:	465a      	mov	r2, fp
 800bd20:	4547      	cmp	r7, r8
 800bd22:	bf38      	it	cc
 800bd24:	46b8      	movcc	r8, r7
 800bd26:	ebc8 0707 	rsb	r7, r8, r7
 800bd2a:	4643      	mov	r3, r8
 800bd2c:	4621      	mov	r1, r4
 800bd2e:	f006 0001 	and.w	r0, r6, #1
 800bd32:	3b01      	subs	r3, #1
 800bd34:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 800bd38:	f841 0b04 	str.w	r0, [r1], #4
 800bd3c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bd40:	d1f5      	bne.n	800bd2e <_DrawBitmap+0x322>
 800bd42:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800bd46:	2f00      	cmp	r7, #0
 800bd48:	d06d      	beq.n	800be26 <_DrawBitmap+0x41a>
 800bd4a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800bd4e:	4988      	ldr	r1, [pc, #544]	; (800bf70 <_DrawBitmap+0x564>)
 800bd50:	f04f 0808 	mov.w	r8, #8
 800bd54:	5cce      	ldrb	r6, [r1, r3]
 800bd56:	e7e3      	b.n	800bd20 <_DrawBitmap+0x314>
 800bd58:	686b      	ldr	r3, [r5, #4]
 800bd5a:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800bd5e:	930b      	str	r3, [sp, #44]	; 0x2c
 800bd60:	f8cd b020 	str.w	fp, [sp, #32]
 800bd64:	4547      	cmp	r7, r8
 800bd66:	bf38      	it	cc
 800bd68:	46b8      	movcc	r8, r7
 800bd6a:	ebc8 0707 	rsb	r7, r8, r7
 800bd6e:	f1bc 0f00 	cmp.w	ip, #0
 800bd72:	d026      	beq.n	800bdc2 <_DrawBitmap+0x3b6>
 800bd74:	b91e      	cbnz	r6, 800bd7e <_DrawBitmap+0x372>
 800bd76:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800bd7a:	44c1      	add	r9, r8
 800bd7c:	e025      	b.n	800bdca <_DrawBitmap+0x3be>
 800bd7e:	07f0      	lsls	r0, r6, #31
 800bd80:	d50c      	bpl.n	800bd9c <_DrawBitmap+0x390>
 800bd82:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800bd86:	9a05      	ldr	r2, [sp, #20]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f8cd c008 	str.w	ip, [sp, #8]
 800bd8e:	4660      	mov	r0, ip
 800bd90:	4649      	mov	r1, r9
 800bd92:	4798      	blx	r3
 800bd94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd96:	f8dd c008 	ldr.w	ip, [sp, #8]
 800bd9a:	6023      	str	r3, [r4, #0]
 800bd9c:	f1b8 0801 	subs.w	r8, r8, #1
 800bda0:	f109 0901 	add.w	r9, r9, #1
 800bda4:	f104 0404 	add.w	r4, r4, #4
 800bda8:	d00f      	beq.n	800bdca <_DrawBitmap+0x3be>
 800bdaa:	0876      	lsrs	r6, r6, #1
 800bdac:	e7e2      	b.n	800bd74 <_DrawBitmap+0x368>
 800bdae:	07f1      	lsls	r1, r6, #31
 800bdb0:	bf44      	itt	mi
 800bdb2:	9b0b      	ldrmi	r3, [sp, #44]	; 0x2c
 800bdb4:	6023      	strmi	r3, [r4, #0]
 800bdb6:	f1b8 0801 	subs.w	r8, r8, #1
 800bdba:	f104 0404 	add.w	r4, r4, #4
 800bdbe:	d004      	beq.n	800bdca <_DrawBitmap+0x3be>
 800bdc0:	0876      	lsrs	r6, r6, #1
 800bdc2:	2e00      	cmp	r6, #0
 800bdc4:	d1f3      	bne.n	800bdae <_DrawBitmap+0x3a2>
 800bdc6:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800bdca:	b367      	cbz	r7, 800be26 <_DrawBitmap+0x41a>
 800bdcc:	9808      	ldr	r0, [sp, #32]
 800bdce:	4a68      	ldr	r2, [pc, #416]	; (800bf70 <_DrawBitmap+0x564>)
 800bdd0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800bdd4:	9008      	str	r0, [sp, #32]
 800bdd6:	5cd6      	ldrb	r6, [r2, r3]
 800bdd8:	f04f 0808 	mov.w	r8, #8
 800bddc:	e7c2      	b.n	800bd64 <_DrawBitmap+0x358>
 800bdde:	6803      	ldr	r3, [r0, #0]
 800bde0:	691b      	ldr	r3, [r3, #16]
 800bde2:	689b      	ldr	r3, [r3, #8]
 800bde4:	4798      	blx	r3
 800bde6:	4659      	mov	r1, fp
 800bde8:	4547      	cmp	r7, r8
 800bdea:	bf38      	it	cc
 800bdec:	46b8      	movcc	r8, r7
 800bdee:	ebc8 0707 	rsb	r7, r8, r7
 800bdf2:	1d23      	adds	r3, r4, #4
 800bdf4:	46c6      	mov	lr, r8
 800bdf6:	07f2      	lsls	r2, r6, #31
 800bdf8:	d504      	bpl.n	800be04 <_DrawBitmap+0x3f8>
 800bdfa:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800bdfe:	4042      	eors	r2, r0
 800be00:	f843 2c04 	str.w	r2, [r3, #-4]
 800be04:	f1be 0e01 	subs.w	lr, lr, #1
 800be08:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800be0c:	f103 0304 	add.w	r3, r3, #4
 800be10:	d1f1      	bne.n	800bdf6 <_DrawBitmap+0x3ea>
 800be12:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800be16:	b137      	cbz	r7, 800be26 <_DrawBitmap+0x41a>
 800be18:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800be1c:	4a54      	ldr	r2, [pc, #336]	; (800bf70 <_DrawBitmap+0x564>)
 800be1e:	f04f 0808 	mov.w	r8, #8
 800be22:	5cd6      	ldrb	r6, [r2, r3]
 800be24:	e7e0      	b.n	800bde8 <_DrawBitmap+0x3dc>
 800be26:	a80e      	add	r0, sp, #56	; 0x38
 800be28:	f005 f9e2 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800be2c:	e176      	b.n	800c11c <_DrawBitmap+0x710>
 800be2e:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800be30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be32:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 800be36:	f1c7 0604 	rsb	r6, r7, #4
 800be3a:	f89b 7000 	ldrb.w	r7, [fp]
 800be3e:	409f      	lsls	r7, r3
 800be40:	4b4c      	ldr	r3, [pc, #304]	; (800bf74 <_DrawBitmap+0x568>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	7c1b      	ldrb	r3, [r3, #16]
 800be46:	f003 0303 	and.w	r3, r3, #3
 800be4a:	2b01      	cmp	r3, #1
 800be4c:	b2f6      	uxtb	r6, r6
 800be4e:	b2ff      	uxtb	r7, r7
 800be50:	d066      	beq.n	800bf20 <_DrawBitmap+0x514>
 800be52:	d308      	bcc.n	800be66 <_DrawBitmap+0x45a>
 800be54:	2b02      	cmp	r3, #2
 800be56:	f040 8161 	bne.w	800c11c <_DrawBitmap+0x710>
 800be5a:	9804      	ldr	r0, [sp, #16]
 800be5c:	f8cd b020 	str.w	fp, [sp, #32]
 800be60:	46d0      	mov	r8, sl
 800be62:	9006      	str	r0, [sp, #24]
 800be64:	e03e      	b.n	800bee4 <_DrawBitmap+0x4d8>
 800be66:	465a      	mov	r2, fp
 800be68:	4653      	mov	r3, sl
 800be6a:	429e      	cmp	r6, r3
 800be6c:	bfc8      	it	gt
 800be6e:	b2de      	uxtbgt	r6, r3
 800be70:	1b9b      	subs	r3, r3, r6
 800be72:	4631      	mov	r1, r6
 800be74:	4620      	mov	r0, r4
 800be76:	ea4f 1c97 	mov.w	ip, r7, lsr #6
 800be7a:	3901      	subs	r1, #1
 800be7c:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
 800be80:	f840 cb04 	str.w	ip, [r0], #4
 800be84:	00bf      	lsls	r7, r7, #2
 800be86:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800be8a:	b2ff      	uxtb	r7, r7
 800be8c:	d1f3      	bne.n	800be76 <_DrawBitmap+0x46a>
 800be8e:	3e01      	subs	r6, #1
 800be90:	b2f6      	uxtb	r6, r6
 800be92:	3601      	adds	r6, #1
 800be94:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 800be98:	2b00      	cmp	r3, #0
 800be9a:	f000 813f 	beq.w	800c11c <_DrawBitmap+0x710>
 800be9e:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 800bea2:	2604      	movs	r6, #4
 800bea4:	e7e1      	b.n	800be6a <_DrawBitmap+0x45e>
 800bea6:	9906      	ldr	r1, [sp, #24]
 800bea8:	f017 0fc0 	tst.w	r7, #192	; 0xc0
 800beac:	4449      	add	r1, r9
 800beae:	d122      	bne.n	800bef6 <_DrawBitmap+0x4ea>
 800beb0:	f109 0901 	add.w	r9, r9, #1
 800beb4:	fa5f f289 	uxtb.w	r2, r9
 800beb8:	00bf      	lsls	r7, r7, #2
 800beba:	4296      	cmp	r6, r2
 800bebc:	b2ff      	uxtb	r7, r7
 800bebe:	d1f2      	bne.n	800bea6 <_DrawBitmap+0x49a>
 800bec0:	9f06      	ldr	r7, [sp, #24]
 800bec2:	3e01      	subs	r6, #1
 800bec4:	b2f6      	uxtb	r6, r6
 800bec6:	1c7b      	adds	r3, r7, #1
 800bec8:	1c72      	adds	r2, r6, #1
 800beca:	199e      	adds	r6, r3, r6
 800becc:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800bed0:	9606      	str	r6, [sp, #24]
 800bed2:	f1b8 0f00 	cmp.w	r8, #0
 800bed6:	f000 8121 	beq.w	800c11c <_DrawBitmap+0x710>
 800beda:	9b08      	ldr	r3, [sp, #32]
 800bedc:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800bee0:	9308      	str	r3, [sp, #32]
 800bee2:	2604      	movs	r6, #4
 800bee4:	4546      	cmp	r6, r8
 800bee6:	bfc8      	it	gt
 800bee8:	fa5f f688 	uxtbgt.w	r6, r8
 800beec:	ebc6 0808 	rsb	r8, r6, r8
 800bef0:	f04f 0900 	mov.w	r9, #0
 800bef4:	e7d7      	b.n	800bea6 <_DrawBitmap+0x49a>
 800bef6:	09ba      	lsrs	r2, r7, #6
 800bef8:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800befc:	f844 2029 	str.w	r2, [r4, r9, lsl #2]
 800bf00:	f1bc 0f00 	cmp.w	ip, #0
 800bf04:	d0d4      	beq.n	800beb0 <_DrawBitmap+0x4a4>
 800bf06:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800bf0a:	6812      	ldr	r2, [r2, #0]
 800bf0c:	920b      	str	r2, [sp, #44]	; 0x2c
 800bf0e:	4660      	mov	r0, ip
 800bf10:	f8cd c008 	str.w	ip, [sp, #8]
 800bf14:	9a05      	ldr	r2, [sp, #20]
 800bf16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf18:	4798      	blx	r3
 800bf1a:	f8dd c008 	ldr.w	ip, [sp, #8]
 800bf1e:	e7c7      	b.n	800beb0 <_DrawBitmap+0x4a4>
 800bf20:	4658      	mov	r0, fp
 800bf22:	4653      	mov	r3, sl
 800bf24:	429e      	cmp	r6, r3
 800bf26:	bfc8      	it	gt
 800bf28:	b2de      	uxtbgt	r6, r3
 800bf2a:	1b9b      	subs	r3, r3, r6
 800bf2c:	1d22      	adds	r2, r4, #4
 800bf2e:	46b4      	mov	ip, r6
 800bf30:	f017 0fc0 	tst.w	r7, #192	; 0xc0
 800bf34:	d005      	beq.n	800bf42 <_DrawBitmap+0x536>
 800bf36:	f852 1c04 	ldr.w	r1, [r2, #-4]
 800bf3a:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
 800bf3e:	f842 1c04 	str.w	r1, [r2, #-4]
 800bf42:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bf46:	00bf      	lsls	r7, r7, #2
 800bf48:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
 800bf4c:	b2ff      	uxtb	r7, r7
 800bf4e:	f102 0204 	add.w	r2, r2, #4
 800bf52:	d1ed      	bne.n	800bf30 <_DrawBitmap+0x524>
 800bf54:	3e01      	subs	r6, #1
 800bf56:	b2f6      	uxtb	r6, r6
 800bf58:	3601      	adds	r6, #1
 800bf5a:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	f000 80dc 	beq.w	800c11c <_DrawBitmap+0x710>
 800bf64:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 800bf68:	2604      	movs	r6, #4
 800bf6a:	e7db      	b.n	800bf24 <_DrawBitmap+0x518>
 800bf6c:	08017248 	.word	0x08017248
 800bf70:	0801a69c 	.word	0x0801a69c
 800bf74:	20000238 	.word	0x20000238
 800bf78:	4a71      	ldr	r2, [pc, #452]	; (800c140 <_DrawBitmap+0x734>)
 800bf7a:	f89b 3000 	ldrb.w	r3, [fp]
 800bf7e:	6812      	ldr	r2, [r2, #0]
 800bf80:	980d      	ldr	r0, [sp, #52]	; 0x34
 800bf82:	7c12      	ldrb	r2, [r2, #16]
 800bf84:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800bf86:	f002 0203 	and.w	r2, r2, #3
 800bf8a:	4083      	lsls	r3, r0
 800bf8c:	2a01      	cmp	r2, #1
 800bf8e:	b2de      	uxtb	r6, r3
 800bf90:	f000 809c 	beq.w	800c0cc <_DrawBitmap+0x6c0>
 800bf94:	d302      	bcc.n	800bf9c <_DrawBitmap+0x590>
 800bf96:	2a02      	cmp	r2, #2
 800bf98:	d035      	beq.n	800c006 <_DrawBitmap+0x5fa>
 800bf9a:	e0bf      	b.n	800c11c <_DrawBitmap+0x710>
 800bf9c:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800bf9e:	b15f      	cbz	r7, 800bfb8 <_DrawBitmap+0x5ac>
 800bfa0:	0936      	lsrs	r6, r6, #4
 800bfa2:	f10b 0201 	add.w	r2, fp, #1
 800bfa6:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800bfaa:	6023      	str	r3, [r4, #0]
 800bfac:	f89b 6001 	ldrb.w	r6, [fp, #1]
 800bfb0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800bfb2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800bfb6:	e001      	b.n	800bfbc <_DrawBitmap+0x5b0>
 800bfb8:	4653      	mov	r3, sl
 800bfba:	465a      	mov	r2, fp
 800bfbc:	2b01      	cmp	r3, #1
 800bfbe:	dd1a      	ble.n	800bff6 <_DrawBitmap+0x5ea>
 800bfc0:	1058      	asrs	r0, r3, #1
 800bfc2:	f104 0108 	add.w	r1, r4, #8
 800bfc6:	f003 0301 	and.w	r3, r3, #1
 800bfca:	eb02 0800 	add.w	r8, r2, r0
 800bfce:	ea4f 1c16 	mov.w	ip, r6, lsr #4
 800bfd2:	f006 060f 	and.w	r6, r6, #15
 800bfd6:	f855 702c 	ldr.w	r7, [r5, ip, lsl #2]
 800bfda:	f841 7c08 	str.w	r7, [r1, #-8]
 800bfde:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800bfe2:	f841 6c04 	str.w	r6, [r1, #-4]
 800bfe6:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 800bfea:	4542      	cmp	r2, r8
 800bfec:	f101 0108 	add.w	r1, r1, #8
 800bff0:	d1ed      	bne.n	800bfce <_DrawBitmap+0x5c2>
 800bff2:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	f000 8090 	beq.w	800c11c <_DrawBitmap+0x710>
 800bffc:	0936      	lsrs	r6, r6, #4
 800bffe:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800c002:	6023      	str	r3, [r4, #0]
 800c004:	e08a      	b.n	800c11c <_DrawBitmap+0x710>
 800c006:	981e      	ldr	r0, [sp, #120]	; 0x78
 800c008:	b1c0      	cbz	r0, 800c03c <_DrawBitmap+0x630>
 800c00a:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800c00e:	d00a      	beq.n	800c026 <_DrawBitmap+0x61a>
 800c010:	0936      	lsrs	r6, r6, #4
 800c012:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800c016:	6023      	str	r3, [r4, #0]
 800c018:	b12f      	cbz	r7, 800c026 <_DrawBitmap+0x61a>
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	9904      	ldr	r1, [sp, #16]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	9a05      	ldr	r2, [sp, #20]
 800c022:	4638      	mov	r0, r7
 800c024:	4798      	blx	r3
 800c026:	9904      	ldr	r1, [sp, #16]
 800c028:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800c02a:	f89b 6001 	ldrb.w	r6, [fp, #1]
 800c02e:	f101 0801 	add.w	r8, r1, #1
 800c032:	f10a 3cff 	add.w	ip, sl, #4294967295
 800c036:	f10b 0901 	add.w	r9, fp, #1
 800c03a:	e011      	b.n	800c060 <_DrawBitmap+0x654>
 800c03c:	46d4      	mov	ip, sl
 800c03e:	46d9      	mov	r9, fp
 800c040:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c044:	e00c      	b.n	800c060 <_DrawBitmap+0x654>
 800c046:	f016 0ff0 	tst.w	r6, #240	; 0xf0
 800c04a:	d10d      	bne.n	800c068 <_DrawBitmap+0x65c>
 800c04c:	f016 060f 	ands.w	r6, r6, #15
 800c050:	d11b      	bne.n	800c08a <_DrawBitmap+0x67e>
 800c052:	f819 6f01 	ldrb.w	r6, [r9, #1]!
 800c056:	3408      	adds	r4, #8
 800c058:	f108 0802 	add.w	r8, r8, #2
 800c05c:	f1ac 0c02 	sub.w	ip, ip, #2
 800c060:	f1bc 0f01 	cmp.w	ip, #1
 800c064:	dcef      	bgt.n	800c046 <_DrawBitmap+0x63a>
 800c066:	e021      	b.n	800c0ac <_DrawBitmap+0x6a0>
 800c068:	0933      	lsrs	r3, r6, #4
 800c06a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800c06e:	6023      	str	r3, [r4, #0]
 800c070:	2f00      	cmp	r7, #0
 800c072:	d0eb      	beq.n	800c04c <_DrawBitmap+0x640>
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	9a05      	ldr	r2, [sp, #20]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f8cd c008 	str.w	ip, [sp, #8]
 800c07e:	4638      	mov	r0, r7
 800c080:	4641      	mov	r1, r8
 800c082:	4798      	blx	r3
 800c084:	f8dd c008 	ldr.w	ip, [sp, #8]
 800c088:	e7e0      	b.n	800c04c <_DrawBitmap+0x640>
 800c08a:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800c08e:	6063      	str	r3, [r4, #4]
 800c090:	2f00      	cmp	r7, #0
 800c092:	d0de      	beq.n	800c052 <_DrawBitmap+0x646>
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	9a05      	ldr	r2, [sp, #20]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	f8cd c008 	str.w	ip, [sp, #8]
 800c09e:	4638      	mov	r0, r7
 800c0a0:	f108 0101 	add.w	r1, r8, #1
 800c0a4:	4798      	blx	r3
 800c0a6:	f8dd c008 	ldr.w	ip, [sp, #8]
 800c0aa:	e7d2      	b.n	800c052 <_DrawBitmap+0x646>
 800c0ac:	f1bc 0f00 	cmp.w	ip, #0
 800c0b0:	d034      	beq.n	800c11c <_DrawBitmap+0x710>
 800c0b2:	0936      	lsrs	r6, r6, #4
 800c0b4:	d032      	beq.n	800c11c <_DrawBitmap+0x710>
 800c0b6:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800c0ba:	6023      	str	r3, [r4, #0]
 800c0bc:	b377      	cbz	r7, 800c11c <_DrawBitmap+0x710>
 800c0be:	68bb      	ldr	r3, [r7, #8]
 800c0c0:	9a05      	ldr	r2, [sp, #20]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	4638      	mov	r0, r7
 800c0c6:	4641      	mov	r1, r8
 800c0c8:	4798      	blx	r3
 800c0ca:	e027      	b.n	800c11c <_DrawBitmap+0x710>
 800c0cc:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800c0ce:	f1c7 0302 	rsb	r3, r7, #2
 800c0d2:	b2db      	uxtb	r3, r3
 800c0d4:	465f      	mov	r7, fp
 800c0d6:	4652      	mov	r2, sl
 800c0d8:	4293      	cmp	r3, r2
 800c0da:	bfc8      	it	gt
 800c0dc:	b2d3      	uxtbgt	r3, r2
 800c0de:	1ad2      	subs	r2, r2, r3
 800c0e0:	1d20      	adds	r0, r4, #4
 800c0e2:	469c      	mov	ip, r3
 800c0e4:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 800c0e8:	d005      	beq.n	800c0f6 <_DrawBitmap+0x6ea>
 800c0ea:	f850 1c04 	ldr.w	r1, [r0, #-4]
 800c0ee:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
 800c0f2:	f840 1c04 	str.w	r1, [r0, #-4]
 800c0f6:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c0fa:	0136      	lsls	r6, r6, #4
 800c0fc:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
 800c100:	b2f6      	uxtb	r6, r6
 800c102:	f100 0004 	add.w	r0, r0, #4
 800c106:	d1ed      	bne.n	800c0e4 <_DrawBitmap+0x6d8>
 800c108:	3b01      	subs	r3, #1
 800c10a:	b2db      	uxtb	r3, r3
 800c10c:	3301      	adds	r3, #1
 800c10e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800c112:	b11a      	cbz	r2, 800c11c <_DrawBitmap+0x710>
 800c114:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 800c118:	2302      	movs	r3, #2
 800c11a:	e7dd      	b.n	800c0d8 <_DrawBitmap+0x6cc>
 800c11c:	9b05      	ldr	r3, [sp, #20]
 800c11e:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800c120:	3301      	adds	r3, #1
 800c122:	44bb      	add	fp, r7
 800c124:	9305      	str	r3, [sp, #20]
 800c126:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800c128:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c12a:	443b      	add	r3, r7
 800c12c:	9309      	str	r3, [sp, #36]	; 0x24
 800c12e:	e5c4      	b.n	800bcba <_DrawBitmap+0x2ae>
 800c130:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c132:	b113      	cbz	r3, 800c13a <_DrawBitmap+0x72e>
 800c134:	a80f      	add	r0, sp, #60	; 0x3c
 800c136:	f005 f85b 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800c13a:	b011      	add	sp, #68	; 0x44
 800c13c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c140:	20000238 	.word	0x20000238

0800c144 <GUI_MEMDEV__WriteToActiveAt>:
 800c144:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c148:	460e      	mov	r6, r1
 800c14a:	4690      	mov	r8, r2
 800c14c:	4607      	mov	r7, r0
 800c14e:	f005 f841 	bl	80111d4 <GUI_ALLOC_LockH>
 800c152:	6803      	ldr	r3, [r0, #0]
 800c154:	ac02      	add	r4, sp, #8
 800c156:	68db      	ldr	r3, [r3, #12]
 800c158:	f844 0d04 	str.w	r0, [r4, #-4]!
 800c15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c15e:	2000      	movs	r0, #0
 800c160:	2116      	movs	r1, #22
 800c162:	4798      	blx	r3
 800c164:	4605      	mov	r5, r0
 800c166:	4620      	mov	r0, r4
 800c168:	f005 f842 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800c16c:	b11d      	cbz	r5, 800c176 <GUI_MEMDEV__WriteToActiveAt+0x32>
 800c16e:	4638      	mov	r0, r7
 800c170:	4631      	mov	r1, r6
 800c172:	4642      	mov	r2, r8
 800c174:	47a8      	blx	r5
 800c176:	b002      	add	sp, #8
 800c178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c17c <GUI_MEMDEV__CreateFixed>:
 800c17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c180:	4e3e      	ldr	r6, [pc, #248]	; (800c27c <GUI_MEMDEV__CreateFixed+0x100>)
 800c182:	b087      	sub	sp, #28
 800c184:	461d      	mov	r5, r3
 800c186:	6833      	ldr	r3, [r6, #0]
 800c188:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800c18a:	7c5b      	ldrb	r3, [r3, #17]
 800c18c:	4683      	mov	fp, r0
 800c18e:	468a      	mov	sl, r1
 800c190:	4690      	mov	r8, r2
 800c192:	9811      	ldr	r0, [sp, #68]	; 0x44
 800c194:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c196:	2200      	movs	r2, #0
 800c198:	f003 fc18 	bl	800f9cc <GUI_DEVICE_Create>
 800c19c:	4604      	mov	r4, r0
 800c19e:	2800      	cmp	r0, #0
 800c1a0:	d033      	beq.n	800c20a <GUI_MEMDEV__CreateFixed+0x8e>
 800c1a2:	6903      	ldr	r3, [r0, #16]
 800c1a4:	689b      	ldr	r3, [r3, #8]
 800c1a6:	4798      	blx	r3
 800c1a8:	f001 fb77 	bl	800d89a <LCD__GetBPPDevice>
 800c1ac:	fb08 f600 	mul.w	r6, r8, r0
 800c1b0:	9003      	str	r0, [sp, #12]
 800c1b2:	3607      	adds	r6, #7
 800c1b4:	f005 f9d6 	bl	8011564 <GUI_ALLOC_RequestSize>
 800c1b8:	f017 0901 	ands.w	r9, r7, #1
 800c1bc:	ea4f 06d6 	mov.w	r6, r6, lsr #3
 800c1c0:	d104      	bne.n	800c1cc <GUI_MEMDEV__CreateFixed+0x50>
 800c1c2:	2304      	movs	r3, #4
 800c1c4:	fb90 f0f3 	sdiv	r0, r0, r3
 800c1c8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800c1cc:	2d00      	cmp	r5, #0
 800c1ce:	dc09      	bgt.n	800c1e4 <GUI_MEMDEV__CreateFixed+0x68>
 800c1d0:	b11e      	cbz	r6, 800c1da <GUI_MEMDEV__CreateFixed+0x5e>
 800c1d2:	3818      	subs	r0, #24
 800c1d4:	fbb0 f0f6 	udiv	r0, r0, r6
 800c1d8:	e000      	b.n	800c1dc <GUI_MEMDEV__CreateFixed+0x60>
 800c1da:	4630      	mov	r0, r6
 800c1dc:	426d      	negs	r5, r5
 800c1de:	42a8      	cmp	r0, r5
 800c1e0:	bfb8      	it	lt
 800c1e2:	4605      	movlt	r5, r0
 800c1e4:	f1b9 0f00 	cmp.w	r9, #0
 800c1e8:	d109      	bne.n	800c1fe <GUI_MEMDEV__CreateFixed+0x82>
 800c1ea:	f8cd 9000 	str.w	r9, [sp]
 800c1ee:	4658      	mov	r0, fp
 800c1f0:	4651      	mov	r1, sl
 800c1f2:	4642      	mov	r2, r8
 800c1f4:	462b      	mov	r3, r5
 800c1f6:	f006 fe6d 	bl	8012ed4 <GUI_USAGE_BM_Create>
 800c1fa:	4607      	mov	r7, r0
 800c1fc:	e000      	b.n	800c200 <GUI_MEMDEV__CreateFixed+0x84>
 800c1fe:	2700      	movs	r7, #0
 800c200:	2d00      	cmp	r5, #0
 800c202:	dc04      	bgt.n	800c20e <GUI_MEMDEV__CreateFixed+0x92>
 800c204:	4620      	mov	r0, r4
 800c206:	f003 fbdf 	bl	800f9c8 <GUI_DEVICE_Delete>
 800c20a:	2000      	movs	r0, #0
 800c20c:	e032      	b.n	800c274 <GUI_MEMDEV__CreateFixed+0xf8>
 800c20e:	fb06 f005 	mul.w	r0, r6, r5
 800c212:	3018      	adds	r0, #24
 800c214:	f1b9 0f00 	cmp.w	r9, #0
 800c218:	d002      	beq.n	800c220 <GUI_MEMDEV__CreateFixed+0xa4>
 800c21a:	f005 fa2f 	bl	801167c <GUI_ALLOC_AllocNoInit>
 800c21e:	e001      	b.n	800c224 <GUI_MEMDEV__CreateFixed+0xa8>
 800c220:	f005 fa45 	bl	80116ae <GUI_ALLOC_AllocZero>
 800c224:	4681      	mov	r9, r0
 800c226:	b940      	cbnz	r0, 800c23a <GUI_MEMDEV__CreateFixed+0xbe>
 800c228:	4620      	mov	r0, r4
 800c22a:	f003 fbcd 	bl	800f9c8 <GUI_DEVICE_Delete>
 800c22e:	2f00      	cmp	r7, #0
 800c230:	d0eb      	beq.n	800c20a <GUI_MEMDEV__CreateFixed+0x8e>
 800c232:	4638      	mov	r0, r7
 800c234:	f005 f808 	bl	8011248 <GUI_ALLOC_Free>
 800c238:	e01b      	b.n	800c272 <GUI_MEMDEV__CreateFixed+0xf6>
 800c23a:	f004 ffcb 	bl	80111d4 <GUI_ALLOC_LockH>
 800c23e:	4603      	mov	r3, r0
 800c240:	a806      	add	r0, sp, #24
 800c242:	9a03      	ldr	r2, [sp, #12]
 800c244:	f840 3d04 	str.w	r3, [r0, #-4]!
 800c248:	611a      	str	r2, [r3, #16]
 800c24a:	601c      	str	r4, [r3, #0]
 800c24c:	f8a3 b004 	strh.w	fp, [r3, #4]
 800c250:	f8a3 a006 	strh.w	sl, [r3, #6]
 800c254:	f8a3 8008 	strh.w	r8, [r3, #8]
 800c258:	815d      	strh	r5, [r3, #10]
 800c25a:	60de      	str	r6, [r3, #12]
 800c25c:	615f      	str	r7, [r3, #20]
 800c25e:	f004 ffc7 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800c262:	4a06      	ldr	r2, [pc, #24]	; (800c27c <GUI_MEMDEV__CreateFixed+0x100>)
 800c264:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c266:	6123      	str	r3, [r4, #16]
 800c268:	6813      	ldr	r3, [r2, #0]
 800c26a:	f8c4 9008 	str.w	r9, [r4, #8]
 800c26e:	7c5b      	ldrb	r3, [r3, #17]
 800c270:	61a3      	str	r3, [r4, #24]
 800c272:	4648      	mov	r0, r9
 800c274:	b007      	add	sp, #28
 800c276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c27a:	bf00      	nop
 800c27c:	20000238 	.word	0x20000238

0800c280 <GUI_MEMDEV_GetBitsPerPixel>:
 800c280:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c282:	4605      	mov	r5, r0
 800c284:	b170      	cbz	r0, 800c2a4 <GUI_MEMDEV_GetBitsPerPixel+0x24>
 800c286:	f004 ffa5 	bl	80111d4 <GUI_ALLOC_LockH>
 800c28a:	6803      	ldr	r3, [r0, #0]
 800c28c:	ac02      	add	r4, sp, #8
 800c28e:	691b      	ldr	r3, [r3, #16]
 800c290:	f844 0d04 	str.w	r0, [r4, #-4]!
 800c294:	689b      	ldr	r3, [r3, #8]
 800c296:	4798      	blx	r3
 800c298:	f001 faff 	bl	800d89a <LCD__GetBPPDevice>
 800c29c:	4605      	mov	r5, r0
 800c29e:	4620      	mov	r0, r4
 800c2a0:	f004 ffa6 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800c2a4:	4628      	mov	r0, r5
 800c2a6:	b003      	add	sp, #12
 800c2a8:	bd30      	pop	{r4, r5, pc}
	...

0800c2ac <GUI_MEMDEV_Delete>:
 800c2ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c2ae:	4604      	mov	r4, r0
 800c2b0:	b1d0      	cbz	r0, 800c2e8 <GUI_MEMDEV_Delete+0x3c>
 800c2b2:	4b0e      	ldr	r3, [pc, #56]	; (800c2ec <GUI_MEMDEV_Delete+0x40>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c2b8:	4283      	cmp	r3, r0
 800c2ba:	d101      	bne.n	800c2c0 <GUI_MEMDEV_Delete+0x14>
 800c2bc:	f003 f800 	bl	800f2c0 <GUI_SelectLCD>
 800c2c0:	4620      	mov	r0, r4
 800c2c2:	f004 ff87 	bl	80111d4 <GUI_ALLOC_LockH>
 800c2c6:	9001      	str	r0, [sp, #4]
 800c2c8:	6940      	ldr	r0, [r0, #20]
 800c2ca:	b108      	cbz	r0, 800c2d0 <GUI_MEMDEV_Delete+0x24>
 800c2cc:	f006 fe2e 	bl	8012f2c <GUI_USAGE_DecUseCnt>
 800c2d0:	ad02      	add	r5, sp, #8
 800c2d2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800c2d6:	6818      	ldr	r0, [r3, #0]
 800c2d8:	f003 fb76 	bl	800f9c8 <GUI_DEVICE_Delete>
 800c2dc:	4628      	mov	r0, r5
 800c2de:	f004 ff87 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800c2e2:	4620      	mov	r0, r4
 800c2e4:	f004 ffb0 	bl	8011248 <GUI_ALLOC_Free>
 800c2e8:	b003      	add	sp, #12
 800c2ea:	bd30      	pop	{r4, r5, pc}
 800c2ec:	20000238 	.word	0x20000238

0800c2f0 <GUI_MEMDEV_CreateEx>:
 800c2f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c2f4:	469a      	mov	sl, r3
 800c2f6:	4b19      	ldr	r3, [pc, #100]	; (800c35c <GUI_MEMDEV_CreateEx+0x6c>)
 800c2f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	4607      	mov	r7, r0
 800c2fe:	7c58      	ldrb	r0, [r3, #17]
 800c300:	4b17      	ldr	r3, [pc, #92]	; (800c360 <GUI_MEMDEV_CreateEx+0x70>)
 800c302:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 800c306:	4688      	mov	r8, r1
 800c308:	4691      	mov	r9, r2
 800c30a:	68e3      	ldr	r3, [r4, #12]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	2b04      	cmp	r3, #4
 800c310:	d006      	beq.n	800c320 <GUI_MEMDEV_CreateEx+0x30>
 800c312:	6824      	ldr	r4, [r4, #0]
 800c314:	2c00      	cmp	r4, #0
 800c316:	d1f8      	bne.n	800c30a <GUI_MEMDEV_CreateEx+0x1a>
 800c318:	f003 fb46 	bl	800f9a8 <GUI_DEVICE__GetpDriver>
 800c31c:	4604      	mov	r4, r0
 800c31e:	b130      	cbz	r0, 800c32e <GUI_MEMDEV_CreateEx+0x3e>
 800c320:	68e3      	ldr	r3, [r4, #12]
 800c322:	4620      	mov	r0, r4
 800c324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c326:	2101      	movs	r1, #1
 800c328:	4798      	blx	r3
 800c32a:	4606      	mov	r6, r0
 800c32c:	b908      	cbnz	r0, 800c332 <GUI_MEMDEV_CreateEx+0x42>
 800c32e:	2000      	movs	r0, #0
 800c330:	e010      	b.n	800c354 <GUI_MEMDEV_CreateEx+0x64>
 800c332:	6924      	ldr	r4, [r4, #16]
 800c334:	68a3      	ldr	r3, [r4, #8]
 800c336:	4798      	blx	r3
 800c338:	3001      	adds	r0, #1
 800c33a:	bf04      	itt	eq
 800c33c:	f045 0501 	orreq.w	r5, r5, #1
 800c340:	4c08      	ldreq	r4, [pc, #32]	; (800c364 <GUI_MEMDEV_CreateEx+0x74>)
 800c342:	9402      	str	r4, [sp, #8]
 800c344:	e88d 0060 	stmia.w	sp, {r5, r6}
 800c348:	4638      	mov	r0, r7
 800c34a:	4641      	mov	r1, r8
 800c34c:	464a      	mov	r2, r9
 800c34e:	4653      	mov	r3, sl
 800c350:	f7ff ff14 	bl	800c17c <GUI_MEMDEV__CreateFixed>
 800c354:	b004      	add	sp, #16
 800c356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c35a:	bf00      	nop
 800c35c:	20000238 	.word	0x20000238
 800c360:	2001b2c0 	.word	0x2001b2c0
 800c364:	0801a7c8 	.word	0x0801a7c8

0800c368 <GUI_MEMDEV_Create>:
 800c368:	b513      	push	{r0, r1, r4, lr}
 800c36a:	2400      	movs	r4, #0
 800c36c:	9400      	str	r4, [sp, #0]
 800c36e:	f7ff ffbf 	bl	800c2f0 <GUI_MEMDEV_CreateEx>
 800c372:	b002      	add	sp, #8
 800c374:	bd10      	pop	{r4, pc}
	...

0800c378 <GUI_MEMDEV_Select>:
 800c378:	4b11      	ldr	r3, [pc, #68]	; (800c3c0 <GUI_MEMDEV_Select+0x48>)
 800c37a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c37c:	681a      	ldr	r2, [r3, #0]
 800c37e:	4604      	mov	r4, r0
 800c380:	6e16      	ldr	r6, [r2, #96]	; 0x60
 800c382:	461f      	mov	r7, r3
 800c384:	b910      	cbnz	r0, 800c38c <GUI_MEMDEV_Select+0x14>
 800c386:	f002 ff9b 	bl	800f2c0 <GUI_SelectLCD>
 800c38a:	e016      	b.n	800c3ba <GUI_MEMDEV_Select+0x42>
 800c38c:	b10e      	cbz	r6, 800c392 <GUI_MEMDEV_Select+0x1a>
 800c38e:	f002 ff97 	bl	800f2c0 <GUI_SelectLCD>
 800c392:	f7fe fea5 	bl	800b0e0 <WM_Deactivate>
 800c396:	4620      	mov	r0, r4
 800c398:	f004 ff1c 	bl	80111d4 <GUI_ALLOC_LockH>
 800c39c:	ad02      	add	r5, sp, #8
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	f845 0d04 	str.w	r0, [r5, #-4]!
 800c3a4:	661c      	str	r4, [r3, #96]	; 0x60
 800c3a6:	6800      	ldr	r0, [r0, #0]
 800c3a8:	f003 fb4c 	bl	800fa44 <GUI_DEVICE_Link>
 800c3ac:	4628      	mov	r0, r5
 800c3ae:	f004 ff1f 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800c3b2:	f001 f8f1 	bl	800d598 <LCD_UpdateColorIndices>
 800c3b6:	f001 fd31 	bl	800de1c <LCD_SetClipRectMax>
 800c3ba:	4630      	mov	r0, r6
 800c3bc:	b003      	add	sp, #12
 800c3be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3c0:	20000238 	.word	0x20000238

0800c3c4 <GUI_MEMDEV_CopyToLCDAt>:
 800c3c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c3c8:	460c      	mov	r4, r1
 800c3ca:	b085      	sub	sp, #20
 800c3cc:	4615      	mov	r5, r2
 800c3ce:	4606      	mov	r6, r0
 800c3d0:	2800      	cmp	r0, #0
 800c3d2:	d041      	beq.n	800c458 <GUI_MEMDEV_CopyToLCDAt+0x94>
 800c3d4:	2000      	movs	r0, #0
 800c3d6:	f002 ff0f 	bl	800f1f8 <GUI_SetDrawMode>
 800c3da:	4b21      	ldr	r3, [pc, #132]	; (800c460 <GUI_MEMDEV_CopyToLCDAt+0x9c>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	4607      	mov	r7, r0
 800c3e0:	4630      	mov	r0, r6
 800c3e2:	f8d3 8060 	ldr.w	r8, [r3, #96]	; 0x60
 800c3e6:	f004 fef5 	bl	80111d4 <GUI_ALLOC_LockH>
 800c3ea:	6803      	ldr	r3, [r0, #0]
 800c3ec:	9001      	str	r0, [sp, #4]
 800c3ee:	6998      	ldr	r0, [r3, #24]
 800c3f0:	f002 ff4e 	bl	800f290 <GUI_SelectLayer>
 800c3f4:	4b1b      	ldr	r3, [pc, #108]	; (800c464 <GUI_MEMDEV_CopyToLCDAt+0xa0>)
 800c3f6:	429c      	cmp	r4, r3
 800c3f8:	9b01      	ldr	r3, [sp, #4]
 800c3fa:	bf04      	itt	eq
 800c3fc:	f9b3 4004 	ldrsheq.w	r4, [r3, #4]
 800c400:	f9b3 5006 	ldrsheq.w	r5, [r3, #6]
 800c404:	891a      	ldrh	r2, [r3, #8]
 800c406:	895b      	ldrh	r3, [r3, #10]
 800c408:	f8ad 4008 	strh.w	r4, [sp, #8]
 800c40c:	3a01      	subs	r2, #1
 800c40e:	3b01      	subs	r3, #1
 800c410:	4422      	add	r2, r4
 800c412:	442b      	add	r3, r5
 800c414:	4681      	mov	r9, r0
 800c416:	f8ad 200c 	strh.w	r2, [sp, #12]
 800c41a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c41e:	f8ad 500a 	strh.w	r5, [sp, #10]
 800c422:	f7fe fe55 	bl	800b0d0 <WM_Activate>
 800c426:	a801      	add	r0, sp, #4
 800c428:	f004 fee2 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800c42c:	a802      	add	r0, sp, #8
 800c42e:	f7fe fc7b 	bl	800ad28 <WM__InitIVRSearch>
 800c432:	b948      	cbnz	r0, 800c448 <GUI_MEMDEV_CopyToLCDAt+0x84>
 800c434:	4648      	mov	r0, r9
 800c436:	f002 ff2b 	bl	800f290 <GUI_SelectLayer>
 800c43a:	4640      	mov	r0, r8
 800c43c:	f7ff ff9c 	bl	800c378 <GUI_MEMDEV_Select>
 800c440:	4638      	mov	r0, r7
 800c442:	f002 fed9 	bl	800f1f8 <GUI_SetDrawMode>
 800c446:	e007      	b.n	800c458 <GUI_MEMDEV_CopyToLCDAt+0x94>
 800c448:	4630      	mov	r0, r6
 800c44a:	4621      	mov	r1, r4
 800c44c:	462a      	mov	r2, r5
 800c44e:	f006 f843 	bl	80124d8 <GUI_MEMDEV__WriteToActiveOpaque>
 800c452:	f7fe fba7 	bl	800aba4 <WM__GetNextIVR>
 800c456:	e7ec      	b.n	800c432 <GUI_MEMDEV_CopyToLCDAt+0x6e>
 800c458:	b005      	add	sp, #20
 800c45a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c45e:	bf00      	nop
 800c460:	20000238 	.word	0x20000238
 800c464:	fffff001 	.word	0xfffff001

0800c468 <GUI_MEMDEV_CopyToLCD>:
 800c468:	4901      	ldr	r1, [pc, #4]	; (800c470 <GUI_MEMDEV_CopyToLCD+0x8>)
 800c46a:	460a      	mov	r2, r1
 800c46c:	f7ff bfaa 	b.w	800c3c4 <GUI_MEMDEV_CopyToLCDAt>
 800c470:	fffff001 	.word	0xfffff001

0800c474 <_SetPhysRAMAddr>:
 800c474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c476:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c478:	4604      	mov	r4, r0
 800c47a:	460e      	mov	r6, r1
 800c47c:	4615      	mov	r5, r2
 800c47e:	b15b      	cbz	r3, 800c498 <_SetPhysRAMAddr+0x24>
 800c480:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800c484:	4798      	blx	r3
 800c486:	4631      	mov	r1, r6
 800c488:	4607      	mov	r7, r0
 800c48a:	462a      	mov	r2, r5
 800c48c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 800c490:	4620      	mov	r0, r4
 800c492:	4798      	blx	r3
 800c494:	463e      	mov	r6, r7
 800c496:	4605      	mov	r5, r0
 800c498:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800c49c:	4620      	mov	r0, r4
 800c49e:	212a      	movs	r1, #42	; 0x2a
 800c4a0:	4798      	blx	r3
 800c4a2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c4a4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800c4a8:	4431      	add	r1, r6
 800c4aa:	4620      	mov	r0, r4
 800c4ac:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800c4b0:	4798      	blx	r3
 800c4b2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c4b4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800c4b8:	b2b7      	uxth	r7, r6
 800c4ba:	4439      	add	r1, r7
 800c4bc:	4620      	mov	r0, r4
 800c4be:	b2c9      	uxtb	r1, r1
 800c4c0:	4798      	blx	r3
 800c4c2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c4c4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800c4c8:	4431      	add	r1, r6
 800c4ca:	4620      	mov	r0, r4
 800c4cc:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800c4d0:	4798      	blx	r3
 800c4d2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c4d4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800c4d8:	4439      	add	r1, r7
 800c4da:	4620      	mov	r0, r4
 800c4dc:	b2c9      	uxtb	r1, r1
 800c4de:	4798      	blx	r3
 800c4e0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800c4e4:	4620      	mov	r0, r4
 800c4e6:	212b      	movs	r1, #43	; 0x2b
 800c4e8:	4798      	blx	r3
 800c4ea:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c4ec:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800c4f0:	4429      	add	r1, r5
 800c4f2:	4620      	mov	r0, r4
 800c4f4:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800c4f8:	4798      	blx	r3
 800c4fa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c4fc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800c500:	b2ae      	uxth	r6, r5
 800c502:	4431      	add	r1, r6
 800c504:	4620      	mov	r0, r4
 800c506:	b2c9      	uxtb	r1, r1
 800c508:	4798      	blx	r3
 800c50a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c50c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800c510:	4429      	add	r1, r5
 800c512:	4620      	mov	r0, r4
 800c514:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800c518:	4798      	blx	r3
 800c51a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c51c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800c520:	4431      	add	r1, r6
 800c522:	4620      	mov	r0, r4
 800c524:	b2c9      	uxtb	r1, r1
 800c526:	4798      	blx	r3
 800c528:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800c52c:	4620      	mov	r0, r4
 800c52e:	212c      	movs	r1, #44	; 0x2c
 800c530:	4798      	blx	r3
 800c532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c534 <_SetRect>:
 800c534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c538:	4698      	mov	r8, r3
 800c53a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c53c:	9f08      	ldr	r7, [sp, #32]
 800c53e:	4604      	mov	r4, r0
 800c540:	4689      	mov	r9, r1
 800c542:	4615      	mov	r5, r2
 800c544:	2b00      	cmp	r3, #0
 800c546:	d064      	beq.n	800c612 <_SetRect+0xde>
 800c548:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800c54c:	4798      	blx	r3
 800c54e:	463a      	mov	r2, r7
 800c550:	4606      	mov	r6, r0
 800c552:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800c556:	4641      	mov	r1, r8
 800c558:	4620      	mov	r0, r4
 800c55a:	4798      	blx	r3
 800c55c:	462a      	mov	r2, r5
 800c55e:	4682      	mov	sl, r0
 800c560:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 800c564:	4649      	mov	r1, r9
 800c566:	4620      	mov	r0, r4
 800c568:	4798      	blx	r3
 800c56a:	463a      	mov	r2, r7
 800c56c:	4605      	mov	r5, r0
 800c56e:	4641      	mov	r1, r8
 800c570:	4620      	mov	r0, r4
 800c572:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 800c576:	4798      	blx	r3
 800c578:	45b2      	cmp	sl, r6
 800c57a:	4607      	mov	r7, r0
 800c57c:	db02      	blt.n	800c584 <_SetRect+0x50>
 800c57e:	4653      	mov	r3, sl
 800c580:	46b2      	mov	sl, r6
 800c582:	461e      	mov	r6, r3
 800c584:	42af      	cmp	r7, r5
 800c586:	db02      	blt.n	800c58e <_SetRect+0x5a>
 800c588:	463b      	mov	r3, r7
 800c58a:	462f      	mov	r7, r5
 800c58c:	461d      	mov	r5, r3
 800c58e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800c592:	4620      	mov	r0, r4
 800c594:	212a      	movs	r1, #42	; 0x2a
 800c596:	4798      	blx	r3
 800c598:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c59a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800c59e:	4451      	add	r1, sl
 800c5a0:	4620      	mov	r0, r4
 800c5a2:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800c5a6:	4798      	blx	r3
 800c5a8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c5aa:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800c5ae:	4451      	add	r1, sl
 800c5b0:	4620      	mov	r0, r4
 800c5b2:	b2c9      	uxtb	r1, r1
 800c5b4:	4798      	blx	r3
 800c5b6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c5b8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800c5bc:	4431      	add	r1, r6
 800c5be:	4620      	mov	r0, r4
 800c5c0:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800c5c4:	4798      	blx	r3
 800c5c6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c5c8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800c5cc:	4431      	add	r1, r6
 800c5ce:	4620      	mov	r0, r4
 800c5d0:	b2c9      	uxtb	r1, r1
 800c5d2:	4798      	blx	r3
 800c5d4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800c5d8:	4620      	mov	r0, r4
 800c5da:	212b      	movs	r1, #43	; 0x2b
 800c5dc:	4798      	blx	r3
 800c5de:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c5e0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800c5e4:	4439      	add	r1, r7
 800c5e6:	4620      	mov	r0, r4
 800c5e8:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800c5ec:	4798      	blx	r3
 800c5ee:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c5f0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800c5f4:	4439      	add	r1, r7
 800c5f6:	4620      	mov	r0, r4
 800c5f8:	b2c9      	uxtb	r1, r1
 800c5fa:	4798      	blx	r3
 800c5fc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c5fe:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800c602:	4429      	add	r1, r5
 800c604:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800c608:	4620      	mov	r0, r4
 800c60a:	4798      	blx	r3
 800c60c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c60e:	4429      	add	r1, r5
 800c610:	e03f      	b.n	800c692 <_SetRect+0x15e>
 800c612:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800c616:	212a      	movs	r1, #42	; 0x2a
 800c618:	4798      	blx	r3
 800c61a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c61c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800c620:	4449      	add	r1, r9
 800c622:	4620      	mov	r0, r4
 800c624:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800c628:	4798      	blx	r3
 800c62a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c62c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800c630:	4449      	add	r1, r9
 800c632:	4620      	mov	r0, r4
 800c634:	b2c9      	uxtb	r1, r1
 800c636:	4798      	blx	r3
 800c638:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c63a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800c63e:	4441      	add	r1, r8
 800c640:	4620      	mov	r0, r4
 800c642:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800c646:	4798      	blx	r3
 800c648:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c64a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800c64e:	4441      	add	r1, r8
 800c650:	4620      	mov	r0, r4
 800c652:	b2c9      	uxtb	r1, r1
 800c654:	4798      	blx	r3
 800c656:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800c65a:	4620      	mov	r0, r4
 800c65c:	212b      	movs	r1, #43	; 0x2b
 800c65e:	4798      	blx	r3
 800c660:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c662:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800c666:	4429      	add	r1, r5
 800c668:	4620      	mov	r0, r4
 800c66a:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800c66e:	4798      	blx	r3
 800c670:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c672:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800c676:	4429      	add	r1, r5
 800c678:	4620      	mov	r0, r4
 800c67a:	b2c9      	uxtb	r1, r1
 800c67c:	4798      	blx	r3
 800c67e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c680:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800c684:	4439      	add	r1, r7
 800c686:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800c68a:	4620      	mov	r0, r4
 800c68c:	4798      	blx	r3
 800c68e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c690:	4439      	add	r1, r7
 800c692:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800c696:	4620      	mov	r0, r4
 800c698:	b2c9      	uxtb	r1, r1
 800c69a:	4798      	blx	r3
 800c69c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800c6a0:	4620      	mov	r0, r4
 800c6a2:	212c      	movs	r1, #44	; 0x2c
 800c6a4:	4798      	blx	r3
 800c6a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800c6ac <_SetOrientation>:
 800c6ac:	b513      	push	{r0, r1, r4, lr}
 800c6ae:	4a0d      	ldr	r2, [pc, #52]	; (800c6e4 <_SetOrientation+0x38>)
 800c6b0:	4604      	mov	r4, r0
 800c6b2:	6851      	ldr	r1, [r2, #4]
 800c6b4:	6810      	ldr	r0, [r2, #0]
 800c6b6:	466b      	mov	r3, sp
 800c6b8:	c303      	stmia	r3!, {r0, r1}
 800c6ba:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800c6be:	4620      	mov	r0, r4
 800c6c0:	2136      	movs	r1, #54	; 0x36
 800c6c2:	4798      	blx	r3
 800c6c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c6c6:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 800c6c8:	aa02      	add	r2, sp, #8
 800c6ca:	4413      	add	r3, r2
 800c6cc:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
 800c6d0:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800c6d4:	4319      	orrs	r1, r3
 800c6d6:	4620      	mov	r0, r4
 800c6d8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800c6dc:	b289      	uxth	r1, r1
 800c6de:	4798      	blx	r3
 800c6e0:	b002      	add	sp, #8
 800c6e2:	bd10      	pop	{r4, pc}
 800c6e4:	08015e98 	.word	0x08015e98

0800c6e8 <_ReadPixel_16bpp_B8>:
 800c6e8:	b513      	push	{r0, r1, r4, lr}
 800c6ea:	4604      	mov	r4, r0
 800c6ec:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 800c6f0:	202e      	movs	r0, #46	; 0x2e
 800c6f2:	4798      	blx	r3
 800c6f4:	6a21      	ldr	r1, [r4, #32]
 800c6f6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800c6fa:	4668      	mov	r0, sp
 800c6fc:	3103      	adds	r1, #3
 800c6fe:	4798      	blx	r3
 800c700:	6a22      	ldr	r2, [r4, #32]
 800c702:	ab00      	add	r3, sp, #0
 800c704:	4413      	add	r3, r2
 800c706:	f81d 2002 	ldrb.w	r2, [sp, r2]
 800c70a:	7859      	ldrb	r1, [r3, #1]
 800c70c:	7898      	ldrb	r0, [r3, #2]
 800c70e:	08d2      	lsrs	r2, r2, #3
 800c710:	0889      	lsrs	r1, r1, #2
 800c712:	02d2      	lsls	r2, r2, #11
 800c714:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 800c718:	ea42 00d0 	orr.w	r0, r2, r0, lsr #3
 800c71c:	b002      	add	sp, #8
 800c71e:	bd10      	pop	{r4, pc}

0800c720 <_ReadPixel_16bpp_B16_I>:
 800c720:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c722:	4604      	mov	r4, r0
 800c724:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
 800c728:	202e      	movs	r0, #46	; 0x2e
 800c72a:	4798      	blx	r3
 800c72c:	6a21      	ldr	r1, [r4, #32]
 800c72e:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800c732:	4668      	mov	r0, sp
 800c734:	3102      	adds	r1, #2
 800c736:	4798      	blx	r3
 800c738:	6a23      	ldr	r3, [r4, #32]
 800c73a:	a900      	add	r1, sp, #0
 800c73c:	eb01 0243 	add.w	r2, r1, r3, lsl #1
 800c740:	f83d 0013 	ldrh.w	r0, [sp, r3, lsl #1]
 800c744:	8852      	ldrh	r2, [r2, #2]
 800c746:	f402 417c 	and.w	r1, r2, #64512	; 0xfc00
 800c74a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 800c74e:	ea42 1251 	orr.w	r2, r2, r1, lsr #5
 800c752:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 800c756:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 800c75a:	b004      	add	sp, #16
 800c75c:	bd10      	pop	{r4, pc}

0800c75e <_SetReg_B8>:
 800c75e:	b538      	push	{r3, r4, r5, lr}
 800c760:	4604      	mov	r4, r0
 800c762:	460d      	mov	r5, r1
 800c764:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 800c768:	0a08      	lsrs	r0, r1, #8
 800c76a:	4798      	blx	r3
 800c76c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 800c770:	b2e8      	uxtb	r0, r5
 800c772:	4798      	blx	r3
 800c774:	bd38      	pop	{r3, r4, r5, pc}

0800c776 <_SetReg_B16>:
 800c776:	b508      	push	{r3, lr}
 800c778:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
 800c77c:	4608      	mov	r0, r1
 800c77e:	4798      	blx	r3
 800c780:	bd08      	pop	{r3, pc}

0800c782 <_WritePara_B8>:
 800c782:	b508      	push	{r3, lr}
 800c784:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 800c788:	b2c8      	uxtb	r0, r1
 800c78a:	4798      	blx	r3
 800c78c:	bd08      	pop	{r3, pc}

0800c78e <_WritePara_B16>:
 800c78e:	b508      	push	{r3, lr}
 800c790:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
 800c794:	4608      	mov	r0, r1
 800c796:	4798      	blx	r3
 800c798:	bd08      	pop	{r3, pc}
	...

0800c79c <_SetInterface>:
 800c79c:	2908      	cmp	r1, #8
 800c79e:	d002      	beq.n	800c7a6 <_SetInterface+0xa>
 800c7a0:	2910      	cmp	r1, #16
 800c7a2:	d005      	beq.n	800c7b0 <_SetInterface+0x14>
 800c7a4:	4770      	bx	lr
 800c7a6:	4b06      	ldr	r3, [pc, #24]	; (800c7c0 <_SetInterface+0x24>)
 800c7a8:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 800c7ac:	4b05      	ldr	r3, [pc, #20]	; (800c7c4 <_SetInterface+0x28>)
 800c7ae:	e003      	b.n	800c7b8 <_SetInterface+0x1c>
 800c7b0:	4b05      	ldr	r3, [pc, #20]	; (800c7c8 <_SetInterface+0x2c>)
 800c7b2:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 800c7b6:	4b05      	ldr	r3, [pc, #20]	; (800c7cc <_SetInterface+0x30>)
 800c7b8:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
 800c7bc:	4770      	bx	lr
 800c7be:	bf00      	nop
 800c7c0:	0800c75f 	.word	0x0800c75f
 800c7c4:	0800c783 	.word	0x0800c783
 800c7c8:	0800c777 	.word	0x0800c777
 800c7cc:	0800c78f 	.word	0x0800c78f

0800c7d0 <_ReadRect_16bpp_B8>:
 800c7d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7d2:	b085      	sub	sp, #20
 800c7d4:	6884      	ldr	r4, [r0, #8]
 800c7d6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800c7d8:	9700      	str	r7, [sp, #0]
 800c7da:	1abd      	subs	r5, r7, r2
 800c7dc:	1a58      	subs	r0, r3, r1
 800c7de:	3501      	adds	r5, #1
 800c7e0:	fb00 5505 	mla	r5, r0, r5, r5
 800c7e4:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800c7e8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800c7ea:	4620      	mov	r0, r4
 800c7ec:	47b8      	blx	r7
 800c7ee:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 800c7f2:	202e      	movs	r0, #46	; 0x2e
 800c7f4:	4798      	blx	r3
 800c7f6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800c7fa:	6a21      	ldr	r1, [r4, #32]
 800c7fc:	a802      	add	r0, sp, #8
 800c7fe:	4798      	blx	r3
 800c800:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800c804:	a802      	add	r0, sp, #8
 800c806:	2103      	movs	r1, #3
 800c808:	4798      	blx	r3
 800c80a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800c80e:	f89d 2009 	ldrb.w	r2, [sp, #9]
 800c812:	08db      	lsrs	r3, r3, #3
 800c814:	0892      	lsrs	r2, r2, #2
 800c816:	02db      	lsls	r3, r3, #11
 800c818:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800c81c:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800c820:	3d01      	subs	r5, #1
 800c822:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 800c826:	f826 3b02 	strh.w	r3, [r6], #2
 800c82a:	d1e9      	bne.n	800c800 <_ReadRect_16bpp_B8+0x30>
 800c82c:	b005      	add	sp, #20
 800c82e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c830 <_ReadRect_16bpp_B16_I>:
 800c830:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c832:	b087      	sub	sp, #28
 800c834:	6884      	ldr	r4, [r0, #8]
 800c836:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800c838:	9700      	str	r7, [sp, #0]
 800c83a:	1abd      	subs	r5, r7, r2
 800c83c:	1a58      	subs	r0, r3, r1
 800c83e:	3501      	adds	r5, #1
 800c840:	fb00 5505 	mla	r5, r0, r5, r5
 800c844:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800c848:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800c84a:	4620      	mov	r0, r4
 800c84c:	47b8      	blx	r7
 800c84e:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 800c852:	202e      	movs	r0, #46	; 0x2e
 800c854:	4798      	blx	r3
 800c856:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800c85a:	6a21      	ldr	r1, [r4, #32]
 800c85c:	a802      	add	r0, sp, #8
 800c85e:	4798      	blx	r3
 800c860:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800c864:	a802      	add	r0, sp, #8
 800c866:	2102      	movs	r1, #2
 800c868:	4798      	blx	r3
 800c86a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800c86e:	f403 427c 	and.w	r2, r3, #64512	; 0xfc00
 800c872:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 800c876:	ea43 1352 	orr.w	r3, r3, r2, lsr #5
 800c87a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800c87e:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 800c882:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c886:	3d01      	subs	r5, #1
 800c888:	f826 3b02 	strh.w	r3, [r6], #2
 800c88c:	d1e8      	bne.n	800c860 <_ReadRect_16bpp_B16_I+0x30>
 800c88e:	b007      	add	sp, #28
 800c890:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800c894 <GUIDRV_FlexColor_SetFunc66720>:
 800c894:	b510      	push	{r4, lr}
 800c896:	4604      	mov	r4, r0
 800c898:	f000 fda6 	bl	800d3e8 <GUIDRV_FlexColor__InitOnce>
 800c89c:	68a3      	ldr	r3, [r4, #8]
 800c89e:	4a12      	ldr	r2, [pc, #72]	; (800c8e8 <GUIDRV_FlexColor_SetFunc66720+0x54>)
 800c8a0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 800c8a4:	4a11      	ldr	r2, [pc, #68]	; (800c8ec <GUIDRV_FlexColor_SetFunc66720+0x58>)
 800c8a6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800c8aa:	4a11      	ldr	r2, [pc, #68]	; (800c8f0 <GUIDRV_FlexColor_SetFunc66720+0x5c>)
 800c8ac:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800c8b0:	4a10      	ldr	r2, [pc, #64]	; (800c8f4 <GUIDRV_FlexColor_SetFunc66720+0x60>)
 800c8b2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800c8bc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 800c8c0:	4a0d      	ldr	r2, [pc, #52]	; (800c8f8 <GUIDRV_FlexColor_SetFunc66720+0x64>)
 800c8c2:	490e      	ldr	r1, [pc, #56]	; (800c8fc <GUIDRV_FlexColor_SetFunc66720+0x68>)
 800c8c4:	6812      	ldr	r2, [r2, #0]
 800c8c6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 800c8ca:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800c8cc:	6809      	ldr	r1, [r1, #0]
 800c8ce:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4
 800c8d2:	f022 0203 	bic.w	r2, r2, #3
 800c8d6:	490a      	ldr	r1, [pc, #40]	; (800c900 <GUIDRV_FlexColor_SetFunc66720+0x6c>)
 800c8d8:	84da      	strh	r2, [r3, #38]	; 0x26
 800c8da:	4a0a      	ldr	r2, [pc, #40]	; (800c904 <GUIDRV_FlexColor_SetFunc66720+0x70>)
 800c8dc:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
 800c8e0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800c8e4:	bd10      	pop	{r4, pc}
 800c8e6:	bf00      	nop
 800c8e8:	0800c475 	.word	0x0800c475
 800c8ec:	0800c535 	.word	0x0800c535
 800c8f0:	0800c6ad 	.word	0x0800c6ad
 800c8f4:	0800c6e9 	.word	0x0800c6e9
 800c8f8:	2000020c 	.word	0x2000020c
 800c8fc:	20000208 	.word	0x20000208
 800c900:	0800c7d1 	.word	0x0800c7d1
 800c904:	0800c79d 	.word	0x0800c79d

0800c908 <_ReadData>:
 800c908:	b508      	push	{r3, lr}
 800c90a:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
 800c90e:	4798      	blx	r3
 800c910:	bd08      	pop	{r3, pc}

0800c912 <_WriteData>:
 800c912:	b508      	push	{r3, lr}
 800c914:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
 800c918:	b288      	uxth	r0, r1
 800c91a:	4798      	blx	r3
 800c91c:	bd08      	pop	{r3, pc}
	...

0800c920 <_FillRect>:
 800c920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c924:	4f3d      	ldr	r7, [pc, #244]	; (800ca1c <_FillRect+0xfc>)
 800c926:	6884      	ldr	r4, [r0, #8]
 800c928:	4682      	mov	sl, r0
 800c92a:	6838      	ldr	r0, [r7, #0]
 800c92c:	7c00      	ldrb	r0, [r0, #16]
 800c92e:	f010 0f01 	tst.w	r0, #1
 800c932:	b085      	sub	sp, #20
 800c934:	460e      	mov	r6, r1
 800c936:	4615      	mov	r5, r2
 800c938:	4698      	mov	r8, r3
 800c93a:	ebc1 0903 	rsb	r9, r1, r3
 800c93e:	d045      	beq.n	800c9cc <_FillRect+0xac>
 800c940:	ea4f 0b49 	mov.w	fp, r9, lsl #1
 800c944:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c946:	4285      	cmp	r5, r0
 800c948:	dc65      	bgt.n	800ca16 <_FillRect+0xf6>
 800c94a:	f8d4 c0c4 	ldr.w	ip, [r4, #196]	; 0xc4
 800c94e:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800c950:	f1bc 0f00 	cmp.w	ip, #0
 800c954:	d101      	bne.n	800c95a <_FillRect+0x3a>
 800c956:	46b4      	mov	ip, r6
 800c958:	e007      	b.n	800c96a <_FillRect+0x4a>
 800c95a:	e88d 00a0 	stmia.w	sp, {r5, r7}
 800c95e:	4650      	mov	r0, sl
 800c960:	4631      	mov	r1, r6
 800c962:	462a      	mov	r2, r5
 800c964:	4643      	mov	r3, r8
 800c966:	47e0      	blx	ip
 800c968:	e011      	b.n	800c98e <_FillRect+0x6e>
 800c96a:	45c4      	cmp	ip, r8
 800c96c:	dc0e      	bgt.n	800c98c <_FillRect+0x6c>
 800c96e:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 800c972:	f8cd c00c 	str.w	ip, [sp, #12]
 800c976:	4661      	mov	r1, ip
 800c978:	4650      	mov	r0, sl
 800c97a:	462a      	mov	r2, r5
 800c97c:	4798      	blx	r3
 800c97e:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800c982:	f827 0b02 	strh.w	r0, [r7], #2
 800c986:	f10c 0c01 	add.w	ip, ip, #1
 800c98a:	e7ee      	b.n	800c96a <_FillRect+0x4a>
 800c98c:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800c98e:	1ebb      	subs	r3, r7, #2
 800c990:	f109 0c01 	add.w	ip, r9, #1
 800c994:	445f      	add	r7, fp
 800c996:	42bb      	cmp	r3, r7
 800c998:	d005      	beq.n	800c9a6 <_FillRect+0x86>
 800c99a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800c99c:	8859      	ldrh	r1, [r3, #2]
 800c99e:	404a      	eors	r2, r1
 800c9a0:	f823 2f02 	strh.w	r2, [r3, #2]!
 800c9a4:	e7f7      	b.n	800c996 <_FillRect+0x76>
 800c9a6:	9500      	str	r5, [sp, #0]
 800c9a8:	462a      	mov	r2, r5
 800c9aa:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800c9ae:	f8cd c00c 	str.w	ip, [sp, #12]
 800c9b2:	4620      	mov	r0, r4
 800c9b4:	4631      	mov	r1, r6
 800c9b6:	4643      	mov	r3, r8
 800c9b8:	47b8      	blx	r7
 800c9ba:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800c9be:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 800c9c2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800c9c4:	4661      	mov	r1, ip
 800c9c6:	4798      	blx	r3
 800c9c8:	3501      	adds	r5, #1
 800c9ca:	e7bb      	b.n	800c944 <_FillRect+0x24>
 800c9cc:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c9ce:	9000      	str	r0, [sp, #0]
 800c9d0:	1a85      	subs	r5, r0, r2
 800c9d2:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800c9d6:	4620      	mov	r0, r4
 800c9d8:	47b0      	blx	r6
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	6ea7      	ldr	r7, [r4, #104]	; 0x68
 800c9de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9e0:	f109 0901 	add.w	r9, r9, #1
 800c9e4:	f8d3 8000 	ldr.w	r8, [r3]
 800c9e8:	fb05 9509 	mla	r5, r5, r9, r9
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	b195      	cbz	r5, 800ca16 <_FillRect+0xf6>
 800c9f0:	2dfa      	cmp	r5, #250	; 0xfa
 800c9f2:	bf34      	ite	cc
 800c9f4:	462e      	movcc	r6, r5
 800c9f6:	26fa      	movcs	r6, #250	; 0xfa
 800c9f8:	b12b      	cbz	r3, 800ca06 <_FillRect+0xe6>
 800c9fa:	4638      	mov	r0, r7
 800c9fc:	fa1f f188 	uxth.w	r1, r8
 800ca00:	4632      	mov	r2, r6
 800ca02:	f001 facd 	bl	800dfa0 <GUI__memset16>
 800ca06:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 800ca0a:	4638      	mov	r0, r7
 800ca0c:	4631      	mov	r1, r6
 800ca0e:	4798      	blx	r3
 800ca10:	1bad      	subs	r5, r5, r6
 800ca12:	2300      	movs	r3, #0
 800ca14:	e7eb      	b.n	800c9ee <_FillRect+0xce>
 800ca16:	b005      	add	sp, #20
 800ca18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca1c:	20000238 	.word	0x20000238

0800ca20 <_DrawBitmap>:
 800ca20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca24:	b08d      	sub	sp, #52	; 0x34
 800ca26:	6885      	ldr	r5, [r0, #8]
 800ca28:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800ca2a:	9305      	str	r3, [sp, #20]
 800ca2c:	1e7b      	subs	r3, r7, #1
 800ca2e:	2b01      	cmp	r3, #1
 800ca30:	9009      	str	r0, [sp, #36]	; 0x24
 800ca32:	9108      	str	r1, [sp, #32]
 800ca34:	920a      	str	r2, [sp, #40]	; 0x28
 800ca36:	950b      	str	r5, [sp, #44]	; 0x2c
 800ca38:	d903      	bls.n	800ca42 <_DrawBitmap+0x22>
 800ca3a:	2f04      	cmp	r7, #4
 800ca3c:	d001      	beq.n	800ca42 <_DrawBitmap+0x22>
 800ca3e:	2f08      	cmp	r7, #8
 800ca40:	d106      	bne.n	800ca50 <_DrawBitmap+0x30>
 800ca42:	4b8f      	ldr	r3, [pc, #572]	; (800cc80 <_DrawBitmap+0x260>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	7c1b      	ldrb	r3, [r3, #16]
 800ca48:	f003 0303 	and.w	r3, r3, #3
 800ca4c:	2b02      	cmp	r3, #2
 800ca4e:	d010      	beq.n	800ca72 <_DrawBitmap+0x52>
 800ca50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca52:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800ca54:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800ca56:	9908      	ldr	r1, [sp, #32]
 800ca58:	9b05      	ldr	r3, [sp, #20]
 800ca5a:	443a      	add	r2, r7
 800ca5c:	4429      	add	r1, r5
 800ca5e:	3a01      	subs	r2, #1
 800ca60:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800ca62:	9200      	str	r2, [sp, #0]
 800ca64:	440b      	add	r3, r1
 800ca66:	f8d5 40a8 	ldr.w	r4, [r5, #168]	; 0xa8
 800ca6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca6c:	4628      	mov	r0, r5
 800ca6e:	3b01      	subs	r3, #1
 800ca70:	47a0      	blx	r4
 800ca72:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800ca76:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800ca78:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800ca7a:	ebc7 030b 	rsb	r3, r7, fp
 800ca7e:	42ab      	cmp	r3, r5
 800ca80:	f280 8251 	bge.w	800cf26 <_DrawBitmap+0x506>
 800ca84:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800ca86:	1e7b      	subs	r3, r7, #1
 800ca88:	2b0f      	cmp	r3, #15
 800ca8a:	f200 8245 	bhi.w	800cf18 <_DrawBitmap+0x4f8>
 800ca8e:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ca92:	0010      	.short	0x0010
 800ca94:	024300b7 	.word	0x024300b7
 800ca98:	02430140 	.word	0x02430140
 800ca9c:	02430243 	.word	0x02430243
 800caa0:	024301d7 	.word	0x024301d7
 800caa4:	02430243 	.word	0x02430243
 800caa8:	02430243 	.word	0x02430243
 800caac:	02430243 	.word	0x02430243
 800cab0:	023d      	.short	0x023d
 800cab2:	4b73      	ldr	r3, [pc, #460]	; (800cc80 <_DrawBitmap+0x260>)
 800cab4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	68ac      	ldr	r4, [r5, #8]
 800caba:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800cabc:	7c1b      	ldrb	r3, [r3, #16]
 800cabe:	682f      	ldr	r7, [r5, #0]
 800cac0:	686d      	ldr	r5, [r5, #4]
 800cac2:	9507      	str	r5, [sp, #28]
 800cac4:	f8dd a020 	ldr.w	sl, [sp, #32]
 800cac8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800caca:	f003 0303 	and.w	r3, r3, #3
 800cace:	2b02      	cmp	r3, #2
 800cad0:	44aa      	add	sl, r5
 800cad2:	d01b      	beq.n	800cb0c <_DrawBitmap+0xec>
 800cad4:	2b03      	cmp	r3, #3
 800cad6:	d06e      	beq.n	800cbb6 <_DrawBitmap+0x196>
 800cad8:	2b01      	cmp	r3, #1
 800cada:	d06c      	beq.n	800cbb6 <_DrawBitmap+0x196>
 800cadc:	9e05      	ldr	r6, [sp, #20]
 800cade:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
 800cae2:	f898 1000 	ldrb.w	r1, [r8]
 800cae6:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800caea:	2280      	movs	r2, #128	; 0x80
 800caec:	412a      	asrs	r2, r5
 800caee:	4211      	tst	r1, r2
 800caf0:	bf16      	itet	ne
 800caf2:	9907      	ldrne	r1, [sp, #28]
 800caf4:	b2b8      	uxtheq	r0, r7
 800caf6:	b288      	uxthne	r0, r1
 800caf8:	3501      	adds	r5, #1
 800cafa:	4798      	blx	r3
 800cafc:	2d08      	cmp	r5, #8
 800cafe:	bf04      	itt	eq
 800cb00:	f108 0801 	addeq.w	r8, r8, #1
 800cb04:	2500      	moveq	r5, #0
 800cb06:	3e01      	subs	r6, #1
 800cb08:	d1eb      	bne.n	800cae2 <_DrawBitmap+0xc2>
 800cb0a:	e205      	b.n	800cf18 <_DrawBitmap+0x4f8>
 800cb0c:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800cb0e:	9506      	str	r5, [sp, #24]
 800cb10:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
 800cb14:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800cb18:	f8cd a00c 	str.w	sl, [sp, #12]
 800cb1c:	2500      	movs	r5, #0
 800cb1e:	4656      	mov	r6, sl
 800cb20:	462b      	mov	r3, r5
 800cb22:	9f06      	ldr	r7, [sp, #24]
 800cb24:	f04f 0c80 	mov.w	ip, #128	; 0x80
 800cb28:	783a      	ldrb	r2, [r7, #0]
 800cb2a:	fa4c fc08 	asr.w	ip, ip, r8
 800cb2e:	ea12 0c0c 	ands.w	ip, r2, ip
 800cb32:	d00b      	beq.n	800cb4c <_DrawBitmap+0x12c>
 800cb34:	b913      	cbnz	r3, 800cb3c <_DrawBitmap+0x11c>
 800cb36:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
 800cb3a:	9603      	str	r6, [sp, #12]
 800cb3c:	9f07      	ldr	r7, [sp, #28]
 800cb3e:	f8a9 7000 	strh.w	r7, [r9]
 800cb42:	3501      	adds	r5, #1
 800cb44:	f109 0902 	add.w	r9, r9, #2
 800cb48:	2301      	movs	r3, #1
 800cb4a:	e017      	b.n	800cb7c <_DrawBitmap+0x15c>
 800cb4c:	2b01      	cmp	r3, #1
 800cb4e:	d114      	bne.n	800cb7a <_DrawBitmap+0x15a>
 800cb50:	f8cd b000 	str.w	fp, [sp]
 800cb54:	f8cd c010 	str.w	ip, [sp, #16]
 800cb58:	4620      	mov	r0, r4
 800cb5a:	9903      	ldr	r1, [sp, #12]
 800cb5c:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800cb60:	465a      	mov	r2, fp
 800cb62:	1e73      	subs	r3, r6, #1
 800cb64:	47b8      	blx	r7
 800cb66:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 800cb6a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800cb6c:	4629      	mov	r1, r5
 800cb6e:	4798      	blx	r3
 800cb70:	f8dd c010 	ldr.w	ip, [sp, #16]
 800cb74:	4665      	mov	r5, ip
 800cb76:	4663      	mov	r3, ip
 800cb78:	e000      	b.n	800cb7c <_DrawBitmap+0x15c>
 800cb7a:	4663      	mov	r3, ip
 800cb7c:	f108 0801 	add.w	r8, r8, #1
 800cb80:	f1b8 0f08 	cmp.w	r8, #8
 800cb84:	f106 0601 	add.w	r6, r6, #1
 800cb88:	d104      	bne.n	800cb94 <_DrawBitmap+0x174>
 800cb8a:	9f06      	ldr	r7, [sp, #24]
 800cb8c:	3701      	adds	r7, #1
 800cb8e:	9706      	str	r7, [sp, #24]
 800cb90:	f04f 0800 	mov.w	r8, #0
 800cb94:	9a05      	ldr	r2, [sp, #20]
 800cb96:	4452      	add	r2, sl
 800cb98:	42b2      	cmp	r2, r6
 800cb9a:	d1c2      	bne.n	800cb22 <_DrawBitmap+0x102>
 800cb9c:	9f05      	ldr	r7, [sp, #20]
 800cb9e:	1e7b      	subs	r3, r7, #1
 800cba0:	4453      	add	r3, sl
 800cba2:	2d00      	cmp	r5, #0
 800cba4:	f000 81b8 	beq.w	800cf18 <_DrawBitmap+0x4f8>
 800cba8:	f8cd b000 	str.w	fp, [sp]
 800cbac:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800cbb0:	9903      	ldr	r1, [sp, #12]
 800cbb2:	4620      	mov	r0, r4
 800cbb4:	e13d      	b.n	800ce32 <_DrawBitmap+0x412>
 800cbb6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800cbba:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800cbbc:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800cbbe:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800cbc2:	782a      	ldrb	r2, [r5, #0]
 800cbc4:	2380      	movs	r3, #128	; 0x80
 800cbc6:	4133      	asrs	r3, r6
 800cbc8:	44d1      	add	r9, sl
 800cbca:	421a      	tst	r2, r3
 800cbcc:	ebc8 0909 	rsb	r9, r8, r9
 800cbd0:	d00d      	beq.n	800cbee <_DrawBitmap+0x1ce>
 800cbd2:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 800cbd6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cbd8:	4649      	mov	r1, r9
 800cbda:	465a      	mov	r2, fp
 800cbdc:	4798      	blx	r3
 800cbde:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cbe0:	f8d4 70f0 	ldr.w	r7, [r4, #240]	; 0xf0
 800cbe4:	4043      	eors	r3, r0
 800cbe6:	4649      	mov	r1, r9
 800cbe8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cbea:	465a      	mov	r2, fp
 800cbec:	47b8      	blx	r7
 800cbee:	3601      	adds	r6, #1
 800cbf0:	2e08      	cmp	r6, #8
 800cbf2:	bf04      	itt	eq
 800cbf4:	3501      	addeq	r5, #1
 800cbf6:	2600      	moveq	r6, #0
 800cbf8:	f1b8 0801 	subs.w	r8, r8, #1
 800cbfc:	d1df      	bne.n	800cbbe <_DrawBitmap+0x19e>
 800cbfe:	e18b      	b.n	800cf18 <_DrawBitmap+0x4f8>
 800cc00:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800cc02:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800cc04:	68ac      	ldr	r4, [r5, #8]
 800cc06:	2f00      	cmp	r7, #0
 800cc08:	f000 8186 	beq.w	800cf18 <_DrawBitmap+0x4f8>
 800cc0c:	4b1c      	ldr	r3, [pc, #112]	; (800cc80 <_DrawBitmap+0x260>)
 800cc0e:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	f895 a000 	ldrb.w	sl, [r5]
 800cc16:	7c1b      	ldrb	r3, [r3, #16]
 800cc18:	f013 0303 	ands.w	r3, r3, #3
 800cc1c:	d011      	beq.n	800cc42 <_DrawBitmap+0x222>
 800cc1e:	2b02      	cmp	r3, #2
 800cc20:	f040 817a 	bne.w	800cf18 <_DrawBitmap+0x4f8>
 800cc24:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800cc26:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cc2a:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800cc2c:	9703      	str	r7, [sp, #12]
 800cc2e:	44a9      	add	r9, r5
 800cc30:	46a8      	mov	r8, r5
 800cc32:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800cc34:	9507      	str	r5, [sp, #28]
 800cc36:	2500      	movs	r5, #0
 800cc38:	f8cd 9018 	str.w	r9, [sp, #24]
 800cc3c:	464e      	mov	r6, r9
 800cc3e:	462b      	mov	r3, r5
 800cc40:	e040      	b.n	800ccc4 <_DrawBitmap+0x2a4>
 800cc42:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800cc44:	9e05      	ldr	r6, [sp, #20]
 800cc46:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800cc48:	f1c5 0303 	rsb	r3, r5, #3
 800cc4c:	005b      	lsls	r3, r3, #1
 800cc4e:	f1c3 0206 	rsb	r2, r3, #6
 800cc52:	21c0      	movs	r1, #192	; 0xc0
 800cc54:	fa41 f202 	asr.w	r2, r1, r2
 800cc58:	ea02 020a 	and.w	r2, r2, sl
 800cc5c:	40da      	lsrs	r2, r3
 800cc5e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800cc60:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800cc64:	f831 0022 	ldrh.w	r0, [r1, r2, lsl #2]
 800cc68:	3501      	adds	r5, #1
 800cc6a:	4798      	blx	r3
 800cc6c:	2d04      	cmp	r5, #4
 800cc6e:	d103      	bne.n	800cc78 <_DrawBitmap+0x258>
 800cc70:	f897 a001 	ldrb.w	sl, [r7, #1]
 800cc74:	2500      	movs	r5, #0
 800cc76:	3701      	adds	r7, #1
 800cc78:	3e01      	subs	r6, #1
 800cc7a:	d1e5      	bne.n	800cc48 <_DrawBitmap+0x228>
 800cc7c:	e14c      	b.n	800cf18 <_DrawBitmap+0x4f8>
 800cc7e:	bf00      	nop
 800cc80:	20000238 	.word	0x20000238
 800cc84:	b913      	cbnz	r3, 800cc8c <_DrawBitmap+0x26c>
 800cc86:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800cc88:	9703      	str	r7, [sp, #12]
 800cc8a:	9606      	str	r6, [sp, #24]
 800cc8c:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800cc8e:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
 800cc92:	9f03      	ldr	r7, [sp, #12]
 800cc94:	803b      	strh	r3, [r7, #0]
 800cc96:	3702      	adds	r7, #2
 800cc98:	3501      	adds	r5, #1
 800cc9a:	9703      	str	r7, [sp, #12]
 800cc9c:	2301      	movs	r3, #1
 800cc9e:	f108 0801 	add.w	r8, r8, #1
 800cca2:	f1b8 0f04 	cmp.w	r8, #4
 800cca6:	f106 0601 	add.w	r6, r6, #1
 800ccaa:	d106      	bne.n	800ccba <_DrawBitmap+0x29a>
 800ccac:	9f07      	ldr	r7, [sp, #28]
 800ccae:	f897 a001 	ldrb.w	sl, [r7, #1]
 800ccb2:	3701      	adds	r7, #1
 800ccb4:	9707      	str	r7, [sp, #28]
 800ccb6:	f04f 0800 	mov.w	r8, #0
 800ccba:	9a05      	ldr	r2, [sp, #20]
 800ccbc:	444a      	add	r2, r9
 800ccbe:	42b2      	cmp	r2, r6
 800ccc0:	f000 80ac 	beq.w	800ce1c <_DrawBitmap+0x3fc>
 800ccc4:	f1c8 0203 	rsb	r2, r8, #3
 800ccc8:	0052      	lsls	r2, r2, #1
 800ccca:	f1c2 0106 	rsb	r1, r2, #6
 800ccce:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
 800ccd2:	fa4c fc01 	asr.w	ip, ip, r1
 800ccd6:	ea0c 0c0a 	and.w	ip, ip, sl
 800ccda:	fa3c fc02 	lsrs.w	ip, ip, r2
 800ccde:	d1d1      	bne.n	800cc84 <_DrawBitmap+0x264>
 800cce0:	2b01      	cmp	r3, #1
 800cce2:	d114      	bne.n	800cd0e <_DrawBitmap+0x2ee>
 800cce4:	f8cd b000 	str.w	fp, [sp]
 800cce8:	f8cd c010 	str.w	ip, [sp, #16]
 800ccec:	4620      	mov	r0, r4
 800ccee:	9906      	ldr	r1, [sp, #24]
 800ccf0:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800ccf4:	465a      	mov	r2, fp
 800ccf6:	1e73      	subs	r3, r6, #1
 800ccf8:	47b8      	blx	r7
 800ccfa:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 800ccfe:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800cd00:	4629      	mov	r1, r5
 800cd02:	4798      	blx	r3
 800cd04:	f8dd c010 	ldr.w	ip, [sp, #16]
 800cd08:	4665      	mov	r5, ip
 800cd0a:	4663      	mov	r3, ip
 800cd0c:	e7c7      	b.n	800cc9e <_DrawBitmap+0x27e>
 800cd0e:	4663      	mov	r3, ip
 800cd10:	e7c5      	b.n	800cc9e <_DrawBitmap+0x27e>
 800cd12:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800cd14:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800cd16:	68ac      	ldr	r4, [r5, #8]
 800cd18:	2f00      	cmp	r7, #0
 800cd1a:	f000 80fd 	beq.w	800cf18 <_DrawBitmap+0x4f8>
 800cd1e:	4b83      	ldr	r3, [pc, #524]	; (800cf2c <_DrawBitmap+0x50c>)
 800cd20:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	f895 a000 	ldrb.w	sl, [r5]
 800cd28:	7c1b      	ldrb	r3, [r3, #16]
 800cd2a:	f013 0303 	ands.w	r3, r3, #3
 800cd2e:	d011      	beq.n	800cd54 <_DrawBitmap+0x334>
 800cd30:	2b02      	cmp	r3, #2
 800cd32:	f040 80f1 	bne.w	800cf18 <_DrawBitmap+0x4f8>
 800cd36:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800cd38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cd3c:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800cd3e:	9703      	str	r7, [sp, #12]
 800cd40:	44a9      	add	r9, r5
 800cd42:	46a8      	mov	r8, r5
 800cd44:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800cd46:	9507      	str	r5, [sp, #28]
 800cd48:	2500      	movs	r5, #0
 800cd4a:	f8cd 9018 	str.w	r9, [sp, #24]
 800cd4e:	464e      	mov	r6, r9
 800cd50:	462b      	mov	r3, r5
 800cd52:	e03c      	b.n	800cdce <_DrawBitmap+0x3ae>
 800cd54:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800cd56:	9e05      	ldr	r6, [sp, #20]
 800cd58:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800cd5a:	f1c5 0301 	rsb	r3, r5, #1
 800cd5e:	009b      	lsls	r3, r3, #2
 800cd60:	f1c3 0204 	rsb	r2, r3, #4
 800cd64:	21f0      	movs	r1, #240	; 0xf0
 800cd66:	fa41 f202 	asr.w	r2, r1, r2
 800cd6a:	ea02 020a 	and.w	r2, r2, sl
 800cd6e:	40da      	lsrs	r2, r3
 800cd70:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800cd72:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800cd76:	f831 0022 	ldrh.w	r0, [r1, r2, lsl #2]
 800cd7a:	3501      	adds	r5, #1
 800cd7c:	4798      	blx	r3
 800cd7e:	2d02      	cmp	r5, #2
 800cd80:	d103      	bne.n	800cd8a <_DrawBitmap+0x36a>
 800cd82:	f897 a001 	ldrb.w	sl, [r7, #1]
 800cd86:	2500      	movs	r5, #0
 800cd88:	3701      	adds	r7, #1
 800cd8a:	3e01      	subs	r6, #1
 800cd8c:	d1e5      	bne.n	800cd5a <_DrawBitmap+0x33a>
 800cd8e:	e0c3      	b.n	800cf18 <_DrawBitmap+0x4f8>
 800cd90:	b913      	cbnz	r3, 800cd98 <_DrawBitmap+0x378>
 800cd92:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800cd94:	9703      	str	r7, [sp, #12]
 800cd96:	9606      	str	r6, [sp, #24]
 800cd98:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800cd9a:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
 800cd9e:	9f03      	ldr	r7, [sp, #12]
 800cda0:	803b      	strh	r3, [r7, #0]
 800cda2:	3702      	adds	r7, #2
 800cda4:	3501      	adds	r5, #1
 800cda6:	9703      	str	r7, [sp, #12]
 800cda8:	2301      	movs	r3, #1
 800cdaa:	f108 0801 	add.w	r8, r8, #1
 800cdae:	f1b8 0f02 	cmp.w	r8, #2
 800cdb2:	f106 0601 	add.w	r6, r6, #1
 800cdb6:	d106      	bne.n	800cdc6 <_DrawBitmap+0x3a6>
 800cdb8:	9f07      	ldr	r7, [sp, #28]
 800cdba:	f897 a001 	ldrb.w	sl, [r7, #1]
 800cdbe:	3701      	adds	r7, #1
 800cdc0:	9707      	str	r7, [sp, #28]
 800cdc2:	f04f 0800 	mov.w	r8, #0
 800cdc6:	9a05      	ldr	r2, [sp, #20]
 800cdc8:	444a      	add	r2, r9
 800cdca:	42b2      	cmp	r2, r6
 800cdcc:	d026      	beq.n	800ce1c <_DrawBitmap+0x3fc>
 800cdce:	f1c8 0201 	rsb	r2, r8, #1
 800cdd2:	0092      	lsls	r2, r2, #2
 800cdd4:	f1c2 0104 	rsb	r1, r2, #4
 800cdd8:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 800cddc:	fa4c fc01 	asr.w	ip, ip, r1
 800cde0:	ea0c 0c0a 	and.w	ip, ip, sl
 800cde4:	fa3c fc02 	lsrs.w	ip, ip, r2
 800cde8:	d1d2      	bne.n	800cd90 <_DrawBitmap+0x370>
 800cdea:	2b01      	cmp	r3, #1
 800cdec:	d114      	bne.n	800ce18 <_DrawBitmap+0x3f8>
 800cdee:	f8cd b000 	str.w	fp, [sp]
 800cdf2:	f8cd c010 	str.w	ip, [sp, #16]
 800cdf6:	4620      	mov	r0, r4
 800cdf8:	9906      	ldr	r1, [sp, #24]
 800cdfa:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800cdfe:	465a      	mov	r2, fp
 800ce00:	1e73      	subs	r3, r6, #1
 800ce02:	47b8      	blx	r7
 800ce04:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 800ce08:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800ce0a:	4629      	mov	r1, r5
 800ce0c:	4798      	blx	r3
 800ce0e:	f8dd c010 	ldr.w	ip, [sp, #16]
 800ce12:	4665      	mov	r5, ip
 800ce14:	4663      	mov	r3, ip
 800ce16:	e7c8      	b.n	800cdaa <_DrawBitmap+0x38a>
 800ce18:	4663      	mov	r3, ip
 800ce1a:	e7c6      	b.n	800cdaa <_DrawBitmap+0x38a>
 800ce1c:	9f05      	ldr	r7, [sp, #20]
 800ce1e:	1e7b      	subs	r3, r7, #1
 800ce20:	444b      	add	r3, r9
 800ce22:	2d00      	cmp	r5, #0
 800ce24:	d078      	beq.n	800cf18 <_DrawBitmap+0x4f8>
 800ce26:	f8cd b000 	str.w	fp, [sp]
 800ce2a:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800ce2e:	9906      	ldr	r1, [sp, #24]
 800ce30:	4620      	mov	r0, r4
 800ce32:	465a      	mov	r2, fp
 800ce34:	47b0      	blx	r6
 800ce36:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 800ce3a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800ce3c:	4629      	mov	r1, r5
 800ce3e:	e06a      	b.n	800cf16 <_DrawBitmap+0x4f6>
 800ce40:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ce42:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800ce44:	68ac      	ldr	r4, [r5, #8]
 800ce46:	2f00      	cmp	r7, #0
 800ce48:	d066      	beq.n	800cf18 <_DrawBitmap+0x4f8>
 800ce4a:	4b38      	ldr	r3, [pc, #224]	; (800cf2c <_DrawBitmap+0x50c>)
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	7c1b      	ldrb	r3, [r3, #16]
 800ce50:	f013 0303 	ands.w	r3, r3, #3
 800ce54:	d009      	beq.n	800ce6a <_DrawBitmap+0x44a>
 800ce56:	2b02      	cmp	r3, #2
 800ce58:	d15e      	bne.n	800cf18 <_DrawBitmap+0x4f8>
 800ce5a:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ce5e:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
 800ce62:	2600      	movs	r6, #0
 800ce64:	464f      	mov	r7, r9
 800ce66:	4633      	mov	r3, r6
 800ce68:	e022      	b.n	800ceb0 <_DrawBitmap+0x490>
 800ce6a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800ce6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ce6e:	9f05      	ldr	r7, [sp, #20]
 800ce70:	443b      	add	r3, r7
 800ce72:	1b5b      	subs	r3, r3, r5
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	dd4f      	ble.n	800cf18 <_DrawBitmap+0x4f8>
 800ce78:	f815 2b01 	ldrb.w	r2, [r5], #1
 800ce7c:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800ce7e:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800ce82:	f837 0022 	ldrh.w	r0, [r7, r2, lsl #2]
 800ce86:	4798      	blx	r3
 800ce88:	e7f0      	b.n	800ce6c <_DrawBitmap+0x44c>
 800ce8a:	b913      	cbnz	r3, 800ce92 <_DrawBitmap+0x472>
 800ce8c:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
 800ce90:	46b9      	mov	r9, r7
 800ce92:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800ce94:	f855 302a 	ldr.w	r3, [r5, sl, lsl #2]
 800ce98:	f8a8 3000 	strh.w	r3, [r8]
 800ce9c:	3601      	adds	r6, #1
 800ce9e:	f108 0802 	add.w	r8, r8, #2
 800cea2:	2301      	movs	r3, #1
 800cea4:	9a08      	ldr	r2, [sp, #32]
 800cea6:	9d05      	ldr	r5, [sp, #20]
 800cea8:	3701      	adds	r7, #1
 800ceaa:	442a      	add	r2, r5
 800ceac:	42ba      	cmp	r2, r7
 800ceae:	d01c      	beq.n	800ceea <_DrawBitmap+0x4ca>
 800ceb0:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800ceb2:	9808      	ldr	r0, [sp, #32]
 800ceb4:	1a2a      	subs	r2, r5, r0
 800ceb6:	f812 a007 	ldrb.w	sl, [r2, r7]
 800ceba:	f1ba 0f00 	cmp.w	sl, #0
 800cebe:	d1e4      	bne.n	800ce8a <_DrawBitmap+0x46a>
 800cec0:	2b01      	cmp	r3, #1
 800cec2:	d110      	bne.n	800cee6 <_DrawBitmap+0x4c6>
 800cec4:	f8cd b000 	str.w	fp, [sp]
 800cec8:	4620      	mov	r0, r4
 800ceca:	4649      	mov	r1, r9
 800cecc:	465a      	mov	r2, fp
 800cece:	1e7b      	subs	r3, r7, #1
 800ced0:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 800ced4:	47a8      	blx	r5
 800ced6:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 800ceda:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800cedc:	4631      	mov	r1, r6
 800cede:	4798      	blx	r3
 800cee0:	4656      	mov	r6, sl
 800cee2:	4653      	mov	r3, sl
 800cee4:	e7de      	b.n	800cea4 <_DrawBitmap+0x484>
 800cee6:	4653      	mov	r3, sl
 800cee8:	e7dc      	b.n	800cea4 <_DrawBitmap+0x484>
 800ceea:	9f08      	ldr	r7, [sp, #32]
 800ceec:	1e6b      	subs	r3, r5, #1
 800ceee:	443b      	add	r3, r7
 800cef0:	b196      	cbz	r6, 800cf18 <_DrawBitmap+0x4f8>
 800cef2:	f8cd b000 	str.w	fp, [sp]
 800cef6:	4620      	mov	r0, r4
 800cef8:	4649      	mov	r1, r9
 800cefa:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 800cefe:	465a      	mov	r2, fp
 800cf00:	47a8      	blx	r5
 800cf02:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 800cf06:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800cf08:	4631      	mov	r1, r6
 800cf0a:	e004      	b.n	800cf16 <_DrawBitmap+0x4f6>
 800cf0c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800cf0e:	9819      	ldr	r0, [sp, #100]	; 0x64
 800cf10:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
 800cf14:	9905      	ldr	r1, [sp, #20]
 800cf16:	4798      	blx	r3
 800cf18:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800cf1a:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800cf1c:	442f      	add	r7, r5
 800cf1e:	9719      	str	r7, [sp, #100]	; 0x64
 800cf20:	f10b 0b01 	add.w	fp, fp, #1
 800cf24:	e5a7      	b.n	800ca76 <_DrawBitmap+0x56>
 800cf26:	b00d      	add	sp, #52	; 0x34
 800cf28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf2c:	20000238 	.word	0x20000238

0800cf30 <GUIDRV_FlexColor_SetMode16bppC0B16>:
 800cf30:	b510      	push	{r4, lr}
 800cf32:	4604      	mov	r4, r0
 800cf34:	f000 fa58 	bl	800d3e8 <GUIDRV_FlexColor__InitOnce>
 800cf38:	68a4      	ldr	r4, [r4, #8]
 800cf3a:	4b10      	ldr	r3, [pc, #64]	; (800cf7c <GUIDRV_FlexColor_SetMode16bppC0B16+0x4c>)
 800cf3c:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 800cf40:	4b0f      	ldr	r3, [pc, #60]	; (800cf80 <GUIDRV_FlexColor_SetMode16bppC0B16+0x50>)
 800cf42:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 800cf46:	4b0f      	ldr	r3, [pc, #60]	; (800cf84 <GUIDRV_FlexColor_SetMode16bppC0B16+0x54>)
 800cf48:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 800cf4c:	4b0e      	ldr	r3, [pc, #56]	; (800cf88 <GUIDRV_FlexColor_SetMode16bppC0B16+0x58>)
 800cf4e:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
 800cf52:	4b0e      	ldr	r3, [pc, #56]	; (800cf8c <GUIDRV_FlexColor_SetMode16bppC0B16+0x5c>)
 800cf54:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 800cf58:	4b0d      	ldr	r3, [pc, #52]	; (800cf90 <GUIDRV_FlexColor_SetMode16bppC0B16+0x60>)
 800cf5a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 800cf5e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 800cf62:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
 800cf66:	4620      	mov	r0, r4
 800cf68:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800cf6c:	2110      	movs	r1, #16
 800cf6e:	4798      	blx	r3
 800cf70:	2310      	movs	r3, #16
 800cf72:	63a3      	str	r3, [r4, #56]	; 0x38
 800cf74:	4b07      	ldr	r3, [pc, #28]	; (800cf94 <GUIDRV_FlexColor_SetMode16bppC0B16+0x64>)
 800cf76:	6463      	str	r3, [r4, #68]	; 0x44
 800cf78:	bd10      	pop	{r4, pc}
 800cf7a:	bf00      	nop
 800cf7c:	0800ca21 	.word	0x0800ca21
 800cf80:	0800c921 	.word	0x0800c921
 800cf84:	0800d337 	.word	0x0800d337
 800cf88:	0800d2a7 	.word	0x0800d2a7
 800cf8c:	0800c909 	.word	0x0800c909
 800cf90:	0800c913 	.word	0x0800c913
 800cf94:	0801a864 	.word	0x0801a864

0800cf98 <_Log2PhysX_X0Y0S0>:
 800cf98:	4608      	mov	r0, r1
 800cf9a:	4770      	bx	lr

0800cf9c <_Log2PhysX_X1Y0S0>:
 800cf9c:	6800      	ldr	r0, [r0, #0]
 800cf9e:	1a40      	subs	r0, r0, r1
 800cfa0:	3801      	subs	r0, #1
 800cfa2:	4770      	bx	lr

0800cfa4 <_Log2PhysX_X0Y1S0>:
 800cfa4:	4608      	mov	r0, r1
 800cfa6:	4770      	bx	lr

0800cfa8 <_Log2PhysX_X1Y1S0>:
 800cfa8:	6800      	ldr	r0, [r0, #0]
 800cfaa:	1a40      	subs	r0, r0, r1
 800cfac:	3801      	subs	r0, #1
 800cfae:	4770      	bx	lr

0800cfb0 <_Log2PhysX_X0Y0S1>:
 800cfb0:	4610      	mov	r0, r2
 800cfb2:	4770      	bx	lr

0800cfb4 <_Log2PhysX_X1Y0S1>:
 800cfb4:	6840      	ldr	r0, [r0, #4]
 800cfb6:	1a80      	subs	r0, r0, r2
 800cfb8:	3801      	subs	r0, #1
 800cfba:	4770      	bx	lr

0800cfbc <_Log2PhysX_X0Y1S1>:
 800cfbc:	4610      	mov	r0, r2
 800cfbe:	4770      	bx	lr

0800cfc0 <_Log2PhysX_X1Y1S1>:
 800cfc0:	6840      	ldr	r0, [r0, #4]
 800cfc2:	1a80      	subs	r0, r0, r2
 800cfc4:	3801      	subs	r0, #1
 800cfc6:	4770      	bx	lr

0800cfc8 <_Log2PhysY_X0Y0S0>:
 800cfc8:	4610      	mov	r0, r2
 800cfca:	4770      	bx	lr

0800cfcc <_Log2PhysY_X1Y0S0>:
 800cfcc:	4610      	mov	r0, r2
 800cfce:	4770      	bx	lr

0800cfd0 <_Log2PhysY_X0Y1S0>:
 800cfd0:	6840      	ldr	r0, [r0, #4]
 800cfd2:	1a80      	subs	r0, r0, r2
 800cfd4:	3801      	subs	r0, #1
 800cfd6:	4770      	bx	lr

0800cfd8 <_Log2PhysY_X1Y1S0>:
 800cfd8:	6840      	ldr	r0, [r0, #4]
 800cfda:	1a80      	subs	r0, r0, r2
 800cfdc:	3801      	subs	r0, #1
 800cfde:	4770      	bx	lr

0800cfe0 <_Log2PhysY_X0Y0S1>:
 800cfe0:	4608      	mov	r0, r1
 800cfe2:	4770      	bx	lr

0800cfe4 <_Log2PhysY_X1Y0S1>:
 800cfe4:	4608      	mov	r0, r1
 800cfe6:	4770      	bx	lr

0800cfe8 <_Log2PhysY_X0Y1S1>:
 800cfe8:	6800      	ldr	r0, [r0, #0]
 800cfea:	1a40      	subs	r0, r0, r1
 800cfec:	3801      	subs	r0, #1
 800cfee:	4770      	bx	lr

0800cff0 <_Log2PhysY_X1Y1S1>:
 800cff0:	6800      	ldr	r0, [r0, #0]
 800cff2:	1a40      	subs	r0, r0, r1
 800cff4:	3801      	subs	r0, #1
 800cff6:	4770      	bx	lr

0800cff8 <_SetPixelIndex>:
 800cff8:	b510      	push	{r4, lr}
 800cffa:	6884      	ldr	r4, [r0, #8]
 800cffc:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
 800d000:	47a0      	blx	r4
 800d002:	bd10      	pop	{r4, pc}

0800d004 <_GetPixelIndex>:
 800d004:	b508      	push	{r3, lr}
 800d006:	6883      	ldr	r3, [r0, #8]
 800d008:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800d00c:	4798      	blx	r3
 800d00e:	bd08      	pop	{r3, pc}

0800d010 <_XorPixel>:
 800d010:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d012:	4604      	mov	r4, r0
 800d014:	460f      	mov	r7, r1
 800d016:	4616      	mov	r6, r2
 800d018:	6885      	ldr	r5, [r0, #8]
 800d01a:	f7ff fff3 	bl	800d004 <_GetPixelIndex>
 800d01e:	9001      	str	r0, [sp, #4]
 800d020:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d024:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800d026:	4620      	mov	r0, r4
 800d028:	4639      	mov	r1, r7
 800d02a:	4632      	mov	r2, r6
 800d02c:	ea8e 0303 	eor.w	r3, lr, r3
 800d030:	f7ff ffe2 	bl	800cff8 <_SetPixelIndex>
 800d034:	b003      	add	sp, #12
 800d036:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d038 <_DrawHLine>:
 800d038:	b513      	push	{r0, r1, r4, lr}
 800d03a:	6884      	ldr	r4, [r0, #8]
 800d03c:	9200      	str	r2, [sp, #0]
 800d03e:	f8d4 40e8 	ldr.w	r4, [r4, #232]	; 0xe8
 800d042:	47a0      	blx	r4
 800d044:	b002      	add	sp, #8
 800d046:	bd10      	pop	{r4, pc}

0800d048 <_DrawVLine>:
 800d048:	b513      	push	{r0, r1, r4, lr}
 800d04a:	6884      	ldr	r4, [r0, #8]
 800d04c:	9300      	str	r3, [sp, #0]
 800d04e:	f8d4 40e8 	ldr.w	r4, [r4, #232]	; 0xe8
 800d052:	460b      	mov	r3, r1
 800d054:	47a0      	blx	r4
 800d056:	b002      	add	sp, #8
 800d058:	bd10      	pop	{r4, pc}

0800d05a <_FillRect>:
 800d05a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d05c:	9c06      	ldr	r4, [sp, #24]
 800d05e:	6885      	ldr	r5, [r0, #8]
 800d060:	9400      	str	r4, [sp, #0]
 800d062:	f8d5 40e8 	ldr.w	r4, [r5, #232]	; 0xe8
 800d066:	47a0      	blx	r4
 800d068:	b003      	add	sp, #12
 800d06a:	bd30      	pop	{r4, r5, pc}

0800d06c <_DrawBitmap>:
 800d06c:	b530      	push	{r4, r5, lr}
 800d06e:	b087      	sub	sp, #28
 800d070:	6885      	ldr	r5, [r0, #8]
 800d072:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d074:	9400      	str	r4, [sp, #0]
 800d076:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800d078:	9401      	str	r4, [sp, #4]
 800d07a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800d07c:	9402      	str	r4, [sp, #8]
 800d07e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800d080:	9403      	str	r4, [sp, #12]
 800d082:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800d084:	9404      	str	r4, [sp, #16]
 800d086:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800d088:	9405      	str	r4, [sp, #20]
 800d08a:	f8d5 40e4 	ldr.w	r4, [r5, #228]	; 0xe4
 800d08e:	47a0      	blx	r4
 800d090:	b007      	add	sp, #28
 800d092:	bd30      	pop	{r4, r5, pc}

0800d094 <_GetDevFunc_SetRect>:
 800d094:	4770      	bx	lr
	...

0800d098 <_GetDevFunc_SetRectOutside>:
 800d098:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d09a:	9e07      	ldr	r6, [sp, #28]
 800d09c:	6884      	ldr	r4, [r0, #8]
 800d09e:	4d0c      	ldr	r5, [pc, #48]	; (800d0d0 <_GetDevFunc_SetRectOutside+0x38>)
 800d0a0:	b176      	cbz	r6, 800d0c0 <_GetDevFunc_SetRectOutside+0x28>
 800d0a2:	6828      	ldr	r0, [r5, #0]
 800d0a4:	b988      	cbnz	r0, 800d0ca <_GetDevFunc_SetRectOutside+0x32>
 800d0a6:	9806      	ldr	r0, [sp, #24]
 800d0a8:	9000      	str	r0, [sp, #0]
 800d0aa:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800d0ae:	4620      	mov	r0, r4
 800d0b0:	47b0      	blx	r6
 800d0b2:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800d0b6:	602b      	str	r3, [r5, #0]
 800d0b8:	4b06      	ldr	r3, [pc, #24]	; (800d0d4 <_GetDevFunc_SetRectOutside+0x3c>)
 800d0ba:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 800d0be:	e004      	b.n	800d0ca <_GetDevFunc_SetRectOutside+0x32>
 800d0c0:	682b      	ldr	r3, [r5, #0]
 800d0c2:	b113      	cbz	r3, 800d0ca <_GetDevFunc_SetRectOutside+0x32>
 800d0c4:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 800d0c8:	602e      	str	r6, [r5, #0]
 800d0ca:	b002      	add	sp, #8
 800d0cc:	bd70      	pop	{r4, r5, r6, pc}
 800d0ce:	bf00      	nop
 800d0d0:	20019428 	.word	0x20019428
 800d0d4:	0800d095 	.word	0x0800d095

0800d0d8 <_ReadPixelCust_16bpp>:
 800d0d8:	b508      	push	{r3, lr}
 800d0da:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800d0dc:	f8d0 30d4 	ldr.w	r3, [r0, #212]	; 0xd4
 800d0e0:	6990      	ldr	r0, [r2, #24]
 800d0e2:	4798      	blx	r3
 800d0e4:	bd08      	pop	{r3, pc}

0800d0e6 <_ReadPixelCust_18bpp>:
 800d0e6:	b508      	push	{r3, lr}
 800d0e8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800d0ea:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 800d0ee:	6990      	ldr	r0, [r2, #24]
 800d0f0:	4798      	blx	r3
 800d0f2:	bd08      	pop	{r3, pc}

0800d0f4 <_ReadRectCust_16bpp>:
 800d0f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d0f8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800d0fa:	6884      	ldr	r4, [r0, #8]
 800d0fc:	9500      	str	r5, [sp, #0]
 800d0fe:	4617      	mov	r7, r2
 800d100:	4620      	mov	r0, r4
 800d102:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800d106:	4699      	mov	r9, r3
 800d108:	4688      	mov	r8, r1
 800d10a:	1bed      	subs	r5, r5, r7
 800d10c:	47b0      	blx	r6
 800d10e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d110:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 800d114:	6988      	ldr	r0, [r1, #24]
 800d116:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d118:	ebc8 0809 	rsb	r8, r8, r9
 800d11c:	1c6a      	adds	r2, r5, #1
 800d11e:	fb08 2202 	mla	r2, r8, r2, r2
 800d122:	4798      	blx	r3
 800d124:	b003      	add	sp, #12
 800d126:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d12a <_ReadRectCust_18bpp>:
 800d12a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d12e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800d130:	6884      	ldr	r4, [r0, #8]
 800d132:	9500      	str	r5, [sp, #0]
 800d134:	4617      	mov	r7, r2
 800d136:	4620      	mov	r0, r4
 800d138:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800d13c:	4699      	mov	r9, r3
 800d13e:	4688      	mov	r8, r1
 800d140:	1bed      	subs	r5, r5, r7
 800d142:	47b0      	blx	r6
 800d144:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d146:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800d14a:	6988      	ldr	r0, [r1, #24]
 800d14c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d14e:	ebc8 0809 	rsb	r8, r8, r9
 800d152:	1c6a      	adds	r2, r5, #1
 800d154:	fb08 2202 	mla	r2, r8, r2, r2
 800d158:	4798      	blx	r3
 800d15a:	b003      	add	sp, #12
 800d15c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d160 <_GetDevFunc>:
 800d160:	3901      	subs	r1, #1
 800d162:	2917      	cmp	r1, #23
 800d164:	d824      	bhi.n	800d1b0 <_GetDevFunc+0x50>
 800d166:	e8df f001 	tbb	[pc, r1]
 800d16a:	2310      	.short	0x2310
 800d16c:	23232323 	.word	0x23232323
 800d170:	0c232323 	.word	0x0c232323
 800d174:	23150e25 	.word	0x23150e25
 800d178:	23232323 	.word	0x23232323
 800d17c:	1f232323 	.word	0x1f232323
 800d180:	211a      	.short	0x211a
 800d182:	480d      	ldr	r0, [pc, #52]	; (800d1b8 <_GetDevFunc+0x58>)
 800d184:	4770      	bx	lr
 800d186:	480d      	ldr	r0, [pc, #52]	; (800d1bc <_GetDevFunc+0x5c>)
 800d188:	4770      	bx	lr
 800d18a:	6803      	ldr	r3, [r0, #0]
 800d18c:	689b      	ldr	r3, [r3, #8]
 800d18e:	f8d3 00fc 	ldr.w	r0, [r3, #252]	; 0xfc
 800d192:	4770      	bx	lr
 800d194:	6803      	ldr	r3, [r0, #0]
 800d196:	689b      	ldr	r3, [r3, #8]
 800d198:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 800d19c:	4770      	bx	lr
 800d19e:	6803      	ldr	r3, [r0, #0]
 800d1a0:	689b      	ldr	r3, [r3, #8]
 800d1a2:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 800d1a6:	4770      	bx	lr
 800d1a8:	4805      	ldr	r0, [pc, #20]	; (800d1c0 <_GetDevFunc+0x60>)
 800d1aa:	4770      	bx	lr
 800d1ac:	4805      	ldr	r0, [pc, #20]	; (800d1c4 <_GetDevFunc+0x64>)
 800d1ae:	4770      	bx	lr
 800d1b0:	2000      	movs	r0, #0
 800d1b2:	4770      	bx	lr
 800d1b4:	4804      	ldr	r0, [pc, #16]	; (800d1c8 <_GetDevFunc+0x68>)
 800d1b6:	4770      	bx	lr
 800d1b8:	0800d517 	.word	0x0800d517
 800d1bc:	0800d4b9 	.word	0x0800d4b9
 800d1c0:	0800d41d 	.word	0x0800d41d
 800d1c4:	0800d099 	.word	0x0800d099
 800d1c8:	0800d503 	.word	0x0800d503

0800d1cc <_GetDevProp>:
 800d1cc:	3901      	subs	r1, #1
 800d1ce:	6880      	ldr	r0, [r0, #8]
 800d1d0:	290d      	cmp	r1, #13
 800d1d2:	d823      	bhi.n	800d21c <_GetDevProp+0x50>
 800d1d4:	e8df f001 	tbb	[pc, r1]
 800d1d8:	0f0d0b09 	.word	0x0f0d0b09
 800d1dc:	11222222 	.word	0x11222222
 800d1e0:	13252507 	.word	0x13252507
 800d1e4:	1d18      	.short	0x1d18
 800d1e6:	2000      	movs	r0, #0
 800d1e8:	4770      	bx	lr
 800d1ea:	6800      	ldr	r0, [r0, #0]
 800d1ec:	4770      	bx	lr
 800d1ee:	6840      	ldr	r0, [r0, #4]
 800d1f0:	4770      	bx	lr
 800d1f2:	6880      	ldr	r0, [r0, #8]
 800d1f4:	4770      	bx	lr
 800d1f6:	68c0      	ldr	r0, [r0, #12]
 800d1f8:	4770      	bx	lr
 800d1fa:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800d1fc:	4770      	bx	lr
 800d1fe:	b188      	cbz	r0, 800d224 <_GetDevProp+0x58>
 800d200:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800d202:	f000 0001 	and.w	r0, r0, #1
 800d206:	4770      	bx	lr
 800d208:	b160      	cbz	r0, 800d224 <_GetDevProp+0x58>
 800d20a:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800d20c:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800d210:	4770      	bx	lr
 800d212:	b138      	cbz	r0, 800d224 <_GetDevProp+0x58>
 800d214:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800d216:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800d21a:	4770      	bx	lr
 800d21c:	f04f 30ff 	mov.w	r0, #4294967295
 800d220:	4770      	bx	lr
 800d222:	2001      	movs	r0, #1
 800d224:	4770      	bx	lr

0800d226 <_GetDevData>:
 800d226:	6883      	ldr	r3, [r0, #8]
 800d228:	2901      	cmp	r1, #1
 800d22a:	bf0c      	ite	eq
 800d22c:	6c58      	ldreq	r0, [r3, #68]	; 0x44
 800d22e:	2000      	movne	r0, #0
 800d230:	4770      	bx	lr

0800d232 <_GetRect>:
 800d232:	6883      	ldr	r3, [r0, #8]
 800d234:	2200      	movs	r2, #0
 800d236:	800a      	strh	r2, [r1, #0]
 800d238:	804a      	strh	r2, [r1, #2]
 800d23a:	681a      	ldr	r2, [r3, #0]
 800d23c:	685b      	ldr	r3, [r3, #4]
 800d23e:	3a01      	subs	r2, #1
 800d240:	3b01      	subs	r3, #1
 800d242:	808a      	strh	r2, [r1, #4]
 800d244:	80cb      	strh	r3, [r1, #6]
 800d246:	4770      	bx	lr

0800d248 <GUIDRV_FlexColor__SetLog2Phys>:
 800d248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d24a:	4d10      	ldr	r5, [pc, #64]	; (800d28c <GUIDRV_FlexColor__SetLog2Phys+0x44>)
 800d24c:	462e      	mov	r6, r5
 800d24e:	4607      	mov	r7, r0
 800d250:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d252:	b091      	sub	sp, #68	; 0x44
 800d254:	466c      	mov	r4, sp
 800d256:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d258:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800d25c:	3520      	adds	r5, #32
 800d25e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d262:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d264:	ac08      	add	r4, sp, #32
 800d266:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d268:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800d26c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d272:	aa10      	add	r2, sp, #64	; 0x40
 800d274:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d278:	f853 2c40 	ldr.w	r2, [r3, #-64]
 800d27c:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 800d280:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800d284:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800d288:	b011      	add	sp, #68	; 0x44
 800d28a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d28c:	08015ea0 	.word	0x08015ea0

0800d290 <_SetOrg>:
 800d290:	b507      	push	{r0, r1, r2, lr}
 800d292:	6980      	ldr	r0, [r0, #24]
 800d294:	e88d 0006 	stmia.w	sp, {r1, r2}
 800d298:	2103      	movs	r1, #3
 800d29a:	466a      	mov	r2, sp
 800d29c:	f7f8 fef4 	bl	8006088 <LCD_X_DisplayDriver>
 800d2a0:	b003      	add	sp, #12
 800d2a2:	f85d fb04 	ldr.w	pc, [sp], #4

0800d2a6 <GUIDRV_FlexColor__SetPixelIndexNoCache>:
 800d2a6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d2aa:	6884      	ldr	r4, [r0, #8]
 800d2ac:	4698      	mov	r8, r3
 800d2ae:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800d2b0:	079b      	lsls	r3, r3, #30
 800d2b2:	4689      	mov	r9, r1
 800d2b4:	4617      	mov	r7, r2
 800d2b6:	d532      	bpl.n	800d31e <GUIDRV_FlexColor__SetPixelIndexNoCache+0x78>
 800d2b8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800d2bc:	4620      	mov	r0, r4
 800d2be:	4798      	blx	r3
 800d2c0:	f8d4 5104 	ldr.w	r5, [r4, #260]	; 0x104
 800d2c4:	4606      	mov	r6, r0
 800d2c6:	463a      	mov	r2, r7
 800d2c8:	4620      	mov	r0, r4
 800d2ca:	4649      	mov	r1, r9
 800d2cc:	47a8      	blx	r5
 800d2ce:	6923      	ldr	r3, [r4, #16]
 800d2d0:	69a2      	ldr	r2, [r4, #24]
 800d2d2:	429e      	cmp	r6, r3
 800d2d4:	bfac      	ite	ge
 800d2d6:	2300      	movge	r3, #0
 800d2d8:	2301      	movlt	r3, #1
 800d2da:	4296      	cmp	r6, r2
 800d2dc:	bfd4      	ite	le
 800d2de:	461a      	movle	r2, r3
 800d2e0:	f043 0201 	orrgt.w	r2, r3, #1
 800d2e4:	6963      	ldr	r3, [r4, #20]
 800d2e6:	4298      	cmp	r0, r3
 800d2e8:	bfac      	ite	ge
 800d2ea:	4613      	movge	r3, r2
 800d2ec:	f042 0301 	orrlt.w	r3, r2, #1
 800d2f0:	4605      	mov	r5, r0
 800d2f2:	b913      	cbnz	r3, 800d2fa <GUIDRV_FlexColor__SetPixelIndexNoCache+0x54>
 800d2f4:	69e3      	ldr	r3, [r4, #28]
 800d2f6:	4298      	cmp	r0, r3
 800d2f8:	dd0a      	ble.n	800d310 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x6a>
 800d2fa:	6862      	ldr	r2, [r4, #4]
 800d2fc:	6823      	ldr	r3, [r4, #0]
 800d2fe:	3a01      	subs	r2, #1
 800d300:	9200      	str	r2, [sp, #0]
 800d302:	2100      	movs	r1, #0
 800d304:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800d308:	4620      	mov	r0, r4
 800d30a:	460a      	mov	r2, r1
 800d30c:	3b01      	subs	r3, #1
 800d30e:	47b8      	blx	r7
 800d310:	f8d4 70ac 	ldr.w	r7, [r4, #172]	; 0xac
 800d314:	4620      	mov	r0, r4
 800d316:	4631      	mov	r1, r6
 800d318:	462a      	mov	r2, r5
 800d31a:	47b8      	blx	r7
 800d31c:	e003      	b.n	800d326 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x80>
 800d31e:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
 800d322:	4620      	mov	r0, r4
 800d324:	47a8      	blx	r5
 800d326:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800d32a:	4620      	mov	r0, r4
 800d32c:	4641      	mov	r1, r8
 800d32e:	4798      	blx	r3
 800d330:	b003      	add	sp, #12
 800d332:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d336 <GUIDRV_FlexColor__GetPixelIndexNoCache>:
 800d336:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d338:	6884      	ldr	r4, [r0, #8]
 800d33a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800d33c:	079b      	lsls	r3, r3, #30
 800d33e:	460f      	mov	r7, r1
 800d340:	4616      	mov	r6, r2
 800d342:	d545      	bpl.n	800d3d0 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x9a>
 800d344:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800d348:	4620      	mov	r0, r4
 800d34a:	4798      	blx	r3
 800d34c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 800d350:	4632      	mov	r2, r6
 800d352:	4605      	mov	r5, r0
 800d354:	4639      	mov	r1, r7
 800d356:	4620      	mov	r0, r4
 800d358:	4798      	blx	r3
 800d35a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800d35e:	4606      	mov	r6, r0
 800d360:	b11b      	cbz	r3, 800d36a <GUIDRV_FlexColor__GetPixelIndexNoCache+0x34>
 800d362:	4620      	mov	r0, r4
 800d364:	2101      	movs	r1, #1
 800d366:	2200      	movs	r2, #0
 800d368:	4798      	blx	r3
 800d36a:	6923      	ldr	r3, [r4, #16]
 800d36c:	69a2      	ldr	r2, [r4, #24]
 800d36e:	429d      	cmp	r5, r3
 800d370:	bfac      	ite	ge
 800d372:	2300      	movge	r3, #0
 800d374:	2301      	movlt	r3, #1
 800d376:	4295      	cmp	r5, r2
 800d378:	bfd4      	ite	le
 800d37a:	461a      	movle	r2, r3
 800d37c:	f043 0201 	orrgt.w	r2, r3, #1
 800d380:	6963      	ldr	r3, [r4, #20]
 800d382:	429e      	cmp	r6, r3
 800d384:	bfac      	ite	ge
 800d386:	4613      	movge	r3, r2
 800d388:	f042 0301 	orrlt.w	r3, r2, #1
 800d38c:	b913      	cbnz	r3, 800d394 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x5e>
 800d38e:	69e3      	ldr	r3, [r4, #28]
 800d390:	429e      	cmp	r6, r3
 800d392:	dd0a      	ble.n	800d3aa <GUIDRV_FlexColor__GetPixelIndexNoCache+0x74>
 800d394:	6862      	ldr	r2, [r4, #4]
 800d396:	6823      	ldr	r3, [r4, #0]
 800d398:	3a01      	subs	r2, #1
 800d39a:	9200      	str	r2, [sp, #0]
 800d39c:	2100      	movs	r1, #0
 800d39e:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800d3a2:	4620      	mov	r0, r4
 800d3a4:	460a      	mov	r2, r1
 800d3a6:	3b01      	subs	r3, #1
 800d3a8:	47b8      	blx	r7
 800d3aa:	4629      	mov	r1, r5
 800d3ac:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800d3b0:	4620      	mov	r0, r4
 800d3b2:	4632      	mov	r2, r6
 800d3b4:	4798      	blx	r3
 800d3b6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800d3ba:	4620      	mov	r0, r4
 800d3bc:	4798      	blx	r3
 800d3be:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800d3c2:	4605      	mov	r5, r0
 800d3c4:	b16b      	cbz	r3, 800d3e2 <GUIDRV_FlexColor__GetPixelIndexNoCache+0xac>
 800d3c6:	4620      	mov	r0, r4
 800d3c8:	2100      	movs	r1, #0
 800d3ca:	2201      	movs	r2, #1
 800d3cc:	4798      	blx	r3
 800d3ce:	e008      	b.n	800d3e2 <GUIDRV_FlexColor__GetPixelIndexNoCache+0xac>
 800d3d0:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800d3d4:	4620      	mov	r0, r4
 800d3d6:	4798      	blx	r3
 800d3d8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800d3dc:	4620      	mov	r0, r4
 800d3de:	4798      	blx	r3
 800d3e0:	4605      	mov	r5, r0
 800d3e2:	4628      	mov	r0, r5
 800d3e4:	b003      	add	sp, #12
 800d3e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d3e8 <GUIDRV_FlexColor__InitOnce>:
 800d3e8:	b538      	push	{r3, r4, r5, lr}
 800d3ea:	6885      	ldr	r5, [r0, #8]
 800d3ec:	4604      	mov	r4, r0
 800d3ee:	b995      	cbnz	r5, 800d416 <GUIDRV_FlexColor__InitOnce+0x2e>
 800d3f0:	f44f 70ba 	mov.w	r0, #372	; 0x174
 800d3f4:	f004 f846 	bl	8011484 <GUI_ALLOC_GetFixedBlock>
 800d3f8:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800d3fc:	60a0      	str	r0, [r4, #8]
 800d3fe:	4629      	mov	r1, r5
 800d400:	f000 fdfc 	bl	800dffc <GUI__memset>
 800d404:	68a3      	ldr	r3, [r4, #8]
 800d406:	2202      	movs	r2, #2
 800d408:	84da      	strh	r2, [r3, #38]	; 0x26
 800d40a:	2201      	movs	r2, #1
 800d40c:	621a      	str	r2, [r3, #32]
 800d40e:	4a02      	ldr	r2, [pc, #8]	; (800d418 <GUIDRV_FlexColor__InitOnce+0x30>)
 800d410:	641c      	str	r4, [r3, #64]	; 0x40
 800d412:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 800d416:	bd38      	pop	{r3, r4, r5, pc}
 800d418:	0800d249 	.word	0x0800d249

0800d41c <_SetDevFunc>:
 800d41c:	b570      	push	{r4, r5, r6, lr}
 800d41e:	4606      	mov	r6, r0
 800d420:	460d      	mov	r5, r1
 800d422:	4614      	mov	r4, r2
 800d424:	f7ff ffe0 	bl	800d3e8 <GUIDRV_FlexColor__InitOnce>
 800d428:	68b3      	ldr	r3, [r6, #8]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d03b      	beq.n	800d4a6 <_SetDevFunc+0x8a>
 800d42e:	2d26      	cmp	r5, #38	; 0x26
 800d430:	d002      	beq.n	800d438 <_SetDevFunc+0x1c>
 800d432:	2d27      	cmp	r5, #39	; 0x27
 800d434:	d016      	beq.n	800d464 <_SetDevFunc+0x48>
 800d436:	bd70      	pop	{r4, r5, r6, pc}
 800d438:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d43a:	2a10      	cmp	r2, #16
 800d43c:	d002      	beq.n	800d444 <_SetDevFunc+0x28>
 800d43e:	2a12      	cmp	r2, #18
 800d440:	d008      	beq.n	800d454 <_SetDevFunc+0x38>
 800d442:	bd70      	pop	{r4, r5, r6, pc}
 800d444:	4a18      	ldr	r2, [pc, #96]	; (800d4a8 <_SetDevFunc+0x8c>)
 800d446:	f8c3 40d4 	str.w	r4, [r3, #212]	; 0xd4
 800d44a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800d44e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 800d452:	bd70      	pop	{r4, r5, r6, pc}
 800d454:	4a15      	ldr	r2, [pc, #84]	; (800d4ac <_SetDevFunc+0x90>)
 800d456:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 800d45a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800d45e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800d462:	bd70      	pop	{r4, r5, r6, pc}
 800d464:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d466:	2a10      	cmp	r2, #16
 800d468:	d002      	beq.n	800d470 <_SetDevFunc+0x54>
 800d46a:	2a12      	cmp	r2, #18
 800d46c:	d00e      	beq.n	800d48c <_SetDevFunc+0x70>
 800d46e:	bd70      	pop	{r4, r5, r6, pc}
 800d470:	b13c      	cbz	r4, 800d482 <_SetDevFunc+0x66>
 800d472:	4a0f      	ldr	r2, [pc, #60]	; (800d4b0 <_SetDevFunc+0x94>)
 800d474:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
 800d478:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 800d47c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 800d480:	bd70      	pop	{r4, r5, r6, pc}
 800d482:	f8c3 40c8 	str.w	r4, [r3, #200]	; 0xc8
 800d486:	f8c3 40c4 	str.w	r4, [r3, #196]	; 0xc4
 800d48a:	bd70      	pop	{r4, r5, r6, pc}
 800d48c:	b13c      	cbz	r4, 800d49e <_SetDevFunc+0x82>
 800d48e:	4a09      	ldr	r2, [pc, #36]	; (800d4b4 <_SetDevFunc+0x98>)
 800d490:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
 800d494:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 800d498:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 800d49c:	bd70      	pop	{r4, r5, r6, pc}
 800d49e:	f8c3 40cc 	str.w	r4, [r3, #204]	; 0xcc
 800d4a2:	f8c3 40d0 	str.w	r4, [r3, #208]	; 0xd0
 800d4a6:	bd70      	pop	{r4, r5, r6, pc}
 800d4a8:	0800d0d9 	.word	0x0800d0d9
 800d4ac:	0800d0e7 	.word	0x0800d0e7
 800d4b0:	0800d0f5 	.word	0x0800d0f5
 800d4b4:	0800d12b 	.word	0x0800d12b

0800d4b8 <_GetDevFunc_Init>:
 800d4b8:	b538      	push	{r3, r4, r5, lr}
 800d4ba:	4605      	mov	r5, r0
 800d4bc:	f7ff ff94 	bl	800d3e8 <GUIDRV_FlexColor__InitOnce>
 800d4c0:	68ac      	ldr	r4, [r5, #8]
 800d4c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d4c6:	f003 ffdd 	bl	8011484 <GUI_ALLOC_GetFixedBlock>
 800d4ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d4cc:	66a0      	str	r0, [r4, #104]	; 0x68
 800d4ce:	3307      	adds	r3, #7
 800d4d0:	10d8      	asrs	r0, r3, #3
 800d4d2:	6823      	ldr	r3, [r4, #0]
 800d4d4:	4358      	muls	r0, r3
 800d4d6:	f003 ffd5 	bl	8011484 <GUI_ALLOC_GetFixedBlock>
 800d4da:	2101      	movs	r1, #1
 800d4dc:	2200      	movs	r2, #0
 800d4de:	66e0      	str	r0, [r4, #108]	; 0x6c
 800d4e0:	69a8      	ldr	r0, [r5, #24]
 800d4e2:	f7f8 fdd1 	bl	8006088 <LCD_X_DisplayDriver>
 800d4e6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800d4ea:	4605      	mov	r5, r0
 800d4ec:	4620      	mov	r0, r4
 800d4ee:	4798      	blx	r3
 800d4f0:	4620      	mov	r0, r4
 800d4f2:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800d4f6:	4798      	blx	r3
 800d4f8:	2d00      	cmp	r5, #0
 800d4fa:	bfd4      	ite	le
 800d4fc:	2000      	movle	r0, #0
 800d4fe:	2001      	movgt	r0, #1
 800d500:	bd38      	pop	{r3, r4, r5, pc}

0800d502 <_GetDevFunc_SetSize>:
 800d502:	b570      	push	{r4, r5, r6, lr}
 800d504:	4604      	mov	r4, r0
 800d506:	460d      	mov	r5, r1
 800d508:	4616      	mov	r6, r2
 800d50a:	f7ff ff6d 	bl	800d3e8 <GUIDRV_FlexColor__InitOnce>
 800d50e:	68a3      	ldr	r3, [r4, #8]
 800d510:	e883 0060 	stmia.w	r3, {r5, r6}
 800d514:	bd70      	pop	{r4, r5, r6, pc}

0800d516 <_GetDevFunc_SetVSize>:
 800d516:	b570      	push	{r4, r5, r6, lr}
 800d518:	4604      	mov	r4, r0
 800d51a:	460d      	mov	r5, r1
 800d51c:	4616      	mov	r6, r2
 800d51e:	f7ff ff63 	bl	800d3e8 <GUIDRV_FlexColor__InitOnce>
 800d522:	68a3      	ldr	r3, [r4, #8]
 800d524:	609d      	str	r5, [r3, #8]
 800d526:	60de      	str	r6, [r3, #12]
 800d528:	bd70      	pop	{r4, r5, r6, pc}

0800d52a <GUIDRV_FlexColor_Config>:
 800d52a:	b538      	push	{r3, r4, r5, lr}
 800d52c:	4605      	mov	r5, r0
 800d52e:	460c      	mov	r4, r1
 800d530:	f7ff ff5a 	bl	800d3e8 <GUIDRV_FlexColor__InitOnce>
 800d534:	68ab      	ldr	r3, [r5, #8]
 800d536:	6822      	ldr	r2, [r4, #0]
 800d538:	62da      	str	r2, [r3, #44]	; 0x2c
 800d53a:	6862      	ldr	r2, [r4, #4]
 800d53c:	631a      	str	r2, [r3, #48]	; 0x30
 800d53e:	68a2      	ldr	r2, [r4, #8]
 800d540:	635a      	str	r2, [r3, #52]	; 0x34
 800d542:	0752      	lsls	r2, r2, #29
 800d544:	d507      	bpl.n	800d556 <GUIDRV_FlexColor_Config+0x2c>
 800d546:	e893 0006 	ldmia.w	r3, {r1, r2}
 800d54a:	601a      	str	r2, [r3, #0]
 800d54c:	6059      	str	r1, [r3, #4]
 800d54e:	68da      	ldr	r2, [r3, #12]
 800d550:	6899      	ldr	r1, [r3, #8]
 800d552:	60d9      	str	r1, [r3, #12]
 800d554:	609a      	str	r2, [r3, #8]
 800d556:	89a2      	ldrh	r2, [r4, #12]
 800d558:	849a      	strh	r2, [r3, #36]	; 0x24
 800d55a:	6922      	ldr	r2, [r4, #16]
 800d55c:	b112      	cbz	r2, 800d564 <GUIDRV_FlexColor_Config+0x3a>
 800d55e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800d562:	621a      	str	r2, [r3, #32]
 800d564:	bd38      	pop	{r3, r4, r5, pc}

0800d566 <GUIDRV_FlexColor_SetFunc>:
 800d566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d56a:	4604      	mov	r4, r0
 800d56c:	461f      	mov	r7, r3
 800d56e:	4616      	mov	r6, r2
 800d570:	4688      	mov	r8, r1
 800d572:	f7ff ff39 	bl	800d3e8 <GUIDRV_FlexColor__InitOnce>
 800d576:	68a5      	ldr	r5, [r4, #8]
 800d578:	4641      	mov	r1, r8
 800d57a:	2268      	movs	r2, #104	; 0x68
 800d57c:	f505 7086 	add.w	r0, r5, #268	; 0x10c
 800d580:	f008 f867 	bl	8015652 <memcpy>
 800d584:	4620      	mov	r0, r4
 800d586:	47b0      	blx	r6
 800d588:	4620      	mov	r0, r4
 800d58a:	47b8      	blx	r7
 800d58c:	6923      	ldr	r3, [r4, #16]
 800d58e:	689b      	ldr	r3, [r3, #8]
 800d590:	4798      	blx	r3
 800d592:	62a8      	str	r0, [r5, #40]	; 0x28
 800d594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d598 <LCD_UpdateColorIndices>:
 800d598:	b510      	push	{r4, lr}
 800d59a:	4c07      	ldr	r4, [pc, #28]	; (800d5b8 <LCD_UpdateColorIndices+0x20>)
 800d59c:	6823      	ldr	r3, [r4, #0]
 800d59e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d5a0:	f000 fc96 	bl	800ded0 <LCD_Color2Index>
 800d5a4:	f000 fcb4 	bl	800df10 <LCD_SetColorIndex>
 800d5a8:	6823      	ldr	r3, [r4, #0]
 800d5aa:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800d5ac:	f000 fc90 	bl	800ded0 <LCD_Color2Index>
 800d5b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5b4:	f000 bcc8 	b.w	800df48 <LCD_SetBkColorIndex>
 800d5b8:	20000238 	.word	0x20000238

0800d5bc <LCD_SetClipRectEx>:
 800d5bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d5be:	4c09      	ldr	r4, [pc, #36]	; (800d5e4 <LCD_SetClipRectEx+0x28>)
 800d5c0:	6823      	ldr	r3, [r4, #0]
 800d5c2:	7c5a      	ldrb	r2, [r3, #17]
 800d5c4:	4b08      	ldr	r3, [pc, #32]	; (800d5e8 <LCD_SetClipRectEx+0x2c>)
 800d5c6:	4605      	mov	r5, r0
 800d5c8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d5cc:	68c2      	ldr	r2, [r0, #12]
 800d5ce:	4669      	mov	r1, sp
 800d5d0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d5d2:	4790      	blx	r2
 800d5d4:	6820      	ldr	r0, [r4, #0]
 800d5d6:	4629      	mov	r1, r5
 800d5d8:	466a      	mov	r2, sp
 800d5da:	3008      	adds	r0, #8
 800d5dc:	f000 fdfe 	bl	800e1dc <GUI__IntersectRects>
 800d5e0:	b003      	add	sp, #12
 800d5e2:	bd30      	pop	{r4, r5, pc}
 800d5e4:	20000238 	.word	0x20000238
 800d5e8:	2001b2c0 	.word	0x2001b2c0

0800d5ec <LCD_SetVSizeEx>:
 800d5ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d5ee:	460d      	mov	r5, r1
 800d5f0:	4614      	mov	r4, r2
 800d5f2:	f002 f9d9 	bl	800f9a8 <GUI_DEVICE__GetpDriver>
 800d5f6:	9001      	str	r0, [sp, #4]
 800d5f8:	b908      	cbnz	r0, 800d5fe <LCD_SetVSizeEx+0x12>
 800d5fa:	2001      	movs	r0, #1
 800d5fc:	e00c      	b.n	800d618 <LCD_SetVSizeEx+0x2c>
 800d5fe:	68c3      	ldr	r3, [r0, #12]
 800d600:	210a      	movs	r1, #10
 800d602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d604:	a801      	add	r0, sp, #4
 800d606:	4798      	blx	r3
 800d608:	4603      	mov	r3, r0
 800d60a:	2800      	cmp	r0, #0
 800d60c:	d0f5      	beq.n	800d5fa <LCD_SetVSizeEx+0xe>
 800d60e:	9801      	ldr	r0, [sp, #4]
 800d610:	4629      	mov	r1, r5
 800d612:	4622      	mov	r2, r4
 800d614:	4798      	blx	r3
 800d616:	2000      	movs	r0, #0
 800d618:	b003      	add	sp, #12
 800d61a:	bd30      	pop	{r4, r5, pc}

0800d61c <LCD_SetSizeEx>:
 800d61c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d61e:	460d      	mov	r5, r1
 800d620:	4614      	mov	r4, r2
 800d622:	f002 f9c1 	bl	800f9a8 <GUI_DEVICE__GetpDriver>
 800d626:	9001      	str	r0, [sp, #4]
 800d628:	b908      	cbnz	r0, 800d62e <LCD_SetSizeEx+0x12>
 800d62a:	2001      	movs	r0, #1
 800d62c:	e00c      	b.n	800d648 <LCD_SetSizeEx+0x2c>
 800d62e:	68c3      	ldr	r3, [r0, #12]
 800d630:	210b      	movs	r1, #11
 800d632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d634:	a801      	add	r0, sp, #4
 800d636:	4798      	blx	r3
 800d638:	4603      	mov	r3, r0
 800d63a:	2800      	cmp	r0, #0
 800d63c:	d0f5      	beq.n	800d62a <LCD_SetSizeEx+0xe>
 800d63e:	9801      	ldr	r0, [sp, #4]
 800d640:	4629      	mov	r1, r5
 800d642:	4622      	mov	r2, r4
 800d644:	4798      	blx	r3
 800d646:	2000      	movs	r0, #0
 800d648:	b003      	add	sp, #12
 800d64a:	bd30      	pop	{r4, r5, pc}

0800d64c <LCD_SetPosEx>:
 800d64c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d64e:	460d      	mov	r5, r1
 800d650:	4614      	mov	r4, r2
 800d652:	f002 f9a9 	bl	800f9a8 <GUI_DEVICE__GetpDriver>
 800d656:	9001      	str	r0, [sp, #4]
 800d658:	b908      	cbnz	r0, 800d65e <LCD_SetPosEx+0x12>
 800d65a:	2001      	movs	r0, #1
 800d65c:	e00c      	b.n	800d678 <LCD_SetPosEx+0x2c>
 800d65e:	68c3      	ldr	r3, [r0, #12]
 800d660:	2103      	movs	r1, #3
 800d662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d664:	a801      	add	r0, sp, #4
 800d666:	4798      	blx	r3
 800d668:	4603      	mov	r3, r0
 800d66a:	2800      	cmp	r0, #0
 800d66c:	d0f5      	beq.n	800d65a <LCD_SetPosEx+0xe>
 800d66e:	9801      	ldr	r0, [sp, #4]
 800d670:	4629      	mov	r1, r5
 800d672:	4622      	mov	r2, r4
 800d674:	4798      	blx	r3
 800d676:	2000      	movs	r0, #0
 800d678:	b003      	add	sp, #12
 800d67a:	bd30      	pop	{r4, r5, pc}

0800d67c <LCD_SetLUTEntryEx>:
 800d67c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d67e:	460d      	mov	r5, r1
 800d680:	4614      	mov	r4, r2
 800d682:	f002 f991 	bl	800f9a8 <GUI_DEVICE__GetpDriver>
 800d686:	9001      	str	r0, [sp, #4]
 800d688:	b908      	cbnz	r0, 800d68e <LCD_SetLUTEntryEx+0x12>
 800d68a:	2001      	movs	r0, #1
 800d68c:	e00c      	b.n	800d6a8 <LCD_SetLUTEntryEx+0x2c>
 800d68e:	68c3      	ldr	r3, [r0, #12]
 800d690:	2110      	movs	r1, #16
 800d692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d694:	a801      	add	r0, sp, #4
 800d696:	4798      	blx	r3
 800d698:	4603      	mov	r3, r0
 800d69a:	2800      	cmp	r0, #0
 800d69c:	d0f5      	beq.n	800d68a <LCD_SetLUTEntryEx+0xe>
 800d69e:	9801      	ldr	r0, [sp, #4]
 800d6a0:	4629      	mov	r1, r5
 800d6a2:	4622      	mov	r2, r4
 800d6a4:	4798      	blx	r3
 800d6a6:	2000      	movs	r0, #0
 800d6a8:	b003      	add	sp, #12
 800d6aa:	bd30      	pop	{r4, r5, pc}

0800d6ac <LCD_GetPosEx>:
 800d6ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d6ae:	460d      	mov	r5, r1
 800d6b0:	4614      	mov	r4, r2
 800d6b2:	f002 f979 	bl	800f9a8 <GUI_DEVICE__GetpDriver>
 800d6b6:	9001      	str	r0, [sp, #4]
 800d6b8:	b908      	cbnz	r0, 800d6be <LCD_GetPosEx+0x12>
 800d6ba:	2001      	movs	r0, #1
 800d6bc:	e00c      	b.n	800d6d8 <LCD_GetPosEx+0x2c>
 800d6be:	68c3      	ldr	r3, [r0, #12]
 800d6c0:	2104      	movs	r1, #4
 800d6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6c4:	a801      	add	r0, sp, #4
 800d6c6:	4798      	blx	r3
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	2800      	cmp	r0, #0
 800d6cc:	d0f5      	beq.n	800d6ba <LCD_GetPosEx+0xe>
 800d6ce:	9801      	ldr	r0, [sp, #4]
 800d6d0:	4629      	mov	r1, r5
 800d6d2:	4622      	mov	r2, r4
 800d6d4:	4798      	blx	r3
 800d6d6:	2000      	movs	r0, #0
 800d6d8:	b003      	add	sp, #12
 800d6da:	bd30      	pop	{r4, r5, pc}

0800d6dc <_GetDevProp>:
 800d6dc:	2801      	cmp	r0, #1
 800d6de:	b510      	push	{r4, lr}
 800d6e0:	460c      	mov	r4, r1
 800d6e2:	dc08      	bgt.n	800d6f6 <_GetDevProp+0x1a>
 800d6e4:	f002 f960 	bl	800f9a8 <GUI_DEVICE__GetpDriver>
 800d6e8:	b120      	cbz	r0, 800d6f4 <_GetDevProp+0x18>
 800d6ea:	68c3      	ldr	r3, [r0, #12]
 800d6ec:	4621      	mov	r1, r4
 800d6ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6f0:	4798      	blx	r3
 800d6f2:	bd10      	pop	{r4, pc}
 800d6f4:	bd10      	pop	{r4, pc}
 800d6f6:	2000      	movs	r0, #0
 800d6f8:	bd10      	pop	{r4, pc}

0800d6fa <_GetMaxValue>:
 800d6fa:	b538      	push	{r3, r4, r5, lr}
 800d6fc:	4604      	mov	r4, r0
 800d6fe:	4621      	mov	r1, r4
 800d700:	2001      	movs	r0, #1
 800d702:	f7ff ffeb 	bl	800d6dc <_GetDevProp>
 800d706:	4621      	mov	r1, r4
 800d708:	4605      	mov	r5, r0
 800d70a:	2000      	movs	r0, #0
 800d70c:	f7ff ffe6 	bl	800d6dc <_GetDevProp>
 800d710:	42a8      	cmp	r0, r5
 800d712:	bfb8      	it	lt
 800d714:	4628      	movlt	r0, r5
 800d716:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800d71a:	bd38      	pop	{r3, r4, r5, pc}

0800d71c <LCD_GetXSizeEx>:
 800d71c:	2101      	movs	r1, #1
 800d71e:	f7ff bfdd 	b.w	800d6dc <_GetDevProp>

0800d722 <LCD_GetYSizeEx>:
 800d722:	2102      	movs	r1, #2
 800d724:	f7ff bfda 	b.w	800d6dc <_GetDevProp>

0800d728 <LCD_GetVXSizeEx>:
 800d728:	2103      	movs	r1, #3
 800d72a:	f7ff bfd7 	b.w	800d6dc <_GetDevProp>

0800d72e <LCD_GetVYSizeEx>:
 800d72e:	2104      	movs	r1, #4
 800d730:	f7ff bfd4 	b.w	800d6dc <_GetDevProp>

0800d734 <LCD_GetBitsPerPixelEx>:
 800d734:	2108      	movs	r1, #8
 800d736:	f7ff bfd1 	b.w	800d6dc <_GetDevProp>

0800d73a <LCD_GetNumColorsEx>:
 800d73a:	2109      	movs	r1, #9
 800d73c:	f7ff bfce 	b.w	800d6dc <_GetDevProp>

0800d740 <LCD_GetXSize>:
 800d740:	4b02      	ldr	r3, [pc, #8]	; (800d74c <LCD_GetXSize+0xc>)
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	7c58      	ldrb	r0, [r3, #17]
 800d746:	f7ff bfe9 	b.w	800d71c <LCD_GetXSizeEx>
 800d74a:	bf00      	nop
 800d74c:	20000238 	.word	0x20000238

0800d750 <LCD_GetYSize>:
 800d750:	4b02      	ldr	r3, [pc, #8]	; (800d75c <LCD_GetYSize+0xc>)
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	7c58      	ldrb	r0, [r3, #17]
 800d756:	f7ff bfe4 	b.w	800d722 <LCD_GetYSizeEx>
 800d75a:	bf00      	nop
 800d75c:	20000238 	.word	0x20000238

0800d760 <LCD_GetNumColors>:
 800d760:	4b02      	ldr	r3, [pc, #8]	; (800d76c <LCD_GetNumColors+0xc>)
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	7c58      	ldrb	r0, [r3, #17]
 800d766:	f7ff bfe8 	b.w	800d73a <LCD_GetNumColorsEx>
 800d76a:	bf00      	nop
 800d76c:	20000238 	.word	0x20000238

0800d770 <GUI_GetBitsPerPixelEx>:
 800d770:	b508      	push	{r3, lr}
 800d772:	4b04      	ldr	r3, [pc, #16]	; (800d784 <GUI_GetBitsPerPixelEx+0x14>)
 800d774:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800d778:	68c3      	ldr	r3, [r0, #12]
 800d77a:	2108      	movs	r1, #8
 800d77c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d77e:	4798      	blx	r3
 800d780:	bd08      	pop	{r3, pc}
 800d782:	bf00      	nop
 800d784:	2001b2c0 	.word	0x2001b2c0

0800d788 <LCD_GetPaletteEx>:
 800d788:	b508      	push	{r3, lr}
 800d78a:	f002 f90d 	bl	800f9a8 <GUI_DEVICE__GetpDriver>
 800d78e:	b120      	cbz	r0, 800d79a <LCD_GetPaletteEx+0x12>
 800d790:	68c3      	ldr	r3, [r0, #12]
 800d792:	2102      	movs	r1, #2
 800d794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d796:	4798      	blx	r3
 800d798:	bd08      	pop	{r3, pc}
 800d79a:	bd08      	pop	{r3, pc}

0800d79c <LCD_GetPalette>:
 800d79c:	4b02      	ldr	r3, [pc, #8]	; (800d7a8 <LCD_GetPalette+0xc>)
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	7c58      	ldrb	r0, [r3, #17]
 800d7a2:	f7ff bff1 	b.w	800d788 <LCD_GetPaletteEx>
 800d7a6:	bf00      	nop
 800d7a8:	20000238 	.word	0x20000238

0800d7ac <GUI_GetpfIndex2ColorEx>:
 800d7ac:	4b02      	ldr	r3, [pc, #8]	; (800d7b8 <GUI_GetpfIndex2ColorEx+0xc>)
 800d7ae:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d7b2:	691b      	ldr	r3, [r3, #16]
 800d7b4:	6858      	ldr	r0, [r3, #4]
 800d7b6:	4770      	bx	lr
 800d7b8:	2001b2c0 	.word	0x2001b2c0

0800d7bc <LCD_GetpfColor2IndexEx>:
 800d7bc:	b508      	push	{r3, lr}
 800d7be:	f002 f8f3 	bl	800f9a8 <GUI_DEVICE__GetpDriver>
 800d7c2:	b108      	cbz	r0, 800d7c8 <LCD_GetpfColor2IndexEx+0xc>
 800d7c4:	6903      	ldr	r3, [r0, #16]
 800d7c6:	6818      	ldr	r0, [r3, #0]
 800d7c8:	bd08      	pop	{r3, pc}
	...

0800d7cc <GUI_GetpfColor2IndexEx>:
 800d7cc:	4b02      	ldr	r3, [pc, #8]	; (800d7d8 <GUI_GetpfColor2IndexEx+0xc>)
 800d7ce:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d7d2:	691b      	ldr	r3, [r3, #16]
 800d7d4:	6818      	ldr	r0, [r3, #0]
 800d7d6:	4770      	bx	lr
 800d7d8:	2001b2c0 	.word	0x2001b2c0

0800d7dc <LCD_GetXSizeMax>:
 800d7dc:	2001      	movs	r0, #1
 800d7de:	f7ff bf8c 	b.w	800d6fa <_GetMaxValue>

0800d7e2 <LCD_GetYSizeMax>:
 800d7e2:	2002      	movs	r0, #2
 800d7e4:	f7ff bf89 	b.w	800d6fa <_GetMaxValue>

0800d7e8 <LCD_GetVXSizeMax>:
 800d7e8:	2003      	movs	r0, #3
 800d7ea:	f7ff bf86 	b.w	800d6fa <_GetMaxValue>
	...

0800d7f0 <LCD_SetDisplaySize>:
 800d7f0:	4b02      	ldr	r3, [pc, #8]	; (800d7fc <LCD_SetDisplaySize+0xc>)
 800d7f2:	6018      	str	r0, [r3, #0]
 800d7f4:	4b02      	ldr	r3, [pc, #8]	; (800d800 <LCD_SetDisplaySize+0x10>)
 800d7f6:	6019      	str	r1, [r3, #0]
 800d7f8:	4770      	bx	lr
 800d7fa:	bf00      	nop
 800d7fc:	20019430 	.word	0x20019430
 800d800:	2001942c 	.word	0x2001942c

0800d804 <LCD_GetXSizeDisplay>:
 800d804:	4b01      	ldr	r3, [pc, #4]	; (800d80c <LCD_GetXSizeDisplay+0x8>)
 800d806:	6818      	ldr	r0, [r3, #0]
 800d808:	4770      	bx	lr
 800d80a:	bf00      	nop
 800d80c:	20019430 	.word	0x20019430

0800d810 <LCD_GetYSizeDisplay>:
 800d810:	4b01      	ldr	r3, [pc, #4]	; (800d818 <LCD_GetYSizeDisplay+0x8>)
 800d812:	6818      	ldr	r0, [r3, #0]
 800d814:	4770      	bx	lr
 800d816:	bf00      	nop
 800d818:	2001942c 	.word	0x2001942c

0800d81c <LCD__GetBPP>:
 800d81c:	2800      	cmp	r0, #0
 800d81e:	d03b      	beq.n	800d898 <LCD__GetBPP+0x7c>
 800d820:	f030 0301 	bics.w	r3, r0, #1
 800d824:	d029      	beq.n	800d87a <LCD__GetBPP+0x5e>
 800d826:	f030 0303 	bics.w	r3, r0, #3
 800d82a:	d028      	beq.n	800d87e <LCD__GetBPP+0x62>
 800d82c:	f030 0307 	bics.w	r3, r0, #7
 800d830:	d027      	beq.n	800d882 <LCD__GetBPP+0x66>
 800d832:	f030 030f 	bics.w	r3, r0, #15
 800d836:	d026      	beq.n	800d886 <LCD__GetBPP+0x6a>
 800d838:	f030 031f 	bics.w	r3, r0, #31
 800d83c:	d025      	beq.n	800d88a <LCD__GetBPP+0x6e>
 800d83e:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 800d842:	d024      	beq.n	800d88e <LCD__GetBPP+0x72>
 800d844:	f420 73ff 	bic.w	r3, r0, #510	; 0x1fe
 800d848:	f023 0301 	bic.w	r3, r3, #1
 800d84c:	b30b      	cbz	r3, 800d892 <LCD__GetBPP+0x76>
 800d84e:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 800d852:	f023 030f 	bic.w	r3, r3, #15
 800d856:	b1e3      	cbz	r3, 800d892 <LCD__GetBPP+0x76>
 800d858:	f420 43ff 	bic.w	r3, r0, #32640	; 0x7f80
 800d85c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d860:	b1bb      	cbz	r3, 800d892 <LCD__GetBPP+0x76>
 800d862:	0c03      	lsrs	r3, r0, #16
 800d864:	041b      	lsls	r3, r3, #16
 800d866:	b1a3      	cbz	r3, 800d892 <LCD__GetBPP+0x76>
 800d868:	0c83      	lsrs	r3, r0, #18
 800d86a:	049b      	lsls	r3, r3, #18
 800d86c:	b19b      	cbz	r3, 800d896 <LCD__GetBPP+0x7a>
 800d86e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d872:	bf0c      	ite	eq
 800d874:	2018      	moveq	r0, #24
 800d876:	2020      	movne	r0, #32
 800d878:	4770      	bx	lr
 800d87a:	2001      	movs	r0, #1
 800d87c:	4770      	bx	lr
 800d87e:	2002      	movs	r0, #2
 800d880:	4770      	bx	lr
 800d882:	2003      	movs	r0, #3
 800d884:	4770      	bx	lr
 800d886:	2004      	movs	r0, #4
 800d888:	4770      	bx	lr
 800d88a:	2005      	movs	r0, #5
 800d88c:	4770      	bx	lr
 800d88e:	2008      	movs	r0, #8
 800d890:	4770      	bx	lr
 800d892:	2010      	movs	r0, #16
 800d894:	4770      	bx	lr
 800d896:	2012      	movs	r0, #18
 800d898:	4770      	bx	lr

0800d89a <LCD__GetBPPDevice>:
 800d89a:	b508      	push	{r3, lr}
 800d89c:	f7ff ffbe 	bl	800d81c <LCD__GetBPP>
 800d8a0:	2801      	cmp	r0, #1
 800d8a2:	d00f      	beq.n	800d8c4 <LCD__GetBPPDevice+0x2a>
 800d8a4:	1e83      	subs	r3, r0, #2
 800d8a6:	2b06      	cmp	r3, #6
 800d8a8:	d909      	bls.n	800d8be <LCD__GetBPPDevice+0x24>
 800d8aa:	f1a0 0309 	sub.w	r3, r0, #9
 800d8ae:	2b07      	cmp	r3, #7
 800d8b0:	d907      	bls.n	800d8c2 <LCD__GetBPPDevice+0x28>
 800d8b2:	3811      	subs	r0, #17
 800d8b4:	2810      	cmp	r0, #16
 800d8b6:	bf34      	ite	cc
 800d8b8:	2020      	movcc	r0, #32
 800d8ba:	2000      	movcs	r0, #0
 800d8bc:	bd08      	pop	{r3, pc}
 800d8be:	2008      	movs	r0, #8
 800d8c0:	bd08      	pop	{r3, pc}
 800d8c2:	2010      	movs	r0, #16
 800d8c4:	bd08      	pop	{r3, pc}
	...

0800d8c8 <_SetDrawMode>:
 800d8c8:	b570      	push	{r4, r5, r6, lr}
 800d8ca:	4b08      	ldr	r3, [pc, #32]	; (800d8ec <_SetDrawMode+0x24>)
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	7c1a      	ldrb	r2, [r3, #16]
 800d8d0:	ea80 0102 	eor.w	r1, r0, r2
 800d8d4:	0749      	lsls	r1, r1, #29
 800d8d6:	d505      	bpl.n	800d8e4 <_SetDrawMode+0x1c>
 800d8d8:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800d8da:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d8dc:	6826      	ldr	r6, [r4, #0]
 800d8de:	680d      	ldr	r5, [r1, #0]
 800d8e0:	6025      	str	r5, [r4, #0]
 800d8e2:	600e      	str	r6, [r1, #0]
 800d8e4:	7418      	strb	r0, [r3, #16]
 800d8e6:	4610      	mov	r0, r2
 800d8e8:	bd70      	pop	{r4, r5, r6, pc}
 800d8ea:	bf00      	nop
 800d8ec:	20000238 	.word	0x20000238

0800d8f0 <LCD_SetDrawMode>:
 800d8f0:	b508      	push	{r3, lr}
 800d8f2:	4b02      	ldr	r3, [pc, #8]	; (800d8fc <LCD_SetDrawMode+0xc>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	689b      	ldr	r3, [r3, #8]
 800d8f8:	4798      	blx	r3
 800d8fa:	bd08      	pop	{r3, pc}
 800d8fc:	20000210 	.word	0x20000210

0800d900 <LCD_DrawPixel>:
 800d900:	b538      	push	{r3, r4, r5, lr}
 800d902:	4b14      	ldr	r3, [pc, #80]	; (800d954 <LCD_DrawPixel+0x54>)
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	460a      	mov	r2, r1
 800d908:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 800d90c:	428a      	cmp	r2, r1
 800d90e:	4604      	mov	r4, r0
 800d910:	db1e      	blt.n	800d950 <LCD_DrawPixel+0x50>
 800d912:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 800d916:	428a      	cmp	r2, r1
 800d918:	dc1a      	bgt.n	800d950 <LCD_DrawPixel+0x50>
 800d91a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 800d91e:	4288      	cmp	r0, r1
 800d920:	db16      	blt.n	800d950 <LCD_DrawPixel+0x50>
 800d922:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 800d926:	4288      	cmp	r0, r1
 800d928:	dc12      	bgt.n	800d950 <LCD_DrawPixel+0x50>
 800d92a:	7c19      	ldrb	r1, [r3, #16]
 800d92c:	7c58      	ldrb	r0, [r3, #17]
 800d92e:	f011 0f01 	tst.w	r1, #1
 800d932:	4909      	ldr	r1, [pc, #36]	; (800d958 <LCD_DrawPixel+0x58>)
 800d934:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800d938:	d004      	beq.n	800d944 <LCD_DrawPixel+0x44>
 800d93a:	68c3      	ldr	r3, [r0, #12]
 800d93c:	4621      	mov	r1, r4
 800d93e:	69db      	ldr	r3, [r3, #28]
 800d940:	4798      	blx	r3
 800d942:	bd38      	pop	{r3, r4, r5, pc}
 800d944:	68c1      	ldr	r1, [r0, #12]
 800d946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d948:	698d      	ldr	r5, [r1, #24]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	4621      	mov	r1, r4
 800d94e:	47a8      	blx	r5
 800d950:	bd38      	pop	{r3, r4, r5, pc}
 800d952:	bf00      	nop
 800d954:	20000238 	.word	0x20000238
 800d958:	2001b2c0 	.word	0x2001b2c0

0800d95c <LCD_DrawHLine>:
 800d95c:	b538      	push	{r3, r4, r5, lr}
 800d95e:	4b10      	ldr	r3, [pc, #64]	; (800d9a0 <LCD_DrawHLine+0x44>)
 800d960:	681c      	ldr	r4, [r3, #0]
 800d962:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800d966:	4299      	cmp	r1, r3
 800d968:	460d      	mov	r5, r1
 800d96a:	db17      	blt.n	800d99c <LCD_DrawHLine+0x40>
 800d96c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800d970:	4299      	cmp	r1, r3
 800d972:	dc13      	bgt.n	800d99c <LCD_DrawHLine+0x40>
 800d974:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800d978:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d97c:	4288      	cmp	r0, r1
 800d97e:	bfa8      	it	ge
 800d980:	4601      	movge	r1, r0
 800d982:	429a      	cmp	r2, r3
 800d984:	bfb8      	it	lt
 800d986:	4613      	movlt	r3, r2
 800d988:	428b      	cmp	r3, r1
 800d98a:	db07      	blt.n	800d99c <LCD_DrawHLine+0x40>
 800d98c:	7c60      	ldrb	r0, [r4, #17]
 800d98e:	4a05      	ldr	r2, [pc, #20]	; (800d9a4 <LCD_DrawHLine+0x48>)
 800d990:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800d994:	68c2      	ldr	r2, [r0, #12]
 800d996:	6894      	ldr	r4, [r2, #8]
 800d998:	462a      	mov	r2, r5
 800d99a:	47a0      	blx	r4
 800d99c:	bd38      	pop	{r3, r4, r5, pc}
 800d99e:	bf00      	nop
 800d9a0:	20000238 	.word	0x20000238
 800d9a4:	2001b2c0 	.word	0x2001b2c0

0800d9a8 <LCD_DrawVLine>:
 800d9a8:	b538      	push	{r3, r4, r5, lr}
 800d9aa:	4b10      	ldr	r3, [pc, #64]	; (800d9ec <LCD_DrawVLine+0x44>)
 800d9ac:	681c      	ldr	r4, [r3, #0]
 800d9ae:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800d9b2:	4605      	mov	r5, r0
 800d9b4:	429d      	cmp	r5, r3
 800d9b6:	4610      	mov	r0, r2
 800d9b8:	db17      	blt.n	800d9ea <LCD_DrawVLine+0x42>
 800d9ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9be:	429d      	cmp	r5, r3
 800d9c0:	dc13      	bgt.n	800d9ea <LCD_DrawVLine+0x42>
 800d9c2:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800d9c6:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800d9ca:	4291      	cmp	r1, r2
 800d9cc:	bfa8      	it	ge
 800d9ce:	460a      	movge	r2, r1
 800d9d0:	4298      	cmp	r0, r3
 800d9d2:	bfb8      	it	lt
 800d9d4:	4603      	movlt	r3, r0
 800d9d6:	4293      	cmp	r3, r2
 800d9d8:	db07      	blt.n	800d9ea <LCD_DrawVLine+0x42>
 800d9da:	7c60      	ldrb	r0, [r4, #17]
 800d9dc:	4904      	ldr	r1, [pc, #16]	; (800d9f0 <LCD_DrawVLine+0x48>)
 800d9de:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800d9e2:	68c1      	ldr	r1, [r0, #12]
 800d9e4:	68cc      	ldr	r4, [r1, #12]
 800d9e6:	4629      	mov	r1, r5
 800d9e8:	47a0      	blx	r4
 800d9ea:	bd38      	pop	{r3, r4, r5, pc}
 800d9ec:	20000238 	.word	0x20000238
 800d9f0:	2001b2c0 	.word	0x2001b2c0

0800d9f4 <LCD_FillRect>:
 800d9f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d9f6:	460e      	mov	r6, r1
 800d9f8:	4912      	ldr	r1, [pc, #72]	; (800da44 <LCD_FillRect+0x50>)
 800d9fa:	680c      	ldr	r4, [r1, #0]
 800d9fc:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800da00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800da04:	4288      	cmp	r0, r1
 800da06:	bfa8      	it	ge
 800da08:	4601      	movge	r1, r0
 800da0a:	42aa      	cmp	r2, r5
 800da0c:	bfb8      	it	lt
 800da0e:	4615      	movlt	r5, r2
 800da10:	428d      	cmp	r5, r1
 800da12:	db14      	blt.n	800da3e <LCD_FillRect+0x4a>
 800da14:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800da18:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 800da1c:	4296      	cmp	r6, r2
 800da1e:	bfa8      	it	ge
 800da20:	4632      	movge	r2, r6
 800da22:	4283      	cmp	r3, r0
 800da24:	bfa8      	it	ge
 800da26:	4603      	movge	r3, r0
 800da28:	4293      	cmp	r3, r2
 800da2a:	db08      	blt.n	800da3e <LCD_FillRect+0x4a>
 800da2c:	7c64      	ldrb	r4, [r4, #17]
 800da2e:	4806      	ldr	r0, [pc, #24]	; (800da48 <LCD_FillRect+0x54>)
 800da30:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800da34:	68c4      	ldr	r4, [r0, #12]
 800da36:	9300      	str	r3, [sp, #0]
 800da38:	6924      	ldr	r4, [r4, #16]
 800da3a:	462b      	mov	r3, r5
 800da3c:	47a0      	blx	r4
 800da3e:	b002      	add	sp, #8
 800da40:	bd70      	pop	{r4, r5, r6, pc}
 800da42:	bf00      	nop
 800da44:	20000238 	.word	0x20000238
 800da48:	2001b2c0 	.word	0x2001b2c0

0800da4c <LCD__DrawBitmap_1bpp>:
 800da4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da50:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 800dc00 <LCD__DrawBitmap_1bpp+0x1b4>
 800da54:	b08f      	sub	sp, #60	; 0x3c
 800da56:	f8dc c000 	ldr.w	ip, [ip]
 800da5a:	9009      	str	r0, [sp, #36]	; 0x24
 800da5c:	460e      	mov	r6, r1
 800da5e:	4615      	mov	r5, r2
 800da60:	469b      	mov	fp, r3
 800da62:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800da64:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800da68:	f1bc 0f00 	cmp.w	ip, #0
 800da6c:	d00d      	beq.n	800da8a <LCD__DrawBitmap_1bpp+0x3e>
 800da6e:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800da70:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800da72:	9500      	str	r5, [sp, #0]
 800da74:	9601      	str	r6, [sp, #4]
 800da76:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800da78:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800da7a:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800da7c:	9702      	str	r7, [sp, #8]
 800da7e:	9503      	str	r5, [sp, #12]
 800da80:	9404      	str	r4, [sp, #16]
 800da82:	9605      	str	r6, [sp, #20]
 800da84:	f8dc 4000 	ldr.w	r4, [ip]
 800da88:	e053      	b.n	800db32 <LCD__DrawBitmap_1bpp+0xe6>
 800da8a:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800da8c:	9819      	ldr	r0, [sp, #100]	; 0x64
 800da8e:	ea47 0300 	orr.w	r3, r7, r0
 800da92:	2b01      	cmp	r3, #1
 800da94:	d14f      	bne.n	800db36 <LCD__DrawBitmap_1bpp+0xea>
 800da96:	4b58      	ldr	r3, [pc, #352]	; (800dbf8 <LCD__DrawBitmap_1bpp+0x1ac>)
 800da98:	6818      	ldr	r0, [r3, #0]
 800da9a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800da9e:	1a51      	subs	r1, r2, r1
 800daa0:	2900      	cmp	r1, #0
 800daa2:	dd08      	ble.n	800dab6 <LCD__DrawBitmap_1bpp+0x6a>
 800daa4:	ebc1 030b 	rsb	r3, r1, fp
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	f340 80a2 	ble.w	800dbf2 <LCD__DrawBitmap_1bpp+0x1a6>
 800daae:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800dab0:	fb07 4401 	mla	r4, r7, r1, r4
 800dab4:	e001      	b.n	800daba <LCD__DrawBitmap_1bpp+0x6e>
 800dab6:	465b      	mov	r3, fp
 800dab8:	4632      	mov	r2, r6
 800daba:	445e      	add	r6, fp
 800dabc:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 800dac0:	3e01      	subs	r6, #1
 800dac2:	1a76      	subs	r6, r6, r1
 800dac4:	2e00      	cmp	r6, #0
 800dac6:	dd03      	ble.n	800dad0 <LCD__DrawBitmap_1bpp+0x84>
 800dac8:	1b9b      	subs	r3, r3, r6
 800daca:	2b00      	cmp	r3, #0
 800dacc:	f340 8091 	ble.w	800dbf2 <LCD__DrawBitmap_1bpp+0x1a6>
 800dad0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dad2:	f9b0 600c 	ldrsh.w	r6, [r0, #12]
 800dad6:	4429      	add	r1, r5
 800dad8:	3901      	subs	r1, #1
 800dada:	1b89      	subs	r1, r1, r6
 800dadc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800dade:	2900      	cmp	r1, #0
 800dae0:	bfc8      	it	gt
 800dae2:	ebc1 0505 	rsbgt	r5, r1, r5
 800dae6:	ebc8 0106 	rsb	r1, r8, r6
 800daea:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 800daee:	42b1      	cmp	r1, r6
 800daf0:	da0c      	bge.n	800db0c <LCD__DrawBitmap_1bpp+0xc0>
 800daf2:	ebc1 0c06 	rsb	ip, r1, r6
 800daf6:	eb08 070c 	add.w	r7, r8, ip
 800dafa:	1b8e      	subs	r6, r1, r6
 800dafc:	f02c 0c07 	bic.w	ip, ip, #7
 800db00:	4435      	add	r5, r6
 800db02:	eb04 04e7 	add.w	r4, r4, r7, asr #3
 800db06:	4461      	add	r1, ip
 800db08:	f007 0807 	and.w	r8, r7, #7
 800db0c:	2d00      	cmp	r5, #0
 800db0e:	dd70      	ble.n	800dbf2 <LCD__DrawBitmap_1bpp+0x1a6>
 800db10:	7c46      	ldrb	r6, [r0, #17]
 800db12:	483a      	ldr	r0, [pc, #232]	; (800dbfc <LCD__DrawBitmap_1bpp+0x1b0>)
 800db14:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800db16:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 800db1a:	68c6      	ldr	r6, [r0, #12]
 800db1c:	9701      	str	r7, [sp, #4]
 800db1e:	9403      	str	r4, [sp, #12]
 800db20:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800db22:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800db24:	9300      	str	r3, [sp, #0]
 800db26:	9702      	str	r7, [sp, #8]
 800db28:	f8cd 8010 	str.w	r8, [sp, #16]
 800db2c:	9405      	str	r4, [sp, #20]
 800db2e:	6874      	ldr	r4, [r6, #4]
 800db30:	462b      	mov	r3, r5
 800db32:	47a0      	blx	r4
 800db34:	e05d      	b.n	800dbf2 <LCD__DrawBitmap_1bpp+0x1a6>
 800db36:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800db38:	f1c7 0708 	rsb	r7, r7, #8
 800db3c:	970c      	str	r7, [sp, #48]	; 0x30
 800db3e:	4667      	mov	r7, ip
 800db40:	45dc      	cmp	ip, fp
 800db42:	da56      	bge.n	800dbf2 <LCD__DrawBitmap_1bpp+0x1a6>
 800db44:	4b2c      	ldr	r3, [pc, #176]	; (800dbf8 <LCD__DrawBitmap_1bpp+0x1ac>)
 800db46:	9819      	ldr	r0, [sp, #100]	; 0x64
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	4430      	add	r0, r6
 800db4c:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800db50:	900a      	str	r0, [sp, #40]	; 0x28
 800db52:	1e41      	subs	r1, r0, #1
 800db54:	4291      	cmp	r1, r2
 800db56:	910b      	str	r1, [sp, #44]	; 0x2c
 800db58:	db45      	blt.n	800dbe6 <LCD__DrawBitmap_1bpp+0x19a>
 800db5a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800db5e:	429e      	cmp	r6, r3
 800db60:	dc41      	bgt.n	800dbe6 <LCD__DrawBitmap_1bpp+0x19a>
 800db62:	f04f 0800 	mov.w	r8, #0
 800db66:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800db6a:	9408      	str	r4, [sp, #32]
 800db6c:	46c2      	mov	sl, r8
 800db6e:	45aa      	cmp	sl, r5
 800db70:	da39      	bge.n	800dbe6 <LCD__DrawBitmap_1bpp+0x19a>
 800db72:	f1b8 0f00 	cmp.w	r8, #0
 800db76:	d105      	bne.n	800db84 <LCD__DrawBitmap_1bpp+0x138>
 800db78:	9a08      	ldr	r2, [sp, #32]
 800db7a:	7817      	ldrb	r7, [r2, #0]
 800db7c:	3201      	adds	r2, #1
 800db7e:	9208      	str	r2, [sp, #32]
 800db80:	f04f 0808 	mov.w	r8, #8
 800db84:	980c      	ldr	r0, [sp, #48]	; 0x30
 800db86:	991a      	ldr	r1, [sp, #104]	; 0x68
 800db88:	4a1b      	ldr	r2, [pc, #108]	; (800dbf8 <LCD__DrawBitmap_1bpp+0x1ac>)
 800db8a:	fa47 f300 	asr.w	r3, r7, r0
 800db8e:	ebc1 0808 	rsb	r8, r1, r8
 800db92:	408f      	lsls	r7, r1
 800db94:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 800db98:	b2ff      	uxtb	r7, r7
 800db9a:	d103      	bne.n	800dba4 <LCD__DrawBitmap_1bpp+0x158>
 800db9c:	6810      	ldr	r0, [r2, #0]
 800db9e:	7c00      	ldrb	r0, [r0, #16]
 800dba0:	0780      	lsls	r0, r0, #30
 800dba2:	d41b      	bmi.n	800dbdc <LCD__DrawBitmap_1bpp+0x190>
 800dba4:	6812      	ldr	r2, [r2, #0]
 800dba6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800dba8:	6810      	ldr	r0, [r2, #0]
 800dbaa:	900d      	str	r0, [sp, #52]	; 0x34
 800dbac:	981d      	ldr	r0, [sp, #116]	; 0x74
 800dbae:	b110      	cbz	r0, 800dbb6 <LCD__DrawBitmap_1bpp+0x16a>
 800dbb0:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800dbb4:	e000      	b.n	800dbb8 <LCD__DrawBitmap_1bpp+0x16c>
 800dbb6:	b2db      	uxtb	r3, r3
 800dbb8:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dbba:	6013      	str	r3, [r2, #0]
 800dbbc:	1e4a      	subs	r2, r1, #1
 800dbbe:	444a      	add	r2, r9
 800dbc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dbc2:	f8cd c01c 	str.w	ip, [sp, #28]
 800dbc6:	4648      	mov	r0, r9
 800dbc8:	4631      	mov	r1, r6
 800dbca:	f7ff ff13 	bl	800d9f4 <LCD_FillRect>
 800dbce:	4b0a      	ldr	r3, [pc, #40]	; (800dbf8 <LCD__DrawBitmap_1bpp+0x1ac>)
 800dbd0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800dbd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbda:	601a      	str	r2, [r3, #0]
 800dbdc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800dbde:	f10a 0a01 	add.w	sl, sl, #1
 800dbe2:	4499      	add	r9, r3
 800dbe4:	e7c3      	b.n	800db6e <LCD__DrawBitmap_1bpp+0x122>
 800dbe6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800dbe8:	f10c 0c01 	add.w	ip, ip, #1
 800dbec:	4434      	add	r4, r6
 800dbee:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800dbf0:	e7a6      	b.n	800db40 <LCD__DrawBitmap_1bpp+0xf4>
 800dbf2:	b00f      	add	sp, #60	; 0x3c
 800dbf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbf8:	20000238 	.word	0x20000238
 800dbfc:	2001b2c0 	.word	0x2001b2c0
 800dc00:	2001b294 	.word	0x2001b294

0800dc04 <LCD_DrawBitmap>:
 800dc04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc08:	f8df c20c 	ldr.w	ip, [pc, #524]	; 800de18 <LCD_DrawBitmap+0x214>
 800dc0c:	b091      	sub	sp, #68	; 0x44
 800dc0e:	f8dc 9000 	ldr.w	r9, [ip]
 800dc12:	9207      	str	r2, [sp, #28]
 800dc14:	4605      	mov	r5, r0
 800dc16:	4688      	mov	r8, r1
 800dc18:	469b      	mov	fp, r3
 800dc1a:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800dc1c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800dc1e:	f1b9 0f00 	cmp.w	r9, #0
 800dc22:	d00c      	beq.n	800dc3e <LCD_DrawBitmap+0x3a>
 800dc24:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800dc26:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800dc28:	9500      	str	r5, [sp, #0]
 800dc2a:	9701      	str	r7, [sp, #4]
 800dc2c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800dc2e:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800dc30:	9602      	str	r6, [sp, #8]
 800dc32:	9503      	str	r5, [sp, #12]
 800dc34:	9404      	str	r4, [sp, #16]
 800dc36:	9705      	str	r7, [sp, #20]
 800dc38:	f8d9 4000 	ldr.w	r4, [r9]
 800dc3c:	e081      	b.n	800dd42 <LCD_DrawBitmap+0x13e>
 800dc3e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800dc40:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800dc42:	ea47 0300 	orr.w	r3, r7, r0
 800dc46:	2b01      	cmp	r3, #1
 800dc48:	d17d      	bne.n	800dd46 <LCD_DrawBitmap+0x142>
 800dc4a:	4b71      	ldr	r3, [pc, #452]	; (800de10 <LCD_DrawBitmap+0x20c>)
 800dc4c:	6818      	ldr	r0, [r3, #0]
 800dc4e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800dc52:	1a53      	subs	r3, r2, r1
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	dd08      	ble.n	800dc6a <LCD_DrawBitmap+0x66>
 800dc58:	ebc3 010b 	rsb	r1, r3, fp
 800dc5c:	2900      	cmp	r1, #0
 800dc5e:	f340 80d4 	ble.w	800de0a <LCD_DrawBitmap+0x206>
 800dc62:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800dc64:	fb07 4403 	mla	r4, r7, r3, r4
 800dc68:	e001      	b.n	800dc6e <LCD_DrawBitmap+0x6a>
 800dc6a:	4659      	mov	r1, fp
 800dc6c:	4642      	mov	r2, r8
 800dc6e:	44d8      	add	r8, fp
 800dc70:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800dc74:	f108 38ff 	add.w	r8, r8, #4294967295
 800dc78:	ebc3 0808 	rsb	r8, r3, r8
 800dc7c:	f1b8 0f00 	cmp.w	r8, #0
 800dc80:	dd04      	ble.n	800dc8c <LCD_DrawBitmap+0x88>
 800dc82:	ebc8 0101 	rsb	r1, r8, r1
 800dc86:	2900      	cmp	r1, #0
 800dc88:	f340 80bf 	ble.w	800de0a <LCD_DrawBitmap+0x206>
 800dc8c:	9b07      	ldr	r3, [sp, #28]
 800dc8e:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
 800dc92:	442b      	add	r3, r5
 800dc94:	3b01      	subs	r3, #1
 800dc96:	ebcc 0303 	rsb	r3, ip, r3
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	dd02      	ble.n	800dca4 <LCD_DrawBitmap+0xa0>
 800dc9e:	9f07      	ldr	r7, [sp, #28]
 800dca0:	1aff      	subs	r7, r7, r3
 800dca2:	9707      	str	r7, [sp, #28]
 800dca4:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 800dca8:	4565      	cmp	r5, ip
 800dcaa:	da33      	bge.n	800dd14 <LCD_DrawBitmap+0x110>
 800dcac:	9f07      	ldr	r7, [sp, #28]
 800dcae:	ebc5 030c 	rsb	r3, r5, ip
 800dcb2:	1aff      	subs	r7, r7, r3
 800dcb4:	2e08      	cmp	r6, #8
 800dcb6:	9707      	str	r7, [sp, #28]
 800dcb8:	d027      	beq.n	800dd0a <LCD_DrawBitmap+0x106>
 800dcba:	dc0d      	bgt.n	800dcd8 <LCD_DrawBitmap+0xd4>
 800dcbc:	2e02      	cmp	r6, #2
 800dcbe:	d014      	beq.n	800dcea <LCD_DrawBitmap+0xe6>
 800dcc0:	2e04      	cmp	r6, #4
 800dcc2:	d01a      	beq.n	800dcfa <LCD_DrawBitmap+0xf6>
 800dcc4:	2e01      	cmp	r6, #1
 800dcc6:	d126      	bne.n	800dd16 <LCD_DrawBitmap+0x112>
 800dcc8:	f023 0c07 	bic.w	ip, r3, #7
 800dccc:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 800dcd0:	4465      	add	r5, ip
 800dcd2:	f003 0307 	and.w	r3, r3, #7
 800dcd6:	e01e      	b.n	800dd16 <LCD_DrawBitmap+0x112>
 800dcd8:	2e18      	cmp	r6, #24
 800dcda:	d018      	beq.n	800dd0e <LCD_DrawBitmap+0x10a>
 800dcdc:	2e20      	cmp	r6, #32
 800dcde:	d016      	beq.n	800dd0e <LCD_DrawBitmap+0x10a>
 800dce0:	2e10      	cmp	r6, #16
 800dce2:	d118      	bne.n	800dd16 <LCD_DrawBitmap+0x112>
 800dce4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800dce8:	e013      	b.n	800dd12 <LCD_DrawBitmap+0x10e>
 800dcea:	f023 0c03 	bic.w	ip, r3, #3
 800dcee:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 800dcf2:	4465      	add	r5, ip
 800dcf4:	f003 0303 	and.w	r3, r3, #3
 800dcf8:	e00d      	b.n	800dd16 <LCD_DrawBitmap+0x112>
 800dcfa:	f023 0c01 	bic.w	ip, r3, #1
 800dcfe:	eb04 0463 	add.w	r4, r4, r3, asr #1
 800dd02:	4465      	add	r5, ip
 800dd04:	f003 0301 	and.w	r3, r3, #1
 800dd08:	e005      	b.n	800dd16 <LCD_DrawBitmap+0x112>
 800dd0a:	441c      	add	r4, r3
 800dd0c:	e001      	b.n	800dd12 <LCD_DrawBitmap+0x10e>
 800dd0e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800dd12:	4665      	mov	r5, ip
 800dd14:	2300      	movs	r3, #0
 800dd16:	9f07      	ldr	r7, [sp, #28]
 800dd18:	2f00      	cmp	r7, #0
 800dd1a:	dd76      	ble.n	800de0a <LCD_DrawBitmap+0x206>
 800dd1c:	f890 e011 	ldrb.w	lr, [r0, #17]
 800dd20:	483c      	ldr	r0, [pc, #240]	; (800de14 <LCD_DrawBitmap+0x210>)
 800dd22:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800dd24:	f850 002e 	ldr.w	r0, [r0, lr, lsl #2]
 800dd28:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 800dd2c:	9403      	str	r4, [sp, #12]
 800dd2e:	e88d 0042 	stmia.w	sp, {r1, r6}
 800dd32:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 800dd34:	9304      	str	r3, [sp, #16]
 800dd36:	9702      	str	r7, [sp, #8]
 800dd38:	9405      	str	r4, [sp, #20]
 800dd3a:	f8de 4004 	ldr.w	r4, [lr, #4]
 800dd3e:	9b07      	ldr	r3, [sp, #28]
 800dd40:	4629      	mov	r1, r5
 800dd42:	47a0      	blx	r4
 800dd44:	e061      	b.n	800de0a <LCD_DrawBitmap+0x206>
 800dd46:	f1c6 0708 	rsb	r7, r6, #8
 800dd4a:	970e      	str	r7, [sp, #56]	; 0x38
 800dd4c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800dd50:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800dd52:	455f      	cmp	r7, fp
 800dd54:	da59      	bge.n	800de0a <LCD_DrawBitmap+0x206>
 800dd56:	4b2e      	ldr	r3, [pc, #184]	; (800de10 <LCD_DrawBitmap+0x20c>)
 800dd58:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	4447      	add	r7, r8
 800dd5e:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800dd62:	970c      	str	r7, [sp, #48]	; 0x30
 800dd64:	3f01      	subs	r7, #1
 800dd66:	4297      	cmp	r7, r2
 800dd68:	970d      	str	r7, [sp, #52]	; 0x34
 800dd6a:	db46      	blt.n	800ddfa <LCD_DrawBitmap+0x1f6>
 800dd6c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800dd70:	4598      	cmp	r8, r3
 800dd72:	dc42      	bgt.n	800ddfa <LCD_DrawBitmap+0x1f6>
 800dd74:	f04f 0a00 	mov.w	sl, #0
 800dd78:	940b      	str	r4, [sp, #44]	; 0x2c
 800dd7a:	46ac      	mov	ip, r5
 800dd7c:	4657      	mov	r7, sl
 800dd7e:	9807      	ldr	r0, [sp, #28]
 800dd80:	4287      	cmp	r7, r0
 800dd82:	da3a      	bge.n	800ddfa <LCD_DrawBitmap+0x1f6>
 800dd84:	f1ba 0f00 	cmp.w	sl, #0
 800dd88:	d106      	bne.n	800dd98 <LCD_DrawBitmap+0x194>
 800dd8a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800dd8c:	f890 9000 	ldrb.w	r9, [r0]
 800dd90:	3001      	adds	r0, #1
 800dd92:	900b      	str	r0, [sp, #44]	; 0x2c
 800dd94:	f04f 0a08 	mov.w	sl, #8
 800dd98:	990e      	ldr	r1, [sp, #56]	; 0x38
 800dd9a:	4a1d      	ldr	r2, [pc, #116]	; (800de10 <LCD_DrawBitmap+0x20c>)
 800dd9c:	fa49 f301 	asr.w	r3, r9, r1
 800dda0:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 800dda4:	fa09 f906 	lsl.w	r9, r9, r6
 800dda8:	fa5f f989 	uxtb.w	r9, r9
 800ddac:	ebc6 0a0a 	rsb	sl, r6, sl
 800ddb0:	d103      	bne.n	800ddba <LCD_DrawBitmap+0x1b6>
 800ddb2:	6810      	ldr	r0, [r2, #0]
 800ddb4:	7c00      	ldrb	r0, [r0, #16]
 800ddb6:	0780      	lsls	r0, r0, #30
 800ddb8:	d41b      	bmi.n	800ddf2 <LCD_DrawBitmap+0x1ee>
 800ddba:	6812      	ldr	r2, [r2, #0]
 800ddbc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ddbe:	6810      	ldr	r0, [r2, #0]
 800ddc0:	900f      	str	r0, [sp, #60]	; 0x3c
 800ddc2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800ddc4:	b110      	cbz	r0, 800ddcc <LCD_DrawBitmap+0x1c8>
 800ddc6:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800ddca:	e000      	b.n	800ddce <LCD_DrawBitmap+0x1ca>
 800ddcc:	b2db      	uxtb	r3, r3
 800ddce:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ddd0:	6013      	str	r3, [r2, #0]
 800ddd2:	1e4a      	subs	r2, r1, #1
 800ddd4:	4462      	add	r2, ip
 800ddd6:	4660      	mov	r0, ip
 800ddd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ddda:	f8cd c020 	str.w	ip, [sp, #32]
 800ddde:	4641      	mov	r1, r8
 800dde0:	f7ff fe08 	bl	800d9f4 <LCD_FillRect>
 800dde4:	4b0a      	ldr	r3, [pc, #40]	; (800de10 <LCD_DrawBitmap+0x20c>)
 800dde6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	f8dd c020 	ldr.w	ip, [sp, #32]
 800ddee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddf0:	601a      	str	r2, [r3, #0]
 800ddf2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ddf4:	3701      	adds	r7, #1
 800ddf6:	449c      	add	ip, r3
 800ddf8:	e7c1      	b.n	800dd7e <LCD_DrawBitmap+0x17a>
 800ddfa:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800ddfc:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800de00:	3701      	adds	r7, #1
 800de02:	970a      	str	r7, [sp, #40]	; 0x28
 800de04:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800de06:	443c      	add	r4, r7
 800de08:	e7a2      	b.n	800dd50 <LCD_DrawBitmap+0x14c>
 800de0a:	b011      	add	sp, #68	; 0x44
 800de0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de10:	20000238 	.word	0x20000238
 800de14:	2001b2c0 	.word	0x2001b2c0
 800de18:	2001b294 	.word	0x2001b294

0800de1c <LCD_SetClipRectMax>:
 800de1c:	b508      	push	{r3, lr}
 800de1e:	4b05      	ldr	r3, [pc, #20]	; (800de34 <LCD_SetClipRectMax+0x18>)
 800de20:	6819      	ldr	r1, [r3, #0]
 800de22:	4b05      	ldr	r3, [pc, #20]	; (800de38 <LCD_SetClipRectMax+0x1c>)
 800de24:	7c4a      	ldrb	r2, [r1, #17]
 800de26:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800de2a:	68c3      	ldr	r3, [r0, #12]
 800de2c:	3108      	adds	r1, #8
 800de2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de30:	4798      	blx	r3
 800de32:	bd08      	pop	{r3, pc}
 800de34:	20000238 	.word	0x20000238
 800de38:	2001b2c0 	.word	0x2001b2c0

0800de3c <emWin_LCD_Init>:
 800de3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800de3e:	f7ff ffed 	bl	800de1c <LCD_SetClipRectMax>
 800de42:	f005 ff07 	bl	8013c54 <LCD_InitColors>
 800de46:	4604      	mov	r4, r0
 800de48:	2800      	cmp	r0, #0
 800de4a:	d13d      	bne.n	800dec8 <emWin_LCD_Init+0x8c>
 800de4c:	4605      	mov	r5, r0
 800de4e:	4628      	mov	r0, r5
 800de50:	f001 fdaa 	bl	800f9a8 <GUI_DEVICE__GetpDriver>
 800de54:	9001      	str	r0, [sp, #4]
 800de56:	b148      	cbz	r0, 800de6c <emWin_LCD_Init+0x30>
 800de58:	68c3      	ldr	r3, [r0, #12]
 800de5a:	210c      	movs	r1, #12
 800de5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de5e:	a801      	add	r0, sp, #4
 800de60:	4798      	blx	r3
 800de62:	4603      	mov	r3, r0
 800de64:	b370      	cbz	r0, 800dec4 <emWin_LCD_Init+0x88>
 800de66:	9801      	ldr	r0, [sp, #4]
 800de68:	4798      	blx	r3
 800de6a:	4304      	orrs	r4, r0
 800de6c:	3501      	adds	r5, #1
 800de6e:	2d02      	cmp	r5, #2
 800de70:	d1ed      	bne.n	800de4e <emWin_LCD_Init+0x12>
 800de72:	bb4c      	cbnz	r4, 800dec8 <emWin_LCD_Init+0x8c>
 800de74:	f005 ff0a 	bl	8013c8c <LCD_InitLUT>
 800de78:	2401      	movs	r4, #1
 800de7a:	4620      	mov	r0, r4
 800de7c:	f001 fd94 	bl	800f9a8 <GUI_DEVICE__GetpDriver>
 800de80:	9001      	str	r0, [sp, #4]
 800de82:	b1d0      	cbz	r0, 800deba <emWin_LCD_Init+0x7e>
 800de84:	4620      	mov	r0, r4
 800de86:	f001 fa03 	bl	800f290 <GUI_SelectLayer>
 800de8a:	2004      	movs	r0, #4
 800de8c:	f7ff fd30 	bl	800d8f0 <LCD_SetDrawMode>
 800de90:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800de94:	2000      	movs	r0, #0
 800de96:	4601      	mov	r1, r0
 800de98:	4613      	mov	r3, r2
 800de9a:	f7ff fdab 	bl	800d9f4 <LCD_FillRect>
 800de9e:	2000      	movs	r0, #0
 800dea0:	f7ff fd26 	bl	800d8f0 <LCD_SetDrawMode>
 800dea4:	a802      	add	r0, sp, #8
 800dea6:	210e      	movs	r1, #14
 800dea8:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 800deac:	68db      	ldr	r3, [r3, #12]
 800deae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deb0:	4798      	blx	r3
 800deb2:	4603      	mov	r3, r0
 800deb4:	b108      	cbz	r0, 800deba <emWin_LCD_Init+0x7e>
 800deb6:	9801      	ldr	r0, [sp, #4]
 800deb8:	4798      	blx	r3
 800deba:	f114 34ff 	adds.w	r4, r4, #4294967295
 800debe:	d2dc      	bcs.n	800de7a <emWin_LCD_Init+0x3e>
 800dec0:	2000      	movs	r0, #0
 800dec2:	e002      	b.n	800deca <emWin_LCD_Init+0x8e>
 800dec4:	2001      	movs	r0, #1
 800dec6:	e000      	b.n	800deca <emWin_LCD_Init+0x8e>
 800dec8:	4620      	mov	r0, r4
 800deca:	b003      	add	sp, #12
 800decc:	bd30      	pop	{r4, r5, pc}
	...

0800ded0 <LCD_Color2Index>:
 800ded0:	b508      	push	{r3, lr}
 800ded2:	4b05      	ldr	r3, [pc, #20]	; (800dee8 <LCD_Color2Index+0x18>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	7c5a      	ldrb	r2, [r3, #17]
 800ded8:	4b04      	ldr	r3, [pc, #16]	; (800deec <LCD_Color2Index+0x1c>)
 800deda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dede:	691b      	ldr	r3, [r3, #16]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	4798      	blx	r3
 800dee4:	bd08      	pop	{r3, pc}
 800dee6:	bf00      	nop
 800dee8:	20000238 	.word	0x20000238
 800deec:	2001b2c0 	.word	0x2001b2c0

0800def0 <LCD_Index2Color>:
 800def0:	b508      	push	{r3, lr}
 800def2:	4b05      	ldr	r3, [pc, #20]	; (800df08 <LCD_Index2Color+0x18>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	7c5a      	ldrb	r2, [r3, #17]
 800def8:	4b04      	ldr	r3, [pc, #16]	; (800df0c <LCD_Index2Color+0x1c>)
 800defa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800defe:	691b      	ldr	r3, [r3, #16]
 800df00:	685b      	ldr	r3, [r3, #4]
 800df02:	4798      	blx	r3
 800df04:	bd08      	pop	{r3, pc}
 800df06:	bf00      	nop
 800df08:	20000238 	.word	0x20000238
 800df0c:	2001b2c0 	.word	0x2001b2c0

0800df10 <LCD_SetColorIndex>:
 800df10:	4b04      	ldr	r3, [pc, #16]	; (800df24 <LCD_SetColorIndex+0x14>)
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	7c1a      	ldrb	r2, [r3, #16]
 800df16:	0752      	lsls	r2, r2, #29
 800df18:	bf4c      	ite	mi
 800df1a:	6b9b      	ldrmi	r3, [r3, #56]	; 0x38
 800df1c:	6bdb      	ldrpl	r3, [r3, #60]	; 0x3c
 800df1e:	6018      	str	r0, [r3, #0]
 800df20:	4770      	bx	lr
 800df22:	bf00      	nop
 800df24:	20000238 	.word	0x20000238

0800df28 <_SetColor>:
 800df28:	b508      	push	{r3, lr}
 800df2a:	4b06      	ldr	r3, [pc, #24]	; (800df44 <_SetColor+0x1c>)
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800df30:	4281      	cmp	r1, r0
 800df32:	d006      	beq.n	800df42 <_SetColor+0x1a>
 800df34:	6318      	str	r0, [r3, #48]	; 0x30
 800df36:	f7ff ffcb 	bl	800ded0 <LCD_Color2Index>
 800df3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800df3e:	f7ff bfe7 	b.w	800df10 <LCD_SetColorIndex>
 800df42:	bd08      	pop	{r3, pc}
 800df44:	20000238 	.word	0x20000238

0800df48 <LCD_SetBkColorIndex>:
 800df48:	4b04      	ldr	r3, [pc, #16]	; (800df5c <LCD_SetBkColorIndex+0x14>)
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	7c1a      	ldrb	r2, [r3, #16]
 800df4e:	0752      	lsls	r2, r2, #29
 800df50:	bf4c      	ite	mi
 800df52:	6bdb      	ldrmi	r3, [r3, #60]	; 0x3c
 800df54:	6b9b      	ldrpl	r3, [r3, #56]	; 0x38
 800df56:	6018      	str	r0, [r3, #0]
 800df58:	4770      	bx	lr
 800df5a:	bf00      	nop
 800df5c:	20000238 	.word	0x20000238

0800df60 <_SetBkColor>:
 800df60:	b508      	push	{r3, lr}
 800df62:	4b06      	ldr	r3, [pc, #24]	; (800df7c <_SetBkColor+0x1c>)
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800df68:	4281      	cmp	r1, r0
 800df6a:	d006      	beq.n	800df7a <_SetBkColor+0x1a>
 800df6c:	6358      	str	r0, [r3, #52]	; 0x34
 800df6e:	f7ff ffaf 	bl	800ded0 <LCD_Color2Index>
 800df72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800df76:	f7ff bfe7 	b.w	800df48 <LCD_SetBkColorIndex>
 800df7a:	bd08      	pop	{r3, pc}
 800df7c:	20000238 	.word	0x20000238

0800df80 <LCD_SetBkColor>:
 800df80:	b508      	push	{r3, lr}
 800df82:	4b02      	ldr	r3, [pc, #8]	; (800df8c <LCD_SetBkColor+0xc>)
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	685b      	ldr	r3, [r3, #4]
 800df88:	4798      	blx	r3
 800df8a:	bd08      	pop	{r3, pc}
 800df8c:	20000210 	.word	0x20000210

0800df90 <LCD_SetColor>:
 800df90:	b508      	push	{r3, lr}
 800df92:	4b02      	ldr	r3, [pc, #8]	; (800df9c <LCD_SetColor+0xc>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	4798      	blx	r3
 800df9a:	bd08      	pop	{r3, pc}
 800df9c:	20000210 	.word	0x20000210

0800dfa0 <GUI__memset16>:
 800dfa0:	b570      	push	{r4, r5, r6, lr}
 800dfa2:	0784      	lsls	r4, r0, #30
 800dfa4:	d502      	bpl.n	800dfac <GUI__memset16+0xc>
 800dfa6:	8001      	strh	r1, [r0, #0]
 800dfa8:	3a01      	subs	r2, #1
 800dfaa:	3002      	adds	r0, #2
 800dfac:	0855      	lsrs	r5, r2, #1
 800dfae:	462b      	mov	r3, r5
 800dfb0:	b305      	cbz	r5, 800dff4 <GUI__memset16+0x54>
 800dfb2:	2d03      	cmp	r5, #3
 800dfb4:	eb01 4401 	add.w	r4, r1, r1, lsl #16
 800dfb8:	dc02      	bgt.n	800dfc0 <GUI__memset16+0x20>
 800dfba:	4606      	mov	r6, r0
 800dfbc:	461d      	mov	r5, r3
 800dfbe:	e012      	b.n	800dfe6 <GUI__memset16+0x46>
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	462e      	mov	r6, r5
 800dfc4:	3e04      	subs	r6, #4
 800dfc6:	2e03      	cmp	r6, #3
 800dfc8:	601c      	str	r4, [r3, #0]
 800dfca:	605c      	str	r4, [r3, #4]
 800dfcc:	609c      	str	r4, [r3, #8]
 800dfce:	60dc      	str	r4, [r3, #12]
 800dfd0:	f103 0310 	add.w	r3, r3, #16
 800dfd4:	dcf6      	bgt.n	800dfc4 <GUI__memset16+0x24>
 800dfd6:	3d04      	subs	r5, #4
 800dfd8:	08ab      	lsrs	r3, r5, #2
 800dfda:	1c5e      	adds	r6, r3, #1
 800dfdc:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 800dfe0:	eba5 0383 	sub.w	r3, r5, r3, lsl #2
 800dfe4:	e7e9      	b.n	800dfba <GUI__memset16+0x1a>
 800dfe6:	b11d      	cbz	r5, 800dff0 <GUI__memset16+0x50>
 800dfe8:	f846 4b04 	str.w	r4, [r6], #4
 800dfec:	3d01      	subs	r5, #1
 800dfee:	e7fa      	b.n	800dfe6 <GUI__memset16+0x46>
 800dff0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800dff4:	07d3      	lsls	r3, r2, #31
 800dff6:	bf48      	it	mi
 800dff8:	8001      	strhmi	r1, [r0, #0]
 800dffa:	bd70      	pop	{r4, r5, r6, pc}

0800dffc <GUI__memset>:
 800dffc:	b570      	push	{r4, r5, r6, lr}
 800dffe:	b12a      	cbz	r2, 800e00c <GUI__memset+0x10>
 800e000:	0783      	lsls	r3, r0, #30
 800e002:	d003      	beq.n	800e00c <GUI__memset+0x10>
 800e004:	f800 1b01 	strb.w	r1, [r0], #1
 800e008:	3a01      	subs	r2, #1
 800e00a:	e7f8      	b.n	800dffe <GUI__memset+0x2>
 800e00c:	0893      	lsrs	r3, r2, #2
 800e00e:	d101      	bne.n	800e014 <GUI__memset+0x18>
 800e010:	4402      	add	r2, r0
 800e012:	e017      	b.n	800e044 <GUI__memset+0x48>
 800e014:	f04f 3401 	mov.w	r4, #16843009	; 0x1010101
 800e018:	f002 0203 	and.w	r2, r2, #3
 800e01c:	434c      	muls	r4, r1
 800e01e:	2b03      	cmp	r3, #3
 800e020:	4605      	mov	r5, r0
 800e022:	dd06      	ble.n	800e032 <GUI__memset+0x36>
 800e024:	6004      	str	r4, [r0, #0]
 800e026:	6044      	str	r4, [r0, #4]
 800e028:	6084      	str	r4, [r0, #8]
 800e02a:	60c4      	str	r4, [r0, #12]
 800e02c:	3b04      	subs	r3, #4
 800e02e:	3010      	adds	r0, #16
 800e030:	e7f5      	b.n	800e01e <GUI__memset+0x22>
 800e032:	461e      	mov	r6, r3
 800e034:	b11b      	cbz	r3, 800e03e <GUI__memset+0x42>
 800e036:	f845 4b04 	str.w	r4, [r5], #4
 800e03a:	3b01      	subs	r3, #1
 800e03c:	e7fa      	b.n	800e034 <GUI__memset+0x38>
 800e03e:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 800e042:	e7e5      	b.n	800e010 <GUI__memset+0x14>
 800e044:	4290      	cmp	r0, r2
 800e046:	d002      	beq.n	800e04e <GUI__memset+0x52>
 800e048:	f800 1b01 	strb.w	r1, [r0], #1
 800e04c:	e7fa      	b.n	800e044 <GUI__memset+0x48>
 800e04e:	bd70      	pop	{r4, r5, r6, pc}

0800e050 <GUI__SetText>:
 800e050:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e052:	6807      	ldr	r7, [r0, #0]
 800e054:	4605      	mov	r5, r0
 800e056:	4638      	mov	r0, r7
 800e058:	460e      	mov	r6, r1
 800e05a:	f005 fe7d 	bl	8013d58 <GUI__strcmp_hp>
 800e05e:	b908      	cbnz	r0, 800e064 <GUI__SetText+0x14>
 800e060:	2000      	movs	r0, #0
 800e062:	e02e      	b.n	800e0c2 <GUI__SetText+0x72>
 800e064:	4630      	mov	r0, r6
 800e066:	f005 fe57 	bl	8013d18 <GUI__strlen>
 800e06a:	1c44      	adds	r4, r0, #1
 800e06c:	4638      	mov	r0, r7
 800e06e:	f003 f8df 	bl	8011230 <GUI_ALLOC_GetSize>
 800e072:	4284      	cmp	r4, r0
 800e074:	d10f      	bne.n	800e096 <GUI__SetText+0x46>
 800e076:	2c00      	cmp	r4, #0
 800e078:	d0f2      	beq.n	800e060 <GUI__SetText+0x10>
 800e07a:	4638      	mov	r0, r7
 800e07c:	f003 f8aa 	bl	80111d4 <GUI_ALLOC_LockH>
 800e080:	ad02      	add	r5, sp, #8
 800e082:	4631      	mov	r1, r6
 800e084:	f845 0d04 	str.w	r0, [r5, #-4]!
 800e088:	4622      	mov	r2, r4
 800e08a:	f007 fae2 	bl	8015652 <memcpy>
 800e08e:	4628      	mov	r0, r5
 800e090:	f003 f8ae 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800e094:	e014      	b.n	800e0c0 <GUI__SetText+0x70>
 800e096:	4620      	mov	r0, r4
 800e098:	f003 faf0 	bl	801167c <GUI_ALLOC_AllocNoInit>
 800e09c:	4607      	mov	r7, r0
 800e09e:	2800      	cmp	r0, #0
 800e0a0:	d0de      	beq.n	800e060 <GUI__SetText+0x10>
 800e0a2:	f003 f897 	bl	80111d4 <GUI_ALLOC_LockH>
 800e0a6:	ac02      	add	r4, sp, #8
 800e0a8:	4631      	mov	r1, r6
 800e0aa:	f844 0d04 	str.w	r0, [r4, #-4]!
 800e0ae:	f007 fbd5 	bl	801585c <strcpy>
 800e0b2:	4620      	mov	r0, r4
 800e0b4:	f003 f89c 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800e0b8:	4628      	mov	r0, r5
 800e0ba:	f003 fae3 	bl	8011684 <GUI_ALLOC_FreePtr>
 800e0be:	602f      	str	r7, [r5, #0]
 800e0c0:	2001      	movs	r0, #1
 800e0c2:	b003      	add	sp, #12
 800e0c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e0c6 <GUI__ReduceRect>:
 800e0c6:	880b      	ldrh	r3, [r1, #0]
 800e0c8:	b292      	uxth	r2, r2
 800e0ca:	4413      	add	r3, r2
 800e0cc:	8003      	strh	r3, [r0, #0]
 800e0ce:	888b      	ldrh	r3, [r1, #4]
 800e0d0:	1a9b      	subs	r3, r3, r2
 800e0d2:	8083      	strh	r3, [r0, #4]
 800e0d4:	884b      	ldrh	r3, [r1, #2]
 800e0d6:	4413      	add	r3, r2
 800e0d8:	8043      	strh	r3, [r0, #2]
 800e0da:	88cb      	ldrh	r3, [r1, #6]
 800e0dc:	1a9a      	subs	r2, r3, r2
 800e0de:	80c2      	strh	r2, [r0, #6]
 800e0e0:	4770      	bx	lr
	...

0800e0e4 <GUI__ManageCacheEx>:
 800e0e4:	2801      	cmp	r0, #1
 800e0e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e0e8:	4604      	mov	r4, r0
 800e0ea:	460d      	mov	r5, r1
 800e0ec:	dc65      	bgt.n	800e1ba <GUI__ManageCacheEx+0xd6>
 800e0ee:	4b34      	ldr	r3, [pc, #208]	; (800e1c0 <GUI__ManageCacheEx+0xdc>)
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	b103      	cbz	r3, 800e0f6 <GUI__ManageCacheEx+0x12>
 800e0f4:	4798      	blx	r3
 800e0f6:	2d01      	cmp	r5, #1
 800e0f8:	d004      	beq.n	800e104 <GUI__ManageCacheEx+0x20>
 800e0fa:	2d02      	cmp	r5, #2
 800e0fc:	d021      	beq.n	800e142 <GUI__ManageCacheEx+0x5e>
 800e0fe:	2d00      	cmp	r5, #0
 800e100:	d15b      	bne.n	800e1ba <GUI__ManageCacheEx+0xd6>
 800e102:	e035      	b.n	800e170 <GUI__ManageCacheEx+0x8c>
 800e104:	4e2f      	ldr	r6, [pc, #188]	; (800e1c4 <GUI__ManageCacheEx+0xe0>)
 800e106:	f856 7024 	ldr.w	r7, [r6, r4, lsl #2]
 800e10a:	b9b7      	cbnz	r7, 800e13a <GUI__ManageCacheEx+0x56>
 800e10c:	4620      	mov	r0, r4
 800e10e:	f001 fc4b 	bl	800f9a8 <GUI_DEVICE__GetpDriver>
 800e112:	9001      	str	r0, [sp, #4]
 800e114:	2800      	cmp	r0, #0
 800e116:	d050      	beq.n	800e1ba <GUI__ManageCacheEx+0xd6>
 800e118:	68c3      	ldr	r3, [r0, #12]
 800e11a:	210d      	movs	r1, #13
 800e11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e11e:	a801      	add	r0, sp, #4
 800e120:	4798      	blx	r3
 800e122:	4603      	mov	r3, r0
 800e124:	2800      	cmp	r0, #0
 800e126:	d048      	beq.n	800e1ba <GUI__ManageCacheEx+0xd6>
 800e128:	9801      	ldr	r0, [sp, #4]
 800e12a:	4629      	mov	r1, r5
 800e12c:	4798      	blx	r3
 800e12e:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800e132:	3301      	adds	r3, #1
 800e134:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
 800e138:	e018      	b.n	800e16c <GUI__ManageCacheEx+0x88>
 800e13a:	3701      	adds	r7, #1
 800e13c:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
 800e140:	e03b      	b.n	800e1ba <GUI__ManageCacheEx+0xd6>
 800e142:	4620      	mov	r0, r4
 800e144:	f001 fc30 	bl	800f9a8 <GUI_DEVICE__GetpDriver>
 800e148:	9001      	str	r0, [sp, #4]
 800e14a:	2800      	cmp	r0, #0
 800e14c:	d035      	beq.n	800e1ba <GUI__ManageCacheEx+0xd6>
 800e14e:	68c3      	ldr	r3, [r0, #12]
 800e150:	210d      	movs	r1, #13
 800e152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e154:	a801      	add	r0, sp, #4
 800e156:	4798      	blx	r3
 800e158:	4604      	mov	r4, r0
 800e15a:	2800      	cmp	r0, #0
 800e15c:	d02d      	beq.n	800e1ba <GUI__ManageCacheEx+0xd6>
 800e15e:	4b1a      	ldr	r3, [pc, #104]	; (800e1c8 <GUI__ManageCacheEx+0xe4>)
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	b103      	cbz	r3, 800e166 <GUI__ManageCacheEx+0x82>
 800e164:	4798      	blx	r3
 800e166:	9801      	ldr	r0, [sp, #4]
 800e168:	2102      	movs	r1, #2
 800e16a:	47a0      	blx	r4
 800e16c:	2000      	movs	r0, #0
 800e16e:	e025      	b.n	800e1bc <GUI__ManageCacheEx+0xd8>
 800e170:	4d14      	ldr	r5, [pc, #80]	; (800e1c4 <GUI__ManageCacheEx+0xe0>)
 800e172:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800e176:	2b01      	cmp	r3, #1
 800e178:	d001      	beq.n	800e17e <GUI__ManageCacheEx+0x9a>
 800e17a:	2001      	movs	r0, #1
 800e17c:	e015      	b.n	800e1aa <GUI__ManageCacheEx+0xc6>
 800e17e:	4620      	mov	r0, r4
 800e180:	f001 fc12 	bl	800f9a8 <GUI_DEVICE__GetpDriver>
 800e184:	9001      	str	r0, [sp, #4]
 800e186:	2800      	cmp	r0, #0
 800e188:	d0f7      	beq.n	800e17a <GUI__ManageCacheEx+0x96>
 800e18a:	68c3      	ldr	r3, [r0, #12]
 800e18c:	210d      	movs	r1, #13
 800e18e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e190:	a801      	add	r0, sp, #4
 800e192:	4798      	blx	r3
 800e194:	4606      	mov	r6, r0
 800e196:	2800      	cmp	r0, #0
 800e198:	d0ef      	beq.n	800e17a <GUI__ManageCacheEx+0x96>
 800e19a:	4b0b      	ldr	r3, [pc, #44]	; (800e1c8 <GUI__ManageCacheEx+0xe4>)
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	b103      	cbz	r3, 800e1a2 <GUI__ManageCacheEx+0xbe>
 800e1a0:	4798      	blx	r3
 800e1a2:	9801      	ldr	r0, [sp, #4]
 800e1a4:	2100      	movs	r1, #0
 800e1a6:	47b0      	blx	r6
 800e1a8:	2000      	movs	r0, #0
 800e1aa:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	bf18      	it	ne
 800e1b2:	3b01      	subne	r3, #1
 800e1b4:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
 800e1b8:	e000      	b.n	800e1bc <GUI__ManageCacheEx+0xd8>
 800e1ba:	2001      	movs	r0, #1
 800e1bc:	b003      	add	sp, #12
 800e1be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1c0:	20019440 	.word	0x20019440
 800e1c4:	20019438 	.word	0x20019438
 800e1c8:	20019434 	.word	0x20019434

0800e1cc <GUI__ManageCache>:
 800e1cc:	4b02      	ldr	r3, [pc, #8]	; (800e1d8 <GUI__ManageCache+0xc>)
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	4601      	mov	r1, r0
 800e1d2:	7c58      	ldrb	r0, [r3, #17]
 800e1d4:	f7ff bf86 	b.w	800e0e4 <GUI__ManageCacheEx>
 800e1d8:	20000238 	.word	0x20000238

0800e1dc <GUI__IntersectRects>:
 800e1dc:	b570      	push	{r4, r5, r6, lr}
 800e1de:	f9b2 3000 	ldrsh.w	r3, [r2]
 800e1e2:	f9b1 4000 	ldrsh.w	r4, [r1]
 800e1e6:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800e1ea:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
 800e1ee:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 800e1f2:	429c      	cmp	r4, r3
 800e1f4:	bfb8      	it	lt
 800e1f6:	461c      	movlt	r4, r3
 800e1f8:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800e1fc:	429d      	cmp	r5, r3
 800e1fe:	bfa8      	it	ge
 800e200:	462b      	movge	r3, r5
 800e202:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 800e206:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800e20a:	42ae      	cmp	r6, r5
 800e20c:	bfb8      	it	lt
 800e20e:	4635      	movlt	r5, r6
 800e210:	b2a4      	uxth	r4, r4
 800e212:	b2ad      	uxth	r5, r5
 800e214:	4291      	cmp	r1, r2
 800e216:	bfb8      	it	lt
 800e218:	460a      	movlt	r2, r1
 800e21a:	8004      	strh	r4, [r0, #0]
 800e21c:	8085      	strh	r5, [r0, #4]
 800e21e:	b224      	sxth	r4, r4
 800e220:	b22d      	sxth	r5, r5
 800e222:	b29b      	uxth	r3, r3
 800e224:	b292      	uxth	r2, r2
 800e226:	42a5      	cmp	r5, r4
 800e228:	8043      	strh	r3, [r0, #2]
 800e22a:	80c2      	strh	r2, [r0, #6]
 800e22c:	db06      	blt.n	800e23c <GUI__IntersectRects+0x60>
 800e22e:	b210      	sxth	r0, r2
 800e230:	b21b      	sxth	r3, r3
 800e232:	4298      	cmp	r0, r3
 800e234:	bfb4      	ite	lt
 800e236:	2000      	movlt	r0, #0
 800e238:	2001      	movge	r0, #1
 800e23a:	bd70      	pop	{r4, r5, r6, pc}
 800e23c:	2000      	movs	r0, #0
 800e23e:	bd70      	pop	{r4, r5, r6, pc}

0800e240 <GUI__IntersectRect>:
 800e240:	880b      	ldrh	r3, [r1, #0]
 800e242:	b510      	push	{r4, lr}
 800e244:	f9b0 4000 	ldrsh.w	r4, [r0]
 800e248:	b21a      	sxth	r2, r3
 800e24a:	4294      	cmp	r4, r2
 800e24c:	bfb8      	it	lt
 800e24e:	8003      	strhlt	r3, [r0, #0]
 800e250:	884b      	ldrh	r3, [r1, #2]
 800e252:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800e256:	b21a      	sxth	r2, r3
 800e258:	4294      	cmp	r4, r2
 800e25a:	bfb8      	it	lt
 800e25c:	8043      	strhlt	r3, [r0, #2]
 800e25e:	888b      	ldrh	r3, [r1, #4]
 800e260:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800e264:	b21a      	sxth	r2, r3
 800e266:	4294      	cmp	r4, r2
 800e268:	bfc8      	it	gt
 800e26a:	8083      	strhgt	r3, [r0, #4]
 800e26c:	88cb      	ldrh	r3, [r1, #6]
 800e26e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800e272:	b21a      	sxth	r2, r3
 800e274:	4291      	cmp	r1, r2
 800e276:	bfc8      	it	gt
 800e278:	80c3      	strhgt	r3, [r0, #6]
 800e27a:	bd10      	pop	{r4, pc}

0800e27c <GUI__GetNumChars>:
 800e27c:	b513      	push	{r0, r1, r4, lr}
 800e27e:	9001      	str	r0, [sp, #4]
 800e280:	b130      	cbz	r0, 800e290 <GUI__GetNumChars+0x14>
 800e282:	2400      	movs	r4, #0
 800e284:	a801      	add	r0, sp, #4
 800e286:	f000 fa83 	bl	800e790 <GUI_UC__GetCharCodeInc>
 800e28a:	b110      	cbz	r0, 800e292 <GUI__GetNumChars+0x16>
 800e28c:	3401      	adds	r4, #1
 800e28e:	e7f9      	b.n	800e284 <GUI__GetNumChars+0x8>
 800e290:	4604      	mov	r4, r0
 800e292:	4620      	mov	r0, r4
 800e294:	b002      	add	sp, #8
 800e296:	bd10      	pop	{r4, pc}

0800e298 <_GetCursorPosX>:
 800e298:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e29a:	4615      	mov	r5, r2
 800e29c:	9001      	str	r0, [sp, #4]
 800e29e:	2400      	movs	r4, #0
 800e2a0:	b13d      	cbz	r5, 800e2b2 <_GetCursorPosX+0x1a>
 800e2a2:	a801      	add	r0, sp, #4
 800e2a4:	f000 fa74 	bl	800e790 <GUI_UC__GetCharCodeInc>
 800e2a8:	f001 ffc4 	bl	8010234 <GUI_GetCharDistX>
 800e2ac:	3d01      	subs	r5, #1
 800e2ae:	4404      	add	r4, r0
 800e2b0:	e7f6      	b.n	800e2a0 <_GetCursorPosX+0x8>
 800e2b2:	4620      	mov	r0, r4
 800e2b4:	b003      	add	sp, #12
 800e2b6:	bd30      	pop	{r4, r5, pc}

0800e2b8 <_GetCursorCharacter>:
 800e2b8:	b538      	push	{r3, r4, r5, lr}
 800e2ba:	4604      	mov	r4, r0
 800e2bc:	b10b      	cbz	r3, 800e2c2 <_GetCursorCharacter+0xa>
 800e2be:	2200      	movs	r2, #0
 800e2c0:	601a      	str	r2, [r3, #0]
 800e2c2:	460d      	mov	r5, r1
 800e2c4:	b13d      	cbz	r5, 800e2d6 <_GetCursorCharacter+0x1e>
 800e2c6:	4b06      	ldr	r3, [pc, #24]	; (800e2e0 <_GetCursorCharacter+0x28>)
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	4620      	mov	r0, r4
 800e2cc:	685b      	ldr	r3, [r3, #4]
 800e2ce:	4798      	blx	r3
 800e2d0:	3d01      	subs	r5, #1
 800e2d2:	4404      	add	r4, r0
 800e2d4:	e7f6      	b.n	800e2c4 <_GetCursorCharacter+0xc>
 800e2d6:	4620      	mov	r0, r4
 800e2d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2dc:	f000 ba40 	b.w	800e760 <GUI_UC_GetCharCode>
 800e2e0:	2001b2b8 	.word	0x2001b2b8

0800e2e4 <_GetCursorPosChar>:
 800e2e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2e8:	4607      	mov	r7, r0
 800e2ea:	460d      	mov	r5, r1
 800e2ec:	4690      	mov	r8, r2
 800e2ee:	4604      	mov	r4, r0
 800e2f0:	2600      	movs	r6, #0
 800e2f2:	3d01      	subs	r5, #1
 800e2f4:	2d00      	cmp	r5, #0
 800e2f6:	dd09      	ble.n	800e30c <_GetCursorPosChar+0x28>
 800e2f8:	4620      	mov	r0, r4
 800e2fa:	f000 fa31 	bl	800e760 <GUI_UC_GetCharCode>
 800e2fe:	4681      	mov	r9, r0
 800e300:	f001 ff98 	bl	8010234 <GUI_GetCharDistX>
 800e304:	4406      	add	r6, r0
 800e306:	f1b9 0f00 	cmp.w	r9, #0
 800e30a:	d105      	bne.n	800e318 <_GetCursorPosChar+0x34>
 800e30c:	4638      	mov	r0, r7
 800e30e:	1be1      	subs	r1, r4, r7
 800e310:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e314:	f000 ba62 	b.w	800e7dc <GUI_UC__NumBytes2NumChars>
 800e318:	4546      	cmp	r6, r8
 800e31a:	dcf7      	bgt.n	800e30c <_GetCursorPosChar+0x28>
 800e31c:	4620      	mov	r0, r4
 800e31e:	f000 fa17 	bl	800e750 <GUI_UC_GetCharSize>
 800e322:	4404      	add	r4, r0
 800e324:	e7e5      	b.n	800e2f2 <_GetCursorPosChar+0xe>
	...

0800e328 <GUI__GetCursorPosX>:
 800e328:	b510      	push	{r4, lr}
 800e32a:	4b03      	ldr	r3, [pc, #12]	; (800e338 <GUI__GetCursorPosX+0x10>)
 800e32c:	460c      	mov	r4, r1
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	4611      	mov	r1, r2
 800e332:	4622      	mov	r2, r4
 800e334:	4798      	blx	r3
 800e336:	bd10      	pop	{r4, pc}
 800e338:	2000021c 	.word	0x2000021c

0800e33c <GUI__GetCursorPosChar>:
 800e33c:	b510      	push	{r4, lr}
 800e33e:	4b03      	ldr	r3, [pc, #12]	; (800e34c <GUI__GetCursorPosChar+0x10>)
 800e340:	460c      	mov	r4, r1
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	4611      	mov	r1, r2
 800e346:	4622      	mov	r2, r4
 800e348:	4798      	blx	r3
 800e34a:	bd10      	pop	{r4, pc}
 800e34c:	20000214 	.word	0x20000214

0800e350 <GUI__GetCursorCharacter>:
 800e350:	b510      	push	{r4, lr}
 800e352:	4c02      	ldr	r4, [pc, #8]	; (800e35c <GUI__GetCursorCharacter+0xc>)
 800e354:	6824      	ldr	r4, [r4, #0]
 800e356:	47a0      	blx	r4
 800e358:	bd10      	pop	{r4, pc}
 800e35a:	bf00      	nop
 800e35c:	20000218 	.word	0x20000218

0800e360 <GUI__CalcTextRect>:
 800e360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e364:	460c      	mov	r4, r1
 800e366:	4615      	mov	r5, r2
 800e368:	4698      	mov	r8, r3
 800e36a:	2800      	cmp	r0, #0
 800e36c:	d03b      	beq.n	800e3e6 <GUI__CalcTextRect+0x86>
 800e36e:	f001 f93d 	bl	800f5ec <GUI_GetStringDistX>
 800e372:	f008 0203 	and.w	r2, r8, #3
 800e376:	2a01      	cmp	r2, #1
 800e378:	4607      	mov	r7, r0
 800e37a:	d00c      	beq.n	800e396 <GUI__CalcTextRect+0x36>
 800e37c:	2a02      	cmp	r2, #2
 800e37e:	f9b4 6000 	ldrsh.w	r6, [r4]
 800e382:	d10c      	bne.n	800e39e <GUI__CalcTextRect+0x3e>
 800e384:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800e388:	1b9b      	subs	r3, r3, r6
 800e38a:	3301      	adds	r3, #1
 800e38c:	1a1b      	subs	r3, r3, r0
 800e38e:	fb93 f2f2 	sdiv	r2, r3, r2
 800e392:	4416      	add	r6, r2
 800e394:	e003      	b.n	800e39e <GUI__CalcTextRect+0x3e>
 800e396:	f9b4 6004 	ldrsh.w	r6, [r4, #4]
 800e39a:	1a36      	subs	r6, r6, r0
 800e39c:	3601      	adds	r6, #1
 800e39e:	f008 080c 	and.w	r8, r8, #12
 800e3a2:	f001 ff3f 	bl	8010224 <GUI_GetFontDistY>
 800e3a6:	f1b8 0f04 	cmp.w	r8, #4
 800e3aa:	d00e      	beq.n	800e3ca <GUI__CalcTextRect+0x6a>
 800e3ac:	f1b8 0f0c 	cmp.w	r8, #12
 800e3b0:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800e3b4:	d10d      	bne.n	800e3d2 <GUI__CalcTextRect+0x72>
 800e3b6:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800e3ba:	1ad2      	subs	r2, r2, r3
 800e3bc:	3201      	adds	r2, #1
 800e3be:	1a12      	subs	r2, r2, r0
 800e3c0:	2102      	movs	r1, #2
 800e3c2:	fb92 f2f1 	sdiv	r2, r2, r1
 800e3c6:	4413      	add	r3, r2
 800e3c8:	e003      	b.n	800e3d2 <GUI__CalcTextRect+0x72>
 800e3ca:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800e3ce:	1a1b      	subs	r3, r3, r0
 800e3d0:	3301      	adds	r3, #1
 800e3d2:	3f01      	subs	r7, #1
 800e3d4:	3801      	subs	r0, #1
 800e3d6:	802e      	strh	r6, [r5, #0]
 800e3d8:	806b      	strh	r3, [r5, #2]
 800e3da:	443e      	add	r6, r7
 800e3dc:	4403      	add	r3, r0
 800e3de:	80ae      	strh	r6, [r5, #4]
 800e3e0:	80eb      	strh	r3, [r5, #6]
 800e3e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3e6:	680b      	ldr	r3, [r1, #0]
 800e3e8:	6013      	str	r3, [r2, #0]
 800e3ea:	684b      	ldr	r3, [r1, #4]
 800e3ec:	6053      	str	r3, [r2, #4]
 800e3ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e3f2 <GUI__MixColors>:
 800e3f2:	f001 437f 	and.w	r3, r1, #4278190080	; 0xff000000
 800e3f6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800e3fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3fc:	d027      	beq.n	800e44e <GUI__MixColors+0x5c>
 800e3fe:	43d3      	mvns	r3, r2
 800e400:	b2db      	uxtb	r3, r3
 800e402:	b2cd      	uxtb	r5, r1
 800e404:	b2c6      	uxtb	r6, r0
 800e406:	435d      	muls	r5, r3
 800e408:	fb02 5506 	mla	r5, r2, r6, r5
 800e40c:	f401 467f 	and.w	r6, r1, #65280	; 0xff00
 800e410:	f400 447f 	and.w	r4, r0, #65280	; 0xff00
 800e414:	435e      	muls	r6, r3
 800e416:	fb02 6604 	mla	r6, r2, r4, r6
 800e41a:	f401 047f 	and.w	r4, r1, #16711680	; 0xff0000
 800e41e:	f400 077f 	and.w	r7, r0, #16711680	; 0xff0000
 800e422:	435c      	muls	r4, r3
 800e424:	0e09      	lsrs	r1, r1, #24
 800e426:	0e00      	lsrs	r0, r0, #24
 800e428:	fb02 4407 	mla	r4, r2, r7, r4
 800e42c:	434b      	muls	r3, r1
 800e42e:	0a36      	lsrs	r6, r6, #8
 800e430:	fb02 3200 	mla	r2, r2, r0, r3
 800e434:	0a24      	lsrs	r4, r4, #8
 800e436:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800e43a:	f406 407f 	and.w	r0, r6, #65280	; 0xff00
 800e43e:	4318      	orrs	r0, r3
 800e440:	0412      	lsls	r2, r2, #16
 800e442:	f404 037f 	and.w	r3, r4, #16711680	; 0xff0000
 800e446:	4318      	orrs	r0, r3
 800e448:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800e44c:	4310      	orrs	r0, r2
 800e44e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e450 <_OnExit>:
 800e450:	b570      	push	{r4, r5, r6, lr}
 800e452:	4c0a      	ldr	r4, [pc, #40]	; (800e47c <_OnExit+0x2c>)
 800e454:	4d0a      	ldr	r5, [pc, #40]	; (800e480 <_OnExit+0x30>)
 800e456:	6820      	ldr	r0, [r4, #0]
 800e458:	4e0a      	ldr	r6, [pc, #40]	; (800e484 <_OnExit+0x34>)
 800e45a:	f002 fea7 	bl	80111ac <GUI_ALLOC_FreeFixedBlock>
 800e45e:	6828      	ldr	r0, [r5, #0]
 800e460:	f002 fea4 	bl	80111ac <GUI_ALLOC_FreeFixedBlock>
 800e464:	6830      	ldr	r0, [r6, #0]
 800e466:	f002 fea1 	bl	80111ac <GUI_ALLOC_FreeFixedBlock>
 800e46a:	4a07      	ldr	r2, [pc, #28]	; (800e488 <_OnExit+0x38>)
 800e46c:	2300      	movs	r3, #0
 800e46e:	6013      	str	r3, [r2, #0]
 800e470:	4a06      	ldr	r2, [pc, #24]	; (800e48c <_OnExit+0x3c>)
 800e472:	6033      	str	r3, [r6, #0]
 800e474:	602b      	str	r3, [r5, #0]
 800e476:	6023      	str	r3, [r4, #0]
 800e478:	6013      	str	r3, [r2, #0]
 800e47a:	bd70      	pop	{r4, r5, r6, pc}
 800e47c:	20019448 	.word	0x20019448
 800e480:	20019444 	.word	0x20019444
 800e484:	2001944c 	.word	0x2001944c
 800e488:	20019450 	.word	0x20019450
 800e48c:	20019460 	.word	0x20019460

0800e490 <GUI__GetAlphaBuffer>:
 800e490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e494:	461c      	mov	r4, r3
 800e496:	4b28      	ldr	r3, [pc, #160]	; (800e538 <GUI__GetAlphaBuffer+0xa8>)
 800e498:	4617      	mov	r7, r2
 800e49a:	681a      	ldr	r2, [r3, #0]
 800e49c:	4606      	mov	r6, r0
 800e49e:	4688      	mov	r8, r1
 800e4a0:	b932      	cbnz	r2, 800e4b0 <GUI__GetAlphaBuffer+0x20>
 800e4a2:	2201      	movs	r2, #1
 800e4a4:	4825      	ldr	r0, [pc, #148]	; (800e53c <GUI__GetAlphaBuffer+0xac>)
 800e4a6:	601a      	str	r2, [r3, #0]
 800e4a8:	4b25      	ldr	r3, [pc, #148]	; (800e540 <GUI__GetAlphaBuffer+0xb0>)
 800e4aa:	6003      	str	r3, [r0, #0]
 800e4ac:	f001 fbb6 	bl	800fc1c <GUI__RegisterExit>
 800e4b0:	4d24      	ldr	r5, [pc, #144]	; (800e544 <GUI__GetAlphaBuffer+0xb4>)
 800e4b2:	682b      	ldr	r3, [r5, #0]
 800e4b4:	b933      	cbnz	r3, 800e4c4 <GUI__GetAlphaBuffer+0x34>
 800e4b6:	4b24      	ldr	r3, [pc, #144]	; (800e548 <GUI__GetAlphaBuffer+0xb8>)
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	602b      	str	r3, [r5, #0]
 800e4bc:	b913      	cbnz	r3, 800e4c4 <GUI__GetAlphaBuffer+0x34>
 800e4be:	f7ff f993 	bl	800d7e8 <LCD_GetVXSizeMax>
 800e4c2:	6028      	str	r0, [r5, #0]
 800e4c4:	b10c      	cbz	r4, 800e4ca <GUI__GetAlphaBuffer+0x3a>
 800e4c6:	682b      	ldr	r3, [r5, #0]
 800e4c8:	6023      	str	r3, [r4, #0]
 800e4ca:	b196      	cbz	r6, 800e4f2 <GUI__GetAlphaBuffer+0x62>
 800e4cc:	4b1f      	ldr	r3, [pc, #124]	; (800e54c <GUI__GetAlphaBuffer+0xbc>)
 800e4ce:	681a      	ldr	r2, [r3, #0]
 800e4d0:	4699      	mov	r9, r3
 800e4d2:	2400      	movs	r4, #0
 800e4d4:	b94a      	cbnz	r2, 800e4ea <GUI__GetAlphaBuffer+0x5a>
 800e4d6:	6828      	ldr	r0, [r5, #0]
 800e4d8:	0080      	lsls	r0, r0, #2
 800e4da:	f002 ffd3 	bl	8011484 <GUI_ALLOC_GetFixedBlock>
 800e4de:	f1d0 0401 	rsbs	r4, r0, #1
 800e4e2:	f8c9 0000 	str.w	r0, [r9]
 800e4e6:	bf38      	it	cc
 800e4e8:	2400      	movcc	r4, #0
 800e4ea:	f8d9 3000 	ldr.w	r3, [r9]
 800e4ee:	6033      	str	r3, [r6, #0]
 800e4f0:	e000      	b.n	800e4f4 <GUI__GetAlphaBuffer+0x64>
 800e4f2:	4634      	mov	r4, r6
 800e4f4:	f1b8 0f00 	cmp.w	r8, #0
 800e4f8:	d00d      	beq.n	800e516 <GUI__GetAlphaBuffer+0x86>
 800e4fa:	4e15      	ldr	r6, [pc, #84]	; (800e550 <GUI__GetAlphaBuffer+0xc0>)
 800e4fc:	6833      	ldr	r3, [r6, #0]
 800e4fe:	b93b      	cbnz	r3, 800e510 <GUI__GetAlphaBuffer+0x80>
 800e500:	6828      	ldr	r0, [r5, #0]
 800e502:	0080      	lsls	r0, r0, #2
 800e504:	f002 ffbe 	bl	8011484 <GUI_ALLOC_GetFixedBlock>
 800e508:	2800      	cmp	r0, #0
 800e50a:	6030      	str	r0, [r6, #0]
 800e50c:	bf08      	it	eq
 800e50e:	2401      	moveq	r4, #1
 800e510:	6833      	ldr	r3, [r6, #0]
 800e512:	f8c8 3000 	str.w	r3, [r8]
 800e516:	b167      	cbz	r7, 800e532 <GUI__GetAlphaBuffer+0xa2>
 800e518:	4e0e      	ldr	r6, [pc, #56]	; (800e554 <GUI__GetAlphaBuffer+0xc4>)
 800e51a:	6833      	ldr	r3, [r6, #0]
 800e51c:	b93b      	cbnz	r3, 800e52e <GUI__GetAlphaBuffer+0x9e>
 800e51e:	6828      	ldr	r0, [r5, #0]
 800e520:	0080      	lsls	r0, r0, #2
 800e522:	f002 ffaf 	bl	8011484 <GUI_ALLOC_GetFixedBlock>
 800e526:	2800      	cmp	r0, #0
 800e528:	6030      	str	r0, [r6, #0]
 800e52a:	bf08      	it	eq
 800e52c:	2401      	moveq	r4, #1
 800e52e:	6833      	ldr	r3, [r6, #0]
 800e530:	603b      	str	r3, [r7, #0]
 800e532:	4620      	mov	r0, r4
 800e534:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e538:	20019460 	.word	0x20019460
 800e53c:	20019458 	.word	0x20019458
 800e540:	0800e451 	.word	0x0800e451
 800e544:	20019450 	.word	0x20019450
 800e548:	2001b2c8 	.word	0x2001b2c8
 800e54c:	20019448 	.word	0x20019448
 800e550:	20019444 	.word	0x20019444
 800e554:	2001944c 	.word	0x2001944c

0800e558 <GUI__DoAlphaBlending>:
 800e558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e55c:	b093      	sub	sp, #76	; 0x4c
 800e55e:	2400      	movs	r4, #0
 800e560:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800e562:	900b      	str	r0, [sp, #44]	; 0x2c
 800e564:	910c      	str	r1, [sp, #48]	; 0x30
 800e566:	4690      	mov	r8, r2
 800e568:	461f      	mov	r7, r3
 800e56a:	6034      	str	r4, [r6, #0]
 800e56c:	a80f      	add	r0, sp, #60	; 0x3c
 800e56e:	a910      	add	r1, sp, #64	; 0x40
 800e570:	4622      	mov	r2, r4
 800e572:	ab11      	add	r3, sp, #68	; 0x44
 800e574:	f7ff ff8c 	bl	800e490 <GUI__GetAlphaBuffer>
 800e578:	4605      	mov	r5, r0
 800e57a:	2800      	cmp	r0, #0
 800e57c:	f040 80c3 	bne.w	800e706 <GUI__DoAlphaBlending+0x1ae>
 800e580:	4c63      	ldr	r4, [pc, #396]	; (800e710 <GUI__DoAlphaBlending+0x1b8>)
 800e582:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e584:	6823      	ldr	r3, [r4, #0]
 800e586:	7c58      	ldrb	r0, [r3, #17]
 800e588:	4b62      	ldr	r3, [pc, #392]	; (800e714 <GUI__DoAlphaBlending+0x1bc>)
 800e58a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800e58e:	9307      	str	r3, [sp, #28]
 800e590:	4297      	cmp	r7, r2
 800e592:	bfa8      	it	ge
 800e594:	4617      	movge	r7, r2
 800e596:	691a      	ldr	r2, [r3, #16]
 800e598:	920d      	str	r2, [sp, #52]	; 0x34
 800e59a:	970a      	str	r7, [sp, #40]	; 0x28
 800e59c:	f7ff f8e8 	bl	800d770 <GUI_GetBitsPerPixelEx>
 800e5a0:	6823      	ldr	r3, [r4, #0]
 800e5a2:	9008      	str	r0, [sp, #32]
 800e5a4:	7c58      	ldrb	r0, [r3, #17]
 800e5a6:	f7ff f901 	bl	800d7ac <GUI_GetpfIndex2ColorEx>
 800e5aa:	4b5b      	ldr	r3, [pc, #364]	; (800e718 <GUI__DoAlphaBlending+0x1c0>)
 800e5ac:	9004      	str	r0, [sp, #16]
 800e5ae:	4298      	cmp	r0, r3
 800e5b0:	d005      	beq.n	800e5be <GUI__DoAlphaBlending+0x66>
 800e5b2:	4b5a      	ldr	r3, [pc, #360]	; (800e71c <GUI__DoAlphaBlending+0x1c4>)
 800e5b4:	1ac3      	subs	r3, r0, r3
 800e5b6:	bf18      	it	ne
 800e5b8:	2301      	movne	r3, #1
 800e5ba:	9306      	str	r3, [sp, #24]
 800e5bc:	e000      	b.n	800e5c0 <GUI__DoAlphaBlending+0x68>
 800e5be:	9506      	str	r5, [sp, #24]
 800e5c0:	2500      	movs	r5, #0
 800e5c2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e5c4:	46ab      	mov	fp, r5
 800e5c6:	4643      	mov	r3, r8
 800e5c8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e5ca:	f853 0b04 	ldr.w	r0, [r3], #4
 800e5ce:	9305      	str	r3, [sp, #20]
 800e5d0:	4790      	blx	r2
 800e5d2:	0e03      	lsrs	r3, r0, #24
 800e5d4:	4681      	mov	r9, r0
 800e5d6:	9309      	str	r3, [sp, #36]	; 0x24
 800e5d8:	f000 8085 	beq.w	800e6e6 <GUI__DoAlphaBlending+0x18e>
 800e5dc:	f1bb 0f00 	cmp.w	fp, #0
 800e5e0:	d13f      	bne.n	800e662 <GUI__DoAlphaBlending+0x10a>
 800e5e2:	4b4b      	ldr	r3, [pc, #300]	; (800e710 <GUI__DoAlphaBlending+0x1b8>)
 800e5e4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e5ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e5ee:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 800e5f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e5f4:	442f      	add	r7, r5
 800e5f6:	42bb      	cmp	r3, r7
 800e5f8:	bfc8      	it	gt
 800e5fa:	ebc7 0b03 	rsbgt	fp, r7, r3
 800e5fe:	eb0b 0a05 	add.w	sl, fp, r5
 800e602:	bfc8      	it	gt
 800e604:	461f      	movgt	r7, r3
 800e606:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e608:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800e60c:	4453      	add	r3, sl
 800e60e:	4494      	add	ip, r2
 800e610:	9300      	str	r3, [sp, #0]
 800e612:	9b07      	ldr	r3, [sp, #28]
 800e614:	9301      	str	r3, [sp, #4]
 800e616:	f10c 32ff 	add.w	r2, ip, #4294967295
 800e61a:	4638      	mov	r0, r7
 800e61c:	460b      	mov	r3, r1
 800e61e:	f8cd c00c 	str.w	ip, [sp, #12]
 800e622:	f005 fadd 	bl	8013be0 <GUI_ReadRectEx>
 800e626:	9a08      	ldr	r2, [sp, #32]
 800e628:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800e62a:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800e62e:	2a17      	cmp	r2, #23
 800e630:	dc06      	bgt.n	800e640 <GUI__DoAlphaBlending+0xe8>
 800e632:	4450      	add	r0, sl
 800e634:	ebcb 0104 	rsb	r1, fp, r4
 800e638:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e63a:	f005 fc58 	bl	8013eee <GUI__ExpandPixelIndicesEx>
 800e63e:	e001      	b.n	800e644 <GUI__DoAlphaBlending+0xec>
 800e640:	9b06      	ldr	r3, [sp, #24]
 800e642:	b913      	cbnz	r3, 800e64a <GUI__DoAlphaBlending+0xf2>
 800e644:	f04f 0b01 	mov.w	fp, #1
 800e648:	e00b      	b.n	800e662 <GUI__DoAlphaBlending+0x10a>
 800e64a:	ebc7 070c 	rsb	r7, r7, ip
 800e64e:	4482      	add	sl, r0
 800e650:	f8da 0000 	ldr.w	r0, [sl]
 800e654:	9a04      	ldr	r2, [sp, #16]
 800e656:	4790      	blx	r2
 800e658:	3f01      	subs	r7, #1
 800e65a:	f84a 0b04 	str.w	r0, [sl], #4
 800e65e:	d1f7      	bne.n	800e650 <GUI__DoAlphaBlending+0xf8>
 800e660:	e7f0      	b.n	800e644 <GUI__DoAlphaBlending+0xec>
 800e662:	4b2f      	ldr	r3, [pc, #188]	; (800e720 <GUI__DoAlphaBlending+0x1c8>)
 800e664:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e666:	f8d3 c000 	ldr.w	ip, [r3]
 800e66a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800e66c:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 800e670:	f1bc 0f00 	cmp.w	ip, #0
 800e674:	d024      	beq.n	800e6c0 <GUI__DoAlphaBlending+0x168>
 800e676:	eb07 020a 	add.w	r2, r7, sl
 800e67a:	4451      	add	r1, sl
 800e67c:	9210      	str	r2, [sp, #64]	; 0x40
 800e67e:	4623      	mov	r3, r4
 800e680:	910f      	str	r1, [sp, #60]	; 0x3c
 800e682:	4640      	mov	r0, r8
 800e684:	47e0      	blx	ip
 800e686:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e688:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e68a:	2300      	movs	r3, #0
 800e68c:	f858 1003 	ldr.w	r1, [r8, r3]
 800e690:	f001 407f 	and.w	r0, r1, #4278190080	; 0xff000000
 800e694:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 800e698:	58e8      	ldr	r0, [r5, r3]
 800e69a:	d101      	bne.n	800e6a0 <GUI__DoAlphaBlending+0x148>
 800e69c:	50d0      	str	r0, [r2, r3]
 800e69e:	e005      	b.n	800e6ac <GUI__DoAlphaBlending+0x154>
 800e6a0:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
 800e6a4:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 800e6a8:	bf08      	it	eq
 800e6aa:	50d1      	streq	r1, [r2, r3]
 800e6ac:	3c01      	subs	r4, #1
 800e6ae:	f103 0304 	add.w	r3, r3, #4
 800e6b2:	d1eb      	bne.n	800e68c <GUI__DoAlphaBlending+0x134>
 800e6b4:	6833      	ldr	r3, [r6, #0]
 800e6b6:	9710      	str	r7, [sp, #64]	; 0x40
 800e6b8:	f043 0301 	orr.w	r3, r3, #1
 800e6bc:	6033      	str	r3, [r6, #0]
 800e6be:	e020      	b.n	800e702 <GUI__DoAlphaBlending+0x1aa>
 800e6c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6c2:	2bff      	cmp	r3, #255	; 0xff
 800e6c4:	d104      	bne.n	800e6d0 <GUI__DoAlphaBlending+0x178>
 800e6c6:	f851 300a 	ldr.w	r3, [r1, sl]
 800e6ca:	f847 300a 	str.w	r3, [r7, sl]
 800e6ce:	e011      	b.n	800e6f4 <GUI__DoAlphaBlending+0x19c>
 800e6d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6d2:	f851 100a 	ldr.w	r1, [r1, sl]
 800e6d6:	43da      	mvns	r2, r3
 800e6d8:	4648      	mov	r0, r9
 800e6da:	b2d2      	uxtb	r2, r2
 800e6dc:	f7ff fe89 	bl	800e3f2 <GUI__MixColors>
 800e6e0:	f847 000a 	str.w	r0, [r7, sl]
 800e6e4:	e002      	b.n	800e6ec <GUI__DoAlphaBlending+0x194>
 800e6e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e6e8:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800e6ec:	6833      	ldr	r3, [r6, #0]
 800e6ee:	f043 0301 	orr.w	r3, r3, #1
 800e6f2:	6033      	str	r3, [r6, #0]
 800e6f4:	3c01      	subs	r4, #1
 800e6f6:	f105 0501 	add.w	r5, r5, #1
 800e6fa:	d002      	beq.n	800e702 <GUI__DoAlphaBlending+0x1aa>
 800e6fc:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800e700:	e761      	b.n	800e5c6 <GUI__DoAlphaBlending+0x6e>
 800e702:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e704:	e000      	b.n	800e708 <GUI__DoAlphaBlending+0x1b0>
 800e706:	4620      	mov	r0, r4
 800e708:	b013      	add	sp, #76	; 0x4c
 800e70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e70e:	bf00      	nop
 800e710:	20000238 	.word	0x20000238
 800e714:	2001b2c0 	.word	0x2001b2c0
 800e718:	080117ff 	.word	0x080117ff
 800e71c:	080117fd 	.word	0x080117fd
 800e720:	20019454 	.word	0x20019454

0800e724 <GUI__AllocAlphaBuffer>:
 800e724:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e726:	b108      	cbz	r0, 800e72c <GUI__AllocAlphaBuffer+0x8>
 800e728:	aa03      	add	r2, sp, #12
 800e72a:	e000      	b.n	800e72e <GUI__AllocAlphaBuffer+0xa>
 800e72c:	4602      	mov	r2, r0
 800e72e:	a801      	add	r0, sp, #4
 800e730:	a902      	add	r1, sp, #8
 800e732:	2300      	movs	r3, #0
 800e734:	f7ff feac 	bl	800e490 <GUI__GetAlphaBuffer>
 800e738:	b005      	add	sp, #20
 800e73a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800e740 <GUI_SignalEvent>:
 800e740:	b508      	push	{r3, lr}
 800e742:	4b02      	ldr	r3, [pc, #8]	; (800e74c <GUI_SignalEvent+0xc>)
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	b103      	cbz	r3, 800e74a <GUI_SignalEvent+0xa>
 800e748:	4798      	blx	r3
 800e74a:	bd08      	pop	{r3, pc}
 800e74c:	20019464 	.word	0x20019464

0800e750 <GUI_UC_GetCharSize>:
 800e750:	b508      	push	{r3, lr}
 800e752:	4b02      	ldr	r3, [pc, #8]	; (800e75c <GUI_UC_GetCharSize+0xc>)
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	685b      	ldr	r3, [r3, #4]
 800e758:	4798      	blx	r3
 800e75a:	bd08      	pop	{r3, pc}
 800e75c:	2001b2b8 	.word	0x2001b2b8

0800e760 <GUI_UC_GetCharCode>:
 800e760:	b508      	push	{r3, lr}
 800e762:	4b02      	ldr	r3, [pc, #8]	; (800e76c <GUI_UC_GetCharCode+0xc>)
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	4798      	blx	r3
 800e76a:	bd08      	pop	{r3, pc}
 800e76c:	2001b2b8 	.word	0x2001b2b8

0800e770 <GUI_UC_Encode>:
 800e770:	b508      	push	{r3, lr}
 800e772:	4b02      	ldr	r3, [pc, #8]	; (800e77c <GUI_UC_Encode+0xc>)
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	68db      	ldr	r3, [r3, #12]
 800e778:	4798      	blx	r3
 800e77a:	bd08      	pop	{r3, pc}
 800e77c:	2001b2b8 	.word	0x2001b2b8

0800e780 <GUI_UC__CalcSizeOfChar>:
 800e780:	b508      	push	{r3, lr}
 800e782:	4b02      	ldr	r3, [pc, #8]	; (800e78c <GUI_UC__CalcSizeOfChar+0xc>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	689b      	ldr	r3, [r3, #8]
 800e788:	4798      	blx	r3
 800e78a:	bd08      	pop	{r3, pc}
 800e78c:	2001b2b8 	.word	0x2001b2b8

0800e790 <GUI_UC__GetCharCodeInc>:
 800e790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e792:	4e08      	ldr	r6, [pc, #32]	; (800e7b4 <GUI_UC__GetCharCodeInc+0x24>)
 800e794:	6804      	ldr	r4, [r0, #0]
 800e796:	6833      	ldr	r3, [r6, #0]
 800e798:	4605      	mov	r5, r0
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	4620      	mov	r0, r4
 800e79e:	4798      	blx	r3
 800e7a0:	6833      	ldr	r3, [r6, #0]
 800e7a2:	4607      	mov	r7, r0
 800e7a4:	685b      	ldr	r3, [r3, #4]
 800e7a6:	4620      	mov	r0, r4
 800e7a8:	4798      	blx	r3
 800e7aa:	4420      	add	r0, r4
 800e7ac:	6028      	str	r0, [r5, #0]
 800e7ae:	4638      	mov	r0, r7
 800e7b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7b2:	bf00      	nop
 800e7b4:	2001b2b8 	.word	0x2001b2b8

0800e7b8 <GUI_UC__NumChars2NumBytes>:
 800e7b8:	b570      	push	{r4, r5, r6, lr}
 800e7ba:	4604      	mov	r4, r0
 800e7bc:	460e      	mov	r6, r1
 800e7be:	2500      	movs	r5, #0
 800e7c0:	b146      	cbz	r6, 800e7d4 <GUI_UC__NumChars2NumBytes+0x1c>
 800e7c2:	4b05      	ldr	r3, [pc, #20]	; (800e7d8 <GUI_UC__NumChars2NumBytes+0x20>)
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	4620      	mov	r0, r4
 800e7c8:	685b      	ldr	r3, [r3, #4]
 800e7ca:	4798      	blx	r3
 800e7cc:	3e01      	subs	r6, #1
 800e7ce:	4404      	add	r4, r0
 800e7d0:	4405      	add	r5, r0
 800e7d2:	e7f5      	b.n	800e7c0 <GUI_UC__NumChars2NumBytes+0x8>
 800e7d4:	4628      	mov	r0, r5
 800e7d6:	bd70      	pop	{r4, r5, r6, pc}
 800e7d8:	2001b2b8 	.word	0x2001b2b8

0800e7dc <GUI_UC__NumBytes2NumChars>:
 800e7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7de:	2400      	movs	r4, #0
 800e7e0:	4606      	mov	r6, r0
 800e7e2:	460f      	mov	r7, r1
 800e7e4:	4625      	mov	r5, r4
 800e7e6:	42a7      	cmp	r7, r4
 800e7e8:	dd07      	ble.n	800e7fa <GUI_UC__NumBytes2NumChars+0x1e>
 800e7ea:	4b05      	ldr	r3, [pc, #20]	; (800e800 <GUI_UC__NumBytes2NumChars+0x24>)
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	1930      	adds	r0, r6, r4
 800e7f0:	685b      	ldr	r3, [r3, #4]
 800e7f2:	4798      	blx	r3
 800e7f4:	3501      	adds	r5, #1
 800e7f6:	4404      	add	r4, r0
 800e7f8:	e7f5      	b.n	800e7e6 <GUI_UC__NumBytes2NumChars+0xa>
 800e7fa:	4628      	mov	r0, r5
 800e7fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7fe:	bf00      	nop
 800e800:	2001b2b8 	.word	0x2001b2b8

0800e804 <_Link>:
 800e804:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e806:	4c25      	ldr	r4, [pc, #148]	; (800e89c <_Link+0x98>)
 800e808:	b085      	sub	sp, #20
 800e80a:	4605      	mov	r5, r0
 800e80c:	f002 fce2 	bl	80111d4 <GUI_ALLOC_LockH>
 800e810:	6823      	ldr	r3, [r4, #0]
 800e812:	9001      	str	r0, [sp, #4]
 800e814:	b913      	cbnz	r3, 800e81c <_Link+0x18>
 800e816:	6025      	str	r5, [r4, #0]
 800e818:	6043      	str	r3, [r0, #4]
 800e81a:	e039      	b.n	800e890 <_Link+0x8c>
 800e81c:	4618      	mov	r0, r3
 800e81e:	f002 fcd9 	bl	80111d4 <GUI_ALLOC_LockH>
 800e822:	ab04      	add	r3, sp, #16
 800e824:	6946      	ldr	r6, [r0, #20]
 800e826:	f843 0d10 	str.w	r0, [r3, #-16]!
 800e82a:	4668      	mov	r0, sp
 800e82c:	f002 fce0 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800e830:	9b01      	ldr	r3, [sp, #4]
 800e832:	695a      	ldr	r2, [r3, #20]
 800e834:	1b92      	subs	r2, r2, r6
 800e836:	2a00      	cmp	r2, #0
 800e838:	dc03      	bgt.n	800e842 <_Link+0x3e>
 800e83a:	6822      	ldr	r2, [r4, #0]
 800e83c:	605a      	str	r2, [r3, #4]
 800e83e:	6025      	str	r5, [r4, #0]
 800e840:	e026      	b.n	800e890 <_Link+0x8c>
 800e842:	6826      	ldr	r6, [r4, #0]
 800e844:	4630      	mov	r0, r6
 800e846:	f002 fcc5 	bl	80111d4 <GUI_ALLOC_LockH>
 800e84a:	ac04      	add	r4, sp, #16
 800e84c:	6846      	ldr	r6, [r0, #4]
 800e84e:	f844 0d08 	str.w	r0, [r4, #-8]!
 800e852:	b1be      	cbz	r6, 800e884 <_Link+0x80>
 800e854:	4630      	mov	r0, r6
 800e856:	f002 fcbd 	bl	80111d4 <GUI_ALLOC_LockH>
 800e85a:	ab04      	add	r3, sp, #16
 800e85c:	6947      	ldr	r7, [r0, #20]
 800e85e:	f843 0d04 	str.w	r0, [r3, #-4]!
 800e862:	4618      	mov	r0, r3
 800e864:	f002 fcc4 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800e868:	9a01      	ldr	r2, [sp, #4]
 800e86a:	6953      	ldr	r3, [r2, #20]
 800e86c:	1bdb      	subs	r3, r3, r7
 800e86e:	2b00      	cmp	r3, #0
 800e870:	9b02      	ldr	r3, [sp, #8]
 800e872:	dc02      	bgt.n	800e87a <_Link+0x76>
 800e874:	6056      	str	r6, [r2, #4]
 800e876:	605d      	str	r5, [r3, #4]
 800e878:	e007      	b.n	800e88a <_Link+0x86>
 800e87a:	4620      	mov	r0, r4
 800e87c:	685e      	ldr	r6, [r3, #4]
 800e87e:	f002 fcb7 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800e882:	e7df      	b.n	800e844 <_Link+0x40>
 800e884:	9b01      	ldr	r3, [sp, #4]
 800e886:	605e      	str	r6, [r3, #4]
 800e888:	6045      	str	r5, [r0, #4]
 800e88a:	4620      	mov	r0, r4
 800e88c:	f002 fcb0 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800e890:	a801      	add	r0, sp, #4
 800e892:	f002 fcad 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800e896:	b005      	add	sp, #20
 800e898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e89a:	bf00      	nop
 800e89c:	2001946c 	.word	0x2001946c

0800e8a0 <_Unlink>:
 800e8a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e8a2:	4605      	mov	r5, r0
 800e8a4:	b1f0      	cbz	r0, 800e8e4 <_Unlink+0x44>
 800e8a6:	f002 fc95 	bl	80111d4 <GUI_ALLOC_LockH>
 800e8aa:	4b0f      	ldr	r3, [pc, #60]	; (800e8e8 <_Unlink+0x48>)
 800e8ac:	9000      	str	r0, [sp, #0]
 800e8ae:	681c      	ldr	r4, [r3, #0]
 800e8b0:	42ac      	cmp	r4, r5
 800e8b2:	d104      	bne.n	800e8be <_Unlink+0x1e>
 800e8b4:	6842      	ldr	r2, [r0, #4]
 800e8b6:	601a      	str	r2, [r3, #0]
 800e8b8:	e011      	b.n	800e8de <_Unlink+0x3e>
 800e8ba:	f002 fc99 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800e8be:	b174      	cbz	r4, 800e8de <_Unlink+0x3e>
 800e8c0:	4620      	mov	r0, r4
 800e8c2:	f002 fc87 	bl	80111d4 <GUI_ALLOC_LockH>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	a802      	add	r0, sp, #8
 800e8ca:	685c      	ldr	r4, [r3, #4]
 800e8cc:	f840 3d04 	str.w	r3, [r0, #-4]!
 800e8d0:	42ac      	cmp	r4, r5
 800e8d2:	d1f2      	bne.n	800e8ba <_Unlink+0x1a>
 800e8d4:	9a00      	ldr	r2, [sp, #0]
 800e8d6:	6852      	ldr	r2, [r2, #4]
 800e8d8:	605a      	str	r2, [r3, #4]
 800e8da:	f002 fc89 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800e8de:	4668      	mov	r0, sp
 800e8e0:	f002 fc86 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800e8e4:	b003      	add	sp, #12
 800e8e6:	bd30      	pop	{r4, r5, pc}
 800e8e8:	2001946c 	.word	0x2001946c

0800e8ec <GUI_TIMER__GetFirstTimer>:
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e8f0:	6003      	str	r3, [r0, #0]
 800e8f2:	4b09      	ldr	r3, [pc, #36]	; (800e918 <GUI_TIMER__GetFirstTimer+0x2c>)
 800e8f4:	681c      	ldr	r4, [r3, #0]
 800e8f6:	4605      	mov	r5, r0
 800e8f8:	b154      	cbz	r4, 800e910 <GUI_TIMER__GetFirstTimer+0x24>
 800e8fa:	4620      	mov	r0, r4
 800e8fc:	f002 fc6a 	bl	80111d4 <GUI_ALLOC_LockH>
 800e900:	ab02      	add	r3, sp, #8
 800e902:	6902      	ldr	r2, [r0, #16]
 800e904:	f843 0d04 	str.w	r0, [r3, #-4]!
 800e908:	602a      	str	r2, [r5, #0]
 800e90a:	4618      	mov	r0, r3
 800e90c:	f002 fc70 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800e910:	4620      	mov	r0, r4
 800e912:	b003      	add	sp, #12
 800e914:	bd30      	pop	{r4, r5, pc}
 800e916:	bf00      	nop
 800e918:	20019468 	.word	0x20019468

0800e91c <GUI_TIMER__GetNextTimerLin>:
 800e91c:	2300      	movs	r3, #0
 800e91e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e920:	600b      	str	r3, [r1, #0]
 800e922:	460e      	mov	r6, r1
 800e924:	4604      	mov	r4, r0
 800e926:	b190      	cbz	r0, 800e94e <GUI_TIMER__GetNextTimerLin+0x32>
 800e928:	f002 fc54 	bl	80111d4 <GUI_ALLOC_LockH>
 800e92c:	ad02      	add	r5, sp, #8
 800e92e:	6884      	ldr	r4, [r0, #8]
 800e930:	f845 0d04 	str.w	r0, [r5, #-4]!
 800e934:	b144      	cbz	r4, 800e948 <GUI_TIMER__GetNextTimerLin+0x2c>
 800e936:	4628      	mov	r0, r5
 800e938:	f002 fc5a 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800e93c:	4620      	mov	r0, r4
 800e93e:	f002 fc49 	bl	80111d4 <GUI_ALLOC_LockH>
 800e942:	6903      	ldr	r3, [r0, #16]
 800e944:	9001      	str	r0, [sp, #4]
 800e946:	6033      	str	r3, [r6, #0]
 800e948:	4628      	mov	r0, r5
 800e94a:	f002 fc51 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800e94e:	4620      	mov	r0, r4
 800e950:	b002      	add	sp, #8
 800e952:	bd70      	pop	{r4, r5, r6, pc}

0800e954 <GUI_TIMER_Delete>:
 800e954:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e956:	4604      	mov	r4, r0
 800e958:	b358      	cbz	r0, 800e9b2 <GUI_TIMER_Delete+0x5e>
 800e95a:	4d17      	ldr	r5, [pc, #92]	; (800e9b8 <GUI_TIMER_Delete+0x64>)
 800e95c:	682e      	ldr	r6, [r5, #0]
 800e95e:	4286      	cmp	r6, r0
 800e960:	d10b      	bne.n	800e97a <GUI_TIMER_Delete+0x26>
 800e962:	f002 fc37 	bl	80111d4 <GUI_ALLOC_LockH>
 800e966:	ab02      	add	r3, sp, #8
 800e968:	6882      	ldr	r2, [r0, #8]
 800e96a:	f843 0d04 	str.w	r0, [r3, #-4]!
 800e96e:	602a      	str	r2, [r5, #0]
 800e970:	4618      	mov	r0, r3
 800e972:	e016      	b.n	800e9a2 <GUI_TIMER_Delete+0x4e>
 800e974:	4668      	mov	r0, sp
 800e976:	f002 fc3b 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800e97a:	4630      	mov	r0, r6
 800e97c:	f002 fc2a 	bl	80111d4 <GUI_ALLOC_LockH>
 800e980:	6886      	ldr	r6, [r0, #8]
 800e982:	ad02      	add	r5, sp, #8
 800e984:	42a6      	cmp	r6, r4
 800e986:	f845 0d08 	str.w	r0, [r5, #-8]!
 800e98a:	d1f3      	bne.n	800e974 <GUI_TIMER_Delete+0x20>
 800e98c:	4620      	mov	r0, r4
 800e98e:	f002 fc21 	bl	80111d4 <GUI_ALLOC_LockH>
 800e992:	9b00      	ldr	r3, [sp, #0]
 800e994:	6882      	ldr	r2, [r0, #8]
 800e996:	9001      	str	r0, [sp, #4]
 800e998:	609a      	str	r2, [r3, #8]
 800e99a:	a801      	add	r0, sp, #4
 800e99c:	f002 fc28 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800e9a0:	4668      	mov	r0, sp
 800e9a2:	f002 fc25 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800e9a6:	4620      	mov	r0, r4
 800e9a8:	f7ff ff7a 	bl	800e8a0 <_Unlink>
 800e9ac:	4620      	mov	r0, r4
 800e9ae:	f002 fc4b 	bl	8011248 <GUI_ALLOC_Free>
 800e9b2:	b002      	add	sp, #8
 800e9b4:	bd70      	pop	{r4, r5, r6, pc}
 800e9b6:	bf00      	nop
 800e9b8:	20019468 	.word	0x20019468

0800e9bc <GUI_TIMER_SetPeriod>:
 800e9bc:	b513      	push	{r0, r1, r4, lr}
 800e9be:	460c      	mov	r4, r1
 800e9c0:	b140      	cbz	r0, 800e9d4 <GUI_TIMER_SetPeriod+0x18>
 800e9c2:	f002 fc07 	bl	80111d4 <GUI_ALLOC_LockH>
 800e9c6:	ab02      	add	r3, sp, #8
 800e9c8:	6184      	str	r4, [r0, #24]
 800e9ca:	f843 0d04 	str.w	r0, [r3, #-4]!
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	f002 fc0e 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800e9d4:	b002      	add	sp, #8
 800e9d6:	bd10      	pop	{r4, pc}

0800e9d8 <GUI_TIMER_Restart>:
 800e9d8:	b513      	push	{r0, r1, r4, lr}
 800e9da:	4604      	mov	r4, r0
 800e9dc:	b198      	cbz	r0, 800ea06 <GUI_TIMER_Restart+0x2e>
 800e9de:	f002 fbf9 	bl	80111d4 <GUI_ALLOC_LockH>
 800e9e2:	9001      	str	r0, [sp, #4]
 800e9e4:	f000 f826 	bl	800ea34 <GUI_GetTime>
 800e9e8:	ab02      	add	r3, sp, #8
 800e9ea:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e9ee:	6991      	ldr	r1, [r2, #24]
 800e9f0:	4408      	add	r0, r1
 800e9f2:	6150      	str	r0, [r2, #20]
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	f002 fbfb 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800e9fa:	4620      	mov	r0, r4
 800e9fc:	f7ff ff50 	bl	800e8a0 <_Unlink>
 800ea00:	4620      	mov	r0, r4
 800ea02:	f7ff feff 	bl	800e804 <_Link>
 800ea06:	b002      	add	sp, #8
 800ea08:	bd10      	pop	{r4, pc}

0800ea0a <GUI_TIMER_GetFlag>:
 800ea0a:	b513      	push	{r0, r1, r4, lr}
 800ea0c:	460c      	mov	r4, r1
 800ea0e:	b168      	cbz	r0, 800ea2c <GUI_TIMER_GetFlag+0x22>
 800ea10:	f002 fbe0 	bl	80111d4 <GUI_ALLOC_LockH>
 800ea14:	ab02      	add	r3, sp, #8
 800ea16:	8982      	ldrh	r2, [r0, #12]
 800ea18:	f843 0d04 	str.w	r0, [r3, #-4]!
 800ea1c:	4214      	tst	r4, r2
 800ea1e:	4618      	mov	r0, r3
 800ea20:	bf0c      	ite	eq
 800ea22:	2400      	moveq	r4, #0
 800ea24:	2401      	movne	r4, #1
 800ea26:	f002 fbe3 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800ea2a:	e000      	b.n	800ea2e <GUI_TIMER_GetFlag+0x24>
 800ea2c:	2401      	movs	r4, #1
 800ea2e:	4620      	mov	r0, r4
 800ea30:	b002      	add	sp, #8
 800ea32:	bd10      	pop	{r4, pc}

0800ea34 <GUI_GetTime>:
 800ea34:	f7f7 bab2 	b.w	8005f9c <GUI_X_GetTime>

0800ea38 <GUI_Delay>:
 800ea38:	b538      	push	{r3, r4, r5, lr}
 800ea3a:	4605      	mov	r5, r0
 800ea3c:	f7f7 faae 	bl	8005f9c <GUI_X_GetTime>
 800ea40:	4405      	add	r5, r0
 800ea42:	f7f7 faab 	bl	8005f9c <GUI_X_GetTime>
 800ea46:	1a2c      	subs	r4, r5, r0
 800ea48:	2c00      	cmp	r4, #0
 800ea4a:	dd08      	ble.n	800ea5e <GUI_Delay+0x26>
 800ea4c:	f000 fe22 	bl	800f694 <GUI_Exec>
 800ea50:	2c05      	cmp	r4, #5
 800ea52:	bfb4      	ite	lt
 800ea54:	4620      	movlt	r0, r4
 800ea56:	2005      	movge	r0, #5
 800ea58:	f7f7 faa6 	bl	8005fa8 <GUI_X_Delay>
 800ea5c:	e7f1      	b.n	800ea42 <GUI_Delay+0xa>
 800ea5e:	bd38      	pop	{r3, r4, r5, pc}

0800ea60 <GUI_TOUCH_Calibrate>:
 800ea60:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ea62:	2801      	cmp	r0, #1
 800ea64:	9c08      	ldr	r4, [sp, #32]
 800ea66:	d845      	bhi.n	800eaf4 <GUI_TOUCH_Calibrate+0x94>
 800ea68:	4d25      	ldr	r5, [pc, #148]	; (800eb00 <GUI_TOUCH_Calibrate+0xa0>)
 800ea6a:	d00c      	beq.n	800ea86 <GUI_TOUCH_Calibrate+0x26>
 800ea6c:	4e25      	ldr	r6, [pc, #148]	; (800eb04 <GUI_TOUCH_Calibrate+0xa4>)
 800ea6e:	e886 0006 	stmia.w	r6, {r1, r2}
 800ea72:	6829      	ldr	r1, [r5, #0]
 800ea74:	f001 0206 	and.w	r2, r1, #6
 800ea78:	2a06      	cmp	r2, #6
 800ea7a:	4a23      	ldr	r2, [pc, #140]	; (800eb08 <GUI_TOUCH_Calibrate+0xa8>)
 800ea7c:	d010      	beq.n	800eaa0 <GUI_TOUCH_Calibrate+0x40>
 800ea7e:	f001 0105 	and.w	r1, r1, #5
 800ea82:	2901      	cmp	r1, #1
 800ea84:	e00b      	b.n	800ea9e <GUI_TOUCH_Calibrate+0x3e>
 800ea86:	4e21      	ldr	r6, [pc, #132]	; (800eb0c <GUI_TOUCH_Calibrate+0xac>)
 800ea88:	e886 0006 	stmia.w	r6, {r1, r2}
 800ea8c:	6829      	ldr	r1, [r5, #0]
 800ea8e:	f001 0205 	and.w	r2, r1, #5
 800ea92:	2a05      	cmp	r2, #5
 800ea94:	4a1e      	ldr	r2, [pc, #120]	; (800eb10 <GUI_TOUCH_Calibrate+0xb0>)
 800ea96:	d003      	beq.n	800eaa0 <GUI_TOUCH_Calibrate+0x40>
 800ea98:	f001 0106 	and.w	r1, r1, #6
 800ea9c:	2902      	cmp	r1, #2
 800ea9e:	d102      	bne.n	800eaa6 <GUI_TOUCH_Calibrate+0x46>
 800eaa0:	6014      	str	r4, [r2, #0]
 800eaa2:	6053      	str	r3, [r2, #4]
 800eaa4:	e001      	b.n	800eaaa <GUI_TOUCH_Calibrate+0x4a>
 800eaa6:	e882 0018 	stmia.w	r2, {r3, r4}
 800eaaa:	4b1a      	ldr	r3, [pc, #104]	; (800eb14 <GUI_TOUCH_Calibrate+0xb4>)
 800eaac:	781a      	ldrb	r2, [r3, #0]
 800eaae:	4102      	asrs	r2, r0
 800eab0:	07d2      	lsls	r2, r2, #31
 800eab2:	bf44      	itt	mi
 800eab4:	2200      	movmi	r2, #0
 800eab6:	701a      	strbmi	r2, [r3, #0]
 800eab8:	2201      	movs	r2, #1
 800eaba:	fa02 f000 	lsl.w	r0, r2, r0
 800eabe:	781a      	ldrb	r2, [r3, #0]
 800eac0:	4310      	orrs	r0, r2
 800eac2:	b2c0      	uxtb	r0, r0
 800eac4:	2803      	cmp	r0, #3
 800eac6:	7018      	strb	r0, [r3, #0]
 800eac8:	d116      	bne.n	800eaf8 <GUI_TOUCH_Calibrate+0x98>
 800eaca:	4c13      	ldr	r4, [pc, #76]	; (800eb18 <GUI_TOUCH_Calibrate+0xb8>)
 800eacc:	6823      	ldr	r3, [r4, #0]
 800eace:	7c58      	ldrb	r0, [r3, #17]
 800ead0:	f7fe fe24 	bl	800d71c <LCD_GetXSizeEx>
 800ead4:	6823      	ldr	r3, [r4, #0]
 800ead6:	4605      	mov	r5, r0
 800ead8:	7c58      	ldrb	r0, [r3, #17]
 800eada:	f7fe fe22 	bl	800d722 <LCD_GetYSizeEx>
 800eade:	4b0c      	ldr	r3, [pc, #48]	; (800eb10 <GUI_TOUCH_Calibrate+0xb0>)
 800eae0:	9002      	str	r0, [sp, #8]
 800eae2:	e88d 0028 	stmia.w	sp, {r3, r5}
 800eae6:	4907      	ldr	r1, [pc, #28]	; (800eb04 <GUI_TOUCH_Calibrate+0xa4>)
 800eae8:	4a08      	ldr	r2, [pc, #32]	; (800eb0c <GUI_TOUCH_Calibrate+0xac>)
 800eaea:	4b07      	ldr	r3, [pc, #28]	; (800eb08 <GUI_TOUCH_Calibrate+0xa8>)
 800eaec:	2002      	movs	r0, #2
 800eaee:	f000 f8ff 	bl	800ecf0 <GUI_TOUCH_CalcCoefficients>
 800eaf2:	e002      	b.n	800eafa <GUI_TOUCH_Calibrate+0x9a>
 800eaf4:	2001      	movs	r0, #1
 800eaf6:	e000      	b.n	800eafa <GUI_TOUCH_Calibrate+0x9a>
 800eaf8:	2000      	movs	r0, #0
 800eafa:	b004      	add	sp, #16
 800eafc:	bd70      	pop	{r4, r5, r6, pc}
 800eafe:	bf00      	nop
 800eb00:	20019484 	.word	0x20019484
 800eb04:	20019470 	.word	0x20019470
 800eb08:	2001948c 	.word	0x2001948c
 800eb0c:	20019498 	.word	0x20019498
 800eb10:	20019478 	.word	0x20019478
 800eb14:	20019480 	.word	0x20019480
 800eb18:	20000238 	.word	0x20000238

0800eb1c <GUI_TOUCH_Exec>:
 800eb1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb1e:	4c29      	ldr	r4, [pc, #164]	; (800ebc4 <GUI_TOUCH_Exec+0xa8>)
 800eb20:	4d29      	ldr	r5, [pc, #164]	; (800ebc8 <GUI_TOUCH_Exec+0xac>)
 800eb22:	7823      	ldrb	r3, [r4, #0]
 800eb24:	b087      	sub	sp, #28
 800eb26:	4626      	mov	r6, r4
 800eb28:	b943      	cbnz	r3, 800eb3c <GUI_TOUCH_Exec+0x20>
 800eb2a:	f7f7 fa50 	bl	8005fce <GUI_TOUCH_X_MeasureY>
 800eb2e:	6028      	str	r0, [r5, #0]
 800eb30:	f7f7 fa48 	bl	8005fc4 <GUI_TOUCH_X_ActivateY>
 800eb34:	7823      	ldrb	r3, [r4, #0]
 800eb36:	3301      	adds	r3, #1
 800eb38:	7023      	strb	r3, [r4, #0]
 800eb3a:	e040      	b.n	800ebbe <GUI_TOUCH_Exec+0xa2>
 800eb3c:	f7f7 fa43 	bl	8005fc6 <GUI_TOUCH_X_MeasureX>
 800eb40:	4c22      	ldr	r4, [pc, #136]	; (800ebcc <GUI_TOUCH_Exec+0xb0>)
 800eb42:	6020      	str	r0, [r4, #0]
 800eb44:	f7f7 fa3d 	bl	8005fc2 <GUI_TOUCH_X_ActivateX>
 800eb48:	6823      	ldr	r3, [r4, #0]
 800eb4a:	9301      	str	r3, [sp, #4]
 800eb4c:	682b      	ldr	r3, [r5, #0]
 800eb4e:	9302      	str	r3, [sp, #8]
 800eb50:	f005 fd3e 	bl	80145d0 <GUI_TOUCH_GetLayer>
 800eb54:	a902      	add	r1, sp, #8
 800eb56:	f88d 0015 	strb.w	r0, [sp, #21]
 800eb5a:	a801      	add	r0, sp, #4
 800eb5c:	f000 f88a 	bl	800ec74 <GUI_TOUCH_CalibratePoint>
 800eb60:	4c1b      	ldr	r4, [pc, #108]	; (800ebd0 <GUI_TOUCH_Exec+0xb4>)
 800eb62:	b148      	cbz	r0, 800eb78 <GUI_TOUCH_Exec+0x5c>
 800eb64:	7823      	ldrb	r3, [r4, #0]
 800eb66:	b343      	cbz	r3, 800ebba <GUI_TOUCH_Exec+0x9e>
 800eb68:	4b1a      	ldr	r3, [pc, #104]	; (800ebd4 <GUI_TOUCH_Exec+0xb8>)
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	9303      	str	r3, [sp, #12]
 800eb6e:	4b1a      	ldr	r3, [pc, #104]	; (800ebd8 <GUI_TOUCH_Exec+0xbc>)
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	9304      	str	r3, [sp, #16]
 800eb74:	2500      	movs	r5, #0
 800eb76:	e01a      	b.n	800ebae <GUI_TOUCH_Exec+0x92>
 800eb78:	4816      	ldr	r0, [pc, #88]	; (800ebd4 <GUI_TOUCH_Exec+0xb8>)
 800eb7a:	4917      	ldr	r1, [pc, #92]	; (800ebd8 <GUI_TOUCH_Exec+0xbc>)
 800eb7c:	f894 c000 	ldrb.w	ip, [r4]
 800eb80:	9a01      	ldr	r2, [sp, #4]
 800eb82:	6807      	ldr	r7, [r0, #0]
 800eb84:	9b02      	ldr	r3, [sp, #8]
 800eb86:	680d      	ldr	r5, [r1, #0]
 800eb88:	f1bc 0f00 	cmp.w	ip, #0
 800eb8c:	d00a      	beq.n	800eba4 <GUI_TOUCH_Exec+0x88>
 800eb8e:	1bd7      	subs	r7, r2, r7
 800eb90:	1b5d      	subs	r5, r3, r5
 800eb92:	2f00      	cmp	r7, #0
 800eb94:	bfb8      	it	lt
 800eb96:	427f      	neglt	r7, r7
 800eb98:	2d00      	cmp	r5, #0
 800eb9a:	bfb8      	it	lt
 800eb9c:	426d      	neglt	r5, r5
 800eb9e:	443d      	add	r5, r7
 800eba0:	2d02      	cmp	r5, #2
 800eba2:	dd0a      	ble.n	800ebba <GUI_TOUCH_Exec+0x9e>
 800eba4:	6002      	str	r2, [r0, #0]
 800eba6:	9203      	str	r2, [sp, #12]
 800eba8:	600b      	str	r3, [r1, #0]
 800ebaa:	9304      	str	r3, [sp, #16]
 800ebac:	2501      	movs	r5, #1
 800ebae:	a803      	add	r0, sp, #12
 800ebb0:	f88d 5014 	strb.w	r5, [sp, #20]
 800ebb4:	f000 fae8 	bl	800f188 <GUI_TOUCH_StoreStateEx>
 800ebb8:	7025      	strb	r5, [r4, #0]
 800ebba:	2300      	movs	r3, #0
 800ebbc:	7033      	strb	r3, [r6, #0]
 800ebbe:	b007      	add	sp, #28
 800ebc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebc2:	bf00      	nop
 800ebc4:	20019489 	.word	0x20019489
 800ebc8:	200194a0 	.word	0x200194a0
 800ebcc:	20019494 	.word	0x20019494
 800ebd0:	20019488 	.word	0x20019488
 800ebd4:	20000224 	.word	0x20000224
 800ebd8:	20000220 	.word	0x20000220

0800ebdc <GUI_TOUCH_TransformPoint>:
 800ebdc:	b570      	push	{r4, r5, r6, lr}
 800ebde:	4b22      	ldr	r3, [pc, #136]	; (800ec68 <GUI_TOUCH_TransformPoint+0x8c>)
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	ed2d 8b02 	vpush	{d8}
 800ebe6:	4606      	mov	r6, r0
 800ebe8:	460d      	mov	r5, r1
 800ebea:	b3c3      	cbz	r3, 800ec5e <GUI_TOUCH_TransformPoint+0x82>
 800ebec:	edd0 7a00 	vldr	s15, [r0]
 800ebf0:	4c1e      	ldr	r4, [pc, #120]	; (800ec6c <GUI_TOUCH_TransformPoint+0x90>)
 800ebf2:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800ebf6:	edd1 7a00 	vldr	s15, [r1]
 800ebfa:	ed94 7a01 	vldr	s14, [r4, #4]
 800ebfe:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 800ec02:	edd4 7a00 	vldr	s15, [r4]
 800ec06:	ee28 7a87 	vmul.f32	s14, s17, s14
 800ec0a:	eea7 7a88 	vfma.f32	s14, s15, s16
 800ec0e:	edd4 7a02 	vldr	s15, [r4, #8]
 800ec12:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ec16:	ee17 0a90 	vmov	r0, s15
 800ec1a:	f7f1 fcb5 	bl	8000588 <__aeabi_f2d>
 800ec1e:	2200      	movs	r2, #0
 800ec20:	4b13      	ldr	r3, [pc, #76]	; (800ec70 <GUI_TOUCH_TransformPoint+0x94>)
 800ec22:	f7f1 fb53 	bl	80002cc <__adddf3>
 800ec26:	f7f1 ff19 	bl	8000a5c <__aeabi_d2iz>
 800ec2a:	edd4 7a04 	vldr	s15, [r4, #16]
 800ec2e:	ed94 7a03 	vldr	s14, [r4, #12]
 800ec32:	6030      	str	r0, [r6, #0]
 800ec34:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800ec38:	eee7 7a08 	vfma.f32	s15, s14, s16
 800ec3c:	ed94 7a05 	vldr	s14, [r4, #20]
 800ec40:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ec44:	ee17 0a10 	vmov	r0, s14
 800ec48:	f7f1 fc9e 	bl	8000588 <__aeabi_f2d>
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	4b08      	ldr	r3, [pc, #32]	; (800ec70 <GUI_TOUCH_TransformPoint+0x94>)
 800ec50:	f7f1 fb3c 	bl	80002cc <__adddf3>
 800ec54:	f7f1 ff02 	bl	8000a5c <__aeabi_d2iz>
 800ec58:	6028      	str	r0, [r5, #0]
 800ec5a:	2000      	movs	r0, #0
 800ec5c:	e000      	b.n	800ec60 <GUI_TOUCH_TransformPoint+0x84>
 800ec5e:	2001      	movs	r0, #1
 800ec60:	ecbd 8b02 	vpop	{d8}
 800ec64:	bd70      	pop	{r4, r5, r6, pc}
 800ec66:	bf00      	nop
 800ec68:	200194b4 	.word	0x200194b4
 800ec6c:	200194b8 	.word	0x200194b8
 800ec70:	3fe00000 	.word	0x3fe00000

0800ec74 <GUI_TOUCH_CalibratePoint>:
 800ec74:	4b18      	ldr	r3, [pc, #96]	; (800ecd8 <GUI_TOUCH_CalibratePoint+0x64>)
 800ec76:	6802      	ldr	r2, [r0, #0]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	429a      	cmp	r2, r3
 800ec7c:	b570      	push	{r4, r5, r6, lr}
 800ec7e:	4605      	mov	r5, r0
 800ec80:	460c      	mov	r4, r1
 800ec82:	db27      	blt.n	800ecd4 <GUI_TOUCH_CalibratePoint+0x60>
 800ec84:	4e15      	ldr	r6, [pc, #84]	; (800ecdc <GUI_TOUCH_CalibratePoint+0x68>)
 800ec86:	680b      	ldr	r3, [r1, #0]
 800ec88:	6836      	ldr	r6, [r6, #0]
 800ec8a:	42b3      	cmp	r3, r6
 800ec8c:	db22      	blt.n	800ecd4 <GUI_TOUCH_CalibratePoint+0x60>
 800ec8e:	4e14      	ldr	r6, [pc, #80]	; (800ece0 <GUI_TOUCH_CalibratePoint+0x6c>)
 800ec90:	6836      	ldr	r6, [r6, #0]
 800ec92:	42b2      	cmp	r2, r6
 800ec94:	dc1e      	bgt.n	800ecd4 <GUI_TOUCH_CalibratePoint+0x60>
 800ec96:	4a13      	ldr	r2, [pc, #76]	; (800ece4 <GUI_TOUCH_CalibratePoint+0x70>)
 800ec98:	6812      	ldr	r2, [r2, #0]
 800ec9a:	4293      	cmp	r3, r2
 800ec9c:	dc1a      	bgt.n	800ecd4 <GUI_TOUCH_CalibratePoint+0x60>
 800ec9e:	f7ff ff9d 	bl	800ebdc <GUI_TOUCH_TransformPoint>
 800eca2:	b9c0      	cbnz	r0, 800ecd6 <GUI_TOUCH_CalibratePoint+0x62>
 800eca4:	682a      	ldr	r2, [r5, #0]
 800eca6:	2a00      	cmp	r2, #0
 800eca8:	da01      	bge.n	800ecae <GUI_TOUCH_CalibratePoint+0x3a>
 800ecaa:	6028      	str	r0, [r5, #0]
 800ecac:	e006      	b.n	800ecbc <GUI_TOUCH_CalibratePoint+0x48>
 800ecae:	4b0e      	ldr	r3, [pc, #56]	; (800ece8 <GUI_TOUCH_CalibratePoint+0x74>)
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	429a      	cmp	r2, r3
 800ecb4:	bfa4      	itt	ge
 800ecb6:	f103 33ff 	addge.w	r3, r3, #4294967295
 800ecba:	602b      	strge	r3, [r5, #0]
 800ecbc:	6822      	ldr	r2, [r4, #0]
 800ecbe:	2a00      	cmp	r2, #0
 800ecc0:	da01      	bge.n	800ecc6 <GUI_TOUCH_CalibratePoint+0x52>
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	e004      	b.n	800ecd0 <GUI_TOUCH_CalibratePoint+0x5c>
 800ecc6:	4b09      	ldr	r3, [pc, #36]	; (800ecec <GUI_TOUCH_CalibratePoint+0x78>)
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	429a      	cmp	r2, r3
 800eccc:	db03      	blt.n	800ecd6 <GUI_TOUCH_CalibratePoint+0x62>
 800ecce:	3b01      	subs	r3, #1
 800ecd0:	6023      	str	r3, [r4, #0]
 800ecd2:	bd70      	pop	{r4, r5, r6, pc}
 800ecd4:	2001      	movs	r0, #1
 800ecd6:	bd70      	pop	{r4, r5, r6, pc}
 800ecd8:	200194a4 	.word	0x200194a4
 800ecdc:	200194a8 	.word	0x200194a8
 800ece0:	200194d4 	.word	0x200194d4
 800ece4:	200194d0 	.word	0x200194d0
 800ece8:	200194ac 	.word	0x200194ac
 800ecec:	200194b0 	.word	0x200194b0

0800ecf0 <GUI_TOUCH_CalcCoefficients>:
 800ecf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ecf4:	ed2d 8b02 	vpush	{d8}
 800ecf8:	f8df c3bc 	ldr.w	ip, [pc, #956]	; 800f0b8 <GUI_TOUCH_CalcCoefficients+0x3c8>
 800ecfc:	b08c      	sub	sp, #48	; 0x30
 800ecfe:	2400      	movs	r4, #0
 800ed00:	2802      	cmp	r0, #2
 800ed02:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800ed04:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ed06:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 800ed0a:	f8cc 4000 	str.w	r4, [ip]
 800ed0e:	d135      	bne.n	800ed7c <GUI_TOUCH_CalcCoefficients+0x8c>
 800ed10:	c912      	ldmia	r1, {r1, r4}
 800ed12:	6818      	ldr	r0, [r3, #0]
 800ed14:	685b      	ldr	r3, [r3, #4]
 800ed16:	1a61      	subs	r1, r4, r1
 800ed18:	1a1b      	subs	r3, r3, r0
 800ed1a:	ee00 1a10 	vmov	s0, r1
 800ed1e:	ee07 3a90 	vmov	s15, r3
 800ed22:	eeb8 7ac0 	vcvt.f32.s32	s14, s0
 800ed26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ed2a:	ee05 0a10 	vmov	s10, r0
 800ed2e:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800ed32:	6850      	ldr	r0, [r2, #4]
 800ed34:	6812      	ldr	r2, [r2, #0]
 800ed36:	4bdb      	ldr	r3, [pc, #876]	; (800f0a4 <GUI_TOUCH_CalcCoefficients+0x3b4>)
 800ed38:	2100      	movs	r1, #0
 800ed3a:	1a82      	subs	r2, r0, r2
 800ed3c:	6059      	str	r1, [r3, #4]
 800ed3e:	60d9      	str	r1, [r3, #12]
 800ed40:	6839      	ldr	r1, [r7, #0]
 800ed42:	eeb8 7ac5 	vcvt.f32.s32	s14, s10
 800ed46:	ee06 2a10 	vmov	s12, r2
 800ed4a:	687a      	ldr	r2, [r7, #4]
 800ed4c:	edc3 7a00 	vstr	s15, [r3]
 800ed50:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800ed54:	1a52      	subs	r2, r2, r1
 800ed56:	edc3 7a02 	vstr	s15, [r3, #8]
 800ed5a:	ee07 2a90 	vmov	s15, r2
 800ed5e:	eeb8 7ac6 	vcvt.f32.s32	s14, s12
 800ed62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ed66:	ee06 1a90 	vmov	s13, r1
 800ed6a:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800ed6e:	eeb8 7ae6 	vcvt.f32.s32	s14, s13
 800ed72:	edc3 7a04 	vstr	s15, [r3, #16]
 800ed76:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800ed7a:	e144      	b.n	800f006 <GUI_TOUCH_CalcCoefficients+0x316>
 800ed7c:	f340 8148 	ble.w	800f010 <GUI_TOUCH_CalcCoefficients+0x320>
 800ed80:	2803      	cmp	r0, #3
 800ed82:	d128      	bne.n	800edd6 <GUI_TOUCH_CalcCoefficients+0xe6>
 800ed84:	4620      	mov	r0, r4
 800ed86:	581d      	ldr	r5, [r3, r0]
 800ed88:	ee00 5a10 	vmov	s0, r5
 800ed8c:	583d      	ldr	r5, [r7, r0]
 800ed8e:	eef8 7ac0 	vcvt.f32.s32	s15, s0
 800ed92:	ac00      	add	r4, sp, #0
 800ed94:	ee00 5a10 	vmov	s0, r5
 800ed98:	580d      	ldr	r5, [r1, r0]
 800ed9a:	4404      	add	r4, r0
 800ed9c:	edc4 7a00 	vstr	s15, [r4]
 800eda0:	eef8 7ac0 	vcvt.f32.s32	s15, s0
 800eda4:	ac03      	add	r4, sp, #12
 800eda6:	ee00 5a10 	vmov	s0, r5
 800edaa:	4404      	add	r4, r0
 800edac:	5815      	ldr	r5, [r2, r0]
 800edae:	edc4 7a00 	vstr	s15, [r4]
 800edb2:	eef8 7ac0 	vcvt.f32.s32	s15, s0
 800edb6:	ac0c      	add	r4, sp, #48	; 0x30
 800edb8:	4404      	add	r4, r0
 800edba:	ee00 5a10 	vmov	s0, r5
 800edbe:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
 800edc2:	ac0c      	add	r4, sp, #48	; 0x30
 800edc4:	4404      	add	r4, r0
 800edc6:	eef8 7ac0 	vcvt.f32.s32	s15, s0
 800edca:	3004      	adds	r0, #4
 800edcc:	280c      	cmp	r0, #12
 800edce:	ed44 7a03 	vstr	s15, [r4, #-12]
 800edd2:	d1d8      	bne.n	800ed86 <GUI_TOUCH_CalcCoefficients+0x96>
 800edd4:	e09b      	b.n	800ef0e <GUI_TOUCH_CalcCoefficients+0x21e>
 800edd6:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800edda:	44a1      	add	r9, r4
 800eddc:	f04f 0800 	mov.w	r8, #0
 800ede0:	f849 8c0c 	str.w	r8, [r9, #-12]
 800ede4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800ede8:	44a1      	add	r9, r4
 800edea:	f849 8c18 	str.w	r8, [r9, #-24]
 800edee:	f10d 090c 	add.w	r9, sp, #12
 800edf2:	44a1      	add	r9, r4
 800edf4:	f8c9 8000 	str.w	r8, [r9]
 800edf8:	f10d 0900 	add.w	r9, sp, #0
 800edfc:	44a1      	add	r9, r4
 800edfe:	3404      	adds	r4, #4
 800ee00:	2c0c      	cmp	r4, #12
 800ee02:	f8c9 8000 	str.w	r8, [r9]
 800ee06:	d1e6      	bne.n	800edd6 <GUI_TOUCH_CalcCoefficients+0xe6>
 800ee08:	ed9d 7a02 	vldr	s14, [sp, #8]
 800ee0c:	eddd 7a05 	vldr	s15, [sp, #20]
 800ee10:	eddd 3a08 	vldr	s7, [sp, #32]
 800ee14:	ed9d 4a0b 	vldr	s8, [sp, #44]	; 0x2c
 800ee18:	eddd 1a00 	vldr	s3, [sp]
 800ee1c:	eddd 5a01 	vldr	s11, [sp, #4]
 800ee20:	ed9d 2a04 	vldr	s4, [sp, #16]
 800ee24:	eddd 2a06 	vldr	s5, [sp, #24]
 800ee28:	ed9d 3a07 	vldr	s6, [sp, #28]
 800ee2c:	eddd 0a09 	vldr	s1, [sp, #36]	; 0x24
 800ee30:	ed9d 1a0a 	vldr	s2, [sp, #40]	; 0x28
 800ee34:	ea4f 0880 	mov.w	r8, r0, lsl #2
 800ee38:	2400      	movs	r4, #0
 800ee3a:	591d      	ldr	r5, [r3, r4]
 800ee3c:	ee00 5a10 	vmov	s0, r5
 800ee40:	593d      	ldr	r5, [r7, r4]
 800ee42:	eeb8 6ac0 	vcvt.f32.s32	s12, s0
 800ee46:	ee00 5a10 	vmov	s0, r5
 800ee4a:	590d      	ldr	r5, [r1, r4]
 800ee4c:	eef8 6ac0 	vcvt.f32.s32	s13, s0
 800ee50:	ee00 5a10 	vmov	s0, r5
 800ee54:	5915      	ldr	r5, [r2, r4]
 800ee56:	eef8 4ac0 	vcvt.f32.s32	s9, s0
 800ee5a:	ee00 5a10 	vmov	s0, r5
 800ee5e:	eeb8 5ac0 	vcvt.f32.s32	s10, s0
 800ee62:	eee6 2a24 	vfma.f32	s5, s12, s9
 800ee66:	3404      	adds	r4, #4
 800ee68:	4544      	cmp	r4, r8
 800ee6a:	ee73 3aa4 	vadd.f32	s7, s7, s9
 800ee6e:	eea6 3aa4 	vfma.f32	s6, s13, s9
 800ee72:	eef0 4a60 	vmov.f32	s9, s1
 800ee76:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ee7a:	eee6 1a06 	vfma.f32	s3, s12, s12
 800ee7e:	eee6 5a26 	vfma.f32	s11, s12, s13
 800ee82:	eee6 4a05 	vfma.f32	s9, s12, s10
 800ee86:	eeb0 6a41 	vmov.f32	s12, s2
 800ee8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ee8e:	ee34 4a05 	vadd.f32	s8, s8, s10
 800ee92:	eea6 2aa6 	vfma.f32	s4, s13, s13
 800ee96:	eea6 6a85 	vfma.f32	s12, s13, s10
 800ee9a:	d004      	beq.n	800eea6 <GUI_TOUCH_CalcCoefficients+0x1b6>
 800ee9c:	eef0 0a64 	vmov.f32	s1, s9
 800eea0:	eeb0 1a46 	vmov.f32	s2, s12
 800eea4:	e7c9      	b.n	800ee3a <GUI_TOUCH_CalcCoefficients+0x14a>
 800eea6:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 800eeaa:	ee05 0a10 	vmov	s10, r0
 800eeae:	edcd 6a01 	vstr	s13, [sp, #4]
 800eeb2:	eef8 6ac5 	vcvt.f32.s32	s13, s10
 800eeb6:	eec1 1a87 	vdiv.f32	s3, s3, s14
 800eeba:	eec5 5a87 	vdiv.f32	s11, s11, s14
 800eebe:	ee82 2a27 	vdiv.f32	s4, s4, s15
 800eec2:	eec2 2a87 	vdiv.f32	s5, s5, s14
 800eec6:	ee83 3a27 	vdiv.f32	s6, s6, s15
 800eeca:	eec4 4a87 	vdiv.f32	s9, s9, s14
 800eece:	ee86 6a27 	vdiv.f32	s12, s12, s15
 800eed2:	ee87 7a26 	vdiv.f32	s14, s14, s13
 800eed6:	eec7 7aa6 	vdiv.f32	s15, s15, s13
 800eeda:	eec3 3aa6 	vdiv.f32	s7, s7, s13
 800eede:	eec4 6a26 	vdiv.f32	s13, s8, s13
 800eee2:	edcd 1a00 	vstr	s3, [sp]
 800eee6:	edcd 5a03 	vstr	s11, [sp, #12]
 800eeea:	ed8d 2a04 	vstr	s4, [sp, #16]
 800eeee:	edcd 2a06 	vstr	s5, [sp, #24]
 800eef2:	ed8d 3a07 	vstr	s6, [sp, #28]
 800eef6:	edcd 4a09 	vstr	s9, [sp, #36]	; 0x24
 800eefa:	ed8d 6a0a 	vstr	s12, [sp, #40]	; 0x28
 800eefe:	ed8d 7a02 	vstr	s14, [sp, #8]
 800ef02:	edcd 7a05 	vstr	s15, [sp, #20]
 800ef06:	edcd 3a08 	vstr	s7, [sp, #32]
 800ef0a:	edcd 6a0b 	vstr	s13, [sp, #44]	; 0x2c
 800ef0e:	ed9d 7a02 	vldr	s14, [sp, #8]
 800ef12:	eddd 4a05 	vldr	s9, [sp, #20]
 800ef16:	ed9d 6a01 	vldr	s12, [sp, #4]
 800ef1a:	ed9d 3a03 	vldr	s6, [sp, #12]
 800ef1e:	eddd 5a00 	vldr	s11, [sp]
 800ef22:	eddd 2a04 	vldr	s5, [sp, #16]
 800ef26:	ee76 6a47 	vsub.f32	s13, s12, s14
 800ef2a:	ee73 1a64 	vsub.f32	s3, s6, s9
 800ef2e:	ee35 2ac7 	vsub.f32	s4, s11, s14
 800ef32:	ee32 1ae4 	vsub.f32	s2, s5, s9
 800ef36:	ee61 7ae6 	vnmul.f32	s15, s3, s13
 800ef3a:	eee2 7a01 	vfma.f32	s15, s4, s2
 800ef3e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ef42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef46:	d063      	beq.n	800f010 <GUI_TOUCH_CalcCoefficients+0x320>
 800ef48:	ed9d 4a08 	vldr	s8, [sp, #32]
 800ef4c:	eddd 0a07 	vldr	s1, [sp, #28]
 800ef50:	eddd 3a06 	vldr	s7, [sp, #24]
 800ef54:	4b53      	ldr	r3, [pc, #332]	; (800f0a4 <GUI_TOUCH_CalcCoefficients+0x3b4>)
 800ef56:	ee30 8ac4 	vsub.f32	s16, s1, s8
 800ef5a:	ee33 5ac4 	vsub.f32	s10, s7, s8
 800ef5e:	ee21 0ac8 	vnmul.f32	s0, s3, s16
 800ef62:	eea5 0a01 	vfma.f32	s0, s10, s2
 800ef66:	ee26 5ac5 	vnmul.f32	s10, s13, s10
 800ef6a:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800ef6e:	eea8 5a02 	vfma.f32	s10, s16, s4
 800ef72:	ed83 0a00 	vstr	s0, [r3]
 800ef76:	ee85 5a27 	vdiv.f32	s10, s10, s15
 800ef7a:	ed83 5a01 	vstr	s10, [r3, #4]
 800ef7e:	ee23 5ac7 	vnmul.f32	s10, s7, s14
 800ef82:	eea5 5a84 	vfma.f32	s10, s11, s8
 800ef86:	ee24 4a46 	vnmul.f32	s8, s8, s12
 800ef8a:	ee22 5a85 	vmul.f32	s10, s5, s10
 800ef8e:	eea7 4a20 	vfma.f32	s8, s14, s1
 800ef92:	eea3 5a04 	vfma.f32	s10, s6, s8
 800ef96:	ee20 4ae5 	vnmul.f32	s8, s1, s11
 800ef9a:	eea6 4a23 	vfma.f32	s8, s12, s7
 800ef9e:	eddd 3a0a 	vldr	s7, [sp, #40]	; 0x28
 800efa2:	eea4 5a84 	vfma.f32	s10, s9, s8
 800efa6:	ed9d 4a09 	vldr	s8, [sp, #36]	; 0x24
 800efaa:	ee85 5a27 	vdiv.f32	s10, s10, s15
 800efae:	ed83 5a02 	vstr	s10, [r3, #8]
 800efb2:	ed9d 5a0b 	vldr	s10, [sp, #44]	; 0x2c
 800efb6:	ee34 0a45 	vsub.f32	s0, s8, s10
 800efba:	ee73 0ac5 	vsub.f32	s1, s7, s10
 800efbe:	ee66 6ac0 	vnmul.f32	s13, s13, s0
 800efc2:	ee61 1ae0 	vnmul.f32	s3, s3, s1
 800efc6:	eee0 6a82 	vfma.f32	s13, s1, s4
 800efca:	eee0 1a01 	vfma.f32	s3, s0, s2
 800efce:	eec6 6aa7 	vdiv.f32	s13, s13, s15
 800efd2:	eec1 1aa7 	vdiv.f32	s3, s3, s15
 800efd6:	edc3 6a04 	vstr	s13, [r3, #16]
 800efda:	ee64 6a47 	vnmul.f32	s13, s8, s14
 800efde:	edc3 1a03 	vstr	s3, [r3, #12]
 800efe2:	eee5 6a85 	vfma.f32	s13, s11, s10
 800efe6:	ee25 5a46 	vnmul.f32	s10, s10, s12
 800efea:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800efee:	eea7 5a23 	vfma.f32	s10, s14, s7
 800eff2:	ee63 5ae5 	vnmul.f32	s11, s7, s11
 800eff6:	eee3 6a05 	vfma.f32	s13, s6, s10
 800effa:	eee6 5a04 	vfma.f32	s11, s12, s8
 800effe:	eee4 6aa5 	vfma.f32	s13, s9, s11
 800f002:	eec6 7aa7 	vdiv.f32	s15, s13, s15
 800f006:	edc3 7a05 	vstr	s15, [r3, #20]
 800f00a:	2301      	movs	r3, #1
 800f00c:	f8cc 3000 	str.w	r3, [ip]
 800f010:	f8dc 0000 	ldr.w	r0, [ip]
 800f014:	2800      	cmp	r0, #0
 800f016:	f000 80a7 	beq.w	800f168 <GUI_TOUCH_CalcCoefficients+0x478>
 800f01a:	4b23      	ldr	r3, [pc, #140]	; (800f0a8 <GUI_TOUCH_CalcCoefficients+0x3b8>)
 800f01c:	eddf 7a23 	vldr	s15, [pc, #140]	; 800f0ac <GUI_TOUCH_CalcCoefficients+0x3bc>
 800f020:	601e      	str	r6, [r3, #0]
 800f022:	4b23      	ldr	r3, [pc, #140]	; (800f0b0 <GUI_TOUCH_CalcCoefficients+0x3c0>)
 800f024:	f8c3 a000 	str.w	sl, [r3]
 800f028:	4b1e      	ldr	r3, [pc, #120]	; (800f0a4 <GUI_TOUCH_CalcCoefficients+0x3b4>)
 800f02a:	ed93 7a00 	vldr	s14, [r3]
 800f02e:	eeb4 7a67 	vcmp.f32	s14, s15
 800f032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f036:	d012      	beq.n	800f05e <GUI_TOUCH_CalcCoefficients+0x36e>
 800f038:	edd3 6a01 	vldr	s13, [r3, #4]
 800f03c:	eee6 7ae7 	vfms.f32	s15, s13, s15
 800f040:	edd3 6a02 	vldr	s13, [r3, #8]
 800f044:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f048:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800f04c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f050:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800f054:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f058:	ee17 1a90 	vmov	r1, s15
 800f05c:	e001      	b.n	800f062 <GUI_TOUCH_CalcCoefficients+0x372>
 800f05e:	f04f 31ff 	mov.w	r1, #4294967295
 800f062:	edd3 7a04 	vldr	s15, [r3, #16]
 800f066:	eddf 6a11 	vldr	s13, [pc, #68]	; 800f0ac <GUI_TOUCH_CalcCoefficients+0x3bc>
 800f06a:	4c12      	ldr	r4, [pc, #72]	; (800f0b4 <GUI_TOUCH_CalcCoefficients+0x3c4>)
 800f06c:	4a0d      	ldr	r2, [pc, #52]	; (800f0a4 <GUI_TOUCH_CalcCoefficients+0x3b4>)
 800f06e:	6021      	str	r1, [r4, #0]
 800f070:	eef4 7a66 	vcmp.f32	s15, s13
 800f074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f078:	4627      	mov	r7, r4
 800f07a:	d01f      	beq.n	800f0bc <GUI_TOUCH_CalcCoefficients+0x3cc>
 800f07c:	ed92 6a03 	vldr	s12, [r2, #12]
 800f080:	eee6 6a66 	vfms.f32	s13, s12, s13
 800f084:	ed92 6a05 	vldr	s12, [r2, #20]
 800f088:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800f08c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800f090:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800f094:	eec6 6aa7 	vdiv.f32	s13, s13, s15
 800f098:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800f09c:	ee16 2a90 	vmov	r2, s13
 800f0a0:	e00e      	b.n	800f0c0 <GUI_TOUCH_CalcCoefficients+0x3d0>
 800f0a2:	bf00      	nop
 800f0a4:	200194b8 	.word	0x200194b8
 800f0a8:	200194ac 	.word	0x200194ac
 800f0ac:	00000000 	.word	0x00000000
 800f0b0:	200194b0 	.word	0x200194b0
 800f0b4:	200194a4 	.word	0x200194a4
 800f0b8:	200194b4 	.word	0x200194b4
 800f0bc:	f04f 32ff 	mov.w	r2, #4294967295
 800f0c0:	4c2e      	ldr	r4, [pc, #184]	; (800f17c <GUI_TOUCH_CalcCoefficients+0x48c>)
 800f0c2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f0c6:	3e01      	subs	r6, #1
 800f0c8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f0cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0d0:	ee05 6a90 	vmov	s11, r6
 800f0d4:	6022      	str	r2, [r4, #0]
 800f0d6:	ee06 aa10 	vmov	s12, sl
 800f0da:	4626      	mov	r6, r4
 800f0dc:	d016      	beq.n	800f10c <GUI_TOUCH_CalcCoefficients+0x41c>
 800f0de:	ed93 5a01 	vldr	s10, [r3, #4]
 800f0e2:	eef8 4ac6 	vcvt.f32.s32	s9, s12
 800f0e6:	eef8 6ae5 	vcvt.f32.s32	s13, s11
 800f0ea:	eee4 6ac5 	vfms.f32	s13, s9, s10
 800f0ee:	ed93 5a02 	vldr	s10, [r3, #8]
 800f0f2:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800f0f6:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 800f0fa:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800f0fe:	ee86 7a87 	vdiv.f32	s14, s13, s14
 800f102:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800f106:	ee17 4a10 	vmov	r4, s14
 800f10a:	e001      	b.n	800f110 <GUI_TOUCH_CalcCoefficients+0x420>
 800f10c:	f04f 34ff 	mov.w	r4, #4294967295
 800f110:	4d1b      	ldr	r5, [pc, #108]	; (800f180 <GUI_TOUCH_CalcCoefficients+0x490>)
 800f112:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f11a:	602c      	str	r4, [r5, #0]
 800f11c:	46ac      	mov	ip, r5
 800f11e:	d016      	beq.n	800f14e <GUI_TOUCH_CalcCoefficients+0x45e>
 800f120:	edd3 6a03 	vldr	s13, [r3, #12]
 800f124:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800f128:	eeb8 7ac6 	vcvt.f32.s32	s14, s12
 800f12c:	eea5 7ae6 	vfms.f32	s14, s11, s13
 800f130:	edd3 6a05 	vldr	s13, [r3, #20]
 800f134:	ee37 7a66 	vsub.f32	s14, s14, s13
 800f138:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800f13c:	ee37 7a66 	vsub.f32	s14, s14, s13
 800f140:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800f144:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f148:	ee17 3a90 	vmov	r3, s15
 800f14c:	e001      	b.n	800f152 <GUI_TOUCH_CalcCoefficients+0x462>
 800f14e:	f04f 33ff 	mov.w	r3, #4294967295
 800f152:	42a1      	cmp	r1, r4
 800f154:	4d0b      	ldr	r5, [pc, #44]	; (800f184 <GUI_TOUCH_CalcCoefficients+0x494>)
 800f156:	bfc4      	itt	gt
 800f158:	603c      	strgt	r4, [r7, #0]
 800f15a:	f8cc 1000 	strgt.w	r1, [ip]
 800f15e:	429a      	cmp	r2, r3
 800f160:	602b      	str	r3, [r5, #0]
 800f162:	bfc4      	itt	gt
 800f164:	6033      	strgt	r3, [r6, #0]
 800f166:	602a      	strgt	r2, [r5, #0]
 800f168:	f1d0 0001 	rsbs	r0, r0, #1
 800f16c:	bf38      	it	cc
 800f16e:	2000      	movcc	r0, #0
 800f170:	b00c      	add	sp, #48	; 0x30
 800f172:	ecbd 8b02 	vpop	{d8}
 800f176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f17a:	bf00      	nop
 800f17c:	200194a8 	.word	0x200194a8
 800f180:	200194d4 	.word	0x200194d4
 800f184:	200194d0 	.word	0x200194d0

0800f188 <GUI_TOUCH_StoreStateEx>:
 800f188:	b530      	push	{r4, r5, lr}
 800f18a:	4d0f      	ldr	r5, [pc, #60]	; (800f1c8 <GUI_TOUCH_StoreStateEx+0x40>)
 800f18c:	b085      	sub	sp, #20
 800f18e:	4629      	mov	r1, r5
 800f190:	220c      	movs	r2, #12
 800f192:	4604      	mov	r4, r0
 800f194:	f006 fa4e 	bl	8015634 <memcmp>
 800f198:	b1a0      	cbz	r0, 800f1c4 <GUI_TOUCH_StoreStateEx+0x3c>
 800f19a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800f19e:	4b0b      	ldr	r3, [pc, #44]	; (800f1cc <GUI_TOUCH_StoreStateEx+0x44>)
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800f1a6:	b153      	cbz	r3, 800f1be <GUI_TOUCH_StoreStateEx+0x36>
 800f1a8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800f1ac:	ad01      	add	r5, sp, #4
 800f1ae:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800f1b2:	4628      	mov	r0, r5
 800f1b4:	a902      	add	r1, sp, #8
 800f1b6:	4798      	blx	r3
 800f1b8:	b920      	cbnz	r0, 800f1c4 <GUI_TOUCH_StoreStateEx+0x3c>
 800f1ba:	4628      	mov	r0, r5
 800f1bc:	e000      	b.n	800f1c0 <GUI_TOUCH_StoreStateEx+0x38>
 800f1be:	4620      	mov	r0, r4
 800f1c0:	f000 f916 	bl	800f3f0 <GUI_PID_StoreState>
 800f1c4:	b005      	add	sp, #20
 800f1c6:	bd30      	pop	{r4, r5, pc}
 800f1c8:	200194d8 	.word	0x200194d8
 800f1cc:	200194e4 	.word	0x200194e4

0800f1d0 <GUI_SetTextMode>:
 800f1d0:	4b03      	ldr	r3, [pc, #12]	; (800f1e0 <GUI_SetTextMode+0x10>)
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	; 0x2a
 800f1d8:	8558      	strh	r0, [r3, #42]	; 0x2a
 800f1da:	4610      	mov	r0, r2
 800f1dc:	4770      	bx	lr
 800f1de:	bf00      	nop
 800f1e0:	20000238 	.word	0x20000238

0800f1e4 <GUI_SetFont>:
 800f1e4:	4b03      	ldr	r3, [pc, #12]	; (800f1f4 <GUI_SetFont+0x10>)
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	69d9      	ldr	r1, [r3, #28]
 800f1ea:	b100      	cbz	r0, 800f1ee <GUI_SetFont+0xa>
 800f1ec:	61d8      	str	r0, [r3, #28]
 800f1ee:	4608      	mov	r0, r1
 800f1f0:	4770      	bx	lr
 800f1f2:	bf00      	nop
 800f1f4:	20000238 	.word	0x20000238

0800f1f8 <GUI_SetDrawMode>:
 800f1f8:	f7fe bb7a 	b.w	800d8f0 <LCD_SetDrawMode>

0800f1fc <GL_SetDefault>:
 800f1fc:	b508      	push	{r3, lr}
 800f1fe:	2000      	movs	r0, #0
 800f200:	f000 f81c 	bl	800f23c <GUI_SetBkColor>
 800f204:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800f208:	f000 f81a 	bl	800f240 <GUI_SetColor>
 800f20c:	2001      	movs	r0, #1
 800f20e:	f000 f8bd 	bl	800f38c <GUI_SetPenSize>
 800f212:	2000      	movs	r0, #0
 800f214:	f005 f9e2 	bl	80145dc <GUI_SetTextAlign>
 800f218:	2000      	movs	r0, #0
 800f21a:	f7ff ffd9 	bl	800f1d0 <GUI_SetTextMode>
 800f21e:	2000      	movs	r0, #0
 800f220:	f7ff ffea 	bl	800f1f8 <GUI_SetDrawMode>
 800f224:	4b04      	ldr	r3, [pc, #16]	; (800f238 <GL_SetDefault+0x3c>)
 800f226:	6818      	ldr	r0, [r3, #0]
 800f228:	f7ff ffdc 	bl	800f1e4 <GUI_SetFont>
 800f22c:	2000      	movs	r0, #0
 800f22e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f232:	f005 b9f7 	b.w	8014624 <GUI_SetLineStyle>
 800f236:	bf00      	nop
 800f238:	2000023c 	.word	0x2000023c

0800f23c <GUI_SetBkColor>:
 800f23c:	f7fe bea0 	b.w	800df80 <LCD_SetBkColor>

0800f240 <GUI_SetColor>:
 800f240:	f7fe bea6 	b.w	800df90 <LCD_SetColor>

0800f244 <GUI__AlphaPreserveTrans>:
 800f244:	b510      	push	{r4, lr}
 800f246:	4b07      	ldr	r3, [pc, #28]	; (800f264 <GUI__AlphaPreserveTrans+0x20>)
 800f248:	781c      	ldrb	r4, [r3, #0]
 800f24a:	b120      	cbz	r0, 800f256 <GUI__AlphaPreserveTrans+0x12>
 800f24c:	2201      	movs	r2, #1
 800f24e:	701a      	strb	r2, [r3, #0]
 800f250:	f04f 30ff 	mov.w	r0, #4294967295
 800f254:	e002      	b.n	800f25c <GUI__AlphaPreserveTrans+0x18>
 800f256:	7018      	strb	r0, [r3, #0]
 800f258:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800f25c:	f004 fd54 	bl	8013d08 <LCD_AA_SetAndMask>
 800f260:	4620      	mov	r0, r4
 800f262:	bd10      	pop	{r4, pc}
 800f264:	2001b2b1 	.word	0x2001b2b1

0800f268 <GUI_GetCursorLayer>:
 800f268:	2801      	cmp	r0, #1
 800f26a:	bf9a      	itte	ls
 800f26c:	4b02      	ldrls	r3, [pc, #8]	; (800f278 <GUI_GetCursorLayer+0x10>)
 800f26e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800f272:	2000      	movhi	r0, #0
 800f274:	4770      	bx	lr
 800f276:	bf00      	nop
 800f278:	200194e8 	.word	0x200194e8

0800f27c <GUI_GetLayerPosEx>:
 800f27c:	b538      	push	{r3, r4, r5, lr}
 800f27e:	460d      	mov	r5, r1
 800f280:	4614      	mov	r4, r2
 800f282:	f7fe fa13 	bl	800d6ac <LCD_GetPosEx>
 800f286:	b110      	cbz	r0, 800f28e <GUI_GetLayerPosEx+0x12>
 800f288:	2300      	movs	r3, #0
 800f28a:	602b      	str	r3, [r5, #0]
 800f28c:	6023      	str	r3, [r4, #0]
 800f28e:	bd38      	pop	{r3, r4, r5, pc}

0800f290 <GUI_SelectLayer>:
 800f290:	b570      	push	{r4, r5, r6, lr}
 800f292:	4d08      	ldr	r5, [pc, #32]	; (800f2b4 <GUI_SelectLayer+0x24>)
 800f294:	682b      	ldr	r3, [r5, #0]
 800f296:	2801      	cmp	r0, #1
 800f298:	4604      	mov	r4, r0
 800f29a:	7c5e      	ldrb	r6, [r3, #17]
 800f29c:	d808      	bhi.n	800f2b0 <GUI_SelectLayer+0x20>
 800f29e:	f000 fb83 	bl	800f9a8 <GUI_DEVICE__GetpDriver>
 800f2a2:	b128      	cbz	r0, 800f2b0 <GUI_SelectLayer+0x20>
 800f2a4:	682b      	ldr	r3, [r5, #0]
 800f2a6:	745c      	strb	r4, [r3, #17]
 800f2a8:	f000 f80a 	bl	800f2c0 <GUI_SelectLCD>
 800f2ac:	4b02      	ldr	r3, [pc, #8]	; (800f2b8 <GUI_SelectLayer+0x28>)
 800f2ae:	601c      	str	r4, [r3, #0]
 800f2b0:	4630      	mov	r0, r6
 800f2b2:	bd70      	pop	{r4, r5, r6, pc}
 800f2b4:	20000238 	.word	0x20000238
 800f2b8:	2001b248 	.word	0x2001b248

0800f2bc <GUI_SetLayerPosEx>:
 800f2bc:	f7fe b9c6 	b.w	800d64c <LCD_SetPosEx>

0800f2c0 <GUI_SelectLCD>:
 800f2c0:	b508      	push	{r3, lr}
 800f2c2:	f004 fb79 	bl	80139b8 <LCD_SelectLCD>
 800f2c6:	f7fe f967 	bl	800d598 <LCD_UpdateColorIndices>
 800f2ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f2ce:	f7fb beff 	b.w	800b0d0 <WM_Activate>
	...

0800f2d4 <GUI_SaveContext_W>:
 800f2d4:	b508      	push	{r3, lr}
 800f2d6:	4b03      	ldr	r3, [pc, #12]	; (800f2e4 <GUI_SaveContext_W+0x10>)
 800f2d8:	2270      	movs	r2, #112	; 0x70
 800f2da:	6819      	ldr	r1, [r3, #0]
 800f2dc:	f006 f9b9 	bl	8015652 <memcpy>
 800f2e0:	bd08      	pop	{r3, pc}
 800f2e2:	bf00      	nop
 800f2e4:	20000238 	.word	0x20000238

0800f2e8 <GUI_RestoreContext>:
 800f2e8:	b508      	push	{r3, lr}
 800f2ea:	4b03      	ldr	r3, [pc, #12]	; (800f2f8 <GUI_RestoreContext+0x10>)
 800f2ec:	4601      	mov	r1, r0
 800f2ee:	2270      	movs	r2, #112	; 0x70
 800f2f0:	6818      	ldr	r0, [r3, #0]
 800f2f2:	f006 f9ae 	bl	8015652 <memcpy>
 800f2f6:	bd08      	pop	{r3, pc}
 800f2f8:	20000238 	.word	0x20000238

0800f2fc <GUI_RectsIntersect>:
 800f2fc:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800f300:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800f304:	429a      	cmp	r2, r3
 800f306:	dc14      	bgt.n	800f332 <GUI_RectsIntersect+0x36>
 800f308:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 800f30c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800f310:	429a      	cmp	r2, r3
 800f312:	dc0e      	bgt.n	800f332 <GUI_RectsIntersect+0x36>
 800f314:	f9b0 2000 	ldrsh.w	r2, [r0]
 800f318:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800f31c:	429a      	cmp	r2, r3
 800f31e:	dc08      	bgt.n	800f332 <GUI_RectsIntersect+0x36>
 800f320:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800f324:	f9b1 2000 	ldrsh.w	r2, [r1]
 800f328:	429a      	cmp	r2, r3
 800f32a:	bfcc      	ite	gt
 800f32c:	2000      	movgt	r0, #0
 800f32e:	2001      	movle	r0, #1
 800f330:	4770      	bx	lr
 800f332:	2000      	movs	r0, #0
 800f334:	4770      	bx	lr

0800f336 <GUI_ALLOC_Realloc>:
 800f336:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f338:	4604      	mov	r4, r0
 800f33a:	4608      	mov	r0, r1
 800f33c:	460e      	mov	r6, r1
 800f33e:	f002 f99d 	bl	801167c <GUI_ALLOC_AllocNoInit>
 800f342:	4605      	mov	r5, r0
 800f344:	b1f8      	cbz	r0, 800f386 <GUI_ALLOC_Realloc+0x50>
 800f346:	b1f4      	cbz	r4, 800f386 <GUI_ALLOC_Realloc+0x50>
 800f348:	4620      	mov	r0, r4
 800f34a:	f001 ff71 	bl	8011230 <GUI_ALLOC_GetSize>
 800f34e:	42b0      	cmp	r0, r6
 800f350:	bfb4      	ite	lt
 800f352:	4607      	movlt	r7, r0
 800f354:	4637      	movge	r7, r6
 800f356:	4628      	mov	r0, r5
 800f358:	f001 ff3c 	bl	80111d4 <GUI_ALLOC_LockH>
 800f35c:	9000      	str	r0, [sp, #0]
 800f35e:	4620      	mov	r0, r4
 800f360:	f001 ff38 	bl	80111d4 <GUI_ALLOC_LockH>
 800f364:	ae02      	add	r6, sp, #8
 800f366:	4601      	mov	r1, r0
 800f368:	463a      	mov	r2, r7
 800f36a:	9001      	str	r0, [sp, #4]
 800f36c:	f856 0d08 	ldr.w	r0, [r6, #-8]!
 800f370:	f006 f96f 	bl	8015652 <memcpy>
 800f374:	4668      	mov	r0, sp
 800f376:	f001 ff3b 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800f37a:	a801      	add	r0, sp, #4
 800f37c:	f001 ff38 	bl	80111f0 <GUI_ALLOC_UnlockH>
 800f380:	4620      	mov	r0, r4
 800f382:	f001 ff61 	bl	8011248 <GUI_ALLOC_Free>
 800f386:	4628      	mov	r0, r5
 800f388:	b003      	add	sp, #12
 800f38a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f38c <GUI_SetPenSize>:
 800f38c:	4b02      	ldr	r3, [pc, #8]	; (800f398 <GUI_SetPenSize+0xc>)
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	7e1a      	ldrb	r2, [r3, #24]
 800f392:	7618      	strb	r0, [r3, #24]
 800f394:	4610      	mov	r0, r2
 800f396:	4770      	bx	lr
 800f398:	20000238 	.word	0x20000238

0800f39c <GUI_PID_GetState>:
 800f39c:	4a11      	ldr	r2, [pc, #68]	; (800f3e4 <GUI_PID_GetState+0x48>)
 800f39e:	4912      	ldr	r1, [pc, #72]	; (800f3e8 <GUI_PID_GetState+0x4c>)
 800f3a0:	6813      	ldr	r3, [r2, #0]
 800f3a2:	6809      	ldr	r1, [r1, #0]
 800f3a4:	428b      	cmp	r3, r1
 800f3a6:	b570      	push	{r4, r5, r6, lr}
 800f3a8:	4604      	mov	r4, r0
 800f3aa:	4616      	mov	r6, r2
 800f3ac:	4d0f      	ldr	r5, [pc, #60]	; (800f3ec <GUI_PID_GetState+0x50>)
 800f3ae:	d109      	bne.n	800f3c4 <GUI_PID_GetState+0x28>
 800f3b0:	42ab      	cmp	r3, r5
 800f3b2:	bf06      	itte	eq
 800f3b4:	333c      	addeq	r3, #60	; 0x3c
 800f3b6:	e893 0007 	ldmiaeq.w	r3, {r0, r1, r2}
 800f3ba:	e913 0007 	ldmdbne	r3, {r0, r1, r2}
 800f3be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f3c2:	e00a      	b.n	800f3da <GUI_PID_GetState+0x3e>
 800f3c4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f3c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f3cc:	f105 023c 	add.w	r2, r5, #60	; 0x3c
 800f3d0:	4293      	cmp	r3, r2
 800f3d2:	bf18      	it	ne
 800f3d4:	f103 050c 	addne.w	r5, r3, #12
 800f3d8:	6035      	str	r5, [r6, #0]
 800f3da:	7a20      	ldrb	r0, [r4, #8]
 800f3dc:	3000      	adds	r0, #0
 800f3de:	bf18      	it	ne
 800f3e0:	2001      	movne	r0, #1
 800f3e2:	bd70      	pop	{r4, r5, r6, pc}
 800f3e4:	2000022c 	.word	0x2000022c
 800f3e8:	20000228 	.word	0x20000228
 800f3ec:	200194f4 	.word	0x200194f4

0800f3f0 <GUI_PID_StoreState>:
 800f3f0:	4a21      	ldr	r2, [pc, #132]	; (800f478 <GUI_PID_StoreState+0x88>)
 800f3f2:	4922      	ldr	r1, [pc, #136]	; (800f47c <GUI_PID_StoreState+0x8c>)
 800f3f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3f8:	6011      	str	r1, [r2, #0]
 800f3fa:	4f21      	ldr	r7, [pc, #132]	; (800f480 <GUI_PID_StoreState+0x90>)
 800f3fc:	4921      	ldr	r1, [pc, #132]	; (800f484 <GUI_PID_StoreState+0x94>)
 800f3fe:	683a      	ldr	r2, [r7, #0]
 800f400:	680c      	ldr	r4, [r1, #0]
 800f402:	4603      	mov	r3, r0
 800f404:	4820      	ldr	r0, [pc, #128]	; (800f488 <GUI_PID_StoreState+0x98>)
 800f406:	4294      	cmp	r4, r2
 800f408:	468c      	mov	ip, r1
 800f40a:	f100 063c 	add.w	r6, r0, #60	; 0x3c
 800f40e:	d017      	beq.n	800f440 <GUI_PID_StoreState+0x50>
 800f410:	4282      	cmp	r2, r0
 800f412:	bf14      	ite	ne
 800f414:	f1a2 010c 	subne.w	r1, r2, #12
 800f418:	4631      	moveq	r1, r6
 800f41a:	7a1d      	ldrb	r5, [r3, #8]
 800f41c:	f891 8008 	ldrb.w	r8, [r1, #8]
 800f420:	45a8      	cmp	r8, r5
 800f422:	d10d      	bne.n	800f440 <GUI_PID_StoreState+0x50>
 800f424:	428c      	cmp	r4, r1
 800f426:	d00b      	beq.n	800f440 <GUI_PID_StoreState+0x50>
 800f428:	4281      	cmp	r1, r0
 800f42a:	bf14      	ite	ne
 800f42c:	390c      	subne	r1, #12
 800f42e:	4917      	ldreq	r1, [pc, #92]	; (800f48c <GUI_PID_StoreState+0x9c>)
 800f430:	7a09      	ldrb	r1, [r1, #8]
 800f432:	42a9      	cmp	r1, r5
 800f434:	d104      	bne.n	800f440 <GUI_PID_StoreState+0x50>
 800f436:	4282      	cmp	r2, r0
 800f438:	bf14      	ite	ne
 800f43a:	3a0c      	subne	r2, #12
 800f43c:	4a13      	ldreq	r2, [pc, #76]	; (800f48c <GUI_PID_StoreState+0x9c>)
 800f43e:	603a      	str	r2, [r7, #0]
 800f440:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f444:	683d      	ldr	r5, [r7, #0]
 800f446:	42b5      	cmp	r5, r6
 800f448:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800f44c:	bf0c      	ite	eq
 800f44e:	4d0e      	ldreq	r5, [pc, #56]	; (800f488 <GUI_PID_StoreState+0x98>)
 800f450:	350c      	addne	r5, #12
 800f452:	42ac      	cmp	r4, r5
 800f454:	603d      	str	r5, [r7, #0]
 800f456:	d105      	bne.n	800f464 <GUI_PID_StoreState+0x74>
 800f458:	42b4      	cmp	r4, r6
 800f45a:	bf14      	ite	ne
 800f45c:	340c      	addne	r4, #12
 800f45e:	4c0a      	ldreq	r4, [pc, #40]	; (800f488 <GUI_PID_StoreState+0x98>)
 800f460:	f8cc 4000 	str.w	r4, [ip]
 800f464:	4a0a      	ldr	r2, [pc, #40]	; (800f490 <GUI_PID_StoreState+0xa0>)
 800f466:	6812      	ldr	r2, [r2, #0]
 800f468:	b10a      	cbz	r2, 800f46e <GUI_PID_StoreState+0x7e>
 800f46a:	4618      	mov	r0, r3
 800f46c:	4790      	blx	r2
 800f46e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f472:	f7ff b965 	b.w	800e740 <GUI_SignalEvent>
 800f476:	bf00      	nop
 800f478:	2001b2cc 	.word	0x2001b2cc
 800f47c:	08011e99 	.word	0x08011e99
 800f480:	20000228 	.word	0x20000228
 800f484:	2000022c 	.word	0x2000022c
 800f488:	200194f4 	.word	0x200194f4
 800f48c:	20019530 	.word	0x20019530
 800f490:	200194f0 	.word	0x200194f0

0800f494 <GUI_PID_IsEmpty>:
 800f494:	4b03      	ldr	r3, [pc, #12]	; (800f4a4 <GUI_PID_IsEmpty+0x10>)
 800f496:	6818      	ldr	r0, [r3, #0]
 800f498:	4b03      	ldr	r3, [pc, #12]	; (800f4a8 <GUI_PID_IsEmpty+0x14>)
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	1ac3      	subs	r3, r0, r3
 800f49e:	4258      	negs	r0, r3
 800f4a0:	4158      	adcs	r0, r3
 800f4a2:	4770      	bx	lr
 800f4a4:	2000022c 	.word	0x2000022c
 800f4a8:	20000228 	.word	0x20000228

0800f4ac <GUI_GetKey>:
 800f4ac:	4b02      	ldr	r3, [pc, #8]	; (800f4b8 <GUI_GetKey+0xc>)
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	6818      	ldr	r0, [r3, #0]
 800f4b2:	601a      	str	r2, [r3, #0]
 800f4b4:	4770      	bx	lr
 800f4b6:	bf00      	nop
 800f4b8:	2001953c 	.word	0x2001953c

0800f4bc <GUI_StoreKey>:
 800f4bc:	4b02      	ldr	r3, [pc, #8]	; (800f4c8 <GUI_StoreKey+0xc>)
 800f4be:	681a      	ldr	r2, [r3, #0]
 800f4c0:	b902      	cbnz	r2, 800f4c4 <GUI_StoreKey+0x8>
 800f4c2:	6018      	str	r0, [r3, #0]
 800f4c4:	f7ff b93c 	b.w	800e740 <GUI_SignalEvent>
 800f4c8:	2001953c 	.word	0x2001953c

0800f4cc <GUI_PollKeyMsg>:
 800f4cc:	4a0a      	ldr	r2, [pc, #40]	; (800f4f8 <GUI_PollKeyMsg+0x2c>)
 800f4ce:	490b      	ldr	r1, [pc, #44]	; (800f4fc <GUI_PollKeyMsg+0x30>)
 800f4d0:	6813      	ldr	r3, [r2, #0]
 800f4d2:	6809      	ldr	r1, [r1, #0]
 800f4d4:	428b      	cmp	r3, r1
 800f4d6:	b510      	push	{r4, lr}
 800f4d8:	d00b      	beq.n	800f4f2 <GUI_PollKeyMsg+0x26>
 800f4da:	4c09      	ldr	r4, [pc, #36]	; (800f500 <GUI_PollKeyMsg+0x34>)
 800f4dc:	42a3      	cmp	r3, r4
 800f4de:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f4e2:	bf14      	ite	ne
 800f4e4:	3308      	addne	r3, #8
 800f4e6:	3b50      	subeq	r3, #80	; 0x50
 800f4e8:	6013      	str	r3, [r2, #0]
 800f4ea:	f002 ff25 	bl	8012338 <WM_OnKey>
 800f4ee:	2001      	movs	r0, #1
 800f4f0:	bd10      	pop	{r4, pc}
 800f4f2:	2000      	movs	r0, #0
 800f4f4:	bd10      	pop	{r4, pc}
 800f4f6:	bf00      	nop
 800f4f8:	20000234 	.word	0x20000234
 800f4fc:	20000230 	.word	0x20000230
 800f500:	20019590 	.word	0x20019590

0800f504 <GUI_MoveRect>:
 800f504:	b168      	cbz	r0, 800f522 <GUI_MoveRect+0x1e>
 800f506:	8803      	ldrh	r3, [r0, #0]
 800f508:	b289      	uxth	r1, r1
 800f50a:	440b      	add	r3, r1
 800f50c:	8003      	strh	r3, [r0, #0]
 800f50e:	8883      	ldrh	r3, [r0, #4]
 800f510:	4419      	add	r1, r3
 800f512:	8843      	ldrh	r3, [r0, #2]
 800f514:	8081      	strh	r1, [r0, #4]
 800f516:	b292      	uxth	r2, r2
 800f518:	4413      	add	r3, r2
 800f51a:	8043      	strh	r3, [r0, #2]
 800f51c:	88c3      	ldrh	r3, [r0, #6]
 800f51e:	441a      	add	r2, r3
 800f520:	80c2      	strh	r2, [r0, #6]
 800f522:	4770      	bx	lr

0800f524 <GUI_MergeRect>:
 800f524:	b510      	push	{r4, lr}
 800f526:	b338      	cbz	r0, 800f578 <GUI_MergeRect+0x54>
 800f528:	b309      	cbz	r1, 800f56e <GUI_MergeRect+0x4a>
 800f52a:	b30a      	cbz	r2, 800f570 <GUI_MergeRect+0x4c>
 800f52c:	f9b1 4000 	ldrsh.w	r4, [r1]
 800f530:	f9b2 3000 	ldrsh.w	r3, [r2]
 800f534:	429c      	cmp	r4, r3
 800f536:	bfb8      	it	lt
 800f538:	4623      	movlt	r3, r4
 800f53a:	8003      	strh	r3, [r0, #0]
 800f53c:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 800f540:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800f544:	429c      	cmp	r4, r3
 800f546:	bfb8      	it	lt
 800f548:	4623      	movlt	r3, r4
 800f54a:	8043      	strh	r3, [r0, #2]
 800f54c:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 800f550:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800f554:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 800f558:	429c      	cmp	r4, r3
 800f55a:	bfa8      	it	ge
 800f55c:	4623      	movge	r3, r4
 800f55e:	8083      	strh	r3, [r0, #4]
 800f560:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 800f564:	4299      	cmp	r1, r3
 800f566:	bfa8      	it	ge
 800f568:	460b      	movge	r3, r1
 800f56a:	80c3      	strh	r3, [r0, #6]
 800f56c:	bd10      	pop	{r4, pc}
 800f56e:	4611      	mov	r1, r2
 800f570:	680b      	ldr	r3, [r1, #0]
 800f572:	6003      	str	r3, [r0, #0]
 800f574:	684b      	ldr	r3, [r1, #4]
 800f576:	6043      	str	r3, [r0, #4]
 800f578:	bd10      	pop	{r4, pc}
	...

0800f57c <GUI_InvertRect>:
 800f57c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800f580:	4607      	mov	r7, r0
 800f582:	2001      	movs	r0, #1
 800f584:	469a      	mov	sl, r3
 800f586:	460e      	mov	r6, r1
 800f588:	4691      	mov	r9, r2
 800f58a:	f7ff fe35 	bl	800f1f8 <GUI_SetDrawMode>
 800f58e:	4b12      	ldr	r3, [pc, #72]	; (800f5d8 <GUI_InvertRect+0x5c>)
 800f590:	681c      	ldr	r4, [r3, #0]
 800f592:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800f594:	6d24      	ldr	r4, [r4, #80]	; 0x50
 800f596:	442f      	add	r7, r5
 800f598:	4426      	add	r6, r4
 800f59a:	4680      	mov	r8, r0
 800f59c:	444d      	add	r5, r9
 800f59e:	4454      	add	r4, sl
 800f5a0:	4668      	mov	r0, sp
 800f5a2:	f8ad 7000 	strh.w	r7, [sp]
 800f5a6:	f8ad 5004 	strh.w	r5, [sp, #4]
 800f5aa:	f8ad 6002 	strh.w	r6, [sp, #2]
 800f5ae:	f8ad 4006 	strh.w	r4, [sp, #6]
 800f5b2:	f7fb fbb9 	bl	800ad28 <WM__InitIVRSearch>
 800f5b6:	b928      	cbnz	r0, 800f5c4 <GUI_InvertRect+0x48>
 800f5b8:	4640      	mov	r0, r8
 800f5ba:	f7ff fe1d 	bl	800f1f8 <GUI_SetDrawMode>
 800f5be:	b002      	add	sp, #8
 800f5c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5c4:	4638      	mov	r0, r7
 800f5c6:	4631      	mov	r1, r6
 800f5c8:	462a      	mov	r2, r5
 800f5ca:	4623      	mov	r3, r4
 800f5cc:	f7fe fa12 	bl	800d9f4 <LCD_FillRect>
 800f5d0:	f7fb fae8 	bl	800aba4 <WM__GetNextIVR>
 800f5d4:	e7ef      	b.n	800f5b6 <GUI_InvertRect+0x3a>
 800f5d6:	bf00      	nop
 800f5d8:	20000238 	.word	0x20000238

0800f5dc <GUI_GotoXY>:
 800f5dc:	4b02      	ldr	r3, [pc, #8]	; (800f5e8 <GUI_GotoXY+0xc>)
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	8458      	strh	r0, [r3, #34]	; 0x22
 800f5e2:	8499      	strh	r1, [r3, #36]	; 0x24
 800f5e4:	2000      	movs	r0, #0
 800f5e6:	4770      	bx	lr
 800f5e8:	20000238 	.word	0x20000238

0800f5ec <GUI_GetStringDistX>:
 800f5ec:	b510      	push	{r4, lr}
 800f5ee:	4604      	mov	r4, r0
 800f5f0:	f7fe fe44 	bl	800e27c <GUI__GetNumChars>
 800f5f4:	4601      	mov	r1, r0
 800f5f6:	4620      	mov	r0, r4
 800f5f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5fc:	f000 bd76 	b.w	80100ec <GUI__GetLineDistX>

0800f600 <GUI_GetOrg>:
 800f600:	4b04      	ldr	r3, [pc, #16]	; (800f614 <GUI_GetOrg+0x14>)
 800f602:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f606:	6003      	str	r3, [r0, #0]
 800f608:	4b03      	ldr	r3, [pc, #12]	; (800f618 <GUI_GetOrg+0x18>)
 800f60a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f60e:	600b      	str	r3, [r1, #0]
 800f610:	4770      	bx	lr
 800f612:	bf00      	nop
 800f614:	2001b2a8 	.word	0x2001b2a8
 800f618:	2001b29c 	.word	0x2001b29c

0800f61c <GUI_FillRect>:
 800f61c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f61e:	4c0f      	ldr	r4, [pc, #60]	; (800f65c <GUI_FillRect+0x40>)
 800f620:	6824      	ldr	r4, [r4, #0]
 800f622:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800f624:	6d24      	ldr	r4, [r4, #80]	; 0x50
 800f626:	1947      	adds	r7, r0, r5
 800f628:	190e      	adds	r6, r1, r4
 800f62a:	4415      	add	r5, r2
 800f62c:	441c      	add	r4, r3
 800f62e:	4668      	mov	r0, sp
 800f630:	f8ad 7000 	strh.w	r7, [sp]
 800f634:	f8ad 5004 	strh.w	r5, [sp, #4]
 800f638:	f8ad 6002 	strh.w	r6, [sp, #2]
 800f63c:	f8ad 4006 	strh.w	r4, [sp, #6]
 800f640:	f7fb fb72 	bl	800ad28 <WM__InitIVRSearch>
 800f644:	b140      	cbz	r0, 800f658 <GUI_FillRect+0x3c>
 800f646:	4638      	mov	r0, r7
 800f648:	4631      	mov	r1, r6
 800f64a:	462a      	mov	r2, r5
 800f64c:	4623      	mov	r3, r4
 800f64e:	f7fe f9d1 	bl	800d9f4 <LCD_FillRect>
 800f652:	f7fb faa7 	bl	800aba4 <WM__GetNextIVR>
 800f656:	e7f5      	b.n	800f644 <GUI_FillRect+0x28>
 800f658:	b003      	add	sp, #12
 800f65a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f65c:	20000238 	.word	0x20000238

0800f660 <GUI_Exec1>:
 800f660:	4b0a      	ldr	r3, [pc, #40]	; (800f68c <GUI_Exec1+0x2c>)
 800f662:	b510      	push	{r4, lr}
 800f664:	681c      	ldr	r4, [r3, #0]
 800f666:	b11c      	cbz	r4, 800f670 <GUI_Exec1+0x10>
 800f668:	47a0      	blx	r4
 800f66a:	1c04      	adds	r4, r0, #0
 800f66c:	bf18      	it	ne
 800f66e:	2401      	movne	r4, #1
 800f670:	f7fb fc80 	bl	800af74 <WM_Exec>
 800f674:	4b06      	ldr	r3, [pc, #24]	; (800f690 <GUI_Exec1+0x30>)
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	2800      	cmp	r0, #0
 800f67a:	bf18      	it	ne
 800f67c:	2401      	movne	r4, #1
 800f67e:	b11b      	cbz	r3, 800f688 <GUI_Exec1+0x28>
 800f680:	4798      	blx	r3
 800f682:	2800      	cmp	r0, #0
 800f684:	bf18      	it	ne
 800f686:	2401      	movne	r4, #1
 800f688:	4620      	mov	r0, r4
 800f68a:	bd10      	pop	{r4, pc}
 800f68c:	2001b2a4 	.word	0x2001b2a4
 800f690:	2001b2bc 	.word	0x2001b2bc

0800f694 <GUI_Exec>:
 800f694:	b510      	push	{r4, lr}
 800f696:	2400      	movs	r4, #0
 800f698:	f7ff ffe2 	bl	800f660 <GUI_Exec1>
 800f69c:	b108      	cbz	r0, 800f6a2 <GUI_Exec+0xe>
 800f69e:	2401      	movs	r4, #1
 800f6a0:	e7fa      	b.n	800f698 <GUI_Exec+0x4>
 800f6a2:	4620      	mov	r0, r4
 800f6a4:	bd10      	pop	{r4, pc}
	...

0800f6a8 <GUI_DrawVLine>:
 800f6a8:	4b0f      	ldr	r3, [pc, #60]	; (800f6e8 <GUI_DrawVLine+0x40>)
 800f6aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 800f6b0:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 800f6b2:	4406      	add	r6, r0
 800f6b4:	190d      	adds	r5, r1, r4
 800f6b6:	b2b3      	uxth	r3, r6
 800f6b8:	4414      	add	r4, r2
 800f6ba:	4668      	mov	r0, sp
 800f6bc:	f8ad 3000 	strh.w	r3, [sp]
 800f6c0:	f8ad 3004 	strh.w	r3, [sp, #4]
 800f6c4:	f8ad 5002 	strh.w	r5, [sp, #2]
 800f6c8:	f8ad 4006 	strh.w	r4, [sp, #6]
 800f6cc:	f7fb fb2c 	bl	800ad28 <WM__InitIVRSearch>
 800f6d0:	b138      	cbz	r0, 800f6e2 <GUI_DrawVLine+0x3a>
 800f6d2:	4630      	mov	r0, r6
 800f6d4:	4629      	mov	r1, r5
 800f6d6:	4622      	mov	r2, r4
 800f6d8:	f7fe f966 	bl	800d9a8 <LCD_DrawVLine>
 800f6dc:	f7fb fa62 	bl	800aba4 <WM__GetNextIVR>
 800f6e0:	e7f6      	b.n	800f6d0 <GUI_DrawVLine+0x28>
 800f6e2:	b002      	add	sp, #8
 800f6e4:	bd70      	pop	{r4, r5, r6, pc}
 800f6e6:	bf00      	nop
 800f6e8:	20000238 	.word	0x20000238

0800f6ec <GUI_DrawHLine>:
 800f6ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f6ee:	4f10      	ldr	r7, [pc, #64]	; (800f730 <GUI_DrawHLine+0x44>)
 800f6f0:	683b      	ldr	r3, [r7, #0]
 800f6f2:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 800f6f4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f6f6:	4405      	add	r5, r0
 800f6f8:	190e      	adds	r6, r1, r4
 800f6fa:	b2ab      	uxth	r3, r5
 800f6fc:	4414      	add	r4, r2
 800f6fe:	4668      	mov	r0, sp
 800f700:	f8ad 6000 	strh.w	r6, [sp]
 800f704:	f8ad 4004 	strh.w	r4, [sp, #4]
 800f708:	f8ad 3002 	strh.w	r3, [sp, #2]
 800f70c:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f710:	f7fb fb0a 	bl	800ad28 <WM__InitIVRSearch>
 800f714:	b148      	cbz	r0, 800f72a <GUI_DrawHLine+0x3e>
 800f716:	683b      	ldr	r3, [r7, #0]
 800f718:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f71a:	4630      	mov	r0, r6
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	4629      	mov	r1, r5
 800f720:	4622      	mov	r2, r4
 800f722:	4798      	blx	r3
 800f724:	f7fb fa3e 	bl	800aba4 <WM__GetNextIVR>
 800f728:	e7f4      	b.n	800f714 <GUI_DrawHLine+0x28>
 800f72a:	b003      	add	sp, #12
 800f72c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f72e:	bf00      	nop
 800f730:	20000238 	.word	0x20000238

0800f734 <GUI_WrapGetNumLines>:
 800f734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f736:	4605      	mov	r5, r0
 800f738:	460e      	mov	r6, r1
 800f73a:	4617      	mov	r7, r2
 800f73c:	2400      	movs	r4, #0
 800f73e:	4628      	mov	r0, r5
 800f740:	4631      	mov	r1, r6
 800f742:	463a      	mov	r2, r7
 800f744:	f004 fbb2 	bl	8013eac <GUI__WrapGetNumBytesToNextLine>
 800f748:	b110      	cbz	r0, 800f750 <GUI_WrapGetNumLines+0x1c>
 800f74a:	4405      	add	r5, r0
 800f74c:	3401      	adds	r4, #1
 800f74e:	e7f6      	b.n	800f73e <GUI_WrapGetNumLines+0xa>
 800f750:	4620      	mov	r0, r4
 800f752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f754 <GUI_DispStringInRectWrap>:
 800f754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f758:	b089      	sub	sp, #36	; 0x24
 800f75a:	460c      	mov	r4, r1
 800f75c:	9202      	str	r2, [sp, #8]
 800f75e:	9303      	str	r3, [sp, #12]
 800f760:	4605      	mov	r5, r0
 800f762:	2800      	cmp	r0, #0
 800f764:	f000 8091 	beq.w	800f88a <GUI_DispStringInRectWrap+0x136>
 800f768:	f8b1 a000 	ldrh.w	sl, [r1]
 800f76c:	f8b1 9004 	ldrh.w	r9, [r1, #4]
 800f770:	884e      	ldrh	r6, [r1, #2]
 800f772:	f8b1 b006 	ldrh.w	fp, [r1, #6]
 800f776:	fa0f f289 	sxth.w	r2, r9
 800f77a:	fa0f f38a 	sxth.w	r3, sl
 800f77e:	1ad3      	subs	r3, r2, r3
 800f780:	3301      	adds	r3, #1
 800f782:	9301      	str	r3, [sp, #4]
 800f784:	f000 fd4e 	bl	8010224 <GUI_GetFontDistY>
 800f788:	9902      	ldr	r1, [sp, #8]
 800f78a:	f011 070c 	ands.w	r7, r1, #12
 800f78e:	4680      	mov	r8, r0
 800f790:	d01b      	beq.n	800f7ca <GUI_DispStringInRectWrap+0x76>
 800f792:	4628      	mov	r0, r5
 800f794:	9901      	ldr	r1, [sp, #4]
 800f796:	9a03      	ldr	r2, [sp, #12]
 800f798:	f7ff ffcc 	bl	800f734 <GUI_WrapGetNumLines>
 800f79c:	2f08      	cmp	r7, #8
 800f79e:	d003      	beq.n	800f7a8 <GUI_DispStringInRectWrap+0x54>
 800f7a0:	2f0c      	cmp	r7, #12
 800f7a2:	d006      	beq.n	800f7b2 <GUI_DispStringInRectWrap+0x5e>
 800f7a4:	2f04      	cmp	r7, #4
 800f7a6:	d110      	bne.n	800f7ca <GUI_DispStringInRectWrap+0x76>
 800f7a8:	f10b 0601 	add.w	r6, fp, #1
 800f7ac:	fb00 6618 	mls	r6, r0, r8, r6
 800f7b0:	e00a      	b.n	800f7c8 <GUI_DispStringInRectWrap+0x74>
 800f7b2:	b232      	sxth	r2, r6
 800f7b4:	fa0f f38b 	sxth.w	r3, fp
 800f7b8:	1a9b      	subs	r3, r3, r2
 800f7ba:	3301      	adds	r3, #1
 800f7bc:	fb08 3010 	mls	r0, r8, r0, r3
 800f7c0:	2302      	movs	r3, #2
 800f7c2:	fb90 f0f3 	sdiv	r0, r0, r3
 800f7c6:	4406      	add	r6, r0
 800f7c8:	b2b6      	uxth	r6, r6
 800f7ca:	4620      	mov	r0, r4
 800f7cc:	f7fa f864 	bl	8009898 <WM_SetUserClipRect>
 800f7d0:	4607      	mov	r7, r0
 800f7d2:	b178      	cbz	r0, 800f7f4 <GUI_DispStringInRectWrap+0xa0>
 800f7d4:	a804      	add	r0, sp, #16
 800f7d6:	4621      	mov	r1, r4
 800f7d8:	463a      	mov	r2, r7
 800f7da:	f8ad a010 	strh.w	sl, [sp, #16]
 800f7de:	f8ad 6012 	strh.w	r6, [sp, #18]
 800f7e2:	f8ad 9014 	strh.w	r9, [sp, #20]
 800f7e6:	f8ad b016 	strh.w	fp, [sp, #22]
 800f7ea:	f7fe fcf7 	bl	800e1dc <GUI__IntersectRects>
 800f7ee:	a804      	add	r0, sp, #16
 800f7f0:	f7fa f852 	bl	8009898 <WM_SetUserClipRect>
 800f7f4:	9901      	ldr	r1, [sp, #4]
 800f7f6:	9a03      	ldr	r2, [sp, #12]
 800f7f8:	4628      	mov	r0, r5
 800f7fa:	f004 fb25 	bl	8013e48 <GUI__WrapGetNumCharsDisp>
 800f7fe:	eb06 0b08 	add.w	fp, r6, r8
 800f802:	4602      	mov	r2, r0
 800f804:	fa1f fb8b 	uxth.w	fp, fp
 800f808:	f10b 33ff 	add.w	r3, fp, #4294967295
 800f80c:	4611      	mov	r1, r2
 800f80e:	4628      	mov	r0, r5
 800f810:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f814:	9200      	str	r2, [sp, #0]
 800f816:	f8ad a018 	strh.w	sl, [sp, #24]
 800f81a:	f8ad 601a 	strh.w	r6, [sp, #26]
 800f81e:	f8ad 901c 	strh.w	r9, [sp, #28]
 800f822:	f000 fc63 	bl	80100ec <GUI__GetLineDistX>
 800f826:	9902      	ldr	r1, [sp, #8]
 800f828:	9a00      	ldr	r2, [sp, #0]
 800f82a:	f001 0303 	and.w	r3, r1, #3
 800f82e:	2b01      	cmp	r3, #1
 800f830:	d013      	beq.n	800f85a <GUI_DispStringInRectWrap+0x106>
 800f832:	2b02      	cmp	r3, #2
 800f834:	d004      	beq.n	800f840 <GUI_DispStringInRectWrap+0xec>
 800f836:	b9ab      	cbnz	r3, 800f864 <GUI_DispStringInRectWrap+0x110>
 800f838:	8823      	ldrh	r3, [r4, #0]
 800f83a:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f83e:	e011      	b.n	800f864 <GUI_DispStringInRectWrap+0x110>
 800f840:	8821      	ldrh	r1, [r4, #0]
 800f842:	f9b4 e004 	ldrsh.w	lr, [r4, #4]
 800f846:	b20e      	sxth	r6, r1
 800f848:	ebc6 060e 	rsb	r6, r6, lr
 800f84c:	1a30      	subs	r0, r6, r0
 800f84e:	fb90 f3f3 	sdiv	r3, r0, r3
 800f852:	4419      	add	r1, r3
 800f854:	f8ad 1018 	strh.w	r1, [sp, #24]
 800f858:	e004      	b.n	800f864 <GUI_DispStringInRectWrap+0x110>
 800f85a:	88a3      	ldrh	r3, [r4, #4]
 800f85c:	3301      	adds	r3, #1
 800f85e:	1a18      	subs	r0, r3, r0
 800f860:	f8ad 0018 	strh.w	r0, [sp, #24]
 800f864:	4628      	mov	r0, r5
 800f866:	4611      	mov	r1, r2
 800f868:	aa06      	add	r2, sp, #24
 800f86a:	f000 fc6f 	bl	801014c <GUI__DispLine>
 800f86e:	4628      	mov	r0, r5
 800f870:	9901      	ldr	r1, [sp, #4]
 800f872:	9a03      	ldr	r2, [sp, #12]
 800f874:	f004 fb1a 	bl	8013eac <GUI__WrapGetNumBytesToNextLine>
 800f878:	4405      	add	r5, r0
 800f87a:	fa1f f68b 	uxth.w	r6, fp
 800f87e:	782b      	ldrb	r3, [r5, #0]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d1b7      	bne.n	800f7f4 <GUI_DispStringInRectWrap+0xa0>
 800f884:	4638      	mov	r0, r7
 800f886:	f7fa f807 	bl	8009898 <WM_SetUserClipRect>
 800f88a:	b009      	add	sp, #36	; 0x24
 800f88c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f890 <GUI_DispStringAt>:
 800f890:	4b02      	ldr	r3, [pc, #8]	; (800f89c <GUI_DispStringAt+0xc>)
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	8459      	strh	r1, [r3, #34]	; 0x22
 800f896:	849a      	strh	r2, [r3, #36]	; 0x24
 800f898:	f000 b802 	b.w	800f8a0 <GUI_DispString>
 800f89c:	20000238 	.word	0x20000238

0800f8a0 <GUI_DispString>:
 800f8a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8a4:	4604      	mov	r4, r0
 800f8a6:	2800      	cmp	r0, #0
 800f8a8:	d079      	beq.n	800f99e <GUI_DispString+0xfe>
 800f8aa:	4d3e      	ldr	r5, [pc, #248]	; (800f9a4 <GUI_DispString+0x104>)
 800f8ac:	f000 fcba 	bl	8010224 <GUI_GetFontDistY>
 800f8b0:	682b      	ldr	r3, [r5, #0]
 800f8b2:	4680      	mov	r8, r0
 800f8b4:	f8b3 9022 	ldrh.w	r9, [r3, #34]	; 0x22
 800f8b8:	f000 fc9c 	bl	80101f4 <GUI_GetYAdjust>
 800f8bc:	682b      	ldr	r3, [r5, #0]
 800f8be:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800f8c0:	b287      	uxth	r7, r0
 800f8c2:	1bd2      	subs	r2, r2, r7
 800f8c4:	849a      	strh	r2, [r3, #36]	; 0x24
 800f8c6:	7823      	ldrb	r3, [r4, #0]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d05d      	beq.n	800f988 <GUI_DispString+0xe8>
 800f8cc:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800f8d0:	4620      	mov	r0, r4
 800f8d2:	f000 fbdd 	bl	8010090 <GUI__GetLineNumChars>
 800f8d6:	4606      	mov	r6, r0
 800f8d8:	4631      	mov	r1, r6
 800f8da:	4620      	mov	r0, r4
 800f8dc:	f000 fc06 	bl	80100ec <GUI__GetLineDistX>
 800f8e0:	682b      	ldr	r3, [r5, #0]
 800f8e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800f8e4:	f002 0203 	and.w	r2, r2, #3
 800f8e8:	2a01      	cmp	r2, #1
 800f8ea:	d005      	beq.n	800f8f8 <GUI_DispString+0x58>
 800f8ec:	2a02      	cmp	r2, #2
 800f8ee:	bf14      	ite	ne
 800f8f0:	2200      	movne	r2, #0
 800f8f2:	fb90 f2f2 	sdiveq	r2, r0, r2
 800f8f6:	e000      	b.n	800f8fa <GUI_DispString+0x5a>
 800f8f8:	4602      	mov	r2, r0
 800f8fa:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800f8fc:	1a8a      	subs	r2, r1, r2
 800f8fe:	b292      	uxth	r2, r2
 800f900:	b291      	uxth	r1, r2
 800f902:	8459      	strh	r1, [r3, #34]	; 0x22
 800f904:	fa1f fa80 	uxth.w	sl, r0
 800f908:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f90a:	f8ad 1000 	strh.w	r1, [sp]
 800f90e:	f10a 31ff 	add.w	r1, sl, #4294967295
 800f912:	440a      	add	r2, r1
 800f914:	f8ad 3002 	strh.w	r3, [sp, #2]
 800f918:	fa1f fb88 	uxth.w	fp, r8
 800f91c:	3b01      	subs	r3, #1
 800f91e:	445b      	add	r3, fp
 800f920:	f8ad 2004 	strh.w	r2, [sp, #4]
 800f924:	4620      	mov	r0, r4
 800f926:	4631      	mov	r1, r6
 800f928:	466a      	mov	r2, sp
 800f92a:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f92e:	f000 fc0d 	bl	801014c <GUI__DispLine>
 800f932:	682b      	ldr	r3, [r5, #0]
 800f934:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800f938:	849a      	strh	r2, [r3, #36]	; 0x24
 800f93a:	4620      	mov	r0, r4
 800f93c:	4631      	mov	r1, r6
 800f93e:	f7fe ff3b 	bl	800e7b8 <GUI_UC__NumChars2NumBytes>
 800f942:	5c23      	ldrb	r3, [r4, r0]
 800f944:	2b0a      	cmp	r3, #10
 800f946:	eb04 0200 	add.w	r2, r4, r0
 800f94a:	d001      	beq.n	800f950 <GUI_DispString+0xb0>
 800f94c:	2b0d      	cmp	r3, #13
 800f94e:	d112      	bne.n	800f976 <GUI_DispString+0xd6>
 800f950:	682b      	ldr	r3, [r5, #0]
 800f952:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 800f954:	f001 0103 	and.w	r1, r1, #3
 800f958:	3901      	subs	r1, #1
 800f95a:	2901      	cmp	r1, #1
 800f95c:	bf8a      	itet	hi
 800f95e:	8c19      	ldrhhi	r1, [r3, #32]
 800f960:	f8a3 9022 	strhls.w	r9, [r3, #34]	; 0x22
 800f964:	8459      	strhhi	r1, [r3, #34]	; 0x22
 800f966:	7811      	ldrb	r1, [r2, #0]
 800f968:	290a      	cmp	r1, #10
 800f96a:	d10b      	bne.n	800f984 <GUI_DispString+0xe4>
 800f96c:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800f96e:	448b      	add	fp, r1
 800f970:	f8a3 b024 	strh.w	fp, [r3, #36]	; 0x24
 800f974:	e006      	b.n	800f984 <GUI_DispString+0xe4>
 800f976:	4b0b      	ldr	r3, [pc, #44]	; (800f9a4 <GUI_DispString+0x104>)
 800f978:	f8bd 0000 	ldrh.w	r0, [sp]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	4482      	add	sl, r0
 800f980:	f8a3 a022 	strh.w	sl, [r3, #34]	; 0x22
 800f984:	7813      	ldrb	r3, [r2, #0]
 800f986:	b943      	cbnz	r3, 800f99a <GUI_DispString+0xfa>
 800f988:	682b      	ldr	r3, [r5, #0]
 800f98a:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800f98c:	4417      	add	r7, r2
 800f98e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800f990:	849f      	strh	r7, [r3, #36]	; 0x24
 800f992:	f022 0203 	bic.w	r2, r2, #3
 800f996:	859a      	strh	r2, [r3, #44]	; 0x2c
 800f998:	e001      	b.n	800f99e <GUI_DispString+0xfe>
 800f99a:	1c54      	adds	r4, r2, #1
 800f99c:	e793      	b.n	800f8c6 <GUI_DispString+0x26>
 800f99e:	b003      	add	sp, #12
 800f9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9a4:	20000238 	.word	0x20000238

0800f9a8 <GUI_DEVICE__GetpDriver>:
 800f9a8:	2801      	cmp	r0, #1
 800f9aa:	dc09      	bgt.n	800f9c0 <GUI_DEVICE__GetpDriver+0x18>
 800f9ac:	4b05      	ldr	r3, [pc, #20]	; (800f9c4 <GUI_DEVICE__GetpDriver+0x1c>)
 800f9ae:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800f9b2:	b120      	cbz	r0, 800f9be <GUI_DEVICE__GetpDriver+0x16>
 800f9b4:	68c3      	ldr	r3, [r0, #12]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	b11b      	cbz	r3, 800f9c2 <GUI_DEVICE__GetpDriver+0x1a>
 800f9ba:	6800      	ldr	r0, [r0, #0]
 800f9bc:	e7f9      	b.n	800f9b2 <GUI_DEVICE__GetpDriver+0xa>
 800f9be:	4770      	bx	lr
 800f9c0:	2000      	movs	r0, #0
 800f9c2:	4770      	bx	lr
 800f9c4:	2001b2c0 	.word	0x2001b2c0

0800f9c8 <GUI_DEVICE_Delete>:
 800f9c8:	f001 bbf0 	b.w	80111ac <GUI_ALLOC_FreeFixedBlock>

0800f9cc <GUI_DEVICE_Create>:
 800f9cc:	2b01      	cmp	r3, #1
 800f9ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9d0:	4606      	mov	r6, r0
 800f9d2:	460d      	mov	r5, r1
 800f9d4:	4617      	mov	r7, r2
 800f9d6:	461c      	mov	r4, r3
 800f9d8:	dd01      	ble.n	800f9de <GUI_DEVICE_Create+0x12>
 800f9da:	2000      	movs	r0, #0
 800f9dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9de:	201c      	movs	r0, #28
 800f9e0:	f001 fd50 	bl	8011484 <GUI_ALLOC_GetFixedBlock>
 800f9e4:	2800      	cmp	r0, #0
 800f9e6:	d0f8      	beq.n	800f9da <GUI_DEVICE_Create+0xe>
 800f9e8:	b10d      	cbz	r5, 800f9ee <GUI_DEVICE_Create+0x22>
 800f9ea:	6105      	str	r5, [r0, #16]
 800f9ec:	e009      	b.n	800fa02 <GUI_DEVICE_Create+0x36>
 800f9ee:	4b09      	ldr	r3, [pc, #36]	; (800fa14 <GUI_DEVICE_Create+0x48>)
 800f9f0:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 800f9f4:	b129      	cbz	r1, 800fa02 <GUI_DEVICE_Create+0x36>
 800f9f6:	680b      	ldr	r3, [r1, #0]
 800f9f8:	b10b      	cbz	r3, 800f9fe <GUI_DEVICE_Create+0x32>
 800f9fa:	4619      	mov	r1, r3
 800f9fc:	e7fb      	b.n	800f9f6 <GUI_DEVICE_Create+0x2a>
 800f9fe:	690b      	ldr	r3, [r1, #16]
 800fa00:	6103      	str	r3, [r0, #16]
 800fa02:	2300      	movs	r3, #0
 800fa04:	6083      	str	r3, [r0, #8]
 800fa06:	6184      	str	r4, [r0, #24]
 800fa08:	8287      	strh	r7, [r0, #20]
 800fa0a:	60c6      	str	r6, [r0, #12]
 800fa0c:	6003      	str	r3, [r0, #0]
 800fa0e:	6043      	str	r3, [r0, #4]
 800fa10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa12:	bf00      	nop
 800fa14:	2001b2c0 	.word	0x2001b2c0

0800fa18 <GUI_DEVICE_Unlink>:
 800fa18:	4b09      	ldr	r3, [pc, #36]	; (800fa40 <GUI_DEVICE_Unlink+0x28>)
 800fa1a:	6982      	ldr	r2, [r0, #24]
 800fa1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fa20:	4281      	cmp	r1, r0
 800fa22:	bf04      	itt	eq
 800fa24:	6801      	ldreq	r1, [r0, #0]
 800fa26:	f843 1022 	streq.w	r1, [r3, r2, lsl #2]
 800fa2a:	6843      	ldr	r3, [r0, #4]
 800fa2c:	b10b      	cbz	r3, 800fa32 <GUI_DEVICE_Unlink+0x1a>
 800fa2e:	6802      	ldr	r2, [r0, #0]
 800fa30:	601a      	str	r2, [r3, #0]
 800fa32:	6802      	ldr	r2, [r0, #0]
 800fa34:	b102      	cbz	r2, 800fa38 <GUI_DEVICE_Unlink+0x20>
 800fa36:	6053      	str	r3, [r2, #4]
 800fa38:	2300      	movs	r3, #0
 800fa3a:	6003      	str	r3, [r0, #0]
 800fa3c:	6043      	str	r3, [r0, #4]
 800fa3e:	4770      	bx	lr
 800fa40:	2001b2c0 	.word	0x2001b2c0

0800fa44 <GUI_DEVICE_Link>:
 800fa44:	b570      	push	{r4, r5, r6, lr}
 800fa46:	b338      	cbz	r0, 800fa98 <GUI_DEVICE_Link+0x54>
 800fa48:	6982      	ldr	r2, [r0, #24]
 800fa4a:	2a01      	cmp	r2, #1
 800fa4c:	dc24      	bgt.n	800fa98 <GUI_DEVICE_Link+0x54>
 800fa4e:	4919      	ldr	r1, [pc, #100]	; (800fab4 <GUI_DEVICE_Link+0x70>)
 800fa50:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 800fa54:	460d      	mov	r5, r1
 800fa56:	b913      	cbnz	r3, 800fa5e <GUI_DEVICE_Link+0x1a>
 800fa58:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 800fa5c:	e01a      	b.n	800fa94 <GUI_DEVICE_Link+0x50>
 800fa5e:	6859      	ldr	r1, [r3, #4]
 800fa60:	b109      	cbz	r1, 800fa66 <GUI_DEVICE_Link+0x22>
 800fa62:	460b      	mov	r3, r1
 800fa64:	e7fb      	b.n	800fa5e <GUI_DEVICE_Link+0x1a>
 800fa66:	68c1      	ldr	r1, [r0, #12]
 800fa68:	680e      	ldr	r6, [r1, #0]
 800fa6a:	68d9      	ldr	r1, [r3, #12]
 800fa6c:	680c      	ldr	r4, [r1, #0]
 800fa6e:	42b4      	cmp	r4, r6
 800fa70:	dd03      	ble.n	800fa7a <GUI_DEVICE_Link+0x36>
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d1f8      	bne.n	800fa6a <GUI_DEVICE_Link+0x26>
 800fa78:	e00e      	b.n	800fa98 <GUI_DEVICE_Link+0x54>
 800fa7a:	d102      	bne.n	800fa82 <GUI_DEVICE_Link+0x3e>
 800fa7c:	8a81      	ldrh	r1, [r0, #20]
 800fa7e:	2901      	cmp	r1, #1
 800fa80:	d011      	beq.n	800faa6 <GUI_DEVICE_Link+0x62>
 800fa82:	6859      	ldr	r1, [r3, #4]
 800fa84:	b199      	cbz	r1, 800faae <GUI_DEVICE_Link+0x6a>
 800fa86:	6008      	str	r0, [r1, #0]
 800fa88:	6041      	str	r1, [r0, #4]
 800fa8a:	6058      	str	r0, [r3, #4]
 800fa8c:	4298      	cmp	r0, r3
 800fa8e:	bf08      	it	eq
 800fa90:	2300      	moveq	r3, #0
 800fa92:	6003      	str	r3, [r0, #0]
 800fa94:	2000      	movs	r0, #0
 800fa96:	bd70      	pop	{r4, r5, r6, pc}
 800fa98:	2001      	movs	r0, #1
 800fa9a:	bd70      	pop	{r4, r5, r6, pc}
 800fa9c:	68cb      	ldr	r3, [r1, #12]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	42a3      	cmp	r3, r4
 800faa2:	460b      	mov	r3, r1
 800faa4:	dbed      	blt.n	800fa82 <GUI_DEVICE_Link+0x3e>
 800faa6:	6819      	ldr	r1, [r3, #0]
 800faa8:	2900      	cmp	r1, #0
 800faaa:	d1f7      	bne.n	800fa9c <GUI_DEVICE_Link+0x58>
 800faac:	e7e9      	b.n	800fa82 <GUI_DEVICE_Link+0x3e>
 800faae:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
 800fab2:	e7ea      	b.n	800fa8a <GUI_DEVICE_Link+0x46>
 800fab4:	2001b2c0 	.word	0x2001b2c0

0800fab8 <GUI_DEVICE_CreateAndLink>:
 800fab8:	b538      	push	{r3, r4, r5, lr}
 800faba:	461d      	mov	r5, r3
 800fabc:	f7ff ff86 	bl	800f9cc <GUI_DEVICE_Create>
 800fac0:	4604      	mov	r4, r0
 800fac2:	b148      	cbz	r0, 800fad8 <GUI_DEVICE_CreateAndLink+0x20>
 800fac4:	f7ff ffbe 	bl	800fa44 <GUI_DEVICE_Link>
 800fac8:	68e3      	ldr	r3, [r4, #12]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	b923      	cbnz	r3, 800fad8 <GUI_DEVICE_CreateAndLink+0x20>
 800face:	4b03      	ldr	r3, [pc, #12]	; (800fadc <GUI_DEVICE_CreateAndLink+0x24>)
 800fad0:	3516      	adds	r5, #22
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
 800fad8:	4620      	mov	r0, r4
 800fada:	bd38      	pop	{r3, r4, r5, pc}
 800fadc:	20000238 	.word	0x20000238

0800fae0 <_OnExit>:
 800fae0:	b510      	push	{r4, lr}
 800fae2:	4b07      	ldr	r3, [pc, #28]	; (800fb00 <_OnExit+0x20>)
 800fae4:	4807      	ldr	r0, [pc, #28]	; (800fb04 <_OnExit+0x24>)
 800fae6:	2400      	movs	r4, #0
 800fae8:	4621      	mov	r1, r4
 800faea:	2270      	movs	r2, #112	; 0x70
 800faec:	601c      	str	r4, [r3, #0]
 800faee:	f7fe fa85 	bl	800dffc <GUI__memset>
 800faf2:	4621      	mov	r1, r4
 800faf4:	4804      	ldr	r0, [pc, #16]	; (800fb08 <_OnExit+0x28>)
 800faf6:	2208      	movs	r2, #8
 800faf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fafc:	f7fe ba7e 	b.w	800dffc <GUI__memset>
 800fb00:	20019614 	.word	0x20019614
 800fb04:	2001959c 	.word	0x2001959c
 800fb08:	2001b2c0 	.word	0x2001b2c0

0800fb0c <_InitContext>:
 800fb0c:	b538      	push	{r3, r4, r5, lr}
 800fb0e:	4d19      	ldr	r5, [pc, #100]	; (800fb74 <_InitContext+0x68>)
 800fb10:	682b      	ldr	r3, [r5, #0]
 800fb12:	1d1a      	adds	r2, r3, #4
 800fb14:	63da      	str	r2, [r3, #60]	; 0x3c
 800fb16:	f103 0208 	add.w	r2, r3, #8
 800fb1a:	639b      	str	r3, [r3, #56]	; 0x38
 800fb1c:	641b      	str	r3, [r3, #64]	; 0x40
 800fb1e:	6142      	str	r2, [r0, #20]
 800fb20:	7c5a      	ldrb	r2, [r3, #17]
 800fb22:	4b15      	ldr	r3, [pc, #84]	; (800fb78 <_InitContext+0x6c>)
 800fb24:	4604      	mov	r4, r0
 800fb26:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800fb2a:	68c3      	ldr	r3, [r0, #12]
 800fb2c:	f104 0108 	add.w	r1, r4, #8
 800fb30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb32:	4798      	blx	r3
 800fb34:	4b11      	ldr	r3, [pc, #68]	; (800fb7c <_InitContext+0x70>)
 800fb36:	6663      	str	r3, [r4, #100]	; 0x64
 800fb38:	4b11      	ldr	r3, [pc, #68]	; (800fb80 <_InitContext+0x74>)
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	61e3      	str	r3, [r4, #28]
 800fb3e:	682b      	ldr	r3, [r5, #0]
 800fb40:	3308      	adds	r3, #8
 800fb42:	6163      	str	r3, [r4, #20]
 800fb44:	2301      	movs	r3, #1
 800fb46:	7623      	strb	r3, [r4, #24]
 800fb48:	f7fa f99c 	bl	8009e84 <WM_GetDesktopWindow>
 800fb4c:	2303      	movs	r3, #3
 800fb4e:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800fb52:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800fb56:	6323      	str	r3, [r4, #48]	; 0x30
 800fb58:	6363      	str	r3, [r4, #52]	; 0x34
 800fb5a:	64a0      	str	r0, [r4, #72]	; 0x48
 800fb5c:	2000      	movs	r0, #0
 800fb5e:	f7fe fa0f 	bl	800df80 <LCD_SetBkColor>
 800fb62:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800fb66:	f7fe fa13 	bl	800df90 <LCD_SetColor>
 800fb6a:	4b06      	ldr	r3, [pc, #24]	; (800fb84 <_InitContext+0x78>)
 800fb6c:	4a06      	ldr	r2, [pc, #24]	; (800fb88 <_InitContext+0x7c>)
 800fb6e:	601a      	str	r2, [r3, #0]
 800fb70:	bd38      	pop	{r3, r4, r5, pc}
 800fb72:	bf00      	nop
 800fb74:	20000238 	.word	0x20000238
 800fb78:	2001b2c0 	.word	0x2001b2c0
 800fb7c:	0801a7a8 	.word	0x0801a7a8
 800fb80:	2000023c 	.word	0x2000023c
 800fb84:	2001b2b8 	.word	0x2001b2b8
 800fb88:	0801d53c 	.word	0x0801d53c

0800fb8c <GUI_SetDefaultFont>:
 800fb8c:	4b01      	ldr	r3, [pc, #4]	; (800fb94 <GUI_SetDefaultFont+0x8>)
 800fb8e:	6018      	str	r0, [r3, #0]
 800fb90:	4770      	bx	lr
 800fb92:	bf00      	nop
 800fb94:	2000023c 	.word	0x2000023c

0800fb98 <GUI_ClearRect>:
 800fb98:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800fb9c:	4607      	mov	r7, r0
 800fb9e:	2004      	movs	r0, #4
 800fba0:	469a      	mov	sl, r3
 800fba2:	460e      	mov	r6, r1
 800fba4:	4691      	mov	r9, r2
 800fba6:	f7fd fea3 	bl	800d8f0 <LCD_SetDrawMode>
 800fbaa:	4b13      	ldr	r3, [pc, #76]	; (800fbf8 <GUI_ClearRect+0x60>)
 800fbac:	681c      	ldr	r4, [r3, #0]
 800fbae:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800fbb0:	6d24      	ldr	r4, [r4, #80]	; 0x50
 800fbb2:	442f      	add	r7, r5
 800fbb4:	4426      	add	r6, r4
 800fbb6:	4680      	mov	r8, r0
 800fbb8:	444d      	add	r5, r9
 800fbba:	4454      	add	r4, sl
 800fbbc:	4668      	mov	r0, sp
 800fbbe:	f8ad 7000 	strh.w	r7, [sp]
 800fbc2:	f8ad 5004 	strh.w	r5, [sp, #4]
 800fbc6:	f8ad 6002 	strh.w	r6, [sp, #2]
 800fbca:	f8ad 4006 	strh.w	r4, [sp, #6]
 800fbce:	f7fb f8ab 	bl	800ad28 <WM__InitIVRSearch>
 800fbd2:	b928      	cbnz	r0, 800fbe0 <GUI_ClearRect+0x48>
 800fbd4:	4640      	mov	r0, r8
 800fbd6:	f7fd fe8b 	bl	800d8f0 <LCD_SetDrawMode>
 800fbda:	b002      	add	sp, #8
 800fbdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbe0:	4638      	mov	r0, r7
 800fbe2:	4631      	mov	r1, r6
 800fbe4:	462a      	mov	r2, r5
 800fbe6:	4623      	mov	r3, r4
 800fbe8:	f7fd ff04 	bl	800d9f4 <LCD_FillRect>
 800fbec:	f7fa ffda 	bl	800aba4 <WM__GetNextIVR>
 800fbf0:	2800      	cmp	r0, #0
 800fbf2:	d1f5      	bne.n	800fbe0 <GUI_ClearRect+0x48>
 800fbf4:	e7ee      	b.n	800fbd4 <GUI_ClearRect+0x3c>
 800fbf6:	bf00      	nop
 800fbf8:	20000238 	.word	0x20000238

0800fbfc <GUI_Clear>:
 800fbfc:	b510      	push	{r4, lr}
 800fbfe:	2000      	movs	r0, #0
 800fc00:	4601      	mov	r1, r0
 800fc02:	f7ff fceb 	bl	800f5dc <GUI_GotoXY>
 800fc06:	4804      	ldr	r0, [pc, #16]	; (800fc18 <GUI_Clear+0x1c>)
 800fc08:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800fc0c:	4601      	mov	r1, r0
 800fc0e:	4613      	mov	r3, r2
 800fc10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc14:	f7ff bfc0 	b.w	800fb98 <GUI_ClearRect>
 800fc18:	ffffc001 	.word	0xffffc001

0800fc1c <GUI__RegisterExit>:
 800fc1c:	b480      	push	{r7}
 800fc1e:	b083      	sub	sp, #12
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
 800fc24:	4b05      	ldr	r3, [pc, #20]	; (800fc3c <GUI__RegisterExit+0x20>)
 800fc26:	681a      	ldr	r2, [r3, #0]
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	605a      	str	r2, [r3, #4]
 800fc2c:	4b03      	ldr	r3, [pc, #12]	; (800fc3c <GUI__RegisterExit+0x20>)
 800fc2e:	687a      	ldr	r2, [r7, #4]
 800fc30:	601a      	str	r2, [r3, #0]
 800fc32:	370c      	adds	r7, #12
 800fc34:	46bd      	mov	sp, r7
 800fc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3a:	4770      	bx	lr
 800fc3c:	20019598 	.word	0x20019598

0800fc40 <GUI__Config>:
 800fc40:	b508      	push	{r3, lr}
 800fc42:	4b08      	ldr	r3, [pc, #32]	; (800fc64 <GUI__Config+0x24>)
 800fc44:	681a      	ldr	r2, [r3, #0]
 800fc46:	b962      	cbnz	r2, 800fc62 <GUI__Config+0x22>
 800fc48:	2201      	movs	r2, #1
 800fc4a:	601a      	str	r2, [r3, #0]
 800fc4c:	f7f6 f998 	bl	8005f80 <GUI_X_Config>
 800fc50:	f7f6 f9c2 	bl	8005fd8 <LCD_X_Config>
 800fc54:	4804      	ldr	r0, [pc, #16]	; (800fc68 <GUI__Config+0x28>)
 800fc56:	4b05      	ldr	r3, [pc, #20]	; (800fc6c <GUI__Config+0x2c>)
 800fc58:	6003      	str	r3, [r0, #0]
 800fc5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800fc5e:	f7ff bfdd 	b.w	800fc1c <GUI__RegisterExit>
 800fc62:	bd08      	pop	{r3, pc}
 800fc64:	20019614 	.word	0x20019614
 800fc68:	2001960c 	.word	0x2001960c
 800fc6c:	0800fae1 	.word	0x0800fae1

0800fc70 <GUI_Init>:
 800fc70:	b590      	push	{r4, r7, lr}
 800fc72:	b083      	sub	sp, #12
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	4b20      	ldr	r3, [pc, #128]	; (800fcf8 <GUI_Init+0x88>)
 800fc78:	4a1f      	ldr	r2, [pc, #124]	; (800fcf8 <GUI_Init+0x88>)
 800fc7a:	6812      	ldr	r2, [r2, #0]
 800fc7c:	f022 0201 	bic.w	r2, r2, #1
 800fc80:	601a      	str	r2, [r3, #0]
 800fc82:	4b1e      	ldr	r3, [pc, #120]	; (800fcfc <GUI_Init+0x8c>)
 800fc84:	2201      	movs	r2, #1
 800fc86:	601a      	str	r2, [r3, #0]
 800fc88:	4b1d      	ldr	r3, [pc, #116]	; (800fd00 <GUI_Init+0x90>)
 800fc8a:	4a1e      	ldr	r2, [pc, #120]	; (800fd04 <GUI_Init+0x94>)
 800fc8c:	601a      	str	r2, [r3, #0]
 800fc8e:	4b1c      	ldr	r3, [pc, #112]	; (800fd00 <GUI_Init+0x90>)
 800fc90:	681a      	ldr	r2, [r3, #0]
 800fc92:	4b1d      	ldr	r3, [pc, #116]	; (800fd08 <GUI_Init+0x98>)
 800fc94:	429a      	cmp	r2, r3
 800fc96:	d000      	beq.n	800fc9a <GUI_Init+0x2a>
 800fc98:	e7fe      	b.n	800fc98 <GUI_Init+0x28>
 800fc9a:	f7ff ffd1 	bl	800fc40 <GUI__Config>
 800fc9e:	4b1b      	ldr	r3, [pc, #108]	; (800fd0c <GUI_Init+0x9c>)
 800fca0:	222e      	movs	r2, #46	; 0x2e
 800fca2:	701a      	strb	r2, [r3, #0]
 800fca4:	f7f6 f98c 	bl	8005fc0 <GUI_X_Init>
 800fca8:	4819      	ldr	r0, [pc, #100]	; (800fd10 <GUI_Init+0xa0>)
 800fcaa:	f7ff ff2f 	bl	800fb0c <_InitContext>
 800fcae:	f7fe f8c5 	bl	800de3c <emWin_LCD_Init>
 800fcb2:	6078      	str	r0, [r7, #4]
 800fcb4:	f7fd fda6 	bl	800d804 <LCD_GetXSizeDisplay>
 800fcb8:	4603      	mov	r3, r0
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d004      	beq.n	800fcc8 <GUI_Init+0x58>
 800fcbe:	f7fd fda7 	bl	800d810 <LCD_GetYSizeDisplay>
 800fcc2:	4603      	mov	r3, r0
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d109      	bne.n	800fcdc <GUI_Init+0x6c>
 800fcc8:	f7fd fd88 	bl	800d7dc <LCD_GetXSizeMax>
 800fccc:	4604      	mov	r4, r0
 800fcce:	f7fd fd88 	bl	800d7e2 <LCD_GetYSizeMax>
 800fcd2:	4603      	mov	r3, r0
 800fcd4:	4620      	mov	r0, r4
 800fcd6:	4619      	mov	r1, r3
 800fcd8:	f7fd fd8a 	bl	800d7f0 <LCD_SetDisplaySize>
 800fcdc:	2000      	movs	r0, #0
 800fcde:	2100      	movs	r1, #0
 800fce0:	f004 fc86 	bl	80145f0 <GUI_SetOrg>
 800fce4:	f7fb fa5e 	bl	800b1a4 <WM_Init>
 800fce8:	4b0a      	ldr	r3, [pc, #40]	; (800fd14 <GUI_Init+0xa4>)
 800fcea:	2201      	movs	r2, #1
 800fcec:	701a      	strb	r2, [r3, #0]
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	370c      	adds	r7, #12
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	bd90      	pop	{r4, r7, pc}
 800fcf8:	e0002000 	.word	0xe0002000
 800fcfc:	40023008 	.word	0x40023008
 800fd00:	40023000 	.word	0x40023000
 800fd04:	f407a5c2 	.word	0xf407a5c2
 800fd08:	b5e8b5cd 	.word	0xb5e8b5cd
 800fd0c:	2001b292 	.word	0x2001b292
 800fd10:	2001959c 	.word	0x2001959c
 800fd14:	2001b2b0 	.word	0x2001b2b0

0800fd18 <GUIPROP__FindChar>:
 800fd18:	b138      	cbz	r0, 800fd2a <GUIPROP__FindChar+0x12>
 800fd1a:	8803      	ldrh	r3, [r0, #0]
 800fd1c:	428b      	cmp	r3, r1
 800fd1e:	d802      	bhi.n	800fd26 <GUIPROP__FindChar+0xe>
 800fd20:	8843      	ldrh	r3, [r0, #2]
 800fd22:	428b      	cmp	r3, r1
 800fd24:	d201      	bcs.n	800fd2a <GUIPROP__FindChar+0x12>
 800fd26:	6880      	ldr	r0, [r0, #8]
 800fd28:	e7f6      	b.n	800fd18 <GUIPROP__FindChar>
 800fd2a:	4770      	bx	lr

0800fd2c <GUIPROP_DispChar>:
 800fd2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd30:	4c38      	ldr	r4, [pc, #224]	; (800fe14 <GUIPROP_DispChar+0xe8>)
 800fd32:	6823      	ldr	r3, [r4, #0]
 800fd34:	f9b3 902a 	ldrsh.w	r9, [r3, #42]	; 0x2a
 800fd38:	69db      	ldr	r3, [r3, #28]
 800fd3a:	4605      	mov	r5, r0
 800fd3c:	b089      	sub	sp, #36	; 0x24
 800fd3e:	69d8      	ldr	r0, [r3, #28]
 800fd40:	4629      	mov	r1, r5
 800fd42:	f7ff ffe9 	bl	800fd18 <GUIPROP__FindChar>
 800fd46:	2800      	cmp	r0, #0
 800fd48:	d061      	beq.n	800fe0e <GUIPROP_DispChar+0xe2>
 800fd4a:	f8b0 8000 	ldrh.w	r8, [r0]
 800fd4e:	6847      	ldr	r7, [r0, #4]
 800fd50:	ebc8 0805 	rsb	r8, r8, r5
 800fd54:	eb07 06c8 	add.w	r6, r7, r8, lsl #3
 800fd58:	4648      	mov	r0, r9
 800fd5a:	f896 b002 	ldrb.w	fp, [r6, #2]
 800fd5e:	f7fd fdc7 	bl	800d8f0 <LCD_SetDrawMode>
 800fd62:	6825      	ldr	r5, [r4, #0]
 800fd64:	f817 2038 	ldrb.w	r2, [r7, r8, lsl #3]
 800fd68:	f8d5 e01c 	ldr.w	lr, [r5, #28]
 800fd6c:	f9b5 1024 	ldrsh.w	r1, [r5, #36]	; 0x24
 800fd70:	f89e c01a 	ldrb.w	ip, [lr, #26]
 800fd74:	f89e 3018 	ldrb.w	r3, [lr, #24]
 800fd78:	9306      	str	r3, [sp, #24]
 800fd7a:	4682      	mov	sl, r0
 800fd7c:	f9b5 0022 	ldrsh.w	r0, [r5, #34]	; 0x22
 800fd80:	f8cd c000 	str.w	ip, [sp]
 800fd84:	f89e e01b 	ldrb.w	lr, [lr, #27]
 800fd88:	f8cd e004 	str.w	lr, [sp, #4]
 800fd8c:	f04f 0e01 	mov.w	lr, #1
 800fd90:	f8cd b00c 	str.w	fp, [sp, #12]
 800fd94:	f8cd e008 	str.w	lr, [sp, #8]
 800fd98:	6873      	ldr	r3, [r6, #4]
 800fd9a:	9304      	str	r3, [sp, #16]
 800fd9c:	6bad      	ldr	r5, [r5, #56]	; 0x38
 800fd9e:	9b06      	ldr	r3, [sp, #24]
 800fda0:	9505      	str	r5, [sp, #20]
 800fda2:	f7fd ff2f 	bl	800dc04 <LCD_DrawBitmap>
 800fda6:	6823      	ldr	r3, [r4, #0]
 800fda8:	69da      	ldr	r2, [r3, #28]
 800fdaa:	f892 b019 	ldrb.w	fp, [r2, #25]
 800fdae:	7e11      	ldrb	r1, [r2, #24]
 800fdb0:	458b      	cmp	fp, r1
 800fdb2:	d920      	bls.n	800fdf6 <GUIPROP_DispChar+0xca>
 800fdb4:	f1b9 0f02 	cmp.w	r9, #2
 800fdb8:	7ed5      	ldrb	r5, [r2, #27]
 800fdba:	d01c      	beq.n	800fdf6 <GUIPROP_DispChar+0xca>
 800fdbc:	9107      	str	r1, [sp, #28]
 800fdbe:	f004 fc40 	bl	8014642 <GUI_GetColor>
 800fdc2:	4681      	mov	r9, r0
 800fdc4:	f004 fc36 	bl	8014634 <GUI_GetBkColor>
 800fdc8:	f7ff fa3a 	bl	800f240 <GUI_SetColor>
 800fdcc:	6824      	ldr	r4, [r4, #0]
 800fdce:	f817 7038 	ldrb.w	r7, [r7, r8, lsl #3]
 800fdd2:	69e2      	ldr	r2, [r4, #28]
 800fdd4:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 800fdd8:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 800fddc:	7ed2      	ldrb	r2, [r2, #27]
 800fdde:	9907      	ldr	r1, [sp, #28]
 800fde0:	fb07 0202 	mla	r2, r7, r2, r0
 800fde4:	fb01 3105 	mla	r1, r1, r5, r3
 800fde8:	fb0b 3305 	mla	r3, fp, r5, r3
 800fdec:	f7fd fe02 	bl	800d9f4 <LCD_FillRect>
 800fdf0:	4648      	mov	r0, r9
 800fdf2:	f7ff fa25 	bl	800f240 <GUI_SetColor>
 800fdf6:	4650      	mov	r0, sl
 800fdf8:	f7fd fd7a 	bl	800d8f0 <LCD_SetDrawMode>
 800fdfc:	4b05      	ldr	r3, [pc, #20]	; (800fe14 <GUIPROP_DispChar+0xe8>)
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	69da      	ldr	r2, [r3, #28]
 800fe02:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800fe04:	7e90      	ldrb	r0, [r2, #26]
 800fe06:	7872      	ldrb	r2, [r6, #1]
 800fe08:	fb00 1202 	mla	r2, r0, r2, r1
 800fe0c:	845a      	strh	r2, [r3, #34]	; 0x22
 800fe0e:	b009      	add	sp, #36	; 0x24
 800fe10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe14:	20000238 	.word	0x20000238

0800fe18 <GUIPROP_GetCharDistX>:
 800fe18:	4b0d      	ldr	r3, [pc, #52]	; (800fe50 <GUIPROP_GetCharDistX+0x38>)
 800fe1a:	b570      	push	{r4, r5, r6, lr}
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	69dd      	ldr	r5, [r3, #28]
 800fe20:	4606      	mov	r6, r0
 800fe22:	460c      	mov	r4, r1
 800fe24:	69e8      	ldr	r0, [r5, #28]
 800fe26:	4631      	mov	r1, r6
 800fe28:	f7ff ff76 	bl	800fd18 <GUIPROP__FindChar>
 800fe2c:	b170      	cbz	r0, 800fe4c <GUIPROP_GetCharDistX+0x34>
 800fe2e:	8803      	ldrh	r3, [r0, #0]
 800fe30:	6842      	ldr	r2, [r0, #4]
 800fe32:	1af6      	subs	r6, r6, r3
 800fe34:	eb02 03c6 	add.w	r3, r2, r6, lsl #3
 800fe38:	7858      	ldrb	r0, [r3, #1]
 800fe3a:	7eab      	ldrb	r3, [r5, #26]
 800fe3c:	fb10 f003 	smulbb	r0, r0, r3
 800fe40:	b124      	cbz	r4, 800fe4c <GUIPROP_GetCharDistX+0x34>
 800fe42:	f812 2036 	ldrb.w	r2, [r2, r6, lsl #3]
 800fe46:	fb12 f303 	smulbb	r3, r2, r3
 800fe4a:	6023      	str	r3, [r4, #0]
 800fe4c:	bd70      	pop	{r4, r5, r6, pc}
 800fe4e:	bf00      	nop
 800fe50:	20000238 	.word	0x20000238

0800fe54 <GUIPROP_GetFontInfo>:
 800fe54:	2301      	movs	r3, #1
 800fe56:	800b      	strh	r3, [r1, #0]
 800fe58:	4770      	bx	lr

0800fe5a <GUIPROP_IsInFont>:
 800fe5a:	b508      	push	{r3, lr}
 800fe5c:	69c0      	ldr	r0, [r0, #28]
 800fe5e:	f7ff ff5b 	bl	800fd18 <GUIPROP__FindChar>
 800fe62:	3000      	adds	r0, #0
 800fe64:	bf18      	it	ne
 800fe66:	2001      	movne	r0, #1
 800fe68:	bd08      	pop	{r3, pc}
	...

0800fe6c <GUIMONO_DispChar>:
 800fe6c:	4b52      	ldr	r3, [pc, #328]	; (800ffb8 <GUIMONO_DispChar+0x14c>)
 800fe6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	69d9      	ldr	r1, [r3, #28]
 800fe76:	8c5f      	ldrh	r7, [r3, #34]	; 0x22
 800fe78:	69cc      	ldr	r4, [r1, #28]
 800fe7a:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
 800fe7c:	89a2      	ldrh	r2, [r4, #12]
 800fe7e:	4290      	cmp	r0, r2
 800fe80:	b08b      	sub	sp, #44	; 0x2c
 800fe82:	d308      	bcc.n	800fe96 <GUIMONO_DispChar+0x2a>
 800fe84:	89e6      	ldrh	r6, [r4, #14]
 800fe86:	4286      	cmp	r6, r0
 800fe88:	d305      	bcc.n	800fe96 <GUIMONO_DispChar+0x2a>
 800fe8a:	f8d4 9000 	ldr.w	r9, [r4]
 800fe8e:	1a82      	subs	r2, r0, r2
 800fe90:	f04f 3bff 	mov.w	fp, #4294967295
 800fe94:	e015      	b.n	800fec2 <GUIMONO_DispChar+0x56>
 800fe96:	68a2      	ldr	r2, [r4, #8]
 800fe98:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800fe9c:	2a00      	cmp	r2, #0
 800fe9e:	f000 8081 	beq.w	800ffa4 <GUIMONO_DispChar+0x138>
 800fea2:	8816      	ldrh	r6, [r2, #0]
 800fea4:	42b0      	cmp	r0, r6
 800fea6:	d37d      	bcc.n	800ffa4 <GUIMONO_DispChar+0x138>
 800fea8:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 800feac:	4584      	cmp	ip, r0
 800feae:	d379      	bcc.n	800ffa4 <GUIMONO_DispChar+0x138>
 800feb0:	6852      	ldr	r2, [r2, #4]
 800feb2:	1b80      	subs	r0, r0, r6
 800feb4:	b280      	uxth	r0, r0
 800feb6:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 800feba:	f932 2020 	ldrsh.w	r2, [r2, r0, lsl #2]
 800febe:	f9b6 b002 	ldrsh.w	fp, [r6, #2]
 800fec2:	1c50      	adds	r0, r2, #1
 800fec4:	d06e      	beq.n	800ffa4 <GUIMONO_DispChar+0x138>
 800fec6:	f891 8018 	ldrb.w	r8, [r1, #24]
 800feca:	7ca1      	ldrb	r1, [r4, #18]
 800fecc:	f8b3 a02a 	ldrh.w	sl, [r3, #42]	; 0x2a
 800fed0:	7c26      	ldrb	r6, [r4, #16]
 800fed2:	9206      	str	r2, [sp, #24]
 800fed4:	fb18 f101 	smulbb	r1, r8, r1
 800fed8:	9107      	str	r1, [sp, #28]
 800feda:	fa0f f18a 	sxth.w	r1, sl
 800fede:	4608      	mov	r0, r1
 800fee0:	9108      	str	r1, [sp, #32]
 800fee2:	f7fd fd05 	bl	800d8f0 <LCD_SetDrawMode>
 800fee6:	4934      	ldr	r1, [pc, #208]	; (800ffb8 <GUIMONO_DispChar+0x14c>)
 800fee8:	9009      	str	r0, [sp, #36]	; 0x24
 800feea:	680b      	ldr	r3, [r1, #0]
 800feec:	9a06      	ldr	r2, [sp, #24]
 800feee:	69d9      	ldr	r1, [r3, #28]
 800fef0:	7e88      	ldrb	r0, [r1, #26]
 800fef2:	9000      	str	r0, [sp, #0]
 800fef4:	7ec9      	ldrb	r1, [r1, #27]
 800fef6:	9101      	str	r1, [sp, #4]
 800fef8:	2101      	movs	r1, #1
 800fefa:	9102      	str	r1, [sp, #8]
 800fefc:	7ca1      	ldrb	r1, [r4, #18]
 800fefe:	9103      	str	r1, [sp, #12]
 800ff00:	9907      	ldr	r1, [sp, #28]
 800ff02:	fb01 9202 	mla	r2, r1, r2, r9
 800ff06:	9204      	str	r2, [sp, #16]
 800ff08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff0a:	9305      	str	r3, [sp, #20]
 800ff0c:	b23f      	sxth	r7, r7
 800ff0e:	b22d      	sxth	r5, r5
 800ff10:	4638      	mov	r0, r7
 800ff12:	4629      	mov	r1, r5
 800ff14:	4632      	mov	r2, r6
 800ff16:	4643      	mov	r3, r8
 800ff18:	f7fd fe74 	bl	800dc04 <LCD_DrawBitmap>
 800ff1c:	f1bb 3fff 	cmp.w	fp, #4294967295
 800ff20:	d01b      	beq.n	800ff5a <GUIMONO_DispChar+0xee>
 800ff22:	f04a 0002 	orr.w	r0, sl, #2
 800ff26:	b200      	sxth	r0, r0
 800ff28:	f7fd fce2 	bl	800d8f0 <LCD_SetDrawMode>
 800ff2c:	4a22      	ldr	r2, [pc, #136]	; (800ffb8 <GUIMONO_DispChar+0x14c>)
 800ff2e:	6813      	ldr	r3, [r2, #0]
 800ff30:	69da      	ldr	r2, [r3, #28]
 800ff32:	7e91      	ldrb	r1, [r2, #26]
 800ff34:	9100      	str	r1, [sp, #0]
 800ff36:	7ed2      	ldrb	r2, [r2, #27]
 800ff38:	9201      	str	r2, [sp, #4]
 800ff3a:	2101      	movs	r1, #1
 800ff3c:	9102      	str	r1, [sp, #8]
 800ff3e:	9907      	ldr	r1, [sp, #28]
 800ff40:	7ca2      	ldrb	r2, [r4, #18]
 800ff42:	9203      	str	r2, [sp, #12]
 800ff44:	fb01 920b 	mla	r2, r1, fp, r9
 800ff48:	9204      	str	r2, [sp, #16]
 800ff4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff4c:	9305      	str	r3, [sp, #20]
 800ff4e:	4638      	mov	r0, r7
 800ff50:	4629      	mov	r1, r5
 800ff52:	4632      	mov	r2, r6
 800ff54:	4643      	mov	r3, r8
 800ff56:	f7fd fe55 	bl	800dc04 <LCD_DrawBitmap>
 800ff5a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800ffb8 <GUIMONO_DispChar+0x14c>
 800ff5e:	f8d8 3000 	ldr.w	r3, [r8]
 800ff62:	69db      	ldr	r3, [r3, #28]
 800ff64:	7e5a      	ldrb	r2, [r3, #25]
 800ff66:	7e1b      	ldrb	r3, [r3, #24]
 800ff68:	429a      	cmp	r2, r3
 800ff6a:	d917      	bls.n	800ff9c <GUIMONO_DispChar+0x130>
 800ff6c:	9a08      	ldr	r2, [sp, #32]
 800ff6e:	2a02      	cmp	r2, #2
 800ff70:	d014      	beq.n	800ff9c <GUIMONO_DispChar+0x130>
 800ff72:	f08a 0004 	eor.w	r0, sl, #4
 800ff76:	b200      	sxth	r0, r0
 800ff78:	f7fd fcba 	bl	800d8f0 <LCD_SetDrawMode>
 800ff7c:	f8d8 3000 	ldr.w	r3, [r8]
 800ff80:	69db      	ldr	r3, [r3, #28]
 800ff82:	f893 e018 	ldrb.w	lr, [r3, #24]
 800ff86:	7ed9      	ldrb	r1, [r3, #27]
 800ff88:	7e9a      	ldrb	r2, [r3, #26]
 800ff8a:	7e5b      	ldrb	r3, [r3, #25]
 800ff8c:	4638      	mov	r0, r7
 800ff8e:	fb0e 5101 	mla	r1, lr, r1, r5
 800ff92:	fb06 7202 	mla	r2, r6, r2, r7
 800ff96:	442b      	add	r3, r5
 800ff98:	f7fd fd2c 	bl	800d9f4 <LCD_FillRect>
 800ff9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff9e:	b2d8      	uxtb	r0, r3
 800ffa0:	f7fd fca6 	bl	800d8f0 <LCD_SetDrawMode>
 800ffa4:	4b04      	ldr	r3, [pc, #16]	; (800ffb8 <GUIMONO_DispChar+0x14c>)
 800ffa6:	7c61      	ldrb	r1, [r4, #17]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800ffac:	440a      	add	r2, r1
 800ffae:	845a      	strh	r2, [r3, #34]	; 0x22
 800ffb0:	b00b      	add	sp, #44	; 0x2c
 800ffb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffb6:	bf00      	nop
 800ffb8:	20000238 	.word	0x20000238

0800ffbc <GUIMONO_GetCharDistX>:
 800ffbc:	4b04      	ldr	r3, [pc, #16]	; (800ffd0 <GUIMONO_GetCharDistX+0x14>)
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	69db      	ldr	r3, [r3, #28]
 800ffc2:	69db      	ldr	r3, [r3, #28]
 800ffc4:	b109      	cbz	r1, 800ffca <GUIMONO_GetCharDistX+0xe>
 800ffc6:	7c1a      	ldrb	r2, [r3, #16]
 800ffc8:	600a      	str	r2, [r1, #0]
 800ffca:	7c58      	ldrb	r0, [r3, #17]
 800ffcc:	4770      	bx	lr
 800ffce:	bf00      	nop
 800ffd0:	20000238 	.word	0x20000238

0800ffd4 <GUIMONO_GetFontInfo>:
 800ffd4:	2302      	movs	r3, #2
 800ffd6:	800b      	strh	r3, [r1, #0]
 800ffd8:	4770      	bx	lr

0800ffda <GUIMONO_IsInFont>:
 800ffda:	69c3      	ldr	r3, [r0, #28]
 800ffdc:	899a      	ldrh	r2, [r3, #12]
 800ffde:	428a      	cmp	r2, r1
 800ffe0:	d802      	bhi.n	800ffe8 <GUIMONO_IsInFont+0xe>
 800ffe2:	89da      	ldrh	r2, [r3, #14]
 800ffe4:	428a      	cmp	r2, r1
 800ffe6:	d20f      	bcs.n	8010008 <GUIMONO_IsInFont+0x2e>
 800ffe8:	6898      	ldr	r0, [r3, #8]
 800ffea:	b180      	cbz	r0, 801000e <GUIMONO_IsInFont+0x34>
 800ffec:	8803      	ldrh	r3, [r0, #0]
 800ffee:	4299      	cmp	r1, r3
 800fff0:	d30c      	bcc.n	801000c <GUIMONO_IsInFont+0x32>
 800fff2:	8842      	ldrh	r2, [r0, #2]
 800fff4:	428a      	cmp	r2, r1
 800fff6:	d309      	bcc.n	801000c <GUIMONO_IsInFont+0x32>
 800fff8:	1ac9      	subs	r1, r1, r3
 800fffa:	6842      	ldr	r2, [r0, #4]
 800fffc:	f832 0021 	ldrh.w	r0, [r2, r1, lsl #2]
 8010000:	43c0      	mvns	r0, r0
 8010002:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 8010006:	4770      	bx	lr
 8010008:	2001      	movs	r0, #1
 801000a:	4770      	bx	lr
 801000c:	2000      	movs	r0, #0
 801000e:	4770      	bx	lr

08010010 <_Log2VisBuffered>:
 8010010:	4770      	bx	lr
	...

08010014 <_DispLine>:
 8010014:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010016:	4615      	mov	r5, r2
 8010018:	ab02      	add	r3, sp, #8
 801001a:	4a1a      	ldr	r2, [pc, #104]	; (8010084 <_DispLine+0x70>)
 801001c:	f843 1d08 	str.w	r1, [r3, #-8]!
 8010020:	9001      	str	r0, [sp, #4]
 8010022:	6812      	ldr	r2, [r2, #0]
 8010024:	4c18      	ldr	r4, [pc, #96]	; (8010088 <_DispLine+0x74>)
 8010026:	4669      	mov	r1, sp
 8010028:	4790      	blx	r2
 801002a:	6823      	ldr	r3, [r4, #0]
 801002c:	9001      	str	r0, [sp, #4]
 801002e:	6958      	ldr	r0, [r3, #20]
 8010030:	b958      	cbnz	r0, 801004a <_DispLine+0x36>
 8010032:	2001      	movs	r0, #1
 8010034:	f7fe f8ca 	bl	800e1cc <GUI__ManageCache>
 8010038:	6823      	ldr	r3, [r4, #0]
 801003a:	69db      	ldr	r3, [r3, #28]
 801003c:	695b      	ldr	r3, [r3, #20]
 801003e:	b1bb      	cbz	r3, 8010070 <_DispLine+0x5c>
 8010040:	689b      	ldr	r3, [r3, #8]
 8010042:	9801      	ldr	r0, [sp, #4]
 8010044:	9900      	ldr	r1, [sp, #0]
 8010046:	4798      	blx	r3
 8010048:	e017      	b.n	801007a <_DispLine+0x66>
 801004a:	4629      	mov	r1, r5
 801004c:	f7ff f956 	bl	800f2fc <GUI_RectsIntersect>
 8010050:	2800      	cmp	r0, #0
 8010052:	d1ee      	bne.n	8010032 <_DispLine+0x1e>
 8010054:	e014      	b.n	8010080 <_DispLine+0x6c>
 8010056:	a801      	add	r0, sp, #4
 8010058:	f7fe fb9a 	bl	800e790 <GUI_UC__GetCharCodeInc>
 801005c:	6823      	ldr	r3, [r4, #0]
 801005e:	69db      	ldr	r3, [r3, #28]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	4605      	mov	r5, r0
 8010064:	4798      	blx	r3
 8010066:	4b09      	ldr	r3, [pc, #36]	; (801008c <_DispLine+0x78>)
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	b10b      	cbz	r3, 8010070 <_DispLine+0x5c>
 801006c:	4628      	mov	r0, r5
 801006e:	4798      	blx	r3
 8010070:	9b00      	ldr	r3, [sp, #0]
 8010072:	3b01      	subs	r3, #1
 8010074:	2b00      	cmp	r3, #0
 8010076:	9300      	str	r3, [sp, #0]
 8010078:	daed      	bge.n	8010056 <_DispLine+0x42>
 801007a:	2000      	movs	r0, #0
 801007c:	f7fe f8a6 	bl	800e1cc <GUI__ManageCache>
 8010080:	b003      	add	sp, #12
 8010082:	bd30      	pop	{r4, r5, pc}
 8010084:	20000240 	.word	0x20000240
 8010088:	20000238 	.word	0x20000238
 801008c:	2001b2ac 	.word	0x2001b2ac

08010090 <GUI__GetLineNumChars>:
 8010090:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010092:	460d      	mov	r5, r1
 8010094:	9001      	str	r0, [sp, #4]
 8010096:	4604      	mov	r4, r0
 8010098:	b198      	cbz	r0, 80100c2 <GUI__GetLineNumChars+0x32>
 801009a:	4b0b      	ldr	r3, [pc, #44]	; (80100c8 <GUI__GetLineNumChars+0x38>)
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	69db      	ldr	r3, [r3, #28]
 80100a0:	695b      	ldr	r3, [r3, #20]
 80100a2:	b10b      	cbz	r3, 80100a8 <GUI__GetLineNumChars+0x18>
 80100a4:	685b      	ldr	r3, [r3, #4]
 80100a6:	b90b      	cbnz	r3, 80100ac <GUI__GetLineNumChars+0x1c>
 80100a8:	2400      	movs	r4, #0
 80100aa:	e008      	b.n	80100be <GUI__GetLineNumChars+0x2e>
 80100ac:	4798      	blx	r3
 80100ae:	e009      	b.n	80100c4 <GUI__GetLineNumChars+0x34>
 80100b0:	a801      	add	r0, sp, #4
 80100b2:	f7fe fb6d 	bl	800e790 <GUI_UC__GetCharCodeInc>
 80100b6:	b120      	cbz	r0, 80100c2 <GUI__GetLineNumChars+0x32>
 80100b8:	280a      	cmp	r0, #10
 80100ba:	d002      	beq.n	80100c2 <GUI__GetLineNumChars+0x32>
 80100bc:	3401      	adds	r4, #1
 80100be:	42ac      	cmp	r4, r5
 80100c0:	dbf6      	blt.n	80100b0 <GUI__GetLineNumChars+0x20>
 80100c2:	4620      	mov	r0, r4
 80100c4:	b003      	add	sp, #12
 80100c6:	bd30      	pop	{r4, r5, pc}
 80100c8:	20000238 	.word	0x20000238

080100cc <GUI__GetOverlap>:
 80100cc:	b513      	push	{r0, r1, r4, lr}
 80100ce:	a902      	add	r1, sp, #8
 80100d0:	2400      	movs	r4, #0
 80100d2:	f841 4d04 	str.w	r4, [r1, #-4]!
 80100d6:	f000 f8b7 	bl	8010248 <GUI_GetCharDistXEx>
 80100da:	9b01      	ldr	r3, [sp, #4]
 80100dc:	4283      	cmp	r3, r0
 80100de:	bfcc      	ite	gt
 80100e0:	ebc0 0003 	rsbgt	r0, r0, r3
 80100e4:	4620      	movle	r0, r4
 80100e6:	b002      	add	sp, #8
 80100e8:	bd10      	pop	{r4, pc}
	...

080100ec <GUI__GetLineDistX>:
 80100ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80100ee:	4a15      	ldr	r2, [pc, #84]	; (8010144 <GUI__GetLineDistX+0x58>)
 80100f0:	9001      	str	r0, [sp, #4]
 80100f2:	ab02      	add	r3, sp, #8
 80100f4:	6812      	ldr	r2, [r2, #0]
 80100f6:	f843 1d08 	str.w	r1, [r3, #-8]!
 80100fa:	4669      	mov	r1, sp
 80100fc:	4790      	blx	r2
 80100fe:	9001      	str	r0, [sp, #4]
 8010100:	b1f0      	cbz	r0, 8010140 <GUI__GetLineDistX+0x54>
 8010102:	4b11      	ldr	r3, [pc, #68]	; (8010148 <GUI__GetLineDistX+0x5c>)
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	69db      	ldr	r3, [r3, #28]
 8010108:	695b      	ldr	r3, [r3, #20]
 801010a:	b10b      	cbz	r3, 8010110 <GUI__GetLineDistX+0x24>
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	b913      	cbnz	r3, 8010116 <GUI__GetLineDistX+0x2a>
 8010110:	2500      	movs	r5, #0
 8010112:	462c      	mov	r4, r5
 8010114:	e002      	b.n	801011c <GUI__GetLineDistX+0x30>
 8010116:	9900      	ldr	r1, [sp, #0]
 8010118:	4798      	blx	r3
 801011a:	e011      	b.n	8010140 <GUI__GetLineDistX+0x54>
 801011c:	9b00      	ldr	r3, [sp, #0]
 801011e:	3b01      	subs	r3, #1
 8010120:	2b00      	cmp	r3, #0
 8010122:	9300      	str	r3, [sp, #0]
 8010124:	db07      	blt.n	8010136 <GUI__GetLineDistX+0x4a>
 8010126:	a801      	add	r0, sp, #4
 8010128:	f7fe fb32 	bl	800e790 <GUI_UC__GetCharCodeInc>
 801012c:	4605      	mov	r5, r0
 801012e:	f000 f881 	bl	8010234 <GUI_GetCharDistX>
 8010132:	4404      	add	r4, r0
 8010134:	e7f2      	b.n	801011c <GUI__GetLineDistX+0x30>
 8010136:	4628      	mov	r0, r5
 8010138:	f7ff ffc8 	bl	80100cc <GUI__GetOverlap>
 801013c:	4420      	add	r0, r4
 801013e:	e7ff      	b.n	8010140 <GUI__GetLineDistX+0x54>
 8010140:	b003      	add	sp, #12
 8010142:	bd30      	pop	{r4, r5, pc}
 8010144:	20000240 	.word	0x20000240
 8010148:	20000238 	.word	0x20000238

0801014c <GUI__DispLine>:
 801014c:	4b27      	ldr	r3, [pc, #156]	; (80101ec <GUI__DispLine+0xa0>)
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010152:	4605      	mov	r5, r0
 8010154:	460c      	mov	r4, r1
 8010156:	b163      	cbz	r3, 8010172 <GUI__DispLine+0x26>
 8010158:	2000      	movs	r0, #0
 801015a:	f7fa fde5 	bl	800ad28 <WM__InitIVRSearch>
 801015e:	2800      	cmp	r0, #0
 8010160:	d041      	beq.n	80101e6 <GUI__DispLine+0x9a>
 8010162:	4628      	mov	r0, r5
 8010164:	4621      	mov	r1, r4
 8010166:	466a      	mov	r2, sp
 8010168:	f7ff ff54 	bl	8010014 <_DispLine>
 801016c:	f7fa fd1a 	bl	800aba4 <WM__GetNextIVR>
 8010170:	e7f5      	b.n	801015e <GUI__DispLine+0x12>
 8010172:	6810      	ldr	r0, [r2, #0]
 8010174:	6851      	ldr	r1, [r2, #4]
 8010176:	4e1e      	ldr	r6, [pc, #120]	; (80101f0 <GUI__DispLine+0xa4>)
 8010178:	466b      	mov	r3, sp
 801017a:	c303      	stmia	r3!, {r0, r1}
 801017c:	6833      	ldr	r3, [r6, #0]
 801017e:	f8bd 1000 	ldrh.w	r1, [sp]
 8010182:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8010186:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801018a:	4411      	add	r1, r2
 801018c:	f8ad 1000 	strh.w	r1, [sp]
 8010190:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8010194:	4419      	add	r1, r3
 8010196:	f8ad 1002 	strh.w	r1, [sp, #2]
 801019a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801019e:	440a      	add	r2, r1
 80101a0:	f8ad 2004 	strh.w	r2, [sp, #4]
 80101a4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80101a8:	4668      	mov	r0, sp
 80101aa:	4413      	add	r3, r2
 80101ac:	f8ad 3006 	strh.w	r3, [sp, #6]
 80101b0:	f7fa fdba 	bl	800ad28 <WM__InitIVRSearch>
 80101b4:	6833      	ldr	r3, [r6, #0]
 80101b6:	b940      	cbnz	r0, 80101ca <GUI__DispLine+0x7e>
 80101b8:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 80101ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80101bc:	1a8a      	subs	r2, r1, r2
 80101be:	845a      	strh	r2, [r3, #34]	; 0x22
 80101c0:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 80101c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80101c4:	1a8a      	subs	r2, r1, r2
 80101c6:	849a      	strh	r2, [r3, #36]	; 0x24
 80101c8:	e00d      	b.n	80101e6 <GUI__DispLine+0x9a>
 80101ca:	f8bd 2000 	ldrh.w	r2, [sp]
 80101ce:	845a      	strh	r2, [r3, #34]	; 0x22
 80101d0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80101d4:	849a      	strh	r2, [r3, #36]	; 0x24
 80101d6:	4628      	mov	r0, r5
 80101d8:	4621      	mov	r1, r4
 80101da:	466a      	mov	r2, sp
 80101dc:	f7ff ff1a 	bl	8010014 <_DispLine>
 80101e0:	f7fa fce0 	bl	800aba4 <WM__GetNextIVR>
 80101e4:	e7e6      	b.n	80101b4 <GUI__DispLine+0x68>
 80101e6:	b002      	add	sp, #8
 80101e8:	bd70      	pop	{r4, r5, r6, pc}
 80101ea:	bf00      	nop
 80101ec:	2001b294 	.word	0x2001b294
 80101f0:	20000238 	.word	0x20000238

080101f4 <GUI_GetYAdjust>:
 80101f4:	4b0a      	ldr	r3, [pc, #40]	; (8010220 <GUI_GetYAdjust+0x2c>)
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80101fa:	f002 020c 	and.w	r2, r2, #12
 80101fe:	2a08      	cmp	r2, #8
 8010200:	d007      	beq.n	8010212 <GUI_GetYAdjust+0x1e>
 8010202:	2a0c      	cmp	r2, #12
 8010204:	d005      	beq.n	8010212 <GUI_GetYAdjust+0x1e>
 8010206:	2a04      	cmp	r2, #4
 8010208:	d107      	bne.n	801021a <GUI_GetYAdjust+0x26>
 801020a:	69db      	ldr	r3, [r3, #28]
 801020c:	7e18      	ldrb	r0, [r3, #24]
 801020e:	3801      	subs	r0, #1
 8010210:	4770      	bx	lr
 8010212:	69db      	ldr	r3, [r3, #28]
 8010214:	7e18      	ldrb	r0, [r3, #24]
 8010216:	0840      	lsrs	r0, r0, #1
 8010218:	4770      	bx	lr
 801021a:	2000      	movs	r0, #0
 801021c:	4770      	bx	lr
 801021e:	bf00      	nop
 8010220:	20000238 	.word	0x20000238

08010224 <GUI_GetFontDistY>:
 8010224:	4b02      	ldr	r3, [pc, #8]	; (8010230 <GUI_GetFontDistY+0xc>)
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	69db      	ldr	r3, [r3, #28]
 801022a:	7e58      	ldrb	r0, [r3, #25]
 801022c:	4770      	bx	lr
 801022e:	bf00      	nop
 8010230:	20000238 	.word	0x20000238

08010234 <GUI_GetCharDistX>:
 8010234:	b508      	push	{r3, lr}
 8010236:	4b03      	ldr	r3, [pc, #12]	; (8010244 <GUI_GetCharDistX+0x10>)
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	69db      	ldr	r3, [r3, #28]
 801023c:	2100      	movs	r1, #0
 801023e:	685b      	ldr	r3, [r3, #4]
 8010240:	4798      	blx	r3
 8010242:	bd08      	pop	{r3, pc}
 8010244:	20000238 	.word	0x20000238

08010248 <GUI_GetCharDistXEx>:
 8010248:	b508      	push	{r3, lr}
 801024a:	4b03      	ldr	r3, [pc, #12]	; (8010258 <GUI_GetCharDistXEx+0x10>)
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	69db      	ldr	r3, [r3, #28]
 8010250:	685b      	ldr	r3, [r3, #4]
 8010252:	4798      	blx	r3
 8010254:	bd08      	pop	{r3, pc}
 8010256:	bf00      	nop
 8010258:	20000238 	.word	0x20000238

0801025c <_GetClipParam>:
 801025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801025e:	4f33      	ldr	r7, [pc, #204]	; (801032c <_GetClipParam+0xd0>)
 8010260:	9c07      	ldr	r4, [sp, #28]
 8010262:	683f      	ldr	r7, [r7, #0]
 8010264:	9e05      	ldr	r6, [sp, #20]
 8010266:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
 801026a:	9d06      	ldr	r5, [sp, #24]
 801026c:	ebc0 0c0c 	rsb	ip, r0, ip
 8010270:	f1bc 0f00 	cmp.w	ip, #0
 8010274:	bfc8      	it	gt
 8010276:	f8c4 c00c 	strgt.w	ip, [r4, #12]
 801027a:	f9b7 c00a 	ldrsh.w	ip, [r7, #10]
 801027e:	ebc1 0c0c 	rsb	ip, r1, ip
 8010282:	f1bc 0f00 	cmp.w	ip, #0
 8010286:	bfc8      	it	gt
 8010288:	f8c4 c010 	strgt.w	ip, [r4, #16]
 801028c:	4410      	add	r0, r2
 801028e:	f9b7 c00c 	ldrsh.w	ip, [r7, #12]
 8010292:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010296:	3801      	subs	r0, #1
 8010298:	4419      	add	r1, r3
 801029a:	ebcc 0000 	rsb	r0, ip, r0
 801029e:	3901      	subs	r1, #1
 80102a0:	2800      	cmp	r0, #0
 80102a2:	ebc2 0101 	rsb	r1, r2, r1
 80102a6:	bfc8      	it	gt
 80102a8:	60a0      	strgt	r0, [r4, #8]
 80102aa:	2900      	cmp	r1, #0
 80102ac:	bfc8      	it	gt
 80102ae:	6161      	strgt	r1, [r4, #20]
 80102b0:	2e08      	cmp	r6, #8
 80102b2:	d024      	beq.n	80102fe <_GetClipParam+0xa2>
 80102b4:	dc04      	bgt.n	80102c0 <_GetClipParam+0x64>
 80102b6:	2e01      	cmp	r6, #1
 80102b8:	d00f      	beq.n	80102da <_GetClipParam+0x7e>
 80102ba:	2e04      	cmp	r6, #4
 80102bc:	d016      	beq.n	80102ec <_GetClipParam+0x90>
 80102be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102c0:	2e18      	cmp	r6, #24
 80102c2:	d021      	beq.n	8010308 <_GetClipParam+0xac>
 80102c4:	2e20      	cmp	r6, #32
 80102c6:	d028      	beq.n	801031a <_GetClipParam+0xbe>
 80102c8:	2e10      	cmp	r6, #16
 80102ca:	d12e      	bne.n	801032a <_GetClipParam+0xce>
 80102cc:	68e3      	ldr	r3, [r4, #12]
 80102ce:	68a2      	ldr	r2, [r4, #8]
 80102d0:	005b      	lsls	r3, r3, #1
 80102d2:	6023      	str	r3, [r4, #0]
 80102d4:	eba5 0542 	sub.w	r5, r5, r2, lsl #1
 80102d8:	e025      	b.n	8010326 <_GetClipParam+0xca>
 80102da:	68e3      	ldr	r3, [r4, #12]
 80102dc:	10db      	asrs	r3, r3, #3
 80102de:	00da      	lsls	r2, r3, #3
 80102e0:	60e2      	str	r2, [r4, #12]
 80102e2:	68a2      	ldr	r2, [r4, #8]
 80102e4:	6023      	str	r3, [r4, #0]
 80102e6:	eba5 05e2 	sub.w	r5, r5, r2, asr #3
 80102ea:	e01c      	b.n	8010326 <_GetClipParam+0xca>
 80102ec:	68e3      	ldr	r3, [r4, #12]
 80102ee:	105b      	asrs	r3, r3, #1
 80102f0:	005a      	lsls	r2, r3, #1
 80102f2:	60e2      	str	r2, [r4, #12]
 80102f4:	68a2      	ldr	r2, [r4, #8]
 80102f6:	6023      	str	r3, [r4, #0]
 80102f8:	eba5 0562 	sub.w	r5, r5, r2, asr #1
 80102fc:	e013      	b.n	8010326 <_GetClipParam+0xca>
 80102fe:	68a2      	ldr	r2, [r4, #8]
 8010300:	68e3      	ldr	r3, [r4, #12]
 8010302:	6023      	str	r3, [r4, #0]
 8010304:	1aad      	subs	r5, r5, r2
 8010306:	e00e      	b.n	8010326 <_GetClipParam+0xca>
 8010308:	68e3      	ldr	r3, [r4, #12]
 801030a:	68a2      	ldr	r2, [r4, #8]
 801030c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010310:	eba2 0282 	sub.w	r2, r2, r2, lsl #2
 8010314:	6023      	str	r3, [r4, #0]
 8010316:	4415      	add	r5, r2
 8010318:	e005      	b.n	8010326 <_GetClipParam+0xca>
 801031a:	68e3      	ldr	r3, [r4, #12]
 801031c:	68a2      	ldr	r2, [r4, #8]
 801031e:	009b      	lsls	r3, r3, #2
 8010320:	6023      	str	r3, [r4, #0]
 8010322:	eba5 0582 	sub.w	r5, r5, r2, lsl #2
 8010326:	1aeb      	subs	r3, r5, r3
 8010328:	6063      	str	r3, [r4, #4]
 801032a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801032c:	20000238 	.word	0x20000238

08010330 <_GetBitfieldsPara>:
 8010330:	2300      	movs	r3, #0
 8010332:	600b      	str	r3, [r1, #0]
 8010334:	07c3      	lsls	r3, r0, #31
 8010336:	d403      	bmi.n	8010340 <_GetBitfieldsPara+0x10>
 8010338:	680b      	ldr	r3, [r1, #0]
 801033a:	0840      	lsrs	r0, r0, #1
 801033c:	3301      	adds	r3, #1
 801033e:	e7f8      	b.n	8010332 <_GetBitfieldsPara+0x2>
 8010340:	2300      	movs	r3, #0
 8010342:	6013      	str	r3, [r2, #0]
 8010344:	07c3      	lsls	r3, r0, #31
 8010346:	d503      	bpl.n	8010350 <_GetBitfieldsPara+0x20>
 8010348:	6813      	ldr	r3, [r2, #0]
 801034a:	0840      	lsrs	r0, r0, #1
 801034c:	3301      	adds	r3, #1
 801034e:	e7f8      	b.n	8010342 <_GetBitfieldsPara+0x12>
 8010350:	4770      	bx	lr

08010352 <GUI_BMP__GetData>:
 8010352:	6800      	ldr	r0, [r0, #0]
 8010354:	4403      	add	r3, r0
 8010356:	600b      	str	r3, [r1, #0]
 8010358:	4610      	mov	r0, r2
 801035a:	4770      	bx	lr

0801035c <_DrawLine_RGB>:
 801035c:	6983      	ldr	r3, [r0, #24]
 801035e:	b513      	push	{r0, r1, r4, lr}
 8010360:	4604      	mov	r4, r0
 8010362:	b1c3      	cbz	r3, 8010396 <_DrawLine_RGB+0x3a>
 8010364:	2300      	movs	r3, #0
 8010366:	6063      	str	r3, [r4, #4]
 8010368:	6863      	ldr	r3, [r4, #4]
 801036a:	68e2      	ldr	r2, [r4, #12]
 801036c:	4293      	cmp	r3, r2
 801036e:	da2b      	bge.n	80103c8 <_DrawLine_RGB+0x6c>
 8010370:	6921      	ldr	r1, [r4, #16]
 8010372:	6822      	ldr	r2, [r4, #0]
 8010374:	a802      	add	r0, sp, #8
 8010376:	fb01 2303 	mla	r3, r1, r3, r2
 801037a:	f840 3d04 	str.w	r3, [r0, #-4]!
 801037e:	f003 fda7 	bl	8013ed0 <GUI__Read32>
 8010382:	69a3      	ldr	r3, [r4, #24]
 8010384:	4798      	blx	r3
 8010386:	6963      	ldr	r3, [r4, #20]
 8010388:	4798      	blx	r3
 801038a:	69e3      	ldr	r3, [r4, #28]
 801038c:	685b      	ldr	r3, [r3, #4]
 801038e:	4798      	blx	r3
 8010390:	6863      	ldr	r3, [r4, #4]
 8010392:	3301      	adds	r3, #1
 8010394:	e7e7      	b.n	8010366 <_DrawLine_RGB+0xa>
 8010396:	6063      	str	r3, [r4, #4]
 8010398:	6863      	ldr	r3, [r4, #4]
 801039a:	68e2      	ldr	r2, [r4, #12]
 801039c:	4293      	cmp	r3, r2
 801039e:	da13      	bge.n	80103c8 <_DrawLine_RGB+0x6c>
 80103a0:	6922      	ldr	r2, [r4, #16]
 80103a2:	6821      	ldr	r1, [r4, #0]
 80103a4:	435a      	muls	r2, r3
 80103a6:	188b      	adds	r3, r1, r2
 80103a8:	9301      	str	r3, [sp, #4]
 80103aa:	7858      	ldrb	r0, [r3, #1]
 80103ac:	5c8a      	ldrb	r2, [r1, r2]
 80103ae:	0200      	lsls	r0, r0, #8
 80103b0:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80103b4:	789a      	ldrb	r2, [r3, #2]
 80103b6:	6963      	ldr	r3, [r4, #20]
 80103b8:	4310      	orrs	r0, r2
 80103ba:	4798      	blx	r3
 80103bc:	69e3      	ldr	r3, [r4, #28]
 80103be:	685b      	ldr	r3, [r3, #4]
 80103c0:	4798      	blx	r3
 80103c2:	6863      	ldr	r3, [r4, #4]
 80103c4:	3301      	adds	r3, #1
 80103c6:	e7e6      	b.n	8010396 <_DrawLine_RGB+0x3a>
 80103c8:	68a3      	ldr	r3, [r4, #8]
 80103ca:	b113      	cbz	r3, 80103d2 <_DrawLine_RGB+0x76>
 80103cc:	69e3      	ldr	r3, [r4, #28]
 80103ce:	689b      	ldr	r3, [r3, #8]
 80103d0:	4798      	blx	r3
 80103d2:	b002      	add	sp, #8
 80103d4:	bd10      	pop	{r4, pc}
	...

080103d8 <_NextPixel_FlushBuffer>:
 80103d8:	b530      	push	{r4, r5, lr}
 80103da:	4c10      	ldr	r4, [pc, #64]	; (801041c <_NextPixel_FlushBuffer+0x44>)
 80103dc:	6a22      	ldr	r2, [r4, #32]
 80103de:	b089      	sub	sp, #36	; 0x24
 80103e0:	2101      	movs	r1, #1
 80103e2:	428a      	cmp	r2, r1
 80103e4:	f04f 0300 	mov.w	r3, #0
 80103e8:	9306      	str	r3, [sp, #24]
 80103ea:	9202      	str	r2, [sp, #8]
 80103ec:	bf08      	it	eq
 80103ee:	ab06      	addeq	r3, sp, #24
 80103f0:	6962      	ldr	r2, [r4, #20]
 80103f2:	9305      	str	r3, [sp, #20]
 80103f4:	2500      	movs	r5, #0
 80103f6:	9100      	str	r1, [sp, #0]
 80103f8:	9101      	str	r1, [sp, #4]
 80103fa:	9503      	str	r5, [sp, #12]
 80103fc:	9204      	str	r2, [sp, #16]
 80103fe:	1d20      	adds	r0, r4, #4
 8010400:	9107      	str	r1, [sp, #28]
 8010402:	2301      	movs	r3, #1
 8010404:	c807      	ldmia	r0, {r0, r1, r2}
 8010406:	f7fd fbfd 	bl	800dc04 <LCD_DrawBitmap>
 801040a:	6862      	ldr	r2, [r4, #4]
 801040c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801040e:	62a5      	str	r5, [r4, #40]	; 0x28
 8010410:	4413      	add	r3, r2
 8010412:	6063      	str	r3, [r4, #4]
 8010414:	6963      	ldr	r3, [r4, #20]
 8010416:	61a3      	str	r3, [r4, #24]
 8010418:	b009      	add	sp, #36	; 0x24
 801041a:	bd30      	pop	{r4, r5, pc}
 801041c:	20019618 	.word	0x20019618

08010420 <_NextPixel_NextLine>:
 8010420:	b510      	push	{r4, lr}
 8010422:	4c06      	ldr	r4, [pc, #24]	; (801043c <_NextPixel_NextLine+0x1c>)
 8010424:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010426:	b10b      	cbz	r3, 801042c <_NextPixel_NextLine+0xc>
 8010428:	f7ff ffd6 	bl	80103d8 <_NextPixel_FlushBuffer>
 801042c:	6823      	ldr	r3, [r4, #0]
 801042e:	6063      	str	r3, [r4, #4]
 8010430:	68a3      	ldr	r3, [r4, #8]
 8010432:	3b01      	subs	r3, #1
 8010434:	60a3      	str	r3, [r4, #8]
 8010436:	2300      	movs	r3, #0
 8010438:	62e3      	str	r3, [r4, #44]	; 0x2c
 801043a:	bd10      	pop	{r4, pc}
 801043c:	20019618 	.word	0x20019618

08010440 <_NextPixel_SetPixel>:
 8010440:	4b33      	ldr	r3, [pc, #204]	; (8010510 <_NextPixel_SetPixel+0xd0>)
 8010442:	69da      	ldr	r2, [r3, #28]
 8010444:	2a02      	cmp	r2, #2
 8010446:	b570      	push	{r4, r5, r6, lr}
 8010448:	d04e      	beq.n	80104e8 <_NextPixel_SetPixel+0xa8>
 801044a:	2a04      	cmp	r2, #4
 801044c:	d050      	beq.n	80104f0 <_NextPixel_SetPixel+0xb0>
 801044e:	2a01      	cmp	r2, #1
 8010450:	d152      	bne.n	80104f8 <_NextPixel_SetPixel+0xb8>
 8010452:	6a19      	ldr	r1, [r3, #32]
 8010454:	699a      	ldr	r2, [r3, #24]
 8010456:	3901      	subs	r1, #1
 8010458:	2907      	cmp	r1, #7
 801045a:	d84d      	bhi.n	80104f8 <_NextPixel_SetPixel+0xb8>
 801045c:	e8df f001 	tbb	[pc, r1]
 8010460:	264c1504 	.word	0x264c1504
 8010464:	404c4c4c 	.word	0x404c4c4c
 8010468:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 801046a:	7816      	ldrb	r6, [r2, #0]
 801046c:	4928      	ldr	r1, [pc, #160]	; (8010510 <_NextPixel_SetPixel+0xd0>)
 801046e:	f1c4 0407 	rsb	r4, r4, #7
 8010472:	2501      	movs	r5, #1
 8010474:	40a5      	lsls	r5, r4
 8010476:	ea26 0505 	bic.w	r5, r6, r5
 801047a:	fa00 f404 	lsl.w	r4, r0, r4
 801047e:	ea45 0004 	orr.w	r0, r5, r4
 8010482:	7010      	strb	r0, [r2, #0]
 8010484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010486:	3201      	adds	r2, #1
 8010488:	e020      	b.n	80104cc <_NextPixel_SetPixel+0x8c>
 801048a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 801048c:	7816      	ldrb	r6, [r2, #0]
 801048e:	4920      	ldr	r1, [pc, #128]	; (8010510 <_NextPixel_SetPixel+0xd0>)
 8010490:	f1c4 0406 	rsb	r4, r4, #6
 8010494:	2503      	movs	r5, #3
 8010496:	40a5      	lsls	r5, r4
 8010498:	ea26 0505 	bic.w	r5, r6, r5
 801049c:	fa00 f404 	lsl.w	r4, r0, r4
 80104a0:	ea45 0004 	orr.w	r0, r5, r4
 80104a4:	7010      	strb	r0, [r2, #0]
 80104a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104a8:	3202      	adds	r2, #2
 80104aa:	e00f      	b.n	80104cc <_NextPixel_SetPixel+0x8c>
 80104ac:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80104ae:	7816      	ldrb	r6, [r2, #0]
 80104b0:	4917      	ldr	r1, [pc, #92]	; (8010510 <_NextPixel_SetPixel+0xd0>)
 80104b2:	f1c4 0404 	rsb	r4, r4, #4
 80104b6:	250f      	movs	r5, #15
 80104b8:	40a5      	lsls	r5, r4
 80104ba:	ea26 0505 	bic.w	r5, r6, r5
 80104be:	fa00 f404 	lsl.w	r4, r0, r4
 80104c2:	ea45 0004 	orr.w	r0, r5, r4
 80104c6:	7010      	strb	r0, [r2, #0]
 80104c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104ca:	3204      	adds	r2, #4
 80104cc:	2a08      	cmp	r2, #8
 80104ce:	d001      	beq.n	80104d4 <_NextPixel_SetPixel+0x94>
 80104d0:	62ca      	str	r2, [r1, #44]	; 0x2c
 80104d2:	e011      	b.n	80104f8 <_NextPixel_SetPixel+0xb8>
 80104d4:	2200      	movs	r2, #0
 80104d6:	62ca      	str	r2, [r1, #44]	; 0x2c
 80104d8:	698a      	ldr	r2, [r1, #24]
 80104da:	3201      	adds	r2, #1
 80104dc:	618a      	str	r2, [r1, #24]
 80104de:	e00b      	b.n	80104f8 <_NextPixel_SetPixel+0xb8>
 80104e0:	7010      	strb	r0, [r2, #0]
 80104e2:	699a      	ldr	r2, [r3, #24]
 80104e4:	3201      	adds	r2, #1
 80104e6:	e006      	b.n	80104f6 <_NextPixel_SetPixel+0xb6>
 80104e8:	699a      	ldr	r2, [r3, #24]
 80104ea:	f822 0b02 	strh.w	r0, [r2], #2
 80104ee:	e002      	b.n	80104f6 <_NextPixel_SetPixel+0xb6>
 80104f0:	699a      	ldr	r2, [r3, #24]
 80104f2:	f842 0b04 	str.w	r0, [r2], #4
 80104f6:	619a      	str	r2, [r3, #24]
 80104f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80104fa:	3201      	adds	r2, #1
 80104fc:	629a      	str	r2, [r3, #40]	; 0x28
 80104fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010500:	429a      	cmp	r2, r3
 8010502:	d103      	bne.n	801050c <_NextPixel_SetPixel+0xcc>
 8010504:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010508:	f7ff bf66 	b.w	80103d8 <_NextPixel_FlushBuffer>
 801050c:	bd70      	pop	{r4, r5, r6, pc}
 801050e:	bf00      	nop
 8010510:	20019618 	.word	0x20019618

08010514 <_NextPixel_End>:
 8010514:	4b07      	ldr	r3, [pc, #28]	; (8010534 <_NextPixel_End+0x20>)
 8010516:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010518:	b510      	push	{r4, lr}
 801051a:	461c      	mov	r4, r3
 801051c:	b10a      	cbz	r2, 8010522 <_NextPixel_End+0xe>
 801051e:	f7ff ff5b 	bl	80103d8 <_NextPixel_FlushBuffer>
 8010522:	4805      	ldr	r0, [pc, #20]	; (8010538 <_NextPixel_End+0x24>)
 8010524:	f000 fe64 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8010528:	6920      	ldr	r0, [r4, #16]
 801052a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801052e:	f000 be8b 	b.w	8011248 <GUI_ALLOC_Free>
 8010532:	bf00      	nop
 8010534:	20019618 	.word	0x20019618
 8010538:	2001962c 	.word	0x2001962c

0801053c <_NextPixel_Start>:
 801053c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010540:	469a      	mov	sl, r3
 8010542:	4b1f      	ldr	r3, [pc, #124]	; (80105c0 <_NextPixel_Start+0x84>)
 8010544:	4c1f      	ldr	r4, [pc, #124]	; (80105c4 <_NextPixel_Start+0x88>)
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	1a12      	subs	r2, r2, r0
 801054a:	3201      	adds	r2, #1
 801054c:	4606      	mov	r6, r0
 801054e:	7c58      	ldrb	r0, [r3, #17]
 8010550:	60e2      	str	r2, [r4, #12]
 8010552:	f7fd f90d 	bl	800d770 <GUI_GetBitsPerPixelEx>
 8010556:	2817      	cmp	r0, #23
 8010558:	bfc8      	it	gt
 801055a:	2020      	movgt	r0, #32
 801055c:	2808      	cmp	r0, #8
 801055e:	6220      	str	r0, [r4, #32]
 8010560:	dd04      	ble.n	801056c <_NextPixel_Start+0x30>
 8010562:	2810      	cmp	r0, #16
 8010564:	bfcc      	ite	gt
 8010566:	2504      	movgt	r5, #4
 8010568:	2502      	movle	r5, #2
 801056a:	e000      	b.n	801056e <_NextPixel_Start+0x32>
 801056c:	2501      	movs	r5, #1
 801056e:	68e3      	ldr	r3, [r4, #12]
 8010570:	f8df 9050 	ldr.w	r9, [pc, #80]	; 80105c4 <_NextPixel_Start+0x88>
 8010574:	fb03 f805 	mul.w	r8, r3, r5
 8010578:	f000 ffd6 	bl	8011528 <GUI_ALLOC_GetMaxSize>
 801057c:	4540      	cmp	r0, r8
 801057e:	bf3a      	itte	cc
 8010580:	fbb0 f0f5 	udivcc	r0, r0, r5
 8010584:	4368      	mulcc	r0, r5
 8010586:	4640      	movcs	r0, r8
 8010588:	fb90 f0f5 	sdiv	r0, r0, r5
 801058c:	6260      	str	r0, [r4, #36]	; 0x24
 801058e:	2700      	movs	r7, #0
 8010590:	4640      	mov	r0, r8
 8010592:	62a7      	str	r7, [r4, #40]	; 0x28
 8010594:	6066      	str	r6, [r4, #4]
 8010596:	6026      	str	r6, [r4, #0]
 8010598:	f8c4 a008 	str.w	sl, [r4, #8]
 801059c:	61e5      	str	r5, [r4, #28]
 801059e:	62e7      	str	r7, [r4, #44]	; 0x2c
 80105a0:	f001 f86c 	bl	801167c <GUI_ALLOC_AllocNoInit>
 80105a4:	6120      	str	r0, [r4, #16]
 80105a6:	b140      	cbz	r0, 80105ba <_NextPixel_Start+0x7e>
 80105a8:	f000 fe14 	bl	80111d4 <GUI_ALLOC_LockH>
 80105ac:	f8c9 0014 	str.w	r0, [r9, #20]
 80105b0:	f8c9 0018 	str.w	r0, [r9, #24]
 80105b4:	4638      	mov	r0, r7
 80105b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105ba:	2001      	movs	r0, #1
 80105bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105c0:	20000238 	.word	0x20000238
 80105c4:	20019618 	.word	0x20019618

080105c8 <_GetEarlyOut.isra.0>:
 80105c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80105cc:	6807      	ldr	r7, [r0, #0]
 80105ce:	680e      	ldr	r6, [r1, #0]
 80105d0:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80105d4:	9c08      	ldr	r4, [sp, #32]
 80105d6:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80105da:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80105dc:	eb07 0906 	add.w	r9, r7, r6
 80105e0:	681f      	ldr	r7, [r3, #0]
 80105e2:	f8c0 9000 	str.w	r9, [r0]
 80105e6:	2f00      	cmp	r7, #0
 80105e8:	dd04      	ble.n	80105f4 <_GetEarlyOut.isra.0+0x2c>
 80105ea:	3f01      	subs	r7, #1
 80105ec:	6027      	str	r7, [r4, #0]
 80105ee:	f04f 37ff 	mov.w	r7, #4294967295
 80105f2:	e005      	b.n	8010600 <_GetEarlyOut.isra.0+0x38>
 80105f4:	d004      	beq.n	8010600 <_GetEarlyOut.isra.0+0x38>
 80105f6:	427f      	negs	r7, r7
 80105f8:	2600      	movs	r6, #0
 80105fa:	601f      	str	r7, [r3, #0]
 80105fc:	6026      	str	r6, [r4, #0]
 80105fe:	2701      	movs	r7, #1
 8010600:	f8c8 7000 	str.w	r7, [r8]
 8010604:	2f00      	cmp	r7, #0
 8010606:	d032      	beq.n	801066e <_GetEarlyOut.isra.0+0xa6>
 8010608:	690f      	ldr	r7, [r1, #16]
 801060a:	694e      	ldr	r6, [r1, #20]
 801060c:	443e      	add	r6, r7
 801060e:	681f      	ldr	r7, [r3, #0]
 8010610:	1bbe      	subs	r6, r7, r6
 8010612:	2e00      	cmp	r6, #0
 8010614:	601e      	str	r6, [r3, #0]
 8010616:	dd2a      	ble.n	801066e <_GetEarlyOut.isra.0+0xa6>
 8010618:	f8d8 3000 	ldr.w	r3, [r8]
 801061c:	2b00      	cmp	r3, #0
 801061e:	da08      	bge.n	8010632 <_GetEarlyOut.isra.0+0x6a>
 8010620:	694b      	ldr	r3, [r1, #20]
 8010622:	2b00      	cmp	r3, #0
 8010624:	dd0e      	ble.n	8010644 <_GetEarlyOut.isra.0+0x7c>
 8010626:	fb03 9605 	mla	r6, r3, r5, r9
 801062a:	6006      	str	r6, [r0, #0]
 801062c:	6820      	ldr	r0, [r4, #0]
 801062e:	1ac3      	subs	r3, r0, r3
 8010630:	e007      	b.n	8010642 <_GetEarlyOut.isra.0+0x7a>
 8010632:	690b      	ldr	r3, [r1, #16]
 8010634:	2b00      	cmp	r3, #0
 8010636:	dd05      	ble.n	8010644 <_GetEarlyOut.isra.0+0x7c>
 8010638:	fb03 9605 	mla	r6, r3, r5, r9
 801063c:	6006      	str	r6, [r0, #0]
 801063e:	6820      	ldr	r0, [r4, #0]
 8010640:	4403      	add	r3, r0
 8010642:	6023      	str	r3, [r4, #0]
 8010644:	6888      	ldr	r0, [r1, #8]
 8010646:	68cb      	ldr	r3, [r1, #12]
 8010648:	4403      	add	r3, r0
 801064a:	6810      	ldr	r0, [r2, #0]
 801064c:	1ac3      	subs	r3, r0, r3
 801064e:	2b00      	cmp	r3, #0
 8010650:	6013      	str	r3, [r2, #0]
 8010652:	dd0c      	ble.n	801066e <_GetEarlyOut.isra.0+0xa6>
 8010654:	f8dc 2000 	ldr.w	r2, [ip]
 8010658:	68cb      	ldr	r3, [r1, #12]
 801065a:	4413      	add	r3, r2
 801065c:	f8cc 3000 	str.w	r3, [ip]
 8010660:	684b      	ldr	r3, [r1, #4]
 8010662:	1aed      	subs	r5, r5, r3
 8010664:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010666:	2000      	movs	r0, #0
 8010668:	601d      	str	r5, [r3, #0]
 801066a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801066e:	2001      	movs	r0, #1
 8010670:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08010674 <GUI_BMP__ReadData>:
 8010674:	b570      	push	{r4, r5, r6, lr}
 8010676:	4604      	mov	r4, r0
 8010678:	460d      	mov	r5, r1
 801067a:	b10b      	cbz	r3, 8010680 <GUI_BMP__ReadData+0xc>
 801067c:	2300      	movs	r3, #0
 801067e:	6043      	str	r3, [r0, #4]
 8010680:	4611      	mov	r1, r2
 8010682:	6826      	ldr	r6, [r4, #0]
 8010684:	68a0      	ldr	r0, [r4, #8]
 8010686:	6863      	ldr	r3, [r4, #4]
 8010688:	462a      	mov	r2, r5
 801068a:	47b0      	blx	r6
 801068c:	42a8      	cmp	r0, r5
 801068e:	d104      	bne.n	801069a <GUI_BMP__ReadData+0x26>
 8010690:	6863      	ldr	r3, [r4, #4]
 8010692:	441d      	add	r5, r3
 8010694:	6065      	str	r5, [r4, #4]
 8010696:	2000      	movs	r0, #0
 8010698:	bd70      	pop	{r4, r5, r6, pc}
 801069a:	2001      	movs	r0, #1
 801069c:	bd70      	pop	{r4, r5, r6, pc}
	...

080106a0 <GUI_BMP__ReadPalette>:
 80106a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80106a2:	4606      	mov	r6, r0
 80106a4:	460d      	mov	r5, r1
 80106a6:	2400      	movs	r4, #0
 80106a8:	42ac      	cmp	r4, r5
 80106aa:	da17      	bge.n	80106dc <GUI_BMP__ReadPalette+0x3c>
 80106ac:	2104      	movs	r1, #4
 80106ae:	4630      	mov	r0, r6
 80106b0:	eb0d 0201 	add.w	r2, sp, r1
 80106b4:	2300      	movs	r3, #0
 80106b6:	f7ff ffdd 	bl	8010674 <GUI_BMP__ReadData>
 80106ba:	b988      	cbnz	r0, 80106e0 <GUI_BMP__ReadPalette+0x40>
 80106bc:	9b01      	ldr	r3, [sp, #4]
 80106be:	4a0a      	ldr	r2, [pc, #40]	; (80106e8 <GUI_BMP__ReadPalette+0x48>)
 80106c0:	7858      	ldrb	r0, [r3, #1]
 80106c2:	6817      	ldr	r7, [r2, #0]
 80106c4:	781a      	ldrb	r2, [r3, #0]
 80106c6:	789b      	ldrb	r3, [r3, #2]
 80106c8:	0200      	lsls	r0, r0, #8
 80106ca:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80106ce:	4318      	orrs	r0, r3
 80106d0:	f7fd fbfe 	bl	800ded0 <LCD_Color2Index>
 80106d4:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 80106d8:	3401      	adds	r4, #1
 80106da:	e7e5      	b.n	80106a8 <GUI_BMP__ReadPalette+0x8>
 80106dc:	2000      	movs	r0, #0
 80106de:	e000      	b.n	80106e2 <GUI_BMP__ReadPalette+0x42>
 80106e0:	2001      	movs	r0, #1
 80106e2:	b003      	add	sp, #12
 80106e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80106e6:	bf00      	nop
 80106e8:	2001b3c0 	.word	0x2001b3c0

080106ec <_DrawBitmap_16bpp>:
 80106ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80106f0:	461f      	mov	r7, r3
 80106f2:	b093      	sub	sp, #76	; 0x4c
 80106f4:	ea4f 1807 	mov.w	r8, r7, lsl #4
 80106f8:	ac0c      	add	r4, sp, #48	; 0x30
 80106fa:	f108 081f 	add.w	r8, r8, #31
 80106fe:	4605      	mov	r5, r0
 8010700:	4689      	mov	r9, r1
 8010702:	9107      	str	r1, [sp, #28]
 8010704:	4616      	mov	r6, r2
 8010706:	2100      	movs	r1, #0
 8010708:	2218      	movs	r2, #24
 801070a:	4620      	mov	r0, r4
 801070c:	ea4f 1868 	mov.w	r8, r8, asr #5
 8010710:	9306      	str	r3, [sp, #24]
 8010712:	f004 ffc2 	bl	801569a <memset>
 8010716:	463a      	mov	r2, r7
 8010718:	2310      	movs	r3, #16
 801071a:	ea4f 0788 	mov.w	r7, r8, lsl #2
 801071e:	e88d 0088 	stmia.w	sp, {r3, r7}
 8010722:	4648      	mov	r0, r9
 8010724:	4631      	mov	r1, r6
 8010726:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8010728:	9402      	str	r4, [sp, #8]
 801072a:	f7ff fd97 	bl	801025c <_GetClipParam>
 801072e:	ab07      	add	r3, sp, #28
 8010730:	9300      	str	r3, [sp, #0]
 8010732:	ab09      	add	r3, sp, #36	; 0x24
 8010734:	9301      	str	r3, [sp, #4]
 8010736:	ab0a      	add	r3, sp, #40	; 0x28
 8010738:	9302      	str	r3, [sp, #8]
 801073a:	ab0b      	add	r3, sp, #44	; 0x2c
 801073c:	9303      	str	r3, [sp, #12]
 801073e:	9704      	str	r7, [sp, #16]
 8010740:	1d28      	adds	r0, r5, #4
 8010742:	4621      	mov	r1, r4
 8010744:	aa06      	add	r2, sp, #24
 8010746:	ab1a      	add	r3, sp, #104	; 0x68
 8010748:	f7ff ff3e 	bl	80105c8 <_GetEarlyOut.isra.0>
 801074c:	2800      	cmp	r0, #0
 801074e:	d142      	bne.n	80107d6 <_DrawBitmap_16bpp+0xea>
 8010750:	4b23      	ldr	r3, [pc, #140]	; (80107e0 <_DrawBitmap_16bpp+0xf4>)
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	7c58      	ldrb	r0, [r3, #17]
 8010756:	f7fd f831 	bl	800d7bc <LCD_GetpfColor2IndexEx>
 801075a:	4607      	mov	r7, r0
 801075c:	b908      	cbnz	r0, 8010762 <_DrawBitmap_16bpp+0x76>
 801075e:	2401      	movs	r4, #1
 8010760:	e03a      	b.n	80107d8 <_DrawBitmap_16bpp+0xec>
 8010762:	9910      	ldr	r1, [sp, #64]	; 0x40
 8010764:	9807      	ldr	r0, [sp, #28]
 8010766:	9a06      	ldr	r2, [sp, #24]
 8010768:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801076a:	4431      	add	r1, r6
 801076c:	4e1d      	ldr	r6, [pc, #116]	; (80107e4 <_DrawBitmap_16bpp+0xf8>)
 801076e:	4402      	add	r2, r0
 8010770:	440b      	add	r3, r1
 8010772:	6834      	ldr	r4, [r6, #0]
 8010774:	3a01      	subs	r2, #1
 8010776:	3b01      	subs	r3, #1
 8010778:	47a0      	blx	r4
 801077a:	2800      	cmp	r0, #0
 801077c:	d1ef      	bne.n	801075e <_DrawBitmap_16bpp+0x72>
 801077e:	4628      	mov	r0, r5
 8010780:	990d      	ldr	r1, [sp, #52]	; 0x34
 8010782:	aa08      	add	r2, sp, #32
 8010784:	2300      	movs	r3, #0
 8010786:	f7ff ff75 	bl	8010674 <GUI_BMP__ReadData>
 801078a:	4604      	mov	r4, r0
 801078c:	2800      	cmp	r0, #0
 801078e:	d1e6      	bne.n	801075e <_DrawBitmap_16bpp+0x72>
 8010790:	4680      	mov	r8, r0
 8010792:	9b06      	ldr	r3, [sp, #24]
 8010794:	4598      	cmp	r8, r3
 8010796:	da0a      	bge.n	80107ae <_DrawBitmap_16bpp+0xc2>
 8010798:	a808      	add	r0, sp, #32
 801079a:	f003 fb91 	bl	8013ec0 <GUI__Read16>
 801079e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80107a0:	4798      	blx	r3
 80107a2:	47b8      	blx	r7
 80107a4:	6873      	ldr	r3, [r6, #4]
 80107a6:	4798      	blx	r3
 80107a8:	f108 0801 	add.w	r8, r8, #1
 80107ac:	e7f1      	b.n	8010792 <_DrawBitmap_16bpp+0xa6>
 80107ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107b0:	b10b      	cbz	r3, 80107b6 <_DrawBitmap_16bpp+0xca>
 80107b2:	68b3      	ldr	r3, [r6, #8]
 80107b4:	4798      	blx	r3
 80107b6:	686a      	ldr	r2, [r5, #4]
 80107b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80107ba:	4413      	add	r3, r2
 80107bc:	606b      	str	r3, [r5, #4]
 80107be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80107c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107c2:	4413      	add	r3, r2
 80107c4:	9309      	str	r3, [sp, #36]	; 0x24
 80107c6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80107c8:	3b01      	subs	r3, #1
 80107ca:	931a      	str	r3, [sp, #104]	; 0x68
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d1d6      	bne.n	801077e <_DrawBitmap_16bpp+0x92>
 80107d0:	68f3      	ldr	r3, [r6, #12]
 80107d2:	4798      	blx	r3
 80107d4:	e000      	b.n	80107d8 <_DrawBitmap_16bpp+0xec>
 80107d6:	2400      	movs	r4, #0
 80107d8:	4620      	mov	r0, r4
 80107da:	b013      	add	sp, #76	; 0x4c
 80107dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80107e0:	20000238 	.word	0x20000238
 80107e4:	20000248 	.word	0x20000248

080107e8 <_DrawBitmap_RGB>:
 80107e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107ec:	b09c      	sub	sp, #112	; 0x70
 80107ee:	ae0a      	add	r6, sp, #40	; 0x28
 80107f0:	9f26      	ldr	r7, [sp, #152]	; 0x98
 80107f2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80107f6:	9107      	str	r1, [sp, #28]
 80107f8:	4604      	mov	r4, r0
 80107fa:	4689      	mov	r9, r1
 80107fc:	4615      	mov	r5, r2
 80107fe:	2100      	movs	r1, #0
 8010800:	2218      	movs	r2, #24
 8010802:	4630      	mov	r0, r6
 8010804:	469a      	mov	sl, r3
 8010806:	9306      	str	r3, [sp, #24]
 8010808:	f004 ff47 	bl	801569a <memset>
 801080c:	00fb      	lsls	r3, r7, #3
 801080e:	e88d 0108 	stmia.w	sp, {r3, r8}
 8010812:	4648      	mov	r0, r9
 8010814:	4629      	mov	r1, r5
 8010816:	4652      	mov	r2, sl
 8010818:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801081a:	9602      	str	r6, [sp, #8]
 801081c:	f7ff fd1e 	bl	801025c <_GetClipParam>
 8010820:	ab07      	add	r3, sp, #28
 8010822:	9300      	str	r3, [sp, #0]
 8010824:	ab12      	add	r3, sp, #72	; 0x48
 8010826:	9301      	str	r3, [sp, #4]
 8010828:	ab08      	add	r3, sp, #32
 801082a:	9302      	str	r3, [sp, #8]
 801082c:	ab09      	add	r3, sp, #36	; 0x24
 801082e:	9303      	str	r3, [sp, #12]
 8010830:	f8cd 8010 	str.w	r8, [sp, #16]
 8010834:	1d20      	adds	r0, r4, #4
 8010836:	4631      	mov	r1, r6
 8010838:	aa06      	add	r2, sp, #24
 801083a:	ab24      	add	r3, sp, #144	; 0x90
 801083c:	f7ff fec4 	bl	80105c8 <_GetEarlyOut.isra.0>
 8010840:	b108      	cbz	r0, 8010846 <_DrawBitmap_RGB+0x5e>
 8010842:	2500      	movs	r5, #0
 8010844:	e04f      	b.n	80108e6 <_DrawBitmap_RGB+0xfe>
 8010846:	4b2a      	ldr	r3, [pc, #168]	; (80108f0 <_DrawBitmap_RGB+0x108>)
 8010848:	4e2a      	ldr	r6, [pc, #168]	; (80108f4 <_DrawBitmap_RGB+0x10c>)
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	7c58      	ldrb	r0, [r3, #17]
 801084e:	f7fc ffbd 	bl	800d7cc <GUI_GetpfColor2IndexEx>
 8010852:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8010854:	9316      	str	r3, [sp, #88]	; 0x58
 8010856:	4b28      	ldr	r3, [pc, #160]	; (80108f8 <_DrawBitmap_RGB+0x110>)
 8010858:	f8df e0a0 	ldr.w	lr, [pc, #160]	; 80108fc <_DrawBitmap_RGB+0x114>
 801085c:	681a      	ldr	r2, [r3, #0]
 801085e:	9015      	str	r0, [sp, #84]	; 0x54
 8010860:	42b2      	cmp	r2, r6
 8010862:	4698      	mov	r8, r3
 8010864:	f8cd e05c 	str.w	lr, [sp, #92]	; 0x5c
 8010868:	9807      	ldr	r0, [sp, #28]
 801086a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801086c:	9a06      	ldr	r2, [sp, #24]
 801086e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8010870:	d10a      	bne.n	8010888 <_DrawBitmap_RGB+0xa0>
 8010872:	4429      	add	r1, r5
 8010874:	4402      	add	r2, r0
 8010876:	440b      	add	r3, r1
 8010878:	f8de 5000 	ldr.w	r5, [lr]
 801087c:	3a01      	subs	r2, #1
 801087e:	3b01      	subs	r3, #1
 8010880:	47a8      	blx	r5
 8010882:	b150      	cbz	r0, 801089a <_DrawBitmap_RGB+0xb2>
 8010884:	2501      	movs	r5, #1
 8010886:	e02e      	b.n	80108e6 <_DrawBitmap_RGB+0xfe>
 8010888:	440d      	add	r5, r1
 801088a:	9519      	str	r5, [sp, #100]	; 0x64
 801088c:	4402      	add	r2, r0
 801088e:	441d      	add	r5, r3
 8010890:	3a01      	subs	r2, #1
 8010892:	3d01      	subs	r5, #1
 8010894:	9018      	str	r0, [sp, #96]	; 0x60
 8010896:	921a      	str	r2, [sp, #104]	; 0x68
 8010898:	951b      	str	r5, [sp, #108]	; 0x6c
 801089a:	9b06      	ldr	r3, [sp, #24]
 801089c:	9313      	str	r3, [sp, #76]	; 0x4c
 801089e:	2300      	movs	r3, #0
 80108a0:	9714      	str	r7, [sp, #80]	; 0x50
 80108a2:	9311      	str	r3, [sp, #68]	; 0x44
 80108a4:	4620      	mov	r0, r4
 80108a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80108a8:	aa10      	add	r2, sp, #64	; 0x40
 80108aa:	2300      	movs	r3, #0
 80108ac:	f7ff fee2 	bl	8010674 <GUI_BMP__ReadData>
 80108b0:	4605      	mov	r5, r0
 80108b2:	2800      	cmp	r0, #0
 80108b4:	d1e6      	bne.n	8010884 <_DrawBitmap_RGB+0x9c>
 80108b6:	f8d8 3000 	ldr.w	r3, [r8]
 80108ba:	a810      	add	r0, sp, #64	; 0x40
 80108bc:	4798      	blx	r3
 80108be:	6862      	ldr	r2, [r4, #4]
 80108c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108c2:	4413      	add	r3, r2
 80108c4:	6063      	str	r3, [r4, #4]
 80108c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80108c8:	9b08      	ldr	r3, [sp, #32]
 80108ca:	4413      	add	r3, r2
 80108cc:	9312      	str	r3, [sp, #72]	; 0x48
 80108ce:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80108d0:	3b01      	subs	r3, #1
 80108d2:	9324      	str	r3, [sp, #144]	; 0x90
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d1e5      	bne.n	80108a4 <_DrawBitmap_RGB+0xbc>
 80108d8:	4b07      	ldr	r3, [pc, #28]	; (80108f8 <_DrawBitmap_RGB+0x110>)
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	42b3      	cmp	r3, r6
 80108de:	d1b0      	bne.n	8010842 <_DrawBitmap_RGB+0x5a>
 80108e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80108e2:	68db      	ldr	r3, [r3, #12]
 80108e4:	4798      	blx	r3
 80108e6:	4628      	mov	r0, r5
 80108e8:	b01c      	add	sp, #112	; 0x70
 80108ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108ee:	bf00      	nop
 80108f0:	20000238 	.word	0x20000238
 80108f4:	0801035d 	.word	0x0801035d
 80108f8:	20000244 	.word	0x20000244
 80108fc:	20000248 	.word	0x20000248

08010900 <_ManageBitfields.part.2>:
 8010900:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010902:	2300      	movs	r3, #0
 8010904:	2110      	movs	r1, #16
 8010906:	aa01      	add	r2, sp, #4
 8010908:	f7ff feb4 	bl	8010674 <GUI_BMP__ReadData>
 801090c:	4605      	mov	r5, r0
 801090e:	bb10      	cbnz	r0, 8010956 <_ManageBitfields.part.2+0x56>
 8010910:	a801      	add	r0, sp, #4
 8010912:	f003 fadd 	bl	8013ed0 <GUI__Read32>
 8010916:	4c12      	ldr	r4, [pc, #72]	; (8010960 <_ManageBitfields.part.2+0x60>)
 8010918:	6020      	str	r0, [r4, #0]
 801091a:	a801      	add	r0, sp, #4
 801091c:	f003 fad8 	bl	8013ed0 <GUI__Read32>
 8010920:	6060      	str	r0, [r4, #4]
 8010922:	a801      	add	r0, sp, #4
 8010924:	f003 fad4 	bl	8013ed0 <GUI__Read32>
 8010928:	4621      	mov	r1, r4
 801092a:	60a0      	str	r0, [r4, #8]
 801092c:	f104 0218 	add.w	r2, r4, #24
 8010930:	f851 0b0c 	ldr.w	r0, [r1], #12
 8010934:	f7ff fcfc 	bl	8010330 <_GetBitfieldsPara>
 8010938:	6860      	ldr	r0, [r4, #4]
 801093a:	f104 0110 	add.w	r1, r4, #16
 801093e:	f104 021c 	add.w	r2, r4, #28
 8010942:	f7ff fcf5 	bl	8010330 <_GetBitfieldsPara>
 8010946:	68a0      	ldr	r0, [r4, #8]
 8010948:	f104 0114 	add.w	r1, r4, #20
 801094c:	f104 0220 	add.w	r2, r4, #32
 8010950:	f7ff fcee 	bl	8010330 <_GetBitfieldsPara>
 8010954:	e000      	b.n	8010958 <_ManageBitfields.part.2+0x58>
 8010956:	2501      	movs	r5, #1
 8010958:	4628      	mov	r0, r5
 801095a:	b003      	add	sp, #12
 801095c:	bd30      	pop	{r4, r5, pc}
 801095e:	bf00      	nop
 8010960:	20019648 	.word	0x20019648

08010964 <_Index2ColorBitfields>:
 8010964:	4b15      	ldr	r3, [pc, #84]	; (80109bc <_Index2ColorBitfields+0x58>)
 8010966:	685a      	ldr	r2, [r3, #4]
 8010968:	6919      	ldr	r1, [r3, #16]
 801096a:	4002      	ands	r2, r0
 801096c:	40ca      	lsrs	r2, r1
 801096e:	69d9      	ldr	r1, [r3, #28]
 8010970:	b530      	push	{r4, r5, lr}
 8010972:	ebc2 2502 	rsb	r5, r2, r2, lsl #8
 8010976:	2201      	movs	r2, #1
 8010978:	fa02 f101 	lsl.w	r1, r2, r1
 801097c:	3901      	subs	r1, #1
 801097e:	fbb5 f5f1 	udiv	r5, r5, r1
 8010982:	6899      	ldr	r1, [r3, #8]
 8010984:	695c      	ldr	r4, [r3, #20]
 8010986:	4001      	ands	r1, r0
 8010988:	40e1      	lsrs	r1, r4
 801098a:	6a1c      	ldr	r4, [r3, #32]
 801098c:	fa02 f404 	lsl.w	r4, r2, r4
 8010990:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 8010994:	3c01      	subs	r4, #1
 8010996:	fbb1 f4f4 	udiv	r4, r1, r4
 801099a:	0424      	lsls	r4, r4, #16
 801099c:	6819      	ldr	r1, [r3, #0]
 801099e:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
 80109a2:	68dc      	ldr	r4, [r3, #12]
 80109a4:	699b      	ldr	r3, [r3, #24]
 80109a6:	4001      	ands	r1, r0
 80109a8:	40e1      	lsrs	r1, r4
 80109aa:	409a      	lsls	r2, r3
 80109ac:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 80109b0:	3a01      	subs	r2, #1
 80109b2:	fbb1 f0f2 	udiv	r0, r1, r2
 80109b6:	4328      	orrs	r0, r5
 80109b8:	bd30      	pop	{r4, r5, pc}
 80109ba:	bf00      	nop
 80109bc:	20019648 	.word	0x20019648

080109c0 <GUI_BMP__Init>:
 80109c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80109c4:	4688      	mov	r8, r1
 80109c6:	4617      	mov	r7, r2
 80109c8:	461e      	mov	r6, r3
 80109ca:	2136      	movs	r1, #54	; 0x36
 80109cc:	aa01      	add	r2, sp, #4
 80109ce:	2301      	movs	r3, #1
 80109d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80109d2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80109d4:	f7ff fe4e 	bl	8010674 <GUI_BMP__ReadData>
 80109d8:	2800      	cmp	r0, #0
 80109da:	d14a      	bne.n	8010a72 <GUI_BMP__Init+0xb2>
 80109dc:	a801      	add	r0, sp, #4
 80109de:	f003 fa6f 	bl	8013ec0 <GUI__Read16>
 80109e2:	9b01      	ldr	r3, [sp, #4]
 80109e4:	4681      	mov	r9, r0
 80109e6:	3310      	adds	r3, #16
 80109e8:	a801      	add	r0, sp, #4
 80109ea:	9301      	str	r3, [sp, #4]
 80109ec:	f003 fa70 	bl	8013ed0 <GUI__Read32>
 80109f0:	f8c8 0000 	str.w	r0, [r8]
 80109f4:	a801      	add	r0, sp, #4
 80109f6:	f003 fa6b 	bl	8013ed0 <GUI__Read32>
 80109fa:	9b01      	ldr	r3, [sp, #4]
 80109fc:	6038      	str	r0, [r7, #0]
 80109fe:	3302      	adds	r3, #2
 8010a00:	a801      	add	r0, sp, #4
 8010a02:	9301      	str	r3, [sp, #4]
 8010a04:	f003 fa5c 	bl	8013ec0 <GUI__Read16>
 8010a08:	8030      	strh	r0, [r6, #0]
 8010a0a:	a801      	add	r0, sp, #4
 8010a0c:	f003 fa60 	bl	8013ed0 <GUI__Read32>
 8010a10:	9b01      	ldr	r3, [sp, #4]
 8010a12:	6028      	str	r0, [r5, #0]
 8010a14:	330c      	adds	r3, #12
 8010a16:	a801      	add	r0, sp, #4
 8010a18:	9301      	str	r3, [sp, #4]
 8010a1a:	f003 fa59 	bl	8013ed0 <GUI__Read32>
 8010a1e:	8833      	ldrh	r3, [r6, #0]
 8010a20:	2b08      	cmp	r3, #8
 8010a22:	d00f      	beq.n	8010a44 <GUI_BMP__Init+0x84>
 8010a24:	d805      	bhi.n	8010a32 <GUI_BMP__Init+0x72>
 8010a26:	2b01      	cmp	r3, #1
 8010a28:	d00a      	beq.n	8010a40 <GUI_BMP__Init+0x80>
 8010a2a:	2b04      	cmp	r3, #4
 8010a2c:	d121      	bne.n	8010a72 <GUI_BMP__Init+0xb2>
 8010a2e:	2310      	movs	r3, #16
 8010a30:	e00c      	b.n	8010a4c <GUI_BMP__Init+0x8c>
 8010a32:	2b18      	cmp	r3, #24
 8010a34:	d009      	beq.n	8010a4a <GUI_BMP__Init+0x8a>
 8010a36:	2b20      	cmp	r3, #32
 8010a38:	d007      	beq.n	8010a4a <GUI_BMP__Init+0x8a>
 8010a3a:	2b10      	cmp	r3, #16
 8010a3c:	d119      	bne.n	8010a72 <GUI_BMP__Init+0xb2>
 8010a3e:	e004      	b.n	8010a4a <GUI_BMP__Init+0x8a>
 8010a40:	2302      	movs	r3, #2
 8010a42:	e003      	b.n	8010a4c <GUI_BMP__Init+0x8c>
 8010a44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010a48:	e000      	b.n	8010a4c <GUI_BMP__Init+0x8c>
 8010a4a:	2300      	movs	r3, #0
 8010a4c:	6023      	str	r3, [r4, #0]
 8010a4e:	6823      	ldr	r3, [r4, #0]
 8010a50:	b10b      	cbz	r3, 8010a56 <GUI_BMP__Init+0x96>
 8010a52:	b100      	cbz	r0, 8010a56 <GUI_BMP__Init+0x96>
 8010a54:	6020      	str	r0, [r4, #0]
 8010a56:	6823      	ldr	r3, [r4, #0]
 8010a58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010a5c:	dc09      	bgt.n	8010a72 <GUI_BMP__Init+0xb2>
 8010a5e:	f644 5342 	movw	r3, #19778	; 0x4d42
 8010a62:	4599      	cmp	r9, r3
 8010a64:	d105      	bne.n	8010a72 <GUI_BMP__Init+0xb2>
 8010a66:	6828      	ldr	r0, [r5, #0]
 8010a68:	2803      	cmp	r0, #3
 8010a6a:	bf94      	ite	ls
 8010a6c:	2000      	movls	r0, #0
 8010a6e:	2001      	movhi	r0, #1
 8010a70:	e000      	b.n	8010a74 <GUI_BMP__Init+0xb4>
 8010a72:	2001      	movs	r0, #1
 8010a74:	b003      	add	sp, #12
 8010a76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08010a7a <GUI_BMP_GetXSizeEx>:
 8010a7a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010a7c:	2301      	movs	r3, #1
 8010a7e:	9001      	str	r0, [sp, #4]
 8010a80:	9103      	str	r1, [sp, #12]
 8010a82:	a801      	add	r0, sp, #4
 8010a84:	211a      	movs	r1, #26
 8010a86:	466a      	mov	r2, sp
 8010a88:	f7ff fdf4 	bl	8010674 <GUI_BMP__ReadData>
 8010a8c:	b930      	cbnz	r0, 8010a9c <GUI_BMP_GetXSizeEx+0x22>
 8010a8e:	9b00      	ldr	r3, [sp, #0]
 8010a90:	4668      	mov	r0, sp
 8010a92:	3312      	adds	r3, #18
 8010a94:	9300      	str	r3, [sp, #0]
 8010a96:	f003 fa1b 	bl	8013ed0 <GUI__Read32>
 8010a9a:	e000      	b.n	8010a9e <GUI_BMP_GetXSizeEx+0x24>
 8010a9c:	2001      	movs	r0, #1
 8010a9e:	b005      	add	sp, #20
 8010aa0:	f85d fb04 	ldr.w	pc, [sp], #4

08010aa4 <GUI_BMP_GetXSize>:
 8010aa4:	b507      	push	{r0, r1, r2, lr}
 8010aa6:	a902      	add	r1, sp, #8
 8010aa8:	f841 0d04 	str.w	r0, [r1, #-4]!
 8010aac:	4802      	ldr	r0, [pc, #8]	; (8010ab8 <GUI_BMP_GetXSize+0x14>)
 8010aae:	f7ff ffe4 	bl	8010a7a <GUI_BMP_GetXSizeEx>
 8010ab2:	b003      	add	sp, #12
 8010ab4:	f85d fb04 	ldr.w	pc, [sp], #4
 8010ab8:	08010353 	.word	0x08010353

08010abc <GUI_BMP_GetYSizeEx>:
 8010abc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010abe:	2301      	movs	r3, #1
 8010ac0:	9001      	str	r0, [sp, #4]
 8010ac2:	9103      	str	r1, [sp, #12]
 8010ac4:	a801      	add	r0, sp, #4
 8010ac6:	211a      	movs	r1, #26
 8010ac8:	466a      	mov	r2, sp
 8010aca:	f7ff fdd3 	bl	8010674 <GUI_BMP__ReadData>
 8010ace:	b948      	cbnz	r0, 8010ae4 <GUI_BMP_GetYSizeEx+0x28>
 8010ad0:	9b00      	ldr	r3, [sp, #0]
 8010ad2:	4668      	mov	r0, sp
 8010ad4:	3316      	adds	r3, #22
 8010ad6:	9300      	str	r3, [sp, #0]
 8010ad8:	f003 f9fa 	bl	8013ed0 <GUI__Read32>
 8010adc:	2800      	cmp	r0, #0
 8010ade:	bfb8      	it	lt
 8010ae0:	4240      	neglt	r0, r0
 8010ae2:	e000      	b.n	8010ae6 <GUI_BMP_GetYSizeEx+0x2a>
 8010ae4:	2001      	movs	r0, #1
 8010ae6:	b005      	add	sp, #20
 8010ae8:	f85d fb04 	ldr.w	pc, [sp], #4

08010aec <GUI_BMP_GetYSize>:
 8010aec:	b507      	push	{r0, r1, r2, lr}
 8010aee:	a902      	add	r1, sp, #8
 8010af0:	f841 0d04 	str.w	r0, [r1, #-4]!
 8010af4:	4802      	ldr	r0, [pc, #8]	; (8010b00 <GUI_BMP_GetYSize+0x14>)
 8010af6:	f7ff ffe1 	bl	8010abc <GUI_BMP_GetYSizeEx>
 8010afa:	b003      	add	sp, #12
 8010afc:	f85d fb04 	ldr.w	pc, [sp], #4
 8010b00:	08010353 	.word	0x08010353

08010b04 <GUI_BMP_DrawEx>:
 8010b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b08:	b0a5      	sub	sp, #148	; 0x94
 8010b0a:	461d      	mov	r5, r3
 8010b0c:	ab10      	add	r3, sp, #64	; 0x40
 8010b0e:	9300      	str	r3, [sp, #0]
 8010b10:	ab11      	add	r3, sp, #68	; 0x44
 8010b12:	901b      	str	r0, [sp, #108]	; 0x6c
 8010b14:	911d      	str	r1, [sp, #116]	; 0x74
 8010b16:	9301      	str	r3, [sp, #4]
 8010b18:	4617      	mov	r7, r2
 8010b1a:	a81b      	add	r0, sp, #108	; 0x6c
 8010b1c:	a90e      	add	r1, sp, #56	; 0x38
 8010b1e:	aa0f      	add	r2, sp, #60	; 0x3c
 8010b20:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8010b24:	f7ff ff4c 	bl	80109c0 <GUI_BMP__Init>
 8010b28:	4604      	mov	r4, r0
 8010b2a:	2800      	cmp	r0, #0
 8010b2c:	f040 8234 	bne.w	8010f98 <GUI_BMP_DrawEx+0x494>
 8010b30:	4b9e      	ldr	r3, [pc, #632]	; (8010dac <GUI_BMP_DrawEx+0x2a8>)
 8010b32:	6819      	ldr	r1, [r3, #0]
 8010b34:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8010b36:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 8010b38:	eb05 0803 	add.w	r8, r5, r3
 8010b3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010b3e:	f8ad 8066 	strh.w	r8, [sp, #102]	; 0x66
 8010b42:	4407      	add	r7, r0
 8010b44:	3b01      	subs	r3, #1
 8010b46:	443b      	add	r3, r7
 8010b48:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
 8010b4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010b4e:	f8ad 7064 	strh.w	r7, [sp, #100]	; 0x64
 8010b52:	3b01      	subs	r3, #1
 8010b54:	4443      	add	r3, r8
 8010b56:	a819      	add	r0, sp, #100	; 0x64
 8010b58:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
 8010b5c:	f7fa f8e4 	bl	800ad28 <WM__InitIVRSearch>
 8010b60:	2800      	cmp	r0, #0
 8010b62:	f000 8220 	beq.w	8010fa6 <GUI_BMP_DrawEx+0x4a2>
 8010b66:	9408      	str	r4, [sp, #32]
 8010b68:	46a1      	mov	r9, r4
 8010b6a:	9a08      	ldr	r2, [sp, #32]
 8010b6c:	b15a      	cbz	r2, 8010b86 <GUI_BMP_DrawEx+0x82>
 8010b6e:	ab10      	add	r3, sp, #64	; 0x40
 8010b70:	9300      	str	r3, [sp, #0]
 8010b72:	ab11      	add	r3, sp, #68	; 0x44
 8010b74:	9301      	str	r3, [sp, #4]
 8010b76:	a81b      	add	r0, sp, #108	; 0x6c
 8010b78:	a90e      	add	r1, sp, #56	; 0x38
 8010b7a:	aa0f      	add	r2, sp, #60	; 0x3c
 8010b7c:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8010b80:	f7ff ff1e 	bl	80109c0 <GUI_BMP__Init>
 8010b84:	4681      	mov	r9, r0
 8010b86:	f1b9 0f00 	cmp.w	r9, #0
 8010b8a:	f040 81fb 	bne.w	8010f84 <GUI_BMP_DrawEx+0x480>
 8010b8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010b90:	9307      	str	r3, [sp, #28]
 8010b92:	2b03      	cmp	r3, #3
 8010b94:	f200 81f6 	bhi.w	8010f84 <GUI_BMP_DrawEx+0x480>
 8010b98:	e8df f013 	tbh	[pc, r3, lsl #1]
 8010b9c:	00a40004 	.word	0x00a40004
 8010ba0:	01ca00a4 	.word	0x01ca00a4
 8010ba4:	f8bd 4036 	ldrh.w	r4, [sp, #54]	; 0x36
 8010ba8:	2c08      	cmp	r4, #8
 8010baa:	d019      	beq.n	8010be0 <GUI_BMP_DrawEx+0xdc>
 8010bac:	d805      	bhi.n	8010bba <GUI_BMP_DrawEx+0xb6>
 8010bae:	2c01      	cmp	r4, #1
 8010bb0:	d016      	beq.n	8010be0 <GUI_BMP_DrawEx+0xdc>
 8010bb2:	2c04      	cmp	r4, #4
 8010bb4:	f040 81e4 	bne.w	8010f80 <GUI_BMP_DrawEx+0x47c>
 8010bb8:	e012      	b.n	8010be0 <GUI_BMP_DrawEx+0xdc>
 8010bba:	2c18      	cmp	r4, #24
 8010bbc:	d078      	beq.n	8010cb0 <GUI_BMP_DrawEx+0x1ac>
 8010bbe:	2c20      	cmp	r4, #32
 8010bc0:	f000 8089 	beq.w	8010cd6 <GUI_BMP_DrawEx+0x1d2>
 8010bc4:	2c10      	cmp	r4, #16
 8010bc6:	f040 81db 	bne.w	8010f80 <GUI_BMP_DrawEx+0x47c>
 8010bca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010bcc:	9300      	str	r3, [sp, #0]
 8010bce:	4b78      	ldr	r3, [pc, #480]	; (8010db0 <GUI_BMP_DrawEx+0x2ac>)
 8010bd0:	9301      	str	r3, [sp, #4]
 8010bd2:	a81b      	add	r0, sp, #108	; 0x6c
 8010bd4:	4639      	mov	r1, r7
 8010bd6:	4642      	mov	r2, r8
 8010bd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010bda:	f7ff fd87 	bl	80106ec <_DrawBitmap_16bpp>
 8010bde:	e078      	b.n	8010cd2 <GUI_BMP_DrawEx+0x1ce>
 8010be0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010be2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8010be4:	9313      	str	r3, [sp, #76]	; 0x4c
 8010be6:	ae1e      	add	r6, sp, #120	; 0x78
 8010be8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010bea:	9712      	str	r7, [sp, #72]	; 0x48
 8010bec:	2100      	movs	r1, #0
 8010bee:	4630      	mov	r0, r6
 8010bf0:	2218      	movs	r2, #24
 8010bf2:	9314      	str	r3, [sp, #80]	; 0x50
 8010bf4:	f004 fd51 	bl	801569a <memset>
 8010bf8:	a81b      	add	r0, sp, #108	; 0x6c
 8010bfa:	4629      	mov	r1, r5
 8010bfc:	f7ff fd50 	bl	80106a0 <GUI_BMP__ReadPalette>
 8010c00:	2800      	cmp	r0, #0
 8010c02:	f040 81bd 	bne.w	8010f80 <GUI_BMP_DrawEx+0x47c>
 8010c06:	2c04      	cmp	r4, #4
 8010c08:	d005      	beq.n	8010c16 <GUI_BMP_DrawEx+0x112>
 8010c0a:	2c08      	cmp	r4, #8
 8010c0c:	d009      	beq.n	8010c22 <GUI_BMP_DrawEx+0x11e>
 8010c0e:	2c01      	cmp	r4, #1
 8010c10:	d10c      	bne.n	8010c2c <GUI_BMP_DrawEx+0x128>
 8010c12:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8010c14:	e001      	b.n	8010c1a <GUI_BMP_DrawEx+0x116>
 8010c16:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8010c18:	00ad      	lsls	r5, r5, #2
 8010c1a:	351f      	adds	r5, #31
 8010c1c:	116d      	asrs	r5, r5, #5
 8010c1e:	00ad      	lsls	r5, r5, #2
 8010c20:	e005      	b.n	8010c2e <GUI_BMP_DrawEx+0x12a>
 8010c22:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8010c24:	3503      	adds	r5, #3
 8010c26:	f025 0503 	bic.w	r5, r5, #3
 8010c2a:	e000      	b.n	8010c2e <GUI_BMP_DrawEx+0x12a>
 8010c2c:	4605      	mov	r5, r0
 8010c2e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8010c30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010c32:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010c34:	4641      	mov	r1, r8
 8010c36:	e88d 0070 	stmia.w	sp, {r4, r5, r6}
 8010c3a:	f7ff fb0f 	bl	801025c <_GetClipParam>
 8010c3e:	ab12      	add	r3, sp, #72	; 0x48
 8010c40:	9300      	str	r3, [sp, #0]
 8010c42:	ab16      	add	r3, sp, #88	; 0x58
 8010c44:	9301      	str	r3, [sp, #4]
 8010c46:	ab17      	add	r3, sp, #92	; 0x5c
 8010c48:	9302      	str	r3, [sp, #8]
 8010c4a:	ab18      	add	r3, sp, #96	; 0x60
 8010c4c:	9303      	str	r3, [sp, #12]
 8010c4e:	9504      	str	r5, [sp, #16]
 8010c50:	a81c      	add	r0, sp, #112	; 0x70
 8010c52:	4631      	mov	r1, r6
 8010c54:	aa13      	add	r2, sp, #76	; 0x4c
 8010c56:	ab14      	add	r3, sp, #80	; 0x50
 8010c58:	f7ff fcb6 	bl	80105c8 <_GetEarlyOut.isra.0>
 8010c5c:	2800      	cmp	r0, #0
 8010c5e:	f040 8191 	bne.w	8010f84 <GUI_BMP_DrawEx+0x480>
 8010c62:	a81b      	add	r0, sp, #108	; 0x6c
 8010c64:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8010c66:	aa15      	add	r2, sp, #84	; 0x54
 8010c68:	2300      	movs	r3, #0
 8010c6a:	f7ff fd03 	bl	8010674 <GUI_BMP__ReadData>
 8010c6e:	2800      	cmp	r0, #0
 8010c70:	f040 8186 	bne.w	8010f80 <GUI_BMP_DrawEx+0x47c>
 8010c74:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010c76:	9204      	str	r2, [sp, #16]
 8010c78:	2301      	movs	r3, #1
 8010c7a:	4a4e      	ldr	r2, [pc, #312]	; (8010db4 <GUI_BMP_DrawEx+0x2b0>)
 8010c7c:	9300      	str	r3, [sp, #0]
 8010c7e:	9301      	str	r3, [sp, #4]
 8010c80:	9303      	str	r3, [sp, #12]
 8010c82:	9402      	str	r4, [sp, #8]
 8010c84:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010c86:	6812      	ldr	r2, [r2, #0]
 8010c88:	9205      	str	r2, [sp, #20]
 8010c8a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8010c8c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010c8e:	4441      	add	r1, r8
 8010c90:	f7fc ffb8 	bl	800dc04 <LCD_DrawBitmap>
 8010c94:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8010c96:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010c98:	4413      	add	r3, r2
 8010c9a:	931c      	str	r3, [sp, #112]	; 0x70
 8010c9c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010c9e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010ca0:	4413      	add	r3, r2
 8010ca2:	9316      	str	r3, [sp, #88]	; 0x58
 8010ca4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010ca6:	3b01      	subs	r3, #1
 8010ca8:	9314      	str	r3, [sp, #80]	; 0x50
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d1d9      	bne.n	8010c62 <GUI_BMP_DrawEx+0x15e>
 8010cae:	e169      	b.n	8010f84 <GUI_BMP_DrawEx+0x480>
 8010cb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010cb2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010cb4:	9200      	str	r2, [sp, #0]
 8010cb6:	435c      	muls	r4, r3
 8010cb8:	341f      	adds	r4, #31
 8010cba:	1164      	asrs	r4, r4, #5
 8010cbc:	00a4      	lsls	r4, r4, #2
 8010cbe:	9401      	str	r4, [sp, #4]
 8010cc0:	2203      	movs	r2, #3
 8010cc2:	9202      	str	r2, [sp, #8]
 8010cc4:	2200      	movs	r2, #0
 8010cc6:	9203      	str	r2, [sp, #12]
 8010cc8:	a81b      	add	r0, sp, #108	; 0x6c
 8010cca:	4639      	mov	r1, r7
 8010ccc:	4642      	mov	r2, r8
 8010cce:	f7ff fd8b 	bl	80107e8 <_DrawBitmap_RGB>
 8010cd2:	4681      	mov	r9, r0
 8010cd4:	e156      	b.n	8010f84 <GUI_BMP_DrawEx+0x480>
 8010cd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010cd8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010cda:	9200      	str	r2, [sp, #0]
 8010cdc:	009a      	lsls	r2, r3, #2
 8010cde:	9201      	str	r2, [sp, #4]
 8010ce0:	2204      	movs	r2, #4
 8010ce2:	e7ee      	b.n	8010cc2 <GUI_BMP_DrawEx+0x1be>
 8010ce4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010ce6:	9309      	str	r3, [sp, #36]	; 0x24
 8010ce8:	4b30      	ldr	r3, [pc, #192]	; (8010dac <GUI_BMP_DrawEx+0x2a8>)
 8010cea:	9910      	ldr	r1, [sp, #64]	; 0x40
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010cf2:	a81b      	add	r0, sp, #108	; 0x6c
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	930b      	str	r3, [sp, #44]	; 0x2c
 8010cf8:	f7ff fcd2 	bl	80106a0 <GUI_BMP__ReadPalette>
 8010cfc:	2800      	cmp	r0, #0
 8010cfe:	f040 813f 	bne.w	8010f80 <GUI_BMP_DrawEx+0x47c>
 8010d02:	4445      	add	r5, r8
 8010d04:	3d01      	subs	r5, #1
 8010d06:	463c      	mov	r4, r7
 8010d08:	a81b      	add	r0, sp, #108	; 0x6c
 8010d0a:	2102      	movs	r1, #2
 8010d0c:	aa1e      	add	r2, sp, #120	; 0x78
 8010d0e:	2300      	movs	r3, #0
 8010d10:	f7ff fcb0 	bl	8010674 <GUI_BMP__ReadData>
 8010d14:	2800      	cmp	r0, #0
 8010d16:	f040 8133 	bne.w	8010f80 <GUI_BMP_DrawEx+0x47c>
 8010d1a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8010d1c:	1c5a      	adds	r2, r3, #1
 8010d1e:	921e      	str	r2, [sp, #120]	; 0x78
 8010d20:	f893 b000 	ldrb.w	fp, [r3]
 8010d24:	785e      	ldrb	r6, [r3, #1]
 8010d26:	f1bb 0f00 	cmp.w	fp, #0
 8010d2a:	f040 80c3 	bne.w	8010eb4 <GUI_BMP_DrawEx+0x3b0>
 8010d2e:	2e01      	cmp	r6, #1
 8010d30:	d019      	beq.n	8010d66 <GUI_BMP_DrawEx+0x262>
 8010d32:	d302      	bcc.n	8010d3a <GUI_BMP_DrawEx+0x236>
 8010d34:	2e02      	cmp	r6, #2
 8010d36:	d03f      	beq.n	8010db8 <GUI_BMP_DrawEx+0x2b4>
 8010d38:	e05e      	b.n	8010df8 <GUI_BMP_DrawEx+0x2f4>
 8010d3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d3c:	443a      	add	r2, r7
 8010d3e:	3a01      	subs	r2, #1
 8010d40:	4294      	cmp	r4, r2
 8010d42:	da0a      	bge.n	8010d5a <GUI_BMP_DrawEx+0x256>
 8010d44:	4b1b      	ldr	r3, [pc, #108]	; (8010db4 <GUI_BMP_DrawEx+0x2b0>)
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	6819      	ldr	r1, [r3, #0]
 8010d4a:	4b18      	ldr	r3, [pc, #96]	; (8010dac <GUI_BMP_DrawEx+0x2a8>)
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d50:	4620      	mov	r0, r4
 8010d52:	6019      	str	r1, [r3, #0]
 8010d54:	4629      	mov	r1, r5
 8010d56:	f7fc fe01 	bl	800d95c <LCD_DrawHLine>
 8010d5a:	3d01      	subs	r5, #1
 8010d5c:	4545      	cmp	r5, r8
 8010d5e:	f2c0 810f 	blt.w	8010f80 <GUI_BMP_DrawEx+0x47c>
 8010d62:	46ba      	mov	sl, r7
 8010d64:	e0e2      	b.n	8010f2c <GUI_BMP_DrawEx+0x428>
 8010d66:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8010d6a:	4e10      	ldr	r6, [pc, #64]	; (8010dac <GUI_BMP_DrawEx+0x2a8>)
 8010d6c:	44ba      	add	sl, r7
 8010d6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010d72:	4554      	cmp	r4, sl
 8010d74:	da0a      	bge.n	8010d8c <GUI_BMP_DrawEx+0x288>
 8010d76:	4b0f      	ldr	r3, [pc, #60]	; (8010db4 <GUI_BMP_DrawEx+0x2b0>)
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	681a      	ldr	r2, [r3, #0]
 8010d7c:	6833      	ldr	r3, [r6, #0]
 8010d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d80:	4620      	mov	r0, r4
 8010d82:	601a      	str	r2, [r3, #0]
 8010d84:	4629      	mov	r1, r5
 8010d86:	4652      	mov	r2, sl
 8010d88:	f7fc fde8 	bl	800d95c <LCD_DrawHLine>
 8010d8c:	4545      	cmp	r5, r8
 8010d8e:	f340 8105 	ble.w	8010f9c <GUI_BMP_DrawEx+0x498>
 8010d92:	4b08      	ldr	r3, [pc, #32]	; (8010db4 <GUI_BMP_DrawEx+0x2b0>)
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	681a      	ldr	r2, [r3, #0]
 8010d98:	6833      	ldr	r3, [r6, #0]
 8010d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d9c:	4638      	mov	r0, r7
 8010d9e:	601a      	str	r2, [r3, #0]
 8010da0:	4641      	mov	r1, r8
 8010da2:	4652      	mov	r2, sl
 8010da4:	1e6b      	subs	r3, r5, #1
 8010da6:	f7fc fe25 	bl	800d9f4 <LCD_FillRect>
 8010daa:	e0f7      	b.n	8010f9c <GUI_BMP_DrawEx+0x498>
 8010dac:	20000238 	.word	0x20000238
 8010db0:	080117d9 	.word	0x080117d9
 8010db4:	2001b3c0 	.word	0x2001b3c0
 8010db8:	a81b      	add	r0, sp, #108	; 0x6c
 8010dba:	4631      	mov	r1, r6
 8010dbc:	aa1e      	add	r2, sp, #120	; 0x78
 8010dbe:	465b      	mov	r3, fp
 8010dc0:	f7ff fc58 	bl	8010674 <GUI_BMP__ReadData>
 8010dc4:	2800      	cmp	r0, #0
 8010dc6:	f040 80db 	bne.w	8010f80 <GUI_BMP_DrawEx+0x47c>
 8010dca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8010dcc:	1c5a      	adds	r2, r3, #1
 8010dce:	921e      	str	r2, [sp, #120]	; 0x78
 8010dd0:	f893 a000 	ldrb.w	sl, [r3]
 8010dd4:	785e      	ldrb	r6, [r3, #1]
 8010dd6:	4b75      	ldr	r3, [pc, #468]	; (8010fac <GUI_BMP_DrawEx+0x4a8>)
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	681a      	ldr	r2, [r3, #0]
 8010ddc:	4b74      	ldr	r3, [pc, #464]	; (8010fb0 <GUI_BMP_DrawEx+0x4ac>)
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010de2:	1bae      	subs	r6, r5, r6
 8010de4:	44a2      	add	sl, r4
 8010de6:	601a      	str	r2, [r3, #0]
 8010de8:	4620      	mov	r0, r4
 8010dea:	462b      	mov	r3, r5
 8010dec:	4631      	mov	r1, r6
 8010dee:	4652      	mov	r2, sl
 8010df0:	f7fc fe00 	bl	800d9f4 <LCD_FillRect>
 8010df4:	4635      	mov	r5, r6
 8010df6:	e099      	b.n	8010f2c <GUI_BMP_DrawEx+0x428>
 8010df8:	9a07      	ldr	r2, [sp, #28]
 8010dfa:	2a02      	cmp	r2, #2
 8010dfc:	d12a      	bne.n	8010e54 <GUI_BMP_DrawEx+0x350>
 8010dfe:	1c73      	adds	r3, r6, #1
 8010e00:	ea4f 0a63 	mov.w	sl, r3, asr #1
 8010e04:	930a      	str	r3, [sp, #40]	; 0x28
 8010e06:	a81b      	add	r0, sp, #108	; 0x6c
 8010e08:	4651      	mov	r1, sl
 8010e0a:	aa1e      	add	r2, sp, #120	; 0x78
 8010e0c:	465b      	mov	r3, fp
 8010e0e:	f7ff fc31 	bl	8010674 <GUI_BMP__ReadData>
 8010e12:	4684      	mov	ip, r0
 8010e14:	2800      	cmp	r0, #0
 8010e16:	f040 80b3 	bne.w	8010f80 <GUI_BMP_DrawEx+0x47c>
 8010e1a:	2304      	movs	r3, #4
 8010e1c:	9302      	str	r3, [sp, #8]
 8010e1e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8010e20:	9304      	str	r3, [sp, #16]
 8010e22:	f04f 0b01 	mov.w	fp, #1
 8010e26:	4b61      	ldr	r3, [pc, #388]	; (8010fac <GUI_BMP_DrawEx+0x4a8>)
 8010e28:	f8cd a00c 	str.w	sl, [sp, #12]
 8010e2c:	f8cd b000 	str.w	fp, [sp]
 8010e30:	f8cd b004 	str.w	fp, [sp, #4]
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	9305      	str	r3, [sp, #20]
 8010e38:	4632      	mov	r2, r6
 8010e3a:	4620      	mov	r0, r4
 8010e3c:	4629      	mov	r1, r5
 8010e3e:	465b      	mov	r3, fp
 8010e40:	f8cd c018 	str.w	ip, [sp, #24]
 8010e44:	f7fc fede 	bl	800dc04 <LCD_DrawBitmap>
 8010e48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010e4a:	eb04 0a06 	add.w	sl, r4, r6
 8010e4e:	f012 0f02 	tst.w	r2, #2
 8010e52:	e023      	b.n	8010e9c <GUI_BMP_DrawEx+0x398>
 8010e54:	a81b      	add	r0, sp, #108	; 0x6c
 8010e56:	4631      	mov	r1, r6
 8010e58:	aa1e      	add	r2, sp, #120	; 0x78
 8010e5a:	465b      	mov	r3, fp
 8010e5c:	f7ff fc0a 	bl	8010674 <GUI_BMP__ReadData>
 8010e60:	4684      	mov	ip, r0
 8010e62:	2800      	cmp	r0, #0
 8010e64:	f040 808c 	bne.w	8010f80 <GUI_BMP_DrawEx+0x47c>
 8010e68:	2308      	movs	r3, #8
 8010e6a:	9302      	str	r3, [sp, #8]
 8010e6c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8010e6e:	9304      	str	r3, [sp, #16]
 8010e70:	f04f 0b01 	mov.w	fp, #1
 8010e74:	4b4d      	ldr	r3, [pc, #308]	; (8010fac <GUI_BMP_DrawEx+0x4a8>)
 8010e76:	f8cd b000 	str.w	fp, [sp]
 8010e7a:	f8cd b004 	str.w	fp, [sp, #4]
 8010e7e:	9603      	str	r6, [sp, #12]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	9305      	str	r3, [sp, #20]
 8010e84:	4620      	mov	r0, r4
 8010e86:	4629      	mov	r1, r5
 8010e88:	4632      	mov	r2, r6
 8010e8a:	465b      	mov	r3, fp
 8010e8c:	f8cd c018 	str.w	ip, [sp, #24]
 8010e90:	eb04 0a06 	add.w	sl, r4, r6
 8010e94:	f7fc feb6 	bl	800dc04 <LCD_DrawBitmap>
 8010e98:	f016 0f01 	tst.w	r6, #1
 8010e9c:	f8dd c018 	ldr.w	ip, [sp, #24]
 8010ea0:	d044      	beq.n	8010f2c <GUI_BMP_DrawEx+0x428>
 8010ea2:	a81b      	add	r0, sp, #108	; 0x6c
 8010ea4:	4659      	mov	r1, fp
 8010ea6:	aa1e      	add	r2, sp, #120	; 0x78
 8010ea8:	4663      	mov	r3, ip
 8010eaa:	f7ff fbe3 	bl	8010674 <GUI_BMP__ReadData>
 8010eae:	2800      	cmp	r0, #0
 8010eb0:	d03c      	beq.n	8010f2c <GUI_BMP_DrawEx+0x428>
 8010eb2:	e065      	b.n	8010f80 <GUI_BMP_DrawEx+0x47c>
 8010eb4:	9b07      	ldr	r3, [sp, #28]
 8010eb6:	2b02      	cmp	r3, #2
 8010eb8:	d128      	bne.n	8010f0c <GUI_BMP_DrawEx+0x408>
 8010eba:	f006 030f 	and.w	r3, r6, #15
 8010ebe:	0936      	lsrs	r6, r6, #4
 8010ec0:	42b3      	cmp	r3, r6
 8010ec2:	b21b      	sxth	r3, r3
 8010ec4:	d003      	beq.n	8010ece <GUI_BMP_DrawEx+0x3ca>
 8010ec6:	00b6      	lsls	r6, r6, #2
 8010ec8:	009b      	lsls	r3, r3, #2
 8010eca:	4682      	mov	sl, r0
 8010ecc:	e004      	b.n	8010ed8 <GUI_BMP_DrawEx+0x3d4>
 8010ece:	4a37      	ldr	r2, [pc, #220]	; (8010fac <GUI_BMP_DrawEx+0x4a8>)
 8010ed0:	6812      	ldr	r2, [r2, #0]
 8010ed2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010ed6:	e01d      	b.n	8010f14 <GUI_BMP_DrawEx+0x410>
 8010ed8:	45da      	cmp	sl, fp
 8010eda:	eb0a 0004 	add.w	r0, sl, r4
 8010ede:	da12      	bge.n	8010f06 <GUI_BMP_DrawEx+0x402>
 8010ee0:	4a33      	ldr	r2, [pc, #204]	; (8010fb0 <GUI_BMP_DrawEx+0x4ac>)
 8010ee2:	4932      	ldr	r1, [pc, #200]	; (8010fac <GUI_BMP_DrawEx+0x4a8>)
 8010ee4:	6812      	ldr	r2, [r2, #0]
 8010ee6:	6809      	ldr	r1, [r1, #0]
 8010ee8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8010eea:	f01a 0f01 	tst.w	sl, #1
 8010eee:	bf14      	ite	ne
 8010ef0:	58c9      	ldrne	r1, [r1, r3]
 8010ef2:	5989      	ldreq	r1, [r1, r6]
 8010ef4:	6011      	str	r1, [r2, #0]
 8010ef6:	4629      	mov	r1, r5
 8010ef8:	9306      	str	r3, [sp, #24]
 8010efa:	f10a 0a01 	add.w	sl, sl, #1
 8010efe:	f7fc fcff 	bl	800d900 <LCD_DrawPixel>
 8010f02:	9b06      	ldr	r3, [sp, #24]
 8010f04:	e7e8      	b.n	8010ed8 <GUI_BMP_DrawEx+0x3d4>
 8010f06:	eb04 0a0b 	add.w	sl, r4, fp
 8010f0a:	e00f      	b.n	8010f2c <GUI_BMP_DrawEx+0x428>
 8010f0c:	4b27      	ldr	r3, [pc, #156]	; (8010fac <GUI_BMP_DrawEx+0x4a8>)
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
 8010f14:	4b26      	ldr	r3, [pc, #152]	; (8010fb0 <GUI_BMP_DrawEx+0x4ac>)
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010f1a:	eb04 0a0b 	add.w	sl, r4, fp
 8010f1e:	601a      	str	r2, [r3, #0]
 8010f20:	4620      	mov	r0, r4
 8010f22:	4629      	mov	r1, r5
 8010f24:	f10a 32ff 	add.w	r2, sl, #4294967295
 8010f28:	f7fc fd18 	bl	800d95c <LCD_DrawHLine>
 8010f2c:	4654      	mov	r4, sl
 8010f2e:	e6eb      	b.n	8010d08 <GUI_BMP_DrawEx+0x204>
 8010f30:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8010f34:	2b10      	cmp	r3, #16
 8010f36:	d014      	beq.n	8010f62 <GUI_BMP_DrawEx+0x45e>
 8010f38:	2b20      	cmp	r3, #32
 8010f3a:	d121      	bne.n	8010f80 <GUI_BMP_DrawEx+0x47c>
 8010f3c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8010f3e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010f40:	a81b      	add	r0, sp, #108	; 0x6c
 8010f42:	f7ff fcdd 	bl	8010900 <_ManageBitfields.part.2>
 8010f46:	00a3      	lsls	r3, r4, #2
 8010f48:	9301      	str	r3, [sp, #4]
 8010f4a:	2304      	movs	r3, #4
 8010f4c:	9302      	str	r3, [sp, #8]
 8010f4e:	4b19      	ldr	r3, [pc, #100]	; (8010fb4 <GUI_BMP_DrawEx+0x4b0>)
 8010f50:	9303      	str	r3, [sp, #12]
 8010f52:	9500      	str	r5, [sp, #0]
 8010f54:	a81b      	add	r0, sp, #108	; 0x6c
 8010f56:	4639      	mov	r1, r7
 8010f58:	4642      	mov	r2, r8
 8010f5a:	4623      	mov	r3, r4
 8010f5c:	f7ff fc44 	bl	80107e8 <_DrawBitmap_RGB>
 8010f60:	e010      	b.n	8010f84 <GUI_BMP_DrawEx+0x480>
 8010f62:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8010f64:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010f66:	a81b      	add	r0, sp, #108	; 0x6c
 8010f68:	f7ff fcca 	bl	8010900 <_ManageBitfields.part.2>
 8010f6c:	4b11      	ldr	r3, [pc, #68]	; (8010fb4 <GUI_BMP_DrawEx+0x4b0>)
 8010f6e:	9301      	str	r3, [sp, #4]
 8010f70:	9500      	str	r5, [sp, #0]
 8010f72:	a81b      	add	r0, sp, #108	; 0x6c
 8010f74:	4639      	mov	r1, r7
 8010f76:	4642      	mov	r2, r8
 8010f78:	4623      	mov	r3, r4
 8010f7a:	f7ff fbb7 	bl	80106ec <_DrawBitmap_16bpp>
 8010f7e:	e001      	b.n	8010f84 <GUI_BMP_DrawEx+0x480>
 8010f80:	f04f 0901 	mov.w	r9, #1
 8010f84:	f7f9 fe0e 	bl	800aba4 <WM__GetNextIVR>
 8010f88:	9a08      	ldr	r2, [sp, #32]
 8010f8a:	3201      	adds	r2, #1
 8010f8c:	9208      	str	r2, [sp, #32]
 8010f8e:	2800      	cmp	r0, #0
 8010f90:	f47f adeb 	bne.w	8010b6a <GUI_BMP_DrawEx+0x66>
 8010f94:	4648      	mov	r0, r9
 8010f96:	e006      	b.n	8010fa6 <GUI_BMP_DrawEx+0x4a2>
 8010f98:	2001      	movs	r0, #1
 8010f9a:	e004      	b.n	8010fa6 <GUI_BMP_DrawEx+0x4a2>
 8010f9c:	6833      	ldr	r3, [r6, #0]
 8010f9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010fa2:	601a      	str	r2, [r3, #0]
 8010fa4:	e7ee      	b.n	8010f84 <GUI_BMP_DrawEx+0x480>
 8010fa6:	b025      	add	sp, #148	; 0x94
 8010fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fac:	2001b3c0 	.word	0x2001b3c0
 8010fb0:	20000238 	.word	0x20000238
 8010fb4:	08010965 	.word	0x08010965

08010fb8 <GUI_BMP_Draw>:
 8010fb8:	b513      	push	{r0, r1, r4, lr}
 8010fba:	460c      	mov	r4, r1
 8010fbc:	a902      	add	r1, sp, #8
 8010fbe:	4613      	mov	r3, r2
 8010fc0:	f841 0d04 	str.w	r0, [r1, #-4]!
 8010fc4:	4622      	mov	r2, r4
 8010fc6:	4802      	ldr	r0, [pc, #8]	; (8010fd0 <GUI_BMP_Draw+0x18>)
 8010fc8:	f7ff fd9c 	bl	8010b04 <GUI_BMP_DrawEx>
 8010fcc:	b002      	add	sp, #8
 8010fce:	bd10      	pop	{r4, pc}
 8010fd0:	08010353 	.word	0x08010353

08010fd4 <_PushFreeBlock>:
 8010fd4:	4b07      	ldr	r3, [pc, #28]	; (8010ff4 <_PushFreeBlock+0x20>)
 8010fd6:	685a      	ldr	r2, [r3, #4]
 8010fd8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010fda:	3201      	adds	r2, #1
 8010fdc:	b510      	push	{r4, lr}
 8010fde:	605a      	str	r2, [r3, #4]
 8010fe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010fe2:	eb02 04c0 	add.w	r4, r2, r0, lsl #3
 8010fe6:	6061      	str	r1, [r4, #4]
 8010fe8:	2100      	movs	r1, #0
 8010fea:	f802 1030 	strb.w	r1, [r2, r0, lsl #3]
 8010fee:	6258      	str	r0, [r3, #36]	; 0x24
 8010ff0:	bd10      	pop	{r4, pc}
 8010ff2:	bf00      	nop
 8010ff4:	2001b2d0 	.word	0x2001b2d0

08010ff8 <_OnExit>:
 8010ff8:	b538      	push	{r3, r4, r5, lr}
 8010ffa:	4d0b      	ldr	r5, [pc, #44]	; (8011028 <_OnExit+0x30>)
 8010ffc:	2400      	movs	r4, #0
 8010ffe:	f105 0040 	add.w	r0, r5, #64	; 0x40
 8011002:	4621      	mov	r1, r4
 8011004:	2280      	movs	r2, #128	; 0x80
 8011006:	f885 4028 	strb.w	r4, [r5, #40]	; 0x28
 801100a:	f7fc fff7 	bl	800dffc <GUI__memset>
 801100e:	4628      	mov	r0, r5
 8011010:	4621      	mov	r1, r4
 8011012:	22c0      	movs	r2, #192	; 0xc0
 8011014:	f7fc fff2 	bl	800dffc <GUI__memset>
 8011018:	4621      	mov	r1, r4
 801101a:	4804      	ldr	r0, [pc, #16]	; (801102c <_OnExit+0x34>)
 801101c:	220c      	movs	r2, #12
 801101e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011022:	f7fc bfeb 	b.w	800dffc <GUI__memset>
 8011026:	bf00      	nop
 8011028:	2001b2d0 	.word	0x2001b2d0
 801102c:	2001966c 	.word	0x2001966c

08011030 <_RemoveFreeBlock>:
 8011030:	b510      	push	{r4, lr}
 8011032:	6842      	ldr	r2, [r0, #4]
 8011034:	230f      	movs	r3, #15
 8011036:	490d      	ldr	r1, [pc, #52]	; (801106c <_RemoveFreeBlock+0x3c>)
 8011038:	eb01 04c3 	add.w	r4, r1, r3, lsl #3
 801103c:	6c24      	ldr	r4, [r4, #64]	; 0x40
 801103e:	42a2      	cmp	r2, r4
 8011040:	d203      	bcs.n	801104a <_RemoveFreeBlock+0x1a>
 8011042:	f113 33ff 	adds.w	r3, r3, #4294967295
 8011046:	d2f6      	bcs.n	8011036 <_RemoveFreeBlock+0x6>
 8011048:	bd10      	pop	{r4, pc}
 801104a:	2b0f      	cmp	r3, #15
 801104c:	d80c      	bhi.n	8011068 <_RemoveFreeBlock+0x38>
 801104e:	680c      	ldr	r4, [r1, #0]
 8011050:	1aa2      	subs	r2, r4, r2
 8011052:	600a      	str	r2, [r1, #0]
 8011054:	6882      	ldr	r2, [r0, #8]
 8011056:	68c0      	ldr	r0, [r0, #12]
 8011058:	b102      	cbz	r2, 801105c <_RemoveFreeBlock+0x2c>
 801105a:	6050      	str	r0, [r2, #4]
 801105c:	b108      	cbz	r0, 8011062 <_RemoveFreeBlock+0x32>
 801105e:	6002      	str	r2, [r0, #0]
 8011060:	bd10      	pop	{r4, pc}
 8011062:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8011066:	645a      	str	r2, [r3, #68]	; 0x44
 8011068:	bd10      	pop	{r4, pc}
 801106a:	bf00      	nop
 801106c:	2001b2d0 	.word	0x2001b2d0

08011070 <_AddFreeMemory>:
 8011070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011072:	4e26      	ldr	r6, [pc, #152]	; (801110c <_AddFreeMemory+0x9c>)
 8011074:	68f3      	ldr	r3, [r6, #12]
 8011076:	1e5a      	subs	r2, r3, #1
 8011078:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 801107a:	4605      	mov	r5, r0
 801107c:	4413      	add	r3, r2
 801107e:	1808      	adds	r0, r1, r0
 8011080:	4298      	cmp	r0, r3
 8011082:	460c      	mov	r4, r1
 8011084:	d805      	bhi.n	8011092 <_AddFreeMemory+0x22>
 8011086:	594b      	ldr	r3, [r1, r5]
 8011088:	b91b      	cbnz	r3, 8011092 <_AddFreeMemory+0x22>
 801108a:	6843      	ldr	r3, [r0, #4]
 801108c:	441d      	add	r5, r3
 801108e:	f7ff ffcf 	bl	8011030 <_RemoveFreeBlock>
 8011092:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8011094:	429c      	cmp	r4, r3
 8011096:	d90a      	bls.n	80110ae <_AddFreeMemory+0x3e>
 8011098:	f854 7c04 	ldr.w	r7, [r4, #-4]
 801109c:	1be7      	subs	r7, r4, r7
 801109e:	683b      	ldr	r3, [r7, #0]
 80110a0:	b92b      	cbnz	r3, 80110ae <_AddFreeMemory+0x3e>
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	4638      	mov	r0, r7
 80110a6:	441d      	add	r5, r3
 80110a8:	f7ff ffc2 	bl	8011030 <_RemoveFreeBlock>
 80110ac:	463c      	mov	r4, r7
 80110ae:	230f      	movs	r3, #15
 80110b0:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 80110b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80110b6:	4295      	cmp	r5, r2
 80110b8:	d203      	bcs.n	80110c2 <_AddFreeMemory+0x52>
 80110ba:	f113 33ff 	adds.w	r3, r3, #4294967295
 80110be:	d2f7      	bcs.n	80110b0 <_AddFreeMemory+0x40>
 80110c0:	e022      	b.n	8011108 <_AddFreeMemory+0x98>
 80110c2:	2b0f      	cmp	r3, #15
 80110c4:	d820      	bhi.n	8011108 <_AddFreeMemory+0x98>
 80110c6:	3308      	adds	r3, #8
 80110c8:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 80110cc:	1961      	adds	r1, r4, r5
 80110ce:	6852      	ldr	r2, [r2, #4]
 80110d0:	60a2      	str	r2, [r4, #8]
 80110d2:	2000      	movs	r0, #0
 80110d4:	e884 0021 	stmia.w	r4, {r0, r5}
 80110d8:	6124      	str	r4, [r4, #16]
 80110da:	f841 5c04 	str.w	r5, [r1, #-4]
 80110de:	f104 0108 	add.w	r1, r4, #8
 80110e2:	b102      	cbz	r2, 80110e6 <_AddFreeMemory+0x76>
 80110e4:	6051      	str	r1, [r2, #4]
 80110e6:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80110ea:	60e0      	str	r0, [r4, #12]
 80110ec:	6059      	str	r1, [r3, #4]
 80110ee:	6833      	ldr	r3, [r6, #0]
 80110f0:	f896 1029 	ldrb.w	r1, [r6, #41]	; 0x29
 80110f4:	4a05      	ldr	r2, [pc, #20]	; (801110c <_AddFreeMemory+0x9c>)
 80110f6:	442b      	add	r3, r5
 80110f8:	6033      	str	r3, [r6, #0]
 80110fa:	b929      	cbnz	r1, 8011108 <_AddFreeMemory+0x98>
 80110fc:	68d1      	ldr	r1, [r2, #12]
 80110fe:	1acb      	subs	r3, r1, r3
 8011100:	6891      	ldr	r1, [r2, #8]
 8011102:	4299      	cmp	r1, r3
 8011104:	bf38      	it	cc
 8011106:	6093      	strcc	r3, [r2, #8]
 8011108:	4628      	mov	r0, r5
 801110a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801110c:	2001b2d0 	.word	0x2001b2d0

08011110 <_RemoveHoles>:
 8011110:	4b25      	ldr	r3, [pc, #148]	; (80111a8 <_RemoveHoles+0x98>)
 8011112:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011116:	68da      	ldr	r2, [r3, #12]
 8011118:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 801111a:	3a01      	subs	r2, #1
 801111c:	4682      	mov	sl, r0
 801111e:	eb02 0904 	add.w	r9, r2, r4
 8011122:	469b      	mov	fp, r3
 8011124:	e894 0028 	ldmia.w	r4, {r3, r5}
 8011128:	2b00      	cmp	r3, #0
 801112a:	d133      	bne.n	8011194 <_RemoveHoles+0x84>
 801112c:	eb04 0805 	add.w	r8, r4, r5
 8011130:	45c8      	cmp	r8, r9
 8011132:	d22f      	bcs.n	8011194 <_RemoveHoles+0x84>
 8011134:	f854 c005 	ldr.w	ip, [r4, r5]
 8011138:	f8d8 6004 	ldr.w	r6, [r8, #4]
 801113c:	f1bc 0f00 	cmp.w	ip, #0
 8011140:	d028      	beq.n	8011194 <_RemoveHoles+0x84>
 8011142:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 8011146:	4f18      	ldr	r7, [pc, #96]	; (80111a8 <_RemoveHoles+0x98>)
 8011148:	f813 303c 	ldrb.w	r3, [r3, ip, lsl #3]
 801114c:	2b01      	cmp	r3, #1
 801114e:	d121      	bne.n	8011194 <_RemoveHoles+0x84>
 8011150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011152:	4620      	mov	r0, r4
 8011154:	e88d 1008 	stmia.w	sp, {r3, ip}
 8011158:	f7ff ff6a 	bl	8011030 <_RemoveFreeBlock>
 801115c:	f8d8 1000 	ldr.w	r1, [r8]
 8011160:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011162:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8011166:	4620      	mov	r0, r4
 8011168:	6054      	str	r4, [r2, #4]
 801116a:	4641      	mov	r1, r8
 801116c:	4632      	mov	r2, r6
 801116e:	f004 fa7b 	bl	8015668 <memmove>
 8011172:	e89d 1008 	ldmia.w	sp, {r3, ip}
 8011176:	459c      	cmp	ip, r3
 8011178:	d102      	bne.n	8011180 <_RemoveHoles+0x70>
 801117a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801117c:	1b5b      	subs	r3, r3, r5
 801117e:	637b      	str	r3, [r7, #52]	; 0x34
 8011180:	4628      	mov	r0, r5
 8011182:	19a1      	adds	r1, r4, r6
 8011184:	f7ff ff74 	bl	8011070 <_AddFreeMemory>
 8011188:	f1ba 0f00 	cmp.w	sl, #0
 801118c:	d001      	beq.n	8011192 <_RemoveHoles+0x82>
 801118e:	4582      	cmp	sl, r0
 8011190:	d905      	bls.n	801119e <_RemoveHoles+0x8e>
 8011192:	4635      	mov	r5, r6
 8011194:	442c      	add	r4, r5
 8011196:	454c      	cmp	r4, r9
 8011198:	d3c4      	bcc.n	8011124 <_RemoveHoles+0x14>
 801119a:	2001      	movs	r0, #1
 801119c:	e000      	b.n	80111a0 <_RemoveHoles+0x90>
 801119e:	2000      	movs	r0, #0
 80111a0:	b003      	add	sp, #12
 80111a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111a6:	bf00      	nop
 80111a8:	2001b2d0 	.word	0x2001b2d0

080111ac <GUI_ALLOC_FreeFixedBlock>:
 80111ac:	b128      	cbz	r0, 80111ba <GUI_ALLOC_FreeFixedBlock+0xe>
 80111ae:	4a03      	ldr	r2, [pc, #12]	; (80111bc <GUI_ALLOC_FreeFixedBlock+0x10>)
 80111b0:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80111b2:	6003      	str	r3, [r0, #0]
 80111b4:	b103      	cbz	r3, 80111b8 <GUI_ALLOC_FreeFixedBlock+0xc>
 80111b6:	6058      	str	r0, [r3, #4]
 80111b8:	63d0      	str	r0, [r2, #60]	; 0x3c
 80111ba:	4770      	bx	lr
 80111bc:	2001b2d0 	.word	0x2001b2d0

080111c0 <GUI_ALLOC_h2p>:
 80111c0:	b128      	cbz	r0, 80111ce <GUI_ALLOC_h2p+0xe>
 80111c2:	4b03      	ldr	r3, [pc, #12]	; (80111d0 <GUI_ALLOC_h2p+0x10>)
 80111c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111c6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80111ca:	6840      	ldr	r0, [r0, #4]
 80111cc:	3008      	adds	r0, #8
 80111ce:	4770      	bx	lr
 80111d0:	2001b2d0 	.word	0x2001b2d0

080111d4 <GUI_ALLOC_LockH>:
 80111d4:	4b05      	ldr	r3, [pc, #20]	; (80111ec <GUI_ALLOC_LockH+0x18>)
 80111d6:	69d9      	ldr	r1, [r3, #28]
 80111d8:	3101      	adds	r1, #1
 80111da:	61d9      	str	r1, [r3, #28]
 80111dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111de:	f813 1030 	ldrb.w	r1, [r3, r0, lsl #3]
 80111e2:	3101      	adds	r1, #1
 80111e4:	f803 1030 	strb.w	r1, [r3, r0, lsl #3]
 80111e8:	f7ff bfea 	b.w	80111c0 <GUI_ALLOC_h2p>
 80111ec:	2001b2d0 	.word	0x2001b2d0

080111f0 <GUI_ALLOC_UnlockH>:
 80111f0:	b530      	push	{r4, r5, lr}
 80111f2:	6802      	ldr	r2, [r0, #0]
 80111f4:	4b09      	ldr	r3, [pc, #36]	; (801121c <GUI_ALLOC_UnlockH+0x2c>)
 80111f6:	f852 1c08 	ldr.w	r1, [r2, #-8]
 80111fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80111fc:	f812 4031 	ldrb.w	r4, [r2, r1, lsl #3]
 8011200:	2c01      	cmp	r4, #1
 8011202:	d903      	bls.n	801120c <GUI_ALLOC_UnlockH+0x1c>
 8011204:	69dd      	ldr	r5, [r3, #28]
 8011206:	b10d      	cbz	r5, 801120c <GUI_ALLOC_UnlockH+0x1c>
 8011208:	3d01      	subs	r5, #1
 801120a:	61dd      	str	r5, [r3, #28]
 801120c:	3c01      	subs	r4, #1
 801120e:	f802 4031 	strb.w	r4, [r2, r1, lsl #3]
 8011212:	2300      	movs	r3, #0
 8011214:	6003      	str	r3, [r0, #0]
 8011216:	4618      	mov	r0, r3
 8011218:	bd30      	pop	{r4, r5, pc}
 801121a:	bf00      	nop
 801121c:	2001b2d0 	.word	0x2001b2d0

08011220 <GUI_ALLOC_AssignMemory>:
 8011220:	4b02      	ldr	r3, [pc, #8]	; (801122c <GUI_ALLOC_AssignMemory+0xc>)
 8011222:	f021 0103 	bic.w	r1, r1, #3
 8011226:	6018      	str	r0, [r3, #0]
 8011228:	6059      	str	r1, [r3, #4]
 801122a:	4770      	bx	lr
 801122c:	2001966c 	.word	0x2001966c

08011230 <GUI_ALLOC_GetSize>:
 8011230:	b130      	cbz	r0, 8011240 <GUI_ALLOC_GetSize+0x10>
 8011232:	4b04      	ldr	r3, [pc, #16]	; (8011244 <GUI_ALLOC_GetSize+0x14>)
 8011234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011236:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801123a:	6843      	ldr	r3, [r0, #4]
 801123c:	6858      	ldr	r0, [r3, #4]
 801123e:	380c      	subs	r0, #12
 8011240:	4770      	bx	lr
 8011242:	bf00      	nop
 8011244:	2001b2d0 	.word	0x2001b2d0

08011248 <GUI_ALLOC_Free>:
 8011248:	b510      	push	{r4, lr}
 801124a:	4604      	mov	r4, r0
 801124c:	b180      	cbz	r0, 8011270 <GUI_ALLOC_Free+0x28>
 801124e:	4b09      	ldr	r3, [pc, #36]	; (8011274 <GUI_ALLOC_Free+0x2c>)
 8011250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011252:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
 8011256:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 801125a:	2b01      	cmp	r3, #1
 801125c:	d108      	bne.n	8011270 <GUI_ALLOC_Free+0x28>
 801125e:	6851      	ldr	r1, [r2, #4]
 8011260:	6848      	ldr	r0, [r1, #4]
 8011262:	f7ff ff05 	bl	8011070 <_AddFreeMemory>
 8011266:	4620      	mov	r0, r4
 8011268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801126c:	f7ff beb2 	b.w	8010fd4 <_PushFreeBlock>
 8011270:	bd10      	pop	{r4, pc}
 8011272:	bf00      	nop
 8011274:	2001b2d0 	.word	0x2001b2d0

08011278 <_EnlargeBlocks>:
 8011278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801127c:	4c22      	ldr	r4, [pc, #136]	; (8011308 <_EnlargeBlocks+0x90>)
 801127e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011280:	b93b      	cbnz	r3, 8011292 <_EnlargeBlocks+0x1a>
 8011282:	4b22      	ldr	r3, [pc, #136]	; (801130c <_EnlargeBlocks+0x94>)
 8011284:	689d      	ldr	r5, [r3, #8]
 8011286:	685b      	ldr	r3, [r3, #4]
 8011288:	3508      	adds	r5, #8
 801128a:	fbb3 f5f5 	udiv	r5, r3, r5
 801128e:	3502      	adds	r5, #2
 8011290:	e003      	b.n	801129a <_EnlargeBlocks+0x22>
 8011292:	6923      	ldr	r3, [r4, #16]
 8011294:	1d1d      	adds	r5, r3, #4
 8011296:	eb05 05d3 	add.w	r5, r5, r3, lsr #3
 801129a:	00e8      	lsls	r0, r5, #3
 801129c:	f000 f978 	bl	8011590 <_Alloc>
 80112a0:	4680      	mov	r8, r0
 80112a2:	b360      	cbz	r0, 80112fe <_EnlargeBlocks+0x86>
 80112a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80112a6:	6922      	ldr	r2, [r4, #16]
 80112a8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80112aa:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
 80112ae:	00d2      	lsls	r2, r2, #3
 80112b0:	685e      	ldr	r6, [r3, #4]
 80112b2:	3608      	adds	r6, #8
 80112b4:	4630      	mov	r0, r6
 80112b6:	f004 f9cc 	bl	8015652 <memcpy>
 80112ba:	6922      	ldr	r2, [r4, #16]
 80112bc:	6366      	str	r6, [r4, #52]	; 0x34
 80112be:	eb06 01c2 	add.w	r1, r6, r2, lsl #3
 80112c2:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 80112c6:	3104      	adds	r1, #4
 80112c8:	4613      	mov	r3, r2
 80112ca:	1e68      	subs	r0, r5, #1
 80112cc:	4283      	cmp	r3, r0
 80112ce:	f101 0108 	add.w	r1, r1, #8
 80112d2:	d203      	bcs.n	80112dc <_EnlargeBlocks+0x64>
 80112d4:	3301      	adds	r3, #1
 80112d6:	f841 3c08 	str.w	r3, [r1, #-8]
 80112da:	e7f6      	b.n	80112ca <_EnlargeBlocks+0x52>
 80112dc:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80112e0:	2600      	movs	r6, #0
 80112e2:	605e      	str	r6, [r3, #4]
 80112e4:	6863      	ldr	r3, [r4, #4]
 80112e6:	6262      	str	r2, [r4, #36]	; 0x24
 80112e8:	1a9b      	subs	r3, r3, r2
 80112ea:	442b      	add	r3, r5
 80112ec:	6063      	str	r3, [r4, #4]
 80112ee:	6125      	str	r5, [r4, #16]
 80112f0:	4638      	mov	r0, r7
 80112f2:	b13f      	cbz	r7, 8011304 <_EnlargeBlocks+0x8c>
 80112f4:	f7ff ffa8 	bl	8011248 <GUI_ALLOC_Free>
 80112f8:	4630      	mov	r0, r6
 80112fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112fe:	2001      	movs	r0, #1
 8011300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011308:	2001b2d0 	.word	0x2001b2d0
 801130c:	2001966c 	.word	0x2001966c

08011310 <_InitOnce>:
 8011310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011312:	4e58      	ldr	r6, [pc, #352]	; (8011474 <_InitOnce+0x164>)
 8011314:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8011318:	2900      	cmp	r1, #0
 801131a:	f040 80aa 	bne.w	8011472 <_InitOnce+0x162>
 801131e:	4d56      	ldr	r5, [pc, #344]	; (8011478 <_InitOnce+0x168>)
 8011320:	686a      	ldr	r2, [r5, #4]
 8011322:	2301      	movs	r3, #1
 8011324:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
 8011328:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 801132c:	bf28      	it	cs
 801132e:	f44f 5220 	movcs.w	r2, #10240	; 0x2800
 8011332:	682b      	ldr	r3, [r5, #0]
 8011334:	0894      	lsrs	r4, r2, #2
 8011336:	2000      	movs	r0, #0
 8011338:	42a0      	cmp	r0, r4
 801133a:	d00c      	beq.n	8011356 <_InitOnce+0x46>
 801133c:	1847      	adds	r7, r0, r1
 801133e:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8011342:	fbb7 fefe 	udiv	lr, r7, lr
 8011346:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 801134a:	ebce 0707 	rsb	r7, lr, r7
 801134e:	f843 7020 	str.w	r7, [r3, r0, lsl #2]
 8011352:	3001      	adds	r0, #1
 8011354:	e7f0      	b.n	8011338 <_InitOnce+0x28>
 8011356:	2000      	movs	r0, #0
 8011358:	42a0      	cmp	r0, r4
 801135a:	d016      	beq.n	801138a <_InitOnce+0x7a>
 801135c:	1847      	adds	r7, r0, r1
 801135e:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8011362:	fbb7 fefe 	udiv	lr, r7, lr
 8011366:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 801136a:	ebce 0e07 	rsb	lr, lr, r7
 801136e:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8011372:	4577      	cmp	r7, lr
 8011374:	d007      	beq.n	8011386 <_InitOnce+0x76>
 8011376:	68aa      	ldr	r2, [r5, #8]
 8011378:	4b3f      	ldr	r3, [pc, #252]	; (8011478 <_InitOnce+0x168>)
 801137a:	2a00      	cmp	r2, #0
 801137c:	d155      	bne.n	801142a <_InitOnce+0x11a>
 801137e:	685a      	ldr	r2, [r3, #4]
 8011380:	0892      	lsrs	r2, r2, #2
 8011382:	609a      	str	r2, [r3, #8]
 8011384:	e051      	b.n	801142a <_InitOnce+0x11a>
 8011386:	3001      	adds	r0, #1
 8011388:	e7e6      	b.n	8011358 <_InitOnce+0x48>
 801138a:	3101      	adds	r1, #1
 801138c:	2902      	cmp	r1, #2
 801138e:	d1d2      	bne.n	8011336 <_InitOnce+0x26>
 8011390:	0854      	lsrs	r4, r2, #1
 8011392:	2100      	movs	r1, #0
 8011394:	2000      	movs	r0, #0
 8011396:	42a0      	cmp	r0, r4
 8011398:	d00c      	beq.n	80113b4 <_InitOnce+0xa4>
 801139a:	1847      	adds	r7, r0, r1
 801139c:	f04f 0eff 	mov.w	lr, #255	; 0xff
 80113a0:	fbb7 fefe 	udiv	lr, r7, lr
 80113a4:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 80113a8:	ebce 0707 	rsb	r7, lr, r7
 80113ac:	f823 7010 	strh.w	r7, [r3, r0, lsl #1]
 80113b0:	3001      	adds	r0, #1
 80113b2:	e7f0      	b.n	8011396 <_InitOnce+0x86>
 80113b4:	2000      	movs	r0, #0
 80113b6:	42a0      	cmp	r0, r4
 80113b8:	d00f      	beq.n	80113da <_InitOnce+0xca>
 80113ba:	1847      	adds	r7, r0, r1
 80113bc:	f04f 0eff 	mov.w	lr, #255	; 0xff
 80113c0:	fbb7 fefe 	udiv	lr, r7, lr
 80113c4:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 80113c8:	ebce 0707 	rsb	r7, lr, r7
 80113cc:	f833 c010 	ldrh.w	ip, [r3, r0, lsl #1]
 80113d0:	b2bf      	uxth	r7, r7
 80113d2:	45bc      	cmp	ip, r7
 80113d4:	d1cf      	bne.n	8011376 <_InitOnce+0x66>
 80113d6:	3001      	adds	r0, #1
 80113d8:	e7ed      	b.n	80113b6 <_InitOnce+0xa6>
 80113da:	3101      	adds	r1, #1
 80113dc:	2902      	cmp	r1, #2
 80113de:	d1d9      	bne.n	8011394 <_InitOnce+0x84>
 80113e0:	2100      	movs	r1, #0
 80113e2:	2000      	movs	r0, #0
 80113e4:	4290      	cmp	r0, r2
 80113e6:	d007      	beq.n	80113f8 <_InitOnce+0xe8>
 80113e8:	1844      	adds	r4, r0, r1
 80113ea:	27ff      	movs	r7, #255	; 0xff
 80113ec:	fbb4 f7f7 	udiv	r7, r4, r7
 80113f0:	443c      	add	r4, r7
 80113f2:	541c      	strb	r4, [r3, r0]
 80113f4:	3001      	adds	r0, #1
 80113f6:	e7f5      	b.n	80113e4 <_InitOnce+0xd4>
 80113f8:	2000      	movs	r0, #0
 80113fa:	4290      	cmp	r0, r2
 80113fc:	d00b      	beq.n	8011416 <_InitOnce+0x106>
 80113fe:	1844      	adds	r4, r0, r1
 8011400:	27ff      	movs	r7, #255	; 0xff
 8011402:	fbb4 f7f7 	udiv	r7, r4, r7
 8011406:	443c      	add	r4, r7
 8011408:	5c1f      	ldrb	r7, [r3, r0]
 801140a:	f004 04ff 	and.w	r4, r4, #255	; 0xff
 801140e:	42a7      	cmp	r7, r4
 8011410:	d1b1      	bne.n	8011376 <_InitOnce+0x66>
 8011412:	3001      	adds	r0, #1
 8011414:	e7f1      	b.n	80113fa <_InitOnce+0xea>
 8011416:	3101      	adds	r1, #1
 8011418:	2902      	cmp	r1, #2
 801141a:	d1e2      	bne.n	80113e2 <_InitOnce+0xd2>
 801141c:	2100      	movs	r1, #0
 801141e:	4291      	cmp	r1, r2
 8011420:	d0a9      	beq.n	8011376 <_InitOnce+0x66>
 8011422:	2000      	movs	r0, #0
 8011424:	5458      	strb	r0, [r3, r1]
 8011426:	3101      	adds	r1, #1
 8011428:	e7f9      	b.n	801141e <_InitOnce+0x10e>
 801142a:	4814      	ldr	r0, [pc, #80]	; (801147c <_InitOnce+0x16c>)
 801142c:	4b14      	ldr	r3, [pc, #80]	; (8011480 <_InitOnce+0x170>)
 801142e:	6003      	str	r3, [r0, #0]
 8011430:	f7fe fbf4 	bl	800fc1c <GUI__RegisterExit>
 8011434:	235a      	movs	r3, #90	; 0x5a
 8011436:	6233      	str	r3, [r6, #32]
 8011438:	2300      	movs	r3, #0
 801143a:	2110      	movs	r1, #16
 801143c:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8011440:	4099      	lsls	r1, r3
 8011442:	3301      	adds	r3, #1
 8011444:	2b10      	cmp	r3, #16
 8011446:	4c0b      	ldr	r4, [pc, #44]	; (8011474 <_InitOnce+0x164>)
 8011448:	6411      	str	r1, [r2, #64]	; 0x40
 801144a:	d1f6      	bne.n	801143a <_InitOnce+0x12a>
 801144c:	6868      	ldr	r0, [r5, #4]
 801144e:	6829      	ldr	r1, [r5, #0]
 8011450:	63a1      	str	r1, [r4, #56]	; 0x38
 8011452:	2302      	movs	r3, #2
 8011454:	6123      	str	r3, [r4, #16]
 8011456:	f1a0 0314 	sub.w	r3, r0, #20
 801145a:	440b      	add	r3, r1
 801145c:	2501      	movs	r5, #1
 801145e:	6363      	str	r3, [r4, #52]	; 0x34
 8011460:	60e0      	str	r0, [r4, #12]
 8011462:	605d      	str	r5, [r3, #4]
 8011464:	6265      	str	r5, [r4, #36]	; 0x24
 8011466:	6065      	str	r5, [r4, #4]
 8011468:	f7ff fe02 	bl	8011070 <_AddFreeMemory>
 801146c:	f7ff ff04 	bl	8011278 <_EnlargeBlocks>
 8011470:	6325      	str	r5, [r4, #48]	; 0x30
 8011472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011474:	2001b2d0 	.word	0x2001b2d0
 8011478:	2001966c 	.word	0x2001966c
 801147c:	20019678 	.word	0x20019678
 8011480:	08010ff9 	.word	0x08010ff9

08011484 <GUI_ALLOC_GetFixedBlock>:
 8011484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011488:	4605      	mov	r5, r0
 801148a:	4e26      	ldr	r6, [pc, #152]	; (8011524 <GUI_ALLOC_GetFixedBlock+0xa0>)
 801148c:	3503      	adds	r5, #3
 801148e:	f7ff ff3f 	bl	8011310 <_InitOnce>
 8011492:	f025 0503 	bic.w	r5, r5, #3
 8011496:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8011498:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 801149a:	3504      	adds	r5, #4
 801149c:	429d      	cmp	r5, r3
 801149e:	bf38      	it	cc
 80114a0:	461d      	movcc	r5, r3
 80114a2:	4614      	mov	r4, r2
 80114a4:	b12c      	cbz	r4, 80114b2 <GUI_ALLOC_GetFixedBlock+0x2e>
 80114a6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80114aa:	42ab      	cmp	r3, r5
 80114ac:	d02c      	beq.n	8011508 <GUI_ALLOC_GetFixedBlock+0x84>
 80114ae:	6824      	ldr	r4, [r4, #0]
 80114b0:	e7f8      	b.n	80114a4 <GUI_ALLOC_GetFixedBlock+0x20>
 80114b2:	68f3      	ldr	r3, [r6, #12]
 80114b4:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 80114b6:	eb02 0803 	add.w	r8, r2, r3
 80114ba:	f858 7c04 	ldr.w	r7, [r8, #-4]
 80114be:	ebc7 0708 	rsb	r7, r7, r8
 80114c2:	683b      	ldr	r3, [r7, #0]
 80114c4:	b133      	cbz	r3, 80114d4 <GUI_ALLOC_GetFixedBlock+0x50>
 80114c6:	4620      	mov	r0, r4
 80114c8:	f7ff fe22 	bl	8011110 <_RemoveHoles>
 80114cc:	f858 7c04 	ldr.w	r7, [r8, #-4]
 80114d0:	ebc7 0708 	rsb	r7, r7, r8
 80114d4:	683b      	ldr	r3, [r7, #0]
 80114d6:	bb13      	cbnz	r3, 801151e <GUI_ALLOC_GetFixedBlock+0x9a>
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	42ab      	cmp	r3, r5
 80114dc:	db1f      	blt.n	801151e <GUI_ALLOC_GetFixedBlock+0x9a>
 80114de:	4638      	mov	r0, r7
 80114e0:	1d1c      	adds	r4, r3, #4
 80114e2:	f7ff fda5 	bl	8011030 <_RemoveFreeBlock>
 80114e6:	68f3      	ldr	r3, [r6, #12]
 80114e8:	6878      	ldr	r0, [r7, #4]
 80114ea:	1b5b      	subs	r3, r3, r5
 80114ec:	60f3      	str	r3, [r6, #12]
 80114ee:	6973      	ldr	r3, [r6, #20]
 80114f0:	1b64      	subs	r4, r4, r5
 80114f2:	442b      	add	r3, r5
 80114f4:	1b40      	subs	r0, r0, r5
 80114f6:	443c      	add	r4, r7
 80114f8:	6173      	str	r3, [r6, #20]
 80114fa:	d002      	beq.n	8011502 <GUI_ALLOC_GetFixedBlock+0x7e>
 80114fc:	4639      	mov	r1, r7
 80114fe:	f7ff fdb7 	bl	8011070 <_AddFreeMemory>
 8011502:	f844 5c04 	str.w	r5, [r4, #-4]
 8011506:	e00a      	b.n	801151e <GUI_ALLOC_GetFixedBlock+0x9a>
 8011508:	6823      	ldr	r3, [r4, #0]
 801150a:	b10b      	cbz	r3, 8011510 <GUI_ALLOC_GetFixedBlock+0x8c>
 801150c:	6861      	ldr	r1, [r4, #4]
 801150e:	6059      	str	r1, [r3, #4]
 8011510:	6861      	ldr	r1, [r4, #4]
 8011512:	b101      	cbz	r1, 8011516 <GUI_ALLOC_GetFixedBlock+0x92>
 8011514:	600b      	str	r3, [r1, #0]
 8011516:	42a2      	cmp	r2, r4
 8011518:	d101      	bne.n	801151e <GUI_ALLOC_GetFixedBlock+0x9a>
 801151a:	6823      	ldr	r3, [r4, #0]
 801151c:	63f3      	str	r3, [r6, #60]	; 0x3c
 801151e:	4620      	mov	r0, r4
 8011520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011524:	2001b2d0 	.word	0x2001b2d0

08011528 <GUI_ALLOC_GetMaxSize>:
 8011528:	b508      	push	{r3, lr}
 801152a:	f7ff fef1 	bl	8011310 <_InitOnce>
 801152e:	2200      	movs	r2, #0
 8011530:	4b0b      	ldr	r3, [pc, #44]	; (8011560 <GUI_ALLOC_GetMaxSize+0x38>)
 8011532:	4413      	add	r3, r2
 8011534:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8011538:	b113      	cbz	r3, 8011540 <GUI_ALLOC_GetMaxSize+0x18>
 801153a:	689b      	ldr	r3, [r3, #8]
 801153c:	2000      	movs	r0, #0
 801153e:	e00b      	b.n	8011558 <GUI_ALLOC_GetMaxSize+0x30>
 8011540:	3a08      	subs	r2, #8
 8011542:	f112 0f80 	cmn.w	r2, #128	; 0x80
 8011546:	d1f3      	bne.n	8011530 <GUI_ALLOC_GetMaxSize+0x8>
 8011548:	e7f8      	b.n	801153c <GUI_ALLOC_GetMaxSize+0x14>
 801154a:	685a      	ldr	r2, [r3, #4]
 801154c:	689b      	ldr	r3, [r3, #8]
 801154e:	4290      	cmp	r0, r2
 8011550:	bf38      	it	cc
 8011552:	4610      	movcc	r0, r2
 8011554:	b113      	cbz	r3, 801155c <GUI_ALLOC_GetMaxSize+0x34>
 8011556:	689b      	ldr	r3, [r3, #8]
 8011558:	2b00      	cmp	r3, #0
 801155a:	d1f6      	bne.n	801154a <GUI_ALLOC_GetMaxSize+0x22>
 801155c:	380c      	subs	r0, #12
 801155e:	bd08      	pop	{r3, pc}
 8011560:	2001b2d0 	.word	0x2001b2d0

08011564 <GUI_ALLOC_RequestSize>:
 8011564:	b508      	push	{r3, lr}
 8011566:	f7ff ffdf 	bl	8011528 <GUI_ALLOC_GetMaxSize>
 801156a:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 801156e:	f04f 0364 	mov.w	r3, #100	; 0x64
 8011572:	4a06      	ldr	r2, [pc, #24]	; (801158c <GUI_ALLOC_RequestSize+0x28>)
 8011574:	d904      	bls.n	8011580 <GUI_ALLOC_RequestSize+0x1c>
 8011576:	fb90 f0f3 	sdiv	r0, r0, r3
 801157a:	6a13      	ldr	r3, [r2, #32]
 801157c:	4358      	muls	r0, r3
 801157e:	bd08      	pop	{r3, pc}
 8011580:	6a12      	ldr	r2, [r2, #32]
 8011582:	4350      	muls	r0, r2
 8011584:	fbb0 f0f3 	udiv	r0, r0, r3
 8011588:	bd08      	pop	{r3, pc}
 801158a:	bf00      	nop
 801158c:	2001b2d0 	.word	0x2001b2d0

08011590 <_Alloc>:
 8011590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011594:	4d38      	ldr	r5, [pc, #224]	; (8011678 <_Alloc+0xe8>)
 8011596:	4604      	mov	r4, r0
 8011598:	f7ff feba 	bl	8011310 <_InitOnce>
 801159c:	6c2f      	ldr	r7, [r5, #64]	; 0x40
 801159e:	682b      	ldr	r3, [r5, #0]
 80115a0:	42bc      	cmp	r4, r7
 80115a2:	bf24      	itt	cs
 80115a4:	1ce7      	addcs	r7, r4, #3
 80115a6:	f027 0703 	biccs.w	r7, r7, #3
 80115aa:	370c      	adds	r7, #12
 80115ac:	429f      	cmp	r7, r3
 80115ae:	4c32      	ldr	r4, [pc, #200]	; (8011678 <_Alloc+0xe8>)
 80115b0:	d83e      	bhi.n	8011630 <_Alloc+0xa0>
 80115b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80115b4:	6862      	ldr	r2, [r4, #4]
 80115b6:	429a      	cmp	r2, r3
 80115b8:	d90f      	bls.n	80115da <_Alloc+0x4a>
 80115ba:	686b      	ldr	r3, [r5, #4]
 80115bc:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 80115be:	3b01      	subs	r3, #1
 80115c0:	606b      	str	r3, [r5, #4]
 80115c2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80115c4:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 80115c8:	eb03 0209 	add.w	r2, r3, r9
 80115cc:	6852      	ldr	r2, [r2, #4]
 80115ce:	626a      	str	r2, [r5, #36]	; 0x24
 80115d0:	2201      	movs	r2, #1
 80115d2:	f803 2036 	strb.w	r2, [r3, r6, lsl #3]
 80115d6:	b956      	cbnz	r6, 80115ee <_Alloc+0x5e>
 80115d8:	e02a      	b.n	8011630 <_Alloc+0xa0>
 80115da:	3b01      	subs	r3, #1
 80115dc:	6323      	str	r3, [r4, #48]	; 0x30
 80115de:	f7ff fe4b 	bl	8011278 <_EnlargeBlocks>
 80115e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80115e4:	3301      	adds	r3, #1
 80115e6:	6323      	str	r3, [r4, #48]	; 0x30
 80115e8:	2800      	cmp	r0, #0
 80115ea:	d0e6      	beq.n	80115ba <_Alloc+0x2a>
 80115ec:	e020      	b.n	8011630 <_Alloc+0xa0>
 80115ee:	230f      	movs	r3, #15
 80115f0:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 80115f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80115f6:	4297      	cmp	r7, r2
 80115f8:	d20c      	bcs.n	8011614 <_Alloc+0x84>
 80115fa:	f113 33ff 	adds.w	r3, r3, #4294967295
 80115fe:	d2f7      	bcs.n	80115f0 <_Alloc+0x60>
 8011600:	e008      	b.n	8011614 <_Alloc+0x84>
 8011602:	6894      	ldr	r4, [r2, #8]
 8011604:	b12c      	cbz	r4, 8011612 <_Alloc+0x82>
 8011606:	6862      	ldr	r2, [r4, #4]
 8011608:	4297      	cmp	r7, r2
 801160a:	d914      	bls.n	8011636 <_Alloc+0xa6>
 801160c:	68a2      	ldr	r2, [r4, #8]
 801160e:	2a00      	cmp	r2, #0
 8011610:	d1f7      	bne.n	8011602 <_Alloc+0x72>
 8011612:	3301      	adds	r3, #1
 8011614:	2b0f      	cmp	r3, #15
 8011616:	d803      	bhi.n	8011620 <_Alloc+0x90>
 8011618:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801161c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 801161e:	e7f6      	b.n	801160e <_Alloc+0x7e>
 8011620:	4638      	mov	r0, r7
 8011622:	f7ff fd75 	bl	8011110 <_RemoveHoles>
 8011626:	2800      	cmp	r0, #0
 8011628:	d0e1      	beq.n	80115ee <_Alloc+0x5e>
 801162a:	4630      	mov	r0, r6
 801162c:	f7ff fcd2 	bl	8010fd4 <_PushFreeBlock>
 8011630:	2000      	movs	r0, #0
 8011632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011636:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801163a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 801163c:	ebc7 0208 	rsb	r2, r7, r8
 8011640:	330c      	adds	r3, #12
 8011642:	4620      	mov	r0, r4
 8011644:	429a      	cmp	r2, r3
 8011646:	bf38      	it	cc
 8011648:	4647      	movcc	r7, r8
 801164a:	f7ff fcf1 	bl	8011030 <_RemoveFreeBlock>
 801164e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011650:	444b      	add	r3, r9
 8011652:	19e1      	adds	r1, r4, r7
 8011654:	605c      	str	r4, [r3, #4]
 8011656:	45b8      	cmp	r8, r7
 8011658:	f04f 0300 	mov.w	r3, #0
 801165c:	e884 00c0 	stmia.w	r4, {r6, r7}
 8011660:	60a3      	str	r3, [r4, #8]
 8011662:	6124      	str	r4, [r4, #16]
 8011664:	f841 7c04 	str.w	r7, [r1, #-4]
 8011668:	dd03      	ble.n	8011672 <_Alloc+0xe2>
 801166a:	ebc7 0008 	rsb	r0, r7, r8
 801166e:	f7ff fcff 	bl	8011070 <_AddFreeMemory>
 8011672:	4630      	mov	r0, r6
 8011674:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011678:	2001b2d0 	.word	0x2001b2d0

0801167c <GUI_ALLOC_AllocNoInit>:
 801167c:	b108      	cbz	r0, 8011682 <GUI_ALLOC_AllocNoInit+0x6>
 801167e:	f7ff bf87 	b.w	8011590 <_Alloc>
 8011682:	4770      	bx	lr

08011684 <GUI_ALLOC_FreePtr>:
 8011684:	b510      	push	{r4, lr}
 8011686:	4604      	mov	r4, r0
 8011688:	6800      	ldr	r0, [r0, #0]
 801168a:	f7ff fddd 	bl	8011248 <GUI_ALLOC_Free>
 801168e:	2300      	movs	r3, #0
 8011690:	6023      	str	r3, [r4, #0]
 8011692:	bd10      	pop	{r4, pc}

08011694 <GUI_ALLOC_FreePtrArray>:
 8011694:	b570      	push	{r4, r5, r6, lr}
 8011696:	4605      	mov	r5, r0
 8011698:	460e      	mov	r6, r1
 801169a:	2400      	movs	r4, #0
 801169c:	42b4      	cmp	r4, r6
 801169e:	da05      	bge.n	80116ac <GUI_ALLOC_FreePtrArray+0x18>
 80116a0:	eb05 0084 	add.w	r0, r5, r4, lsl #2
 80116a4:	f7ff ffee 	bl	8011684 <GUI_ALLOC_FreePtr>
 80116a8:	3401      	adds	r4, #1
 80116aa:	e7f7      	b.n	801169c <GUI_ALLOC_FreePtrArray+0x8>
 80116ac:	bd70      	pop	{r4, r5, r6, pc}

080116ae <GUI_ALLOC_AllocZero>:
 80116ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80116b0:	4605      	mov	r5, r0
 80116b2:	f7ff ffe3 	bl	801167c <GUI_ALLOC_AllocNoInit>
 80116b6:	4606      	mov	r6, r0
 80116b8:	b158      	cbz	r0, 80116d2 <GUI_ALLOC_AllocZero+0x24>
 80116ba:	f7ff fd8b 	bl	80111d4 <GUI_ALLOC_LockH>
 80116be:	ac02      	add	r4, sp, #8
 80116c0:	2100      	movs	r1, #0
 80116c2:	f844 0d04 	str.w	r0, [r4, #-4]!
 80116c6:	462a      	mov	r2, r5
 80116c8:	f7fc fc98 	bl	800dffc <GUI__memset>
 80116cc:	4620      	mov	r0, r4
 80116ce:	f7ff fd8f 	bl	80111f0 <GUI_ALLOC_UnlockH>
 80116d2:	4630      	mov	r0, r6
 80116d4:	b002      	add	sp, #8
 80116d6:	bd70      	pop	{r4, r5, r6, pc}

080116d8 <LCD_Index2Color_M565>:
 80116d8:	f3c0 21c4 	ubfx	r1, r0, #11, #5
 80116dc:	4b06      	ldr	r3, [pc, #24]	; (80116f8 <LCD_Index2Color_M565+0x20>)
 80116de:	f000 021f 	and.w	r2, r0, #31
 80116e2:	f3c0 1045 	ubfx	r0, r0, #5, #6
 80116e6:	5c9a      	ldrb	r2, [r3, r2]
 80116e8:	5c5b      	ldrb	r3, [r3, r1]
 80116ea:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 80116ee:	4a03      	ldr	r2, [pc, #12]	; (80116fc <LCD_Index2Color_M565+0x24>)
 80116f0:	5c10      	ldrb	r0, [r2, r0]
 80116f2:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 80116f6:	4770      	bx	lr
 80116f8:	0801d31a 	.word	0x0801d31a
 80116fc:	0801d2da 	.word	0x0801d2da

08011700 <_Color2Index_M565>:
 8011700:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8011704:	4b06      	ldr	r3, [pc, #24]	; (8011720 <_Color2Index_M565+0x20>)
 8011706:	b2c2      	uxtb	r2, r0
 8011708:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801170c:	5c9a      	ldrb	r2, [r3, r2]
 801170e:	5c5b      	ldrb	r3, [r3, r1]
 8011710:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
 8011714:	4a03      	ldr	r2, [pc, #12]	; (8011724 <_Color2Index_M565+0x24>)
 8011716:	5c10      	ldrb	r0, [r2, r0]
 8011718:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 801171c:	4770      	bx	lr
 801171e:	bf00      	nop
 8011720:	0801d43a 	.word	0x0801d43a
 8011724:	0801d33a 	.word	0x0801d33a

08011728 <_GetIndexMask_M565>:
 8011728:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801172c:	4770      	bx	lr
	...

08011730 <_Color2IndexBulk>:
 8011730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011732:	4f0f      	ldr	r7, [pc, #60]	; (8011770 <_Color2IndexBulk+0x40>)
 8011734:	683f      	ldr	r7, [r7, #0]
 8011736:	4606      	mov	r6, r0
 8011738:	460d      	mov	r5, r1
 801173a:	4614      	mov	r4, r2
 801173c:	469c      	mov	ip, r3
 801173e:	b10f      	cbz	r7, 8011744 <_Color2IndexBulk+0x14>
 8011740:	47b8      	blx	r7
 8011742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011744:	f856 2b04 	ldr.w	r2, [r6], #4
 8011748:	490a      	ldr	r1, [pc, #40]	; (8011774 <_Color2IndexBulk+0x44>)
 801174a:	b2d3      	uxtb	r3, r2
 801174c:	3c01      	subs	r4, #1
 801174e:	5cc8      	ldrb	r0, [r1, r3]
 8011750:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8011754:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8011758:	5ccb      	ldrb	r3, [r1, r3]
 801175a:	4907      	ldr	r1, [pc, #28]	; (8011778 <_Color2IndexBulk+0x48>)
 801175c:	5c8a      	ldrb	r2, [r1, r2]
 801175e:	eb03 23c0 	add.w	r3, r3, r0, lsl #11
 8011762:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8011766:	802b      	strh	r3, [r5, #0]
 8011768:	4465      	add	r5, ip
 801176a:	d1eb      	bne.n	8011744 <_Color2IndexBulk+0x14>
 801176c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801176e:	bf00      	nop
 8011770:	20019684 	.word	0x20019684
 8011774:	0801d43a 	.word	0x0801d43a
 8011778:	0801d33a 	.word	0x0801d33a

0801177c <_Index2ColorBulk>:
 801177c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801177e:	4e13      	ldr	r6, [pc, #76]	; (80117cc <_Index2ColorBulk+0x50>)
 8011780:	6836      	ldr	r6, [r6, #0]
 8011782:	4684      	mov	ip, r0
 8011784:	4614      	mov	r4, r2
 8011786:	461d      	mov	r5, r3
 8011788:	b10e      	cbz	r6, 801178e <_Index2ColorBulk+0x12>
 801178a:	47b0      	blx	r6
 801178c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801178e:	1e50      	subs	r0, r2, #1
 8011790:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8011794:	3a01      	subs	r2, #1
 8011796:	fb03 c000 	mla	r0, r3, r0, ip
 801179a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801179e:	8802      	ldrh	r2, [r0, #0]
 80117a0:	4b0b      	ldr	r3, [pc, #44]	; (80117d0 <_Index2ColorBulk+0x54>)
 80117a2:	f002 061f 	and.w	r6, r2, #31
 80117a6:	0ad7      	lsrs	r7, r2, #11
 80117a8:	5d9e      	ldrb	r6, [r3, r6]
 80117aa:	5ddb      	ldrb	r3, [r3, r7]
 80117ac:	f3c2 1245 	ubfx	r2, r2, #5, #6
 80117b0:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 80117b4:	4e07      	ldr	r6, [pc, #28]	; (80117d4 <_Index2ColorBulk+0x58>)
 80117b6:	5cb2      	ldrb	r2, [r6, r2]
 80117b8:	3c01      	subs	r4, #1
 80117ba:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80117be:	f841 3904 	str.w	r3, [r1], #-4
 80117c2:	ebc5 0000 	rsb	r0, r5, r0
 80117c6:	d1ea      	bne.n	801179e <_Index2ColorBulk+0x22>
 80117c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80117ca:	bf00      	nop
 80117cc:	20019680 	.word	0x20019680
 80117d0:	0801d31a 	.word	0x0801d31a
 80117d4:	0801d2da 	.word	0x0801d2da

080117d8 <LCD_Index2Color_M555>:
 80117d8:	4b07      	ldr	r3, [pc, #28]	; (80117f8 <LCD_Index2Color_M555+0x20>)
 80117da:	f000 021f 	and.w	r2, r0, #31
 80117de:	5c99      	ldrb	r1, [r3, r2]
 80117e0:	f3c0 2284 	ubfx	r2, r0, #10, #5
 80117e4:	f3c0 1044 	ubfx	r0, r0, #5, #5
 80117e8:	5c9a      	ldrb	r2, [r3, r2]
 80117ea:	5c18      	ldrb	r0, [r3, r0]
 80117ec:	eb02 4201 	add.w	r2, r2, r1, lsl #16
 80117f0:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 80117f4:	4770      	bx	lr
 80117f6:	bf00      	nop
 80117f8:	0801d31a 	.word	0x0801d31a

080117fc <LCD_Index2Color_888>:
 80117fc:	4770      	bx	lr

080117fe <LCD_Index2Color_8888>:
 80117fe:	4770      	bx	lr

08011800 <_Color2Index_8888>:
 8011800:	4770      	bx	lr

08011802 <_GetIndexMask_8888>:
 8011802:	f04f 30ff 	mov.w	r0, #4294967295
 8011806:	4770      	bx	lr

08011808 <_Color2IndexBulk>:
 8011808:	b510      	push	{r4, lr}
 801180a:	f850 4b04 	ldr.w	r4, [r0], #4
 801180e:	600c      	str	r4, [r1, #0]
 8011810:	3a01      	subs	r2, #1
 8011812:	4419      	add	r1, r3
 8011814:	d1f9      	bne.n	801180a <_Color2IndexBulk+0x2>
 8011816:	bd10      	pop	{r4, pc}

08011818 <_Index2ColorBulk>:
 8011818:	b510      	push	{r4, lr}
 801181a:	6804      	ldr	r4, [r0, #0]
 801181c:	f841 4b04 	str.w	r4, [r1], #4
 8011820:	3a01      	subs	r2, #1
 8011822:	4418      	add	r0, r3
 8011824:	d1f9      	bne.n	801181a <_Index2ColorBulk+0x2>
 8011826:	bd10      	pop	{r4, pc}

08011828 <WIDGET__FillStringInRect>:
 8011828:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801182c:	461e      	mov	r6, r3
 801182e:	4b3f      	ldr	r3, [pc, #252]	; (801192c <WIDGET__FillStringInRect+0x104>)
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	4690      	mov	r8, r2
 8011834:	695a      	ldr	r2, [r3, #20]
 8011836:	4607      	mov	r7, r0
 8011838:	460c      	mov	r4, r1
 801183a:	b90a      	cbnz	r2, 8011840 <WIDGET__FillStringInRect+0x18>
 801183c:	bb1f      	cbnz	r7, 8011886 <WIDGET__FillStringInRect+0x5e>
 801183e:	e06f      	b.n	8011920 <WIDGET__FillStringInRect+0xf8>
 8011840:	6808      	ldr	r0, [r1, #0]
 8011842:	6849      	ldr	r1, [r1, #4]
 8011844:	466d      	mov	r5, sp
 8011846:	c503      	stmia	r5!, {r0, r1}
 8011848:	f8b3 104c 	ldrh.w	r1, [r3, #76]	; 0x4c
 801184c:	f8bd 0000 	ldrh.w	r0, [sp]
 8011850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011854:	4408      	add	r0, r1
 8011856:	f8ad 0000 	strh.w	r0, [sp]
 801185a:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 801185e:	4418      	add	r0, r3
 8011860:	f8ad 0002 	strh.w	r0, [sp, #2]
 8011864:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8011868:	4401      	add	r1, r0
 801186a:	f8ad 1004 	strh.w	r1, [sp, #4]
 801186e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8011872:	4610      	mov	r0, r2
 8011874:	440b      	add	r3, r1
 8011876:	4669      	mov	r1, sp
 8011878:	f8ad 3006 	strh.w	r3, [sp, #6]
 801187c:	f7fd fd3e 	bl	800f2fc <GUI_RectsIntersect>
 8011880:	2800      	cmp	r0, #0
 8011882:	d050      	beq.n	8011926 <WIDGET__FillStringInRect+0xfe>
 8011884:	e7da      	b.n	801183c <WIDGET__FillStringInRect+0x14>
 8011886:	783b      	ldrb	r3, [r7, #0]
 8011888:	2b00      	cmp	r3, #0
 801188a:	d049      	beq.n	8011920 <WIDGET__FillStringInRect+0xf8>
 801188c:	f002 fed2 	bl	8014634 <GUI_GetBkColor>
 8011890:	0e00      	lsrs	r0, r0, #24
 8011892:	d003      	beq.n	801189c <WIDGET__FillStringInRect+0x74>
 8011894:	2002      	movs	r0, #2
 8011896:	f7fd fc9b 	bl	800f1d0 <GUI_SetTextMode>
 801189a:	e032      	b.n	8011902 <WIDGET__FillStringInRect+0xda>
 801189c:	f7fd fc98 	bl	800f1d0 <GUI_SetTextMode>
 80118a0:	4641      	mov	r1, r8
 80118a2:	4632      	mov	r2, r6
 80118a4:	a802      	add	r0, sp, #8
 80118a6:	f7fc fc99 	bl	800e1dc <GUI__IntersectRects>
 80118aa:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80118ae:	f9b4 0000 	ldrsh.w	r0, [r4]
 80118b2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80118b6:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80118ba:	3b01      	subs	r3, #1
 80118bc:	f7fe f96c 	bl	800fb98 <GUI_ClearRect>
 80118c0:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80118c4:	f9b4 0000 	ldrsh.w	r0, [r4]
 80118c8:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 80118cc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80118d0:	3a01      	subs	r2, #1
 80118d2:	f7fe f961 	bl	800fb98 <GUI_ClearRect>
 80118d6:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 80118da:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 80118de:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80118e2:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80118e6:	3001      	adds	r0, #1
 80118e8:	f7fe f956 	bl	800fb98 <GUI_ClearRect>
 80118ec:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
 80118f0:	f9b4 0000 	ldrsh.w	r0, [r4]
 80118f4:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80118f8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80118fc:	3101      	adds	r1, #1
 80118fe:	f7fe f94b 	bl	800fb98 <GUI_ClearRect>
 8011902:	4640      	mov	r0, r8
 8011904:	f7f7 ffc8 	bl	8009898 <WM_SetUserClipRect>
 8011908:	f9b6 1000 	ldrsh.w	r1, [r6]
 801190c:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
 8011910:	4604      	mov	r4, r0
 8011912:	4638      	mov	r0, r7
 8011914:	f7fd ffbc 	bl	800f890 <GUI_DispStringAt>
 8011918:	4620      	mov	r0, r4
 801191a:	f7f7 ffbd 	bl	8009898 <WM_SetUserClipRect>
 801191e:	e002      	b.n	8011926 <WIDGET__FillStringInRect+0xfe>
 8011920:	4620      	mov	r0, r4
 8011922:	f003 f8bb 	bl	8014a9c <GUI_ClearRectEx>
 8011926:	b004      	add	sp, #16
 8011928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801192c:	20000238 	.word	0x20000238

08011930 <_DrawDownRect>:
 8011930:	b510      	push	{r4, lr}
 8011932:	b09c      	sub	sp, #112	; 0x70
 8011934:	4604      	mov	r4, r0
 8011936:	4668      	mov	r0, sp
 8011938:	f7fd fccc 	bl	800f2d4 <GUI_SaveContext_W>
 801193c:	4b09      	ldr	r3, [pc, #36]	; (8011964 <_DrawDownRect+0x34>)
 801193e:	6818      	ldr	r0, [r3, #0]
 8011940:	f7fc fb26 	bl	800df90 <LCD_SetColor>
 8011944:	f9b4 0000 	ldrsh.w	r0, [r4]
 8011948:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801194c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8011950:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8011954:	f003 f8ae 	bl	8014ab4 <GUI_DrawRect>
 8011958:	4668      	mov	r0, sp
 801195a:	f7fd fcc5 	bl	800f2e8 <GUI_RestoreContext>
 801195e:	b01c      	add	sp, #112	; 0x70
 8011960:	bd10      	pop	{r4, pc}
 8011962:	bf00      	nop
 8011964:	20019688 	.word	0x20019688

08011968 <_DrawUpRect>:
 8011968:	b510      	push	{r4, lr}
 801196a:	b09c      	sub	sp, #112	; 0x70
 801196c:	4604      	mov	r4, r0
 801196e:	4668      	mov	r0, sp
 8011970:	f7fd fcb0 	bl	800f2d4 <GUI_SaveContext_W>
 8011974:	4b09      	ldr	r3, [pc, #36]	; (801199c <_DrawUpRect+0x34>)
 8011976:	6818      	ldr	r0, [r3, #0]
 8011978:	f7fc fb0a 	bl	800df90 <LCD_SetColor>
 801197c:	f9b4 0000 	ldrsh.w	r0, [r4]
 8011980:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8011984:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8011988:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801198c:	f003 f892 	bl	8014ab4 <GUI_DrawRect>
 8011990:	4668      	mov	r0, sp
 8011992:	f7fd fca9 	bl	800f2e8 <GUI_RestoreContext>
 8011996:	b01c      	add	sp, #112	; 0x70
 8011998:	bd10      	pop	{r4, pc}
 801199a:	bf00      	nop
 801199c:	20019688 	.word	0x20019688

080119a0 <_DrawDown>:
 80119a0:	b507      	push	{r0, r1, r2, lr}
 80119a2:	4668      	mov	r0, sp
 80119a4:	f7f8 fa9c 	bl	8009ee0 <WM_GetClientRect>
 80119a8:	4668      	mov	r0, sp
 80119aa:	f7ff ffc1 	bl	8011930 <_DrawDownRect>
 80119ae:	b003      	add	sp, #12
 80119b0:	f85d fb04 	ldr.w	pc, [sp], #4

080119b4 <_DrawUp>:
 80119b4:	b507      	push	{r0, r1, r2, lr}
 80119b6:	4668      	mov	r0, sp
 80119b8:	f7f8 fa92 	bl	8009ee0 <WM_GetClientRect>
 80119bc:	4668      	mov	r0, sp
 80119be:	f7ff ffd3 	bl	8011968 <_DrawUpRect>
 80119c2:	b003      	add	sp, #12
 80119c4:	f85d fb04 	ldr.w	pc, [sp], #4

080119c8 <BUTTON_DrawSkinFlex>:
 80119c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119cc:	6883      	ldr	r3, [r0, #8]
 80119ce:	4a8a      	ldr	r2, [pc, #552]	; (8011bf8 <BUTTON_DrawSkinFlex+0x230>)
 80119d0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80119d4:	6843      	ldr	r3, [r0, #4]
 80119d6:	2b05      	cmp	r3, #5
 80119d8:	b088      	sub	sp, #32
 80119da:	4604      	mov	r4, r0
 80119dc:	d00e      	beq.n	80119fc <BUTTON_DrawSkinFlex+0x34>
 80119de:	dc06      	bgt.n	80119ee <BUTTON_DrawSkinFlex+0x26>
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	f040 8104 	bne.w	8011bee <BUTTON_DrawSkinFlex+0x226>
 80119e6:	6800      	ldr	r0, [r0, #0]
 80119e8:	f7f7 ff62 	bl	80098b0 <WM_SetHasTrans>
 80119ec:	e0ff      	b.n	8011bee <BUTTON_DrawSkinFlex+0x226>
 80119ee:	2b06      	cmp	r3, #6
 80119f0:	f000 8088 	beq.w	8011b04 <BUTTON_DrawSkinFlex+0x13c>
 80119f4:	2b12      	cmp	r3, #18
 80119f6:	f000 80a9 	beq.w	8011b4c <BUTTON_DrawSkinFlex+0x184>
 80119fa:	e0f8      	b.n	8011bee <BUTTON_DrawSkinFlex+0x226>
 80119fc:	69ee      	ldr	r6, [r5, #28]
 80119fe:	2e00      	cmp	r6, #0
 8011a00:	d051      	beq.n	8011aa6 <BUTTON_DrawSkinFlex+0xde>
 8011a02:	9600      	str	r6, [sp, #0]
 8011a04:	682b      	ldr	r3, [r5, #0]
 8011a06:	9301      	str	r3, [sp, #4]
 8011a08:	686b      	ldr	r3, [r5, #4]
 8011a0a:	9302      	str	r3, [sp, #8]
 8011a0c:	68ab      	ldr	r3, [r5, #8]
 8011a0e:	9303      	str	r3, [sp, #12]
 8011a10:	3010      	adds	r0, #16
 8011a12:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8011a14:	f002 fb50 	bl	80140b8 <GUI__DrawTwinArc4>
 8011a18:	2600      	movs	r6, #0
 8011a1a:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 8011a1e:	f7fd fc0f 	bl	800f240 <GUI_SetColor>
 8011a22:	69eb      	ldr	r3, [r5, #28]
 8011a24:	6960      	ldr	r0, [r4, #20]
 8011a26:	6921      	ldr	r1, [r4, #16]
 8011a28:	69a2      	ldr	r2, [r4, #24]
 8011a2a:	4430      	add	r0, r6
 8011a2c:	4419      	add	r1, r3
 8011a2e:	1ad2      	subs	r2, r2, r3
 8011a30:	f7fd fe5c 	bl	800f6ec <GUI_DrawHLine>
 8011a34:	69eb      	ldr	r3, [r5, #28]
 8011a36:	69e0      	ldr	r0, [r4, #28]
 8011a38:	6921      	ldr	r1, [r4, #16]
 8011a3a:	69a2      	ldr	r2, [r4, #24]
 8011a3c:	1b80      	subs	r0, r0, r6
 8011a3e:	4419      	add	r1, r3
 8011a40:	1ad2      	subs	r2, r2, r3
 8011a42:	f7fd fe53 	bl	800f6ec <GUI_DrawHLine>
 8011a46:	69eb      	ldr	r3, [r5, #28]
 8011a48:	6920      	ldr	r0, [r4, #16]
 8011a4a:	6961      	ldr	r1, [r4, #20]
 8011a4c:	69e2      	ldr	r2, [r4, #28]
 8011a4e:	4430      	add	r0, r6
 8011a50:	4419      	add	r1, r3
 8011a52:	1ad2      	subs	r2, r2, r3
 8011a54:	f7fd fe28 	bl	800f6a8 <GUI_DrawVLine>
 8011a58:	69eb      	ldr	r3, [r5, #28]
 8011a5a:	69a0      	ldr	r0, [r4, #24]
 8011a5c:	6961      	ldr	r1, [r4, #20]
 8011a5e:	69e2      	ldr	r2, [r4, #28]
 8011a60:	1b80      	subs	r0, r0, r6
 8011a62:	4419      	add	r1, r3
 8011a64:	1ad2      	subs	r2, r2, r3
 8011a66:	3601      	adds	r6, #1
 8011a68:	f7fd fe1e 	bl	800f6a8 <GUI_DrawVLine>
 8011a6c:	2e02      	cmp	r6, #2
 8011a6e:	d1d4      	bne.n	8011a1a <BUTTON_DrawSkinFlex+0x52>
 8011a70:	68a8      	ldr	r0, [r5, #8]
 8011a72:	f7fd fbe5 	bl	800f240 <GUI_SetColor>
 8011a76:	69eb      	ldr	r3, [r5, #28]
 8011a78:	6920      	ldr	r0, [r4, #16]
 8011a7a:	69e6      	ldr	r6, [r4, #28]
 8011a7c:	6961      	ldr	r1, [r4, #20]
 8011a7e:	18c2      	adds	r2, r0, r3
 8011a80:	4419      	add	r1, r3
 8011a82:	3002      	adds	r0, #2
 8011a84:	1af3      	subs	r3, r6, r3
 8011a86:	3a01      	subs	r2, #1
 8011a88:	f7fd fdc8 	bl	800f61c <GUI_FillRect>
 8011a8c:	69eb      	ldr	r3, [r5, #28]
 8011a8e:	69a2      	ldr	r2, [r4, #24]
 8011a90:	69e6      	ldr	r6, [r4, #28]
 8011a92:	6961      	ldr	r1, [r4, #20]
 8011a94:	1ad0      	subs	r0, r2, r3
 8011a96:	4419      	add	r1, r3
 8011a98:	3001      	adds	r0, #1
 8011a9a:	1af3      	subs	r3, r6, r3
 8011a9c:	3a02      	subs	r2, #2
 8011a9e:	f7fd fdbd 	bl	800f61c <GUI_FillRect>
 8011aa2:	69ee      	ldr	r6, [r5, #28]
 8011aa4:	e00f      	b.n	8011ac6 <BUTTON_DrawSkinFlex+0xfe>
 8011aa6:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 8011aaa:	f7fd fbc9 	bl	800f240 <GUI_SetColor>
 8011aae:	f104 0010 	add.w	r0, r4, #16
 8011ab2:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8011ab4:	4430      	add	r0, r6
 8011ab6:	4431      	add	r1, r6
 8011ab8:	1b92      	subs	r2, r2, r6
 8011aba:	1b9b      	subs	r3, r3, r6
 8011abc:	3601      	adds	r6, #1
 8011abe:	f002 fff9 	bl	8014ab4 <GUI_DrawRect>
 8011ac2:	2e02      	cmp	r6, #2
 8011ac4:	d1ef      	bne.n	8011aa6 <BUTTON_DrawSkinFlex+0xde>
 8011ac6:	f104 0010 	add.w	r0, r4, #16
 8011aca:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8011acc:	68ef      	ldr	r7, [r5, #12]
 8011ace:	9700      	str	r7, [sp, #0]
 8011ad0:	692f      	ldr	r7, [r5, #16]
 8011ad2:	9701      	str	r7, [sp, #4]
 8011ad4:	440b      	add	r3, r1
 8011ad6:	4430      	add	r0, r6
 8011ad8:	1b92      	subs	r2, r2, r6
 8011ada:	3102      	adds	r1, #2
 8011adc:	105b      	asrs	r3, r3, #1
 8011ade:	f002 fea9 	bl	8014834 <GUI_DrawGradientV>
 8011ae2:	69e3      	ldr	r3, [r4, #28]
 8011ae4:	6962      	ldr	r2, [r4, #20]
 8011ae6:	6920      	ldr	r0, [r4, #16]
 8011ae8:	441a      	add	r2, r3
 8011aea:	1051      	asrs	r1, r2, #1
 8011aec:	69a2      	ldr	r2, [r4, #24]
 8011aee:	696c      	ldr	r4, [r5, #20]
 8011af0:	9400      	str	r4, [sp, #0]
 8011af2:	69ac      	ldr	r4, [r5, #24]
 8011af4:	9401      	str	r4, [sp, #4]
 8011af6:	4430      	add	r0, r6
 8011af8:	3101      	adds	r1, #1
 8011afa:	1b92      	subs	r2, r2, r6
 8011afc:	3b02      	subs	r3, #2
 8011afe:	f002 fe99 	bl	8014834 <GUI_DrawGradientV>
 8011b02:	e074      	b.n	8011bee <BUTTON_DrawSkinFlex+0x226>
 8011b04:	6800      	ldr	r0, [r0, #0]
 8011b06:	f7ff fb65 	bl	80111d4 <GUI_ALLOC_LockH>
 8011b0a:	9004      	str	r0, [sp, #16]
 8011b0c:	6820      	ldr	r0, [r4, #0]
 8011b0e:	f7f7 fe2d 	bl	800976c <WM__IsEnabled>
 8011b12:	9b04      	ldr	r3, [sp, #16]
 8011b14:	b130      	cbz	r0, 8011b24 <BUTTON_DrawSkinFlex+0x15c>
 8011b16:	68a2      	ldr	r2, [r4, #8]
 8011b18:	b952      	cbnz	r2, 8011b30 <BUTTON_DrawSkinFlex+0x168>
 8011b1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011b1c:	3200      	adds	r2, #0
 8011b1e:	bf18      	it	ne
 8011b20:	2201      	movne	r2, #1
 8011b22:	e006      	b.n	8011b32 <BUTTON_DrawSkinFlex+0x16a>
 8011b24:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8011b26:	2a00      	cmp	r2, #0
 8011b28:	bf0c      	ite	eq
 8011b2a:	2200      	moveq	r2, #0
 8011b2c:	2202      	movne	r2, #2
 8011b2e:	e000      	b.n	8011b32 <BUTTON_DrawSkinFlex+0x16a>
 8011b30:	2200      	movs	r2, #0
 8011b32:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8011b36:	a804      	add	r0, sp, #16
 8011b38:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8011b3a:	f7ff fb59 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8011b3e:	2200      	movs	r2, #0
 8011b40:	4628      	mov	r0, r5
 8011b42:	6821      	ldr	r1, [r4, #0]
 8011b44:	4613      	mov	r3, r2
 8011b46:	f003 f85c 	bl	8014c02 <GUI_DRAW__Draw>
 8011b4a:	e050      	b.n	8011bee <BUTTON_DrawSkinFlex+0x226>
 8011b4c:	6800      	ldr	r0, [r0, #0]
 8011b4e:	f7ff fb41 	bl	80111d4 <GUI_ALLOC_LockH>
 8011b52:	ae08      	add	r6, sp, #32
 8011b54:	6e87      	ldr	r7, [r0, #104]	; 0x68
 8011b56:	f846 0d10 	str.w	r0, [r6, #-16]!
 8011b5a:	2f00      	cmp	r7, #0
 8011b5c:	d044      	beq.n	8011be8 <BUTTON_DrawSkinFlex+0x220>
 8011b5e:	68a2      	ldr	r2, [r4, #8]
 8011b60:	f9b0 805c 	ldrsh.w	r8, [r0, #92]	; 0x5c
 8011b64:	b122      	cbz	r2, 8011b70 <BUTTON_DrawSkinFlex+0x1a8>
 8011b66:	2a03      	cmp	r2, #3
 8011b68:	bf14      	ite	ne
 8011b6a:	2100      	movne	r1, #0
 8011b6c:	2102      	moveq	r1, #2
 8011b6e:	e000      	b.n	8011b72 <BUTTON_DrawSkinFlex+0x1aa>
 8011b70:	2101      	movs	r1, #1
 8011b72:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011b76:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8011b78:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 8011b7a:	f7fd fb33 	bl	800f1e4 <GUI_SetFont>
 8011b7e:	4620      	mov	r0, r4
 8011b80:	f7fd fb5e 	bl	800f240 <GUI_SetColor>
 8011b84:	a806      	add	r0, sp, #24
 8011b86:	f002 fd63 	bl	8014650 <GUI_GetClientRect>
 8011b8a:	8bab      	ldrh	r3, [r5, #28]
 8011b8c:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8011b90:	441a      	add	r2, r3
 8011b92:	f8ad 2018 	strh.w	r2, [sp, #24]
 8011b96:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8011b9a:	1ad3      	subs	r3, r2, r3
 8011b9c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011ba0:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8011ba4:	3302      	adds	r3, #2
 8011ba6:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011baa:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8011bae:	3b02      	subs	r3, #2
 8011bb0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8011bb4:	9b04      	ldr	r3, [sp, #16]
 8011bb6:	a806      	add	r0, sp, #24
 8011bb8:	f9b3 105e 	ldrsh.w	r1, [r3, #94]	; 0x5e
 8011bbc:	f9b3 2060 	ldrsh.w	r2, [r3, #96]	; 0x60
 8011bc0:	f7fd fca0 	bl	800f504 <GUI_MoveRect>
 8011bc4:	4630      	mov	r0, r6
 8011bc6:	f7ff fb13 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8011bca:	2002      	movs	r0, #2
 8011bcc:	f7fd fb00 	bl	800f1d0 <GUI_SetTextMode>
 8011bd0:	4638      	mov	r0, r7
 8011bd2:	f7ff faff 	bl	80111d4 <GUI_ALLOC_LockH>
 8011bd6:	ac08      	add	r4, sp, #32
 8011bd8:	a906      	add	r1, sp, #24
 8011bda:	f844 0d0c 	str.w	r0, [r4, #-12]!
 8011bde:	4642      	mov	r2, r8
 8011be0:	f002 ff23 	bl	8014a2a <GUI_DispStringInRect>
 8011be4:	4620      	mov	r0, r4
 8011be6:	e000      	b.n	8011bea <BUTTON_DrawSkinFlex+0x222>
 8011be8:	4630      	mov	r0, r6
 8011bea:	f7ff fb01 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8011bee:	2000      	movs	r0, #0
 8011bf0:	b008      	add	sp, #32
 8011bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bf6:	bf00      	nop
 8011bf8:	0801a7fc 	.word	0x0801a7fc

08011bfc <_Create>:
 8011bfc:	b530      	push	{r4, r5, lr}
 8011bfe:	b08b      	sub	sp, #44	; 0x2c
 8011c00:	2100      	movs	r1, #0
 8011c02:	4604      	mov	r4, r0
 8011c04:	2224      	movs	r2, #36	; 0x24
 8011c06:	a801      	add	r0, sp, #4
 8011c08:	f003 fd47 	bl	801569a <memset>
 8011c0c:	4620      	mov	r0, r4
 8011c0e:	f7ff fae1 	bl	80111d4 <GUI_ALLOC_LockH>
 8011c12:	ab0a      	add	r3, sp, #40	; 0x28
 8011c14:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8011c16:	f843 0d28 	str.w	r0, [r3, #-40]!
 8011c1a:	6895      	ldr	r5, [r2, #8]
 8011c1c:	4668      	mov	r0, sp
 8011c1e:	f7ff fae7 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8011c22:	2300      	movs	r3, #0
 8011c24:	9302      	str	r3, [sp, #8]
 8011c26:	9401      	str	r4, [sp, #4]
 8011c28:	682b      	ldr	r3, [r5, #0]
 8011c2a:	a801      	add	r0, sp, #4
 8011c2c:	4798      	blx	r3
 8011c2e:	b00b      	add	sp, #44	; 0x2c
 8011c30:	bd30      	pop	{r4, r5, pc}

08011c32 <_Paint>:
 8011c32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c36:	b08a      	sub	sp, #40	; 0x28
 8011c38:	4605      	mov	r5, r0
 8011c3a:	f7ff facb 	bl	80111d4 <GUI_ALLOC_LockH>
 8011c3e:	4603      	mov	r3, r0
 8011c40:	a80a      	add	r0, sp, #40	; 0x28
 8011c42:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 8011c44:	f840 3d28 	str.w	r3, [r0, #-40]!
 8011c48:	4668      	mov	r0, sp
 8011c4a:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 8011c4c:	8e5f      	ldrh	r7, [r3, #50]	; 0x32
 8011c4e:	f7ff facf 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8011c52:	4628      	mov	r0, r5
 8011c54:	f7f8 f8a0 	bl	8009d98 <WM_GetWindowSizeX>
 8011c58:	4680      	mov	r8, r0
 8011c5a:	4628      	mov	r0, r5
 8011c5c:	f7f8 f8b1 	bl	8009dc2 <WM_GetWindowSizeY>
 8011c60:	2300      	movs	r3, #0
 8011c62:	9306      	str	r3, [sp, #24]
 8011c64:	9305      	str	r3, [sp, #20]
 8011c66:	3801      	subs	r0, #1
 8011c68:	f108 33ff 	add.w	r3, r8, #4294967295
 8011c6c:	f016 0610 	ands.w	r6, r6, #16
 8011c70:	9501      	str	r5, [sp, #4]
 8011c72:	9307      	str	r3, [sp, #28]
 8011c74:	9008      	str	r0, [sp, #32]
 8011c76:	d001      	beq.n	8011c7c <_Paint+0x4a>
 8011c78:	2303      	movs	r3, #3
 8011c7a:	e007      	b.n	8011c8c <_Paint+0x5a>
 8011c7c:	05fa      	lsls	r2, r7, #23
 8011c7e:	d501      	bpl.n	8011c84 <_Paint+0x52>
 8011c80:	9603      	str	r6, [sp, #12]
 8011c82:	e004      	b.n	8011c8e <_Paint+0x5c>
 8011c84:	07fb      	lsls	r3, r7, #31
 8011c86:	bf4c      	ite	mi
 8011c88:	2301      	movmi	r3, #1
 8011c8a:	2302      	movpl	r3, #2
 8011c8c:	9303      	str	r3, [sp, #12]
 8011c8e:	2305      	movs	r3, #5
 8011c90:	9302      	str	r3, [sp, #8]
 8011c92:	a801      	add	r0, sp, #4
 8011c94:	47a0      	blx	r4
 8011c96:	2306      	movs	r3, #6
 8011c98:	9302      	str	r3, [sp, #8]
 8011c9a:	a801      	add	r0, sp, #4
 8011c9c:	47a0      	blx	r4
 8011c9e:	2312      	movs	r3, #18
 8011ca0:	9302      	str	r3, [sp, #8]
 8011ca2:	a801      	add	r0, sp, #4
 8011ca4:	47a0      	blx	r4
 8011ca6:	230a      	movs	r3, #10
 8011ca8:	9302      	str	r3, [sp, #8]
 8011caa:	a801      	add	r0, sp, #4
 8011cac:	47a0      	blx	r4
 8011cae:	b00a      	add	sp, #40	; 0x28
 8011cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011cb4 <WM__SendMessageNoPara>:
 8011cb4:	b530      	push	{r4, r5, lr}
 8011cb6:	b085      	sub	sp, #20
 8011cb8:	4604      	mov	r4, r0
 8011cba:	2210      	movs	r2, #16
 8011cbc:	460d      	mov	r5, r1
 8011cbe:	4668      	mov	r0, sp
 8011cc0:	2100      	movs	r1, #0
 8011cc2:	f003 fcea 	bl	801569a <memset>
 8011cc6:	4620      	mov	r0, r4
 8011cc8:	f7ff fa7a 	bl	80111c0 <GUI_ALLOC_h2p>
 8011ccc:	6903      	ldr	r3, [r0, #16]
 8011cce:	b11b      	cbz	r3, 8011cd8 <WM__SendMessageNoPara+0x24>
 8011cd0:	9401      	str	r4, [sp, #4]
 8011cd2:	9500      	str	r5, [sp, #0]
 8011cd4:	4668      	mov	r0, sp
 8011cd6:	4798      	blx	r3
 8011cd8:	b005      	add	sp, #20
 8011cda:	bd30      	pop	{r4, r5, pc}

08011cdc <WM__SendMessage>:
 8011cdc:	b570      	push	{r4, r5, r6, lr}
 8011cde:	4c0d      	ldr	r4, [pc, #52]	; (8011d14 <WM__SendMessage+0x38>)
 8011ce0:	6823      	ldr	r3, [r4, #0]
 8011ce2:	2b13      	cmp	r3, #19
 8011ce4:	4606      	mov	r6, r0
 8011ce6:	460d      	mov	r5, r1
 8011ce8:	dc12      	bgt.n	8011d10 <WM__SendMessage+0x34>
 8011cea:	f7ff fa69 	bl	80111c0 <GUI_ALLOC_h2p>
 8011cee:	6903      	ldr	r3, [r0, #16]
 8011cf0:	606e      	str	r6, [r5, #4]
 8011cf2:	b143      	cbz	r3, 8011d06 <WM__SendMessage+0x2a>
 8011cf4:	6822      	ldr	r2, [r4, #0]
 8011cf6:	4628      	mov	r0, r5
 8011cf8:	3201      	adds	r2, #1
 8011cfa:	6022      	str	r2, [r4, #0]
 8011cfc:	4798      	blx	r3
 8011cfe:	6823      	ldr	r3, [r4, #0]
 8011d00:	3b01      	subs	r3, #1
 8011d02:	6023      	str	r3, [r4, #0]
 8011d04:	bd70      	pop	{r4, r5, r6, pc}
 8011d06:	4628      	mov	r0, r5
 8011d08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011d0c:	f7f9 b9f2 	b.w	800b0f4 <WM_DefaultProc>
 8011d10:	bd70      	pop	{r4, r5, r6, pc}
 8011d12:	bf00      	nop
 8011d14:	2001968c 	.word	0x2001968c

08011d18 <WM__GetPrevSibling>:
 8011d18:	b538      	push	{r3, r4, r5, lr}
 8011d1a:	4605      	mov	r5, r0
 8011d1c:	f000 f82e 	bl	8011d7c <WM__GetFirstSibling>
 8011d20:	4604      	mov	r4, r0
 8011d22:	b154      	cbz	r4, 8011d3a <WM__GetPrevSibling+0x22>
 8011d24:	42ac      	cmp	r4, r5
 8011d26:	d007      	beq.n	8011d38 <WM__GetPrevSibling+0x20>
 8011d28:	4620      	mov	r0, r4
 8011d2a:	f7ff fa49 	bl	80111c0 <GUI_ALLOC_h2p>
 8011d2e:	6a03      	ldr	r3, [r0, #32]
 8011d30:	42ab      	cmp	r3, r5
 8011d32:	d002      	beq.n	8011d3a <WM__GetPrevSibling+0x22>
 8011d34:	461c      	mov	r4, r3
 8011d36:	e7f4      	b.n	8011d22 <WM__GetPrevSibling+0xa>
 8011d38:	2400      	movs	r4, #0
 8011d3a:	4620      	mov	r0, r4
 8011d3c:	bd38      	pop	{r3, r4, r5, pc}

08011d3e <WM__GetLastSibling>:
 8011d3e:	b510      	push	{r4, lr}
 8011d40:	4604      	mov	r4, r0
 8011d42:	b130      	cbz	r0, 8011d52 <WM__GetLastSibling+0x14>
 8011d44:	4620      	mov	r0, r4
 8011d46:	f7ff fa3b 	bl	80111c0 <GUI_ALLOC_h2p>
 8011d4a:	6a03      	ldr	r3, [r0, #32]
 8011d4c:	b10b      	cbz	r3, 8011d52 <WM__GetLastSibling+0x14>
 8011d4e:	461c      	mov	r4, r3
 8011d50:	e7f8      	b.n	8011d44 <WM__GetLastSibling+0x6>
 8011d52:	4620      	mov	r0, r4
 8011d54:	bd10      	pop	{r4, pc}
	...

08011d58 <WM__GetFocussedChild>:
 8011d58:	b538      	push	{r3, r4, r5, lr}
 8011d5a:	4d06      	ldr	r5, [pc, #24]	; (8011d74 <WM__GetFocussedChild+0x1c>)
 8011d5c:	4c06      	ldr	r4, [pc, #24]	; (8011d78 <WM__GetFocussedChild+0x20>)
 8011d5e:	682b      	ldr	r3, [r5, #0]
 8011d60:	4601      	mov	r1, r0
 8011d62:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8011d66:	f002 ff72 	bl	8014c4e <WM__IsChild>
 8011d6a:	b110      	cbz	r0, 8011d72 <WM__GetFocussedChild+0x1a>
 8011d6c:	682b      	ldr	r3, [r5, #0]
 8011d6e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8011d72:	bd38      	pop	{r3, r4, r5, pc}
 8011d74:	2001b248 	.word	0x2001b248
 8011d78:	2001b238 	.word	0x2001b238

08011d7c <WM__GetFirstSibling>:
 8011d7c:	b508      	push	{r3, lr}
 8011d7e:	f7f8 f835 	bl	8009dec <WM_GetParent>
 8011d82:	b118      	cbz	r0, 8011d8c <WM__GetFirstSibling+0x10>
 8011d84:	f7ff fa1c 	bl	80111c0 <GUI_ALLOC_h2p>
 8011d88:	69c0      	ldr	r0, [r0, #28]
 8011d8a:	bd08      	pop	{r3, pc}
 8011d8c:	bd08      	pop	{r3, pc}
	...

08011d90 <WM_ValidateWindow>:
 8011d90:	b507      	push	{r0, r1, r2, lr}
 8011d92:	b178      	cbz	r0, 8011db4 <WM_ValidateWindow+0x24>
 8011d94:	f7ff fa1e 	bl	80111d4 <GUI_ALLOC_LockH>
 8011d98:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011d9a:	9001      	str	r0, [sp, #4]
 8011d9c:	069a      	lsls	r2, r3, #26
 8011d9e:	d506      	bpl.n	8011dae <WM_ValidateWindow+0x1e>
 8011da0:	f023 0320 	bic.w	r3, r3, #32
 8011da4:	6283      	str	r3, [r0, #40]	; 0x28
 8011da6:	4b05      	ldr	r3, [pc, #20]	; (8011dbc <WM_ValidateWindow+0x2c>)
 8011da8:	881a      	ldrh	r2, [r3, #0]
 8011daa:	3a01      	subs	r2, #1
 8011dac:	801a      	strh	r2, [r3, #0]
 8011dae:	a801      	add	r0, sp, #4
 8011db0:	f7ff fa1e 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8011db4:	b003      	add	sp, #12
 8011db6:	f85d fb04 	ldr.w	pc, [sp], #4
 8011dba:	bf00      	nop
 8011dbc:	2001b240 	.word	0x2001b240

08011dc0 <WM__IsInModalArea>:
 8011dc0:	4b12      	ldr	r3, [pc, #72]	; (8011e0c <WM__IsInModalArea+0x4c>)
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	b570      	push	{r4, r5, r6, lr}
 8011dc8:	4604      	mov	r4, r0
 8011dca:	da0f      	bge.n	8011dec <WM__IsInModalArea+0x2c>
 8011dcc:	4e10      	ldr	r6, [pc, #64]	; (8011e10 <WM__IsInModalArea+0x50>)
 8011dce:	4d11      	ldr	r5, [pc, #68]	; (8011e14 <WM__IsInModalArea+0x54>)
 8011dd0:	6833      	ldr	r3, [r6, #0]
 8011dd2:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8011dd6:	4620      	mov	r0, r4
 8011dd8:	6859      	ldr	r1, [r3, #4]
 8011dda:	f7f7 fcd0 	bl	800977e <WM__IsAncestor>
 8011dde:	6833      	ldr	r3, [r6, #0]
 8011de0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8011de4:	686a      	ldr	r2, [r5, #4]
 8011de6:	686b      	ldr	r3, [r5, #4]
 8011de8:	b942      	cbnz	r2, 8011dfc <WM__IsInModalArea+0x3c>
 8011dea:	e00c      	b.n	8011e06 <WM__IsInModalArea+0x46>
 8011dec:	4a0a      	ldr	r2, [pc, #40]	; (8011e18 <WM__IsInModalArea+0x58>)
 8011dee:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8011df2:	f7f7 fcc4 	bl	800977e <WM__IsAncestor>
 8011df6:	2800      	cmp	r0, #0
 8011df8:	d1e8      	bne.n	8011dcc <WM__IsInModalArea+0xc>
 8011dfa:	bd70      	pop	{r4, r5, r6, pc}
 8011dfc:	b918      	cbnz	r0, 8011e06 <WM__IsInModalArea+0x46>
 8011dfe:	1ae3      	subs	r3, r4, r3
 8011e00:	4258      	negs	r0, r3
 8011e02:	4158      	adcs	r0, r3
 8011e04:	bd70      	pop	{r4, r5, r6, pc}
 8011e06:	2001      	movs	r0, #1
 8011e08:	bd70      	pop	{r4, r5, r6, pc}
 8011e0a:	bf00      	nop
 8011e0c:	200002e4 	.word	0x200002e4
 8011e10:	2001b248 	.word	0x2001b248
 8011e14:	2001b3b0 	.word	0x2001b3b0
 8011e18:	2001b228 	.word	0x2001b228

08011e1c <WM__SendPIDMessage>:
 8011e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e1e:	4606      	mov	r6, r0
 8011e20:	460c      	mov	r4, r1
 8011e22:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 8011e24:	b085      	sub	sp, #20
 8011e26:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8011e2a:	230d      	movs	r3, #13
 8011e2c:	9602      	str	r6, [sp, #8]
 8011e2e:	9300      	str	r3, [sp, #0]
 8011e30:	4637      	mov	r7, r6
 8011e32:	4638      	mov	r0, r7
 8011e34:	f7f7 ff63 	bl	8009cfe <WM_IsWindow>
 8011e38:	b150      	cbz	r0, 8011e50 <WM__SendPIDMessage+0x34>
 8011e3a:	4638      	mov	r0, r7
 8011e3c:	f7f7 ffd6 	bl	8009dec <WM_GetParent>
 8011e40:	4607      	mov	r7, r0
 8011e42:	2800      	cmp	r0, #0
 8011e44:	d0f5      	beq.n	8011e32 <WM__SendPIDMessage+0x16>
 8011e46:	4669      	mov	r1, sp
 8011e48:	9403      	str	r4, [sp, #12]
 8011e4a:	f002 fef3 	bl	8014c34 <WM__SendMessageIfEnabled>
 8011e4e:	e7f0      	b.n	8011e32 <WM__SendPIDMessage+0x16>
 8011e50:	4630      	mov	r0, r6
 8011e52:	4621      	mov	r1, r4
 8011e54:	f002 feee 	bl	8014c34 <WM__SendMessageIfEnabled>
 8011e58:	b005      	add	sp, #20
 8011e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011e5c <WM__SendTouchMessage>:
 8011e5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011e5e:	68cc      	ldr	r4, [r1, #12]
 8011e60:	4606      	mov	r6, r0
 8011e62:	460d      	mov	r5, r1
 8011e64:	b194      	cbz	r4, 8011e8c <WM__SendTouchMessage+0x30>
 8011e66:	f7ff f9b5 	bl	80111d4 <GUI_ALLOC_LockH>
 8011e6a:	ab02      	add	r3, sp, #8
 8011e6c:	4602      	mov	r2, r0
 8011e6e:	f843 0d04 	str.w	r0, [r3, #-4]!
 8011e72:	6821      	ldr	r1, [r4, #0]
 8011e74:	f9b0 0000 	ldrsh.w	r0, [r0]
 8011e78:	1a09      	subs	r1, r1, r0
 8011e7a:	6021      	str	r1, [r4, #0]
 8011e7c:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 8011e80:	6862      	ldr	r2, [r4, #4]
 8011e82:	1a52      	subs	r2, r2, r1
 8011e84:	6062      	str	r2, [r4, #4]
 8011e86:	4618      	mov	r0, r3
 8011e88:	f7ff f9b2 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8011e8c:	4630      	mov	r0, r6
 8011e8e:	4629      	mov	r1, r5
 8011e90:	f7ff ffc4 	bl	8011e1c <WM__SendPIDMessage>
 8011e94:	b002      	add	sp, #8
 8011e96:	bd70      	pop	{r4, r5, r6, pc}

08011e98 <WM_HandlePID>:
 8011e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e9c:	b097      	sub	sp, #92	; 0x5c
 8011e9e:	ae06      	add	r6, sp, #24
 8011ea0:	f04f 080c 	mov.w	r8, #12
 8011ea4:	2100      	movs	r1, #0
 8011ea6:	4642      	mov	r2, r8
 8011ea8:	4630      	mov	r0, r6
 8011eaa:	f003 fbf6 	bl	801569a <memset>
 8011eae:	f7fd faf1 	bl	800f494 <GUI_PID_IsEmpty>
 8011eb2:	b108      	cbz	r0, 8011eb8 <WM_HandlePID+0x20>
 8011eb4:	2000      	movs	r0, #0
 8011eb6:	e1aa      	b.n	801220e <WM_HandlePID+0x376>
 8011eb8:	ac09      	add	r4, sp, #36	; 0x24
 8011eba:	4620      	mov	r0, r4
 8011ebc:	f7fd fa6e 	bl	800f39c <GUI_PID_GetState>
 8011ec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ec2:	4dad      	ldr	r5, [pc, #692]	; (8012178 <WM_HandlePID+0x2e0>)
 8011ec4:	4fad      	ldr	r7, [pc, #692]	; (801217c <WM_HandlePID+0x2e4>)
 8011ec6:	1c5a      	adds	r2, r3, #1
 8011ec8:	d112      	bne.n	8011ef0 <WM_HandlePID+0x58>
 8011eca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ecc:	3301      	adds	r3, #1
 8011ece:	d11e      	bne.n	8011f0e <WM_HandlePID+0x76>
 8011ed0:	682b      	ldr	r3, [r5, #0]
 8011ed2:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8011ed6:	fb08 f803 	mul.w	r8, r8, r3
 8011eda:	eb07 0308 	add.w	r3, r7, r8
 8011ede:	7a19      	ldrb	r1, [r3, #8]
 8011ee0:	4291      	cmp	r1, r2
 8011ee2:	d0e7      	beq.n	8011eb4 <WM_HandlePID+0x1c>
 8011ee4:	f857 2008 	ldr.w	r2, [r7, r8]
 8011ee8:	685b      	ldr	r3, [r3, #4]
 8011eea:	9209      	str	r2, [sp, #36]	; 0x24
 8011eec:	930a      	str	r3, [sp, #40]	; 0x28
 8011eee:	e00e      	b.n	8011f0e <WM_HandlePID+0x76>
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	db0c      	blt.n	8011f0e <WM_HandlePID+0x76>
 8011ef4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011ef6:	2a00      	cmp	r2, #0
 8011ef8:	db09      	blt.n	8011f0e <WM_HandlePID+0x76>
 8011efa:	49a1      	ldr	r1, [pc, #644]	; (8012180 <WM_HandlePID+0x2e8>)
 8011efc:	f9b1 1000 	ldrsh.w	r1, [r1]
 8011f00:	440b      	add	r3, r1
 8011f02:	9309      	str	r3, [sp, #36]	; 0x24
 8011f04:	4b9f      	ldr	r3, [pc, #636]	; (8012184 <WM_HandlePID+0x2ec>)
 8011f06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011f0a:	441a      	add	r2, r3
 8011f0c:	920a      	str	r2, [sp, #40]	; 0x28
 8011f0e:	a804      	add	r0, sp, #16
 8011f10:	f000 fa40 	bl	8012394 <WM__AddCriticalHandle>
 8011f14:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8011f18:	2b01      	cmp	r3, #1
 8011f1a:	bf98      	it	ls
 8011f1c:	602b      	strls	r3, [r5, #0]
 8011f1e:	6828      	ldr	r0, [r5, #0]
 8011f20:	a901      	add	r1, sp, #4
 8011f22:	aa02      	add	r2, sp, #8
 8011f24:	f7fd f9aa 	bl	800f27c <GUI_GetLayerPosEx>
 8011f28:	9b01      	ldr	r3, [sp, #4]
 8011f2a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011f2c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011f2e:	1ac0      	subs	r0, r0, r3
 8011f30:	9b02      	ldr	r3, [sp, #8]
 8011f32:	9009      	str	r0, [sp, #36]	; 0x24
 8011f34:	1ac9      	subs	r1, r1, r3
 8011f36:	682b      	ldr	r3, [r5, #0]
 8011f38:	910a      	str	r1, [sp, #40]	; 0x28
 8011f3a:	220c      	movs	r2, #12
 8011f3c:	435a      	muls	r2, r3
 8011f3e:	18bb      	adds	r3, r7, r2
 8011f40:	58ba      	ldr	r2, [r7, r2]
 8011f42:	4282      	cmp	r2, r0
 8011f44:	d108      	bne.n	8011f58 <WM_HandlePID+0xc0>
 8011f46:	685a      	ldr	r2, [r3, #4]
 8011f48:	428a      	cmp	r2, r1
 8011f4a:	d105      	bne.n	8011f58 <WM_HandlePID+0xc0>
 8011f4c:	7a1a      	ldrb	r2, [r3, #8]
 8011f4e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8011f52:	429a      	cmp	r2, r3
 8011f54:	f000 8156 	beq.w	8012204 <WM_HandlePID+0x36c>
 8011f58:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 8011f5c:	f002 fd6a 	bl	8014a34 <GUI_CURSOR_SetPositionEx>
 8011f60:	4b89      	ldr	r3, [pc, #548]	; (8012188 <WM_HandlePID+0x2f0>)
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	b113      	cbz	r3, 8011f6c <WM_HandlePID+0xd4>
 8011f66:	4620      	mov	r0, r4
 8011f68:	2100      	movs	r1, #0
 8011f6a:	4798      	blx	r3
 8011f6c:	682b      	ldr	r3, [r5, #0]
 8011f6e:	4a87      	ldr	r2, [pc, #540]	; (801218c <WM_HandlePID+0x2f4>)
 8011f70:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011f74:	b918      	cbnz	r0, 8011f7e <WM_HandlePID+0xe6>
 8011f76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011f78:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011f7a:	f000 f9c3 	bl	8012304 <WM_Screen2hWin>
 8011f7e:	4b84      	ldr	r3, [pc, #528]	; (8012190 <WM_HandlePID+0x2f8>)
 8011f80:	9005      	str	r0, [sp, #20]
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	b113      	cbz	r3, 8011f8c <WM_HandlePID+0xf4>
 8011f86:	9905      	ldr	r1, [sp, #20]
 8011f88:	4620      	mov	r0, r4
 8011f8a:	4798      	blx	r3
 8011f8c:	4981      	ldr	r1, [pc, #516]	; (8012194 <WM_HandlePID+0x2fc>)
 8011f8e:	682b      	ldr	r3, [r5, #0]
 8011f90:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 8012178 <WM_HandlePID+0x2e0>
 8011f94:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8011f98:	4688      	mov	r8, r1
 8011f9a:	685a      	ldr	r2, [r3, #4]
 8011f9c:	9805      	ldr	r0, [sp, #20]
 8011f9e:	b312      	cbz	r2, 8011fe6 <WM_HandlePID+0x14e>
 8011fa0:	4282      	cmp	r2, r0
 8011fa2:	d020      	beq.n	8011fe6 <WM_HandlePID+0x14e>
 8011fa4:	6858      	ldr	r0, [r3, #4]
 8011fa6:	f7ff ff0b 	bl	8011dc0 <WM__IsInModalArea>
 8011faa:	b1e0      	cbz	r0, 8011fe6 <WM_HandlePID+0x14e>
 8011fac:	f8d9 3000 	ldr.w	r3, [r9]
 8011fb0:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8011fb4:	6858      	ldr	r0, [r3, #4]
 8011fb6:	f7f7 fbd9 	bl	800976c <WM__IsEnabled>
 8011fba:	b1a0      	cbz	r0, 8011fe6 <WM_HandlePID+0x14e>
 8011fbc:	2312      	movs	r3, #18
 8011fbe:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8011fc2:	9312      	str	r3, [sp, #72]	; 0x48
 8011fc4:	f8d9 3000 	ldr.w	r3, [r9]
 8011fc8:	9615      	str	r6, [sp, #84]	; 0x54
 8011fca:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8011fce:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8011fd2:	6858      	ldr	r0, [r3, #4]
 8011fd4:	a912      	add	r1, sp, #72	; 0x48
 8011fd6:	f7ff ff41 	bl	8011e5c <WM__SendTouchMessage>
 8011fda:	f8d9 3000 	ldr.w	r3, [r9]
 8011fde:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8011fe2:	2200      	movs	r2, #0
 8011fe4:	605a      	str	r2, [r3, #4]
 8011fe6:	9805      	ldr	r0, [sp, #20]
 8011fe8:	f7ff feea 	bl	8011dc0 <WM__IsInModalArea>
 8011fec:	b908      	cbnz	r0, 8011ff2 <WM_HandlePID+0x15a>
 8011fee:	2600      	movs	r6, #0
 8011ff0:	e0fb      	b.n	80121ea <WM_HandlePID+0x352>
 8011ff2:	682b      	ldr	r3, [r5, #0]
 8011ff4:	9905      	ldr	r1, [sp, #20]
 8011ff6:	f8df a180 	ldr.w	sl, [pc, #384]	; 8012178 <WM_HandlePID+0x2e0>
 8011ffa:	f8df 9180 	ldr.w	r9, [pc, #384]	; 801217c <WM_HandlePID+0x2e4>
 8011ffe:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 8012002:	f04f 080c 	mov.w	r8, #12
 8012006:	fb08 7303 	mla	r3, r8, r3, r7
 801200a:	6051      	str	r1, [r2, #4]
 801200c:	7a1a      	ldrb	r2, [r3, #8]
 801200e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8012012:	429a      	cmp	r2, r3
 8012014:	d062      	beq.n	80120dc <WM_HandlePID+0x244>
 8012016:	9b05      	ldr	r3, [sp, #20]
 8012018:	2b00      	cmp	r3, #0
 801201a:	d05f      	beq.n	80120dc <WM_HandlePID+0x244>
 801201c:	9805      	ldr	r0, [sp, #20]
 801201e:	f7ff f8d9 	bl	80111d4 <GUI_ALLOC_LockH>
 8012022:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8012026:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
 801202a:	f8da 3000 	ldr.w	r3, [sl]
 801202e:	9003      	str	r0, [sp, #12]
 8012030:	fb08 9303 	mla	r3, r8, r3, r9
 8012034:	7a1b      	ldrb	r3, [r3, #8]
 8012036:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
 801203a:	f9b0 2000 	ldrsh.w	r2, [r0]
 801203e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012040:	1a9b      	subs	r3, r3, r2
 8012042:	930f      	str	r3, [sp, #60]	; 0x3c
 8012044:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8012048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801204a:	eb0d 0008 	add.w	r0, sp, r8
 801204e:	1a9b      	subs	r3, r3, r2
 8012050:	9310      	str	r3, [sp, #64]	; 0x40
 8012052:	f7ff f8cd 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8012056:	f8da e000 	ldr.w	lr, [sl]
 801205a:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8012198 <WM_HandlePID+0x300>
 801205e:	ab0f      	add	r3, sp, #60	; 0x3c
 8012060:	9315      	str	r3, [sp, #84]	; 0x54
 8012062:	2311      	movs	r3, #17
 8012064:	9312      	str	r3, [sp, #72]	; 0x48
 8012066:	fb08 930e 	mla	r3, r8, lr, r9
 801206a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801206e:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8012072:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8012076:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 801207a:	721a      	strb	r2, [r3, #8]
 801207c:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8012080:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8012084:	b133      	cbz	r3, 8012094 <WM_HandlePID+0x1fc>
 8012086:	eb0a 030e 	add.w	r3, sl, lr
 801208a:	f8d3 9004 	ldr.w	r9, [r3, #4]
 801208e:	9a05      	ldr	r2, [sp, #20]
 8012090:	605a      	str	r2, [r3, #4]
 8012092:	e000      	b.n	8012096 <WM_HandlePID+0x1fe>
 8012094:	4699      	mov	r9, r3
 8012096:	eb0a 030e 	add.w	r3, sl, lr
 801209a:	a912      	add	r1, sp, #72	; 0x48
 801209c:	f8d3 b004 	ldr.w	fp, [r3, #4]
 80120a0:	9805      	ldr	r0, [sp, #20]
 80120a2:	f002 fdc7 	bl	8014c34 <WM__SendMessageIfEnabled>
 80120a6:	682b      	ldr	r3, [r5, #0]
 80120a8:	eb0a 02c3 	add.w	r2, sl, r3, lsl #3
 80120ac:	6851      	ldr	r1, [r2, #4]
 80120ae:	458b      	cmp	fp, r1
 80120b0:	bf1c      	itt	ne
 80120b2:	6852      	ldrne	r2, [r2, #4]
 80120b4:	9205      	strne	r2, [sp, #20]
 80120b6:	220c      	movs	r2, #12
 80120b8:	fb02 7303 	mla	r3, r2, r3, r7
 80120bc:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 80120c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80120c4:	f1b9 0f00 	cmp.w	r9, #0
 80120c8:	d008      	beq.n	80120dc <WM_HandlePID+0x244>
 80120ca:	4648      	mov	r0, r9
 80120cc:	f7f7 fe17 	bl	8009cfe <WM_IsWindow>
 80120d0:	b120      	cbz	r0, 80120dc <WM_HandlePID+0x244>
 80120d2:	682b      	ldr	r3, [r5, #0]
 80120d4:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 80120d8:	f8c3 9004 	str.w	r9, [r3, #4]
 80120dc:	682a      	ldr	r2, [r5, #0]
 80120de:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80120e2:	210c      	movs	r1, #12
 80120e4:	4351      	muls	r1, r2
 80120e6:	1878      	adds	r0, r7, r1
 80120e8:	f890 8008 	ldrb.w	r8, [r0, #8]
 80120ec:	ea53 0808 	orrs.w	r8, r3, r8
 80120f0:	d064      	beq.n	80121bc <WM_HandlePID+0x324>
 80120f2:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8012198 <WM_HandlePID+0x300>
 80120f6:	f44f 7e10 	mov.w	lr, #576	; 0x240
 80120fa:	00d2      	lsls	r2, r2, #3
 80120fc:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
 8012100:	eb08 0e02 	add.w	lr, r8, r2
 8012104:	f8de 9004 	ldr.w	r9, [lr, #4]
 8012108:	f8dd c014 	ldr.w	ip, [sp, #20]
 801210c:	45e1      	cmp	r9, ip
 801210e:	d01c      	beq.n	801214a <WM_HandlePID+0x2b2>
 8012110:	f8de e004 	ldr.w	lr, [lr, #4]
 8012114:	f1be 0f00 	cmp.w	lr, #0
 8012118:	d017      	beq.n	801214a <WM_HandlePID+0x2b2>
 801211a:	b113      	cbz	r3, 8012122 <WM_HandlePID+0x28a>
 801211c:	2300      	movs	r3, #0
 801211e:	9315      	str	r3, [sp, #84]	; 0x54
 8012120:	e009      	b.n	8012136 <WM_HandlePID+0x29e>
 8012122:	f8df e058 	ldr.w	lr, [pc, #88]	; 801217c <WM_HandlePID+0x2e4>
 8012126:	f88d 3020 	strb.w	r3, [sp, #32]
 801212a:	f85e 1001 	ldr.w	r1, [lr, r1]
 801212e:	9106      	str	r1, [sp, #24]
 8012130:	6841      	ldr	r1, [r0, #4]
 8012132:	9107      	str	r1, [sp, #28]
 8012134:	9615      	str	r6, [sp, #84]	; 0x54
 8012136:	4442      	add	r2, r8
 8012138:	a912      	add	r1, sp, #72	; 0x48
 801213a:	6850      	ldr	r0, [r2, #4]
 801213c:	f7ff fe8e 	bl	8011e5c <WM__SendTouchMessage>
 8012140:	682b      	ldr	r3, [r5, #0]
 8012142:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8012146:	2200      	movs	r2, #0
 8012148:	605a      	str	r2, [r3, #4]
 801214a:	682b      	ldr	r3, [r5, #0]
 801214c:	f89d e02c 	ldrb.w	lr, [sp, #44]	; 0x2c
 8012150:	220c      	movs	r2, #12
 8012152:	fb02 7203 	mla	r2, r2, r3, r7
 8012156:	f882 e008 	strb.w	lr, [r2, #8]
 801215a:	9a05      	ldr	r2, [sp, #20]
 801215c:	2a00      	cmp	r2, #0
 801215e:	d043      	beq.n	80121e8 <WM_HandlePID+0x350>
 8012160:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8012164:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8012168:	f1be 0f00 	cmp.w	lr, #0
 801216c:	d016      	beq.n	801219c <WM_HandlePID+0x304>
 801216e:	9a05      	ldr	r2, [sp, #20]
 8012170:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8012174:	e01b      	b.n	80121ae <WM_HandlePID+0x316>
 8012176:	bf00      	nop
 8012178:	2001b248 	.word	0x2001b248
 801217c:	20019698 	.word	0x20019698
 8012180:	2001b2a8 	.word	0x2001b2a8
 8012184:	2001b29c 	.word	0x2001b29c
 8012188:	20019690 	.word	0x20019690
 801218c:	2001b264 	.word	0x2001b264
 8012190:	20019694 	.word	0x20019694
 8012194:	2001b390 	.word	0x2001b390
 8012198:	2001b3a0 	.word	0x2001b3a0
 801219c:	4b1d      	ldr	r3, [pc, #116]	; (8012214 <WM_HandlePID+0x37c>)
 801219e:	781b      	ldrb	r3, [r3, #0]
 80121a0:	b10b      	cbz	r3, 80121a6 <WM_HandlePID+0x30e>
 80121a2:	f000 f853 	bl	801224c <WM_ReleaseCapture>
 80121a6:	682b      	ldr	r3, [r5, #0]
 80121a8:	2200      	movs	r2, #0
 80121aa:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 80121ae:	605a      	str	r2, [r3, #4]
 80121b0:	9805      	ldr	r0, [sp, #20]
 80121b2:	9615      	str	r6, [sp, #84]	; 0x54
 80121b4:	a912      	add	r1, sp, #72	; 0x48
 80121b6:	f7ff fe51 	bl	8011e5c <WM__SendTouchMessage>
 80121ba:	e015      	b.n	80121e8 <WM_HandlePID+0x350>
 80121bc:	9b05      	ldr	r3, [sp, #20]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	f43f af15 	beq.w	8011fee <WM_HandlePID+0x156>
 80121c4:	9805      	ldr	r0, [sp, #20]
 80121c6:	f7f7 fad1 	bl	800976c <WM__IsEnabled>
 80121ca:	2800      	cmp	r0, #0
 80121cc:	f43f af0f 	beq.w	8011fee <WM_HandlePID+0x156>
 80121d0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80121d4:	2310      	movs	r3, #16
 80121d6:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80121da:	9805      	ldr	r0, [sp, #20]
 80121dc:	9312      	str	r3, [sp, #72]	; 0x48
 80121de:	a912      	add	r1, sp, #72	; 0x48
 80121e0:	9615      	str	r6, [sp, #84]	; 0x54
 80121e2:	f7ff fe3b 	bl	8011e5c <WM__SendTouchMessage>
 80121e6:	e702      	b.n	8011fee <WM_HandlePID+0x156>
 80121e8:	2601      	movs	r6, #1
 80121ea:	682b      	ldr	r3, [r5, #0]
 80121ec:	220c      	movs	r2, #12
 80121ee:	fb02 7703 	mla	r7, r2, r3, r7
 80121f2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80121f6:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 80121fa:	4620      	mov	r0, r4
 80121fc:	4619      	mov	r1, r3
 80121fe:	f000 f891 	bl	8012324 <WM_PID__SetPrevState>
 8012202:	e000      	b.n	8012206 <WM_HandlePID+0x36e>
 8012204:	2600      	movs	r6, #0
 8012206:	a804      	add	r0, sp, #16
 8012208:	f000 f8cc 	bl	80123a4 <WM__RemoveCriticalHandle>
 801220c:	4630      	mov	r0, r6
 801220e:	b017      	add	sp, #92	; 0x5c
 8012210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012214:	2001b24c 	.word	0x2001b24c

08012218 <WM__ReleaseCapture>:
 8012218:	b530      	push	{r4, r5, lr}
 801221a:	4d0a      	ldr	r5, [pc, #40]	; (8012244 <WM__ReleaseCapture+0x2c>)
 801221c:	4c0a      	ldr	r4, [pc, #40]	; (8012248 <WM__ReleaseCapture+0x30>)
 801221e:	682b      	ldr	r3, [r5, #0]
 8012220:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8012224:	b085      	sub	sp, #20
 8012226:	b150      	cbz	r0, 801223e <WM__ReleaseCapture+0x26>
 8012228:	a904      	add	r1, sp, #16
 801222a:	2318      	movs	r3, #24
 801222c:	f841 3d10 	str.w	r3, [r1, #-16]!
 8012230:	4669      	mov	r1, sp
 8012232:	f7ff fd53 	bl	8011cdc <WM__SendMessage>
 8012236:	682b      	ldr	r3, [r5, #0]
 8012238:	2200      	movs	r2, #0
 801223a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 801223e:	b005      	add	sp, #20
 8012240:	bd30      	pop	{r4, r5, pc}
 8012242:	bf00      	nop
 8012244:	2001b248 	.word	0x2001b248
 8012248:	2001b264 	.word	0x2001b264

0801224c <WM_ReleaseCapture>:
 801224c:	f7ff bfe4 	b.w	8012218 <WM__ReleaseCapture>

08012250 <WM_SendToParent>:
 8012250:	b538      	push	{r3, r4, r5, lr}
 8012252:	4605      	mov	r5, r0
 8012254:	460c      	mov	r4, r1
 8012256:	b141      	cbz	r1, 801226a <WM_SendToParent+0x1a>
 8012258:	f7f7 fdc8 	bl	8009dec <WM_GetParent>
 801225c:	b128      	cbz	r0, 801226a <WM_SendToParent+0x1a>
 801225e:	60a5      	str	r5, [r4, #8]
 8012260:	4621      	mov	r1, r4
 8012262:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012266:	f7ff bd39 	b.w	8011cdc <WM__SendMessage>
 801226a:	bd38      	pop	{r3, r4, r5, pc}

0801226c <WM__IsInWindow>:
 801226c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801226e:	f013 0302 	ands.w	r3, r3, #2
 8012272:	d012      	beq.n	801229a <WM__IsInWindow+0x2e>
 8012274:	f9b0 3000 	ldrsh.w	r3, [r0]
 8012278:	4299      	cmp	r1, r3
 801227a:	db10      	blt.n	801229e <WM__IsInWindow+0x32>
 801227c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8012280:	4299      	cmp	r1, r3
 8012282:	dc0c      	bgt.n	801229e <WM__IsInWindow+0x32>
 8012284:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8012288:	429a      	cmp	r2, r3
 801228a:	db08      	blt.n	801229e <WM__IsInWindow+0x32>
 801228c:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8012290:	4282      	cmp	r2, r0
 8012292:	bfcc      	ite	gt
 8012294:	2000      	movgt	r0, #0
 8012296:	2001      	movle	r0, #1
 8012298:	4770      	bx	lr
 801229a:	4618      	mov	r0, r3
 801229c:	4770      	bx	lr
 801229e:	2000      	movs	r0, #0
 80122a0:	4770      	bx	lr

080122a2 <_Screen2hWin>:
 80122a2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80122a6:	460e      	mov	r6, r1
 80122a8:	4617      	mov	r7, r2
 80122aa:	4698      	mov	r8, r3
 80122ac:	4605      	mov	r5, r0
 80122ae:	b320      	cbz	r0, 80122fa <_Screen2hWin+0x58>
 80122b0:	f7fe ff90 	bl	80111d4 <GUI_ALLOC_LockH>
 80122b4:	4639      	mov	r1, r7
 80122b6:	4642      	mov	r2, r8
 80122b8:	4604      	mov	r4, r0
 80122ba:	9001      	str	r0, [sp, #4]
 80122bc:	f7ff ffd6 	bl	801226c <WM__IsInWindow>
 80122c0:	4681      	mov	r9, r0
 80122c2:	b920      	cbnz	r0, 80122ce <_Screen2hWin+0x2c>
 80122c4:	a801      	add	r0, sp, #4
 80122c6:	f7fe ff93 	bl	80111f0 <GUI_ALLOC_UnlockH>
 80122ca:	4648      	mov	r0, r9
 80122cc:	e016      	b.n	80122fc <_Screen2hWin+0x5a>
 80122ce:	69e4      	ldr	r4, [r4, #28]
 80122d0:	b91c      	cbnz	r4, 80122da <_Screen2hWin+0x38>
 80122d2:	a801      	add	r0, sp, #4
 80122d4:	f7fe ff8c 	bl	80111f0 <GUI_ALLOC_UnlockH>
 80122d8:	e00f      	b.n	80122fa <_Screen2hWin+0x58>
 80122da:	42b4      	cmp	r4, r6
 80122dc:	d0f9      	beq.n	80122d2 <_Screen2hWin+0x30>
 80122de:	4620      	mov	r0, r4
 80122e0:	4631      	mov	r1, r6
 80122e2:	463a      	mov	r2, r7
 80122e4:	4643      	mov	r3, r8
 80122e6:	f7ff ffdc 	bl	80122a2 <_Screen2hWin>
 80122ea:	2800      	cmp	r0, #0
 80122ec:	bf18      	it	ne
 80122ee:	4605      	movne	r5, r0
 80122f0:	4620      	mov	r0, r4
 80122f2:	f7fe ff65 	bl	80111c0 <GUI_ALLOC_h2p>
 80122f6:	6a04      	ldr	r4, [r0, #32]
 80122f8:	e7ea      	b.n	80122d0 <_Screen2hWin+0x2e>
 80122fa:	4628      	mov	r0, r5
 80122fc:	b003      	add	sp, #12
 80122fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08012304 <WM_Screen2hWin>:
 8012304:	b570      	push	{r4, r5, r6, lr}
 8012306:	4b06      	ldr	r3, [pc, #24]	; (8012320 <WM_Screen2hWin+0x1c>)
 8012308:	460c      	mov	r4, r1
 801230a:	4605      	mov	r5, r0
 801230c:	6818      	ldr	r0, [r3, #0]
 801230e:	f000 f835 	bl	801237c <WM_GetDesktopWindowEx>
 8012312:	462a      	mov	r2, r5
 8012314:	4623      	mov	r3, r4
 8012316:	2100      	movs	r1, #0
 8012318:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801231c:	f7ff bfc1 	b.w	80122a2 <_Screen2hWin>
 8012320:	2001b248 	.word	0x2001b248

08012324 <WM_PID__SetPrevState>:
 8012324:	4b03      	ldr	r3, [pc, #12]	; (8012334 <WM_PID__SetPrevState+0x10>)
 8012326:	220c      	movs	r2, #12
 8012328:	fb02 3301 	mla	r3, r2, r1, r3
 801232c:	c807      	ldmia	r0, {r0, r1, r2}
 801232e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012332:	4770      	bx	lr
 8012334:	200196b0 	.word	0x200196b0

08012338 <WM_OnKey>:
 8012338:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801233a:	4a0a      	ldr	r2, [pc, #40]	; (8012364 <WM_OnKey+0x2c>)
 801233c:	4603      	mov	r3, r0
 801233e:	6810      	ldr	r0, [r2, #0]
 8012340:	4a09      	ldr	r2, [pc, #36]	; (8012368 <WM_OnKey+0x30>)
 8012342:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8012346:	b148      	cbz	r0, 801235c <WM_OnKey+0x24>
 8012348:	9300      	str	r3, [sp, #0]
 801234a:	230e      	movs	r3, #14
 801234c:	9101      	str	r1, [sp, #4]
 801234e:	9302      	str	r3, [sp, #8]
 8012350:	a902      	add	r1, sp, #8
 8012352:	ab00      	add	r3, sp, #0
 8012354:	9305      	str	r3, [sp, #20]
 8012356:	f7ff fcc1 	bl	8011cdc <WM__SendMessage>
 801235a:	2001      	movs	r0, #1
 801235c:	b007      	add	sp, #28
 801235e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012362:	bf00      	nop
 8012364:	2001b248 	.word	0x2001b248
 8012368:	2001b238 	.word	0x2001b238

0801236c <WM_GetWindowOrgX>:
 801236c:	b508      	push	{r3, lr}
 801236e:	b120      	cbz	r0, 801237a <WM_GetWindowOrgX+0xe>
 8012370:	f7fe ff26 	bl	80111c0 <GUI_ALLOC_h2p>
 8012374:	f9b0 0000 	ldrsh.w	r0, [r0]
 8012378:	bd08      	pop	{r3, pc}
 801237a:	bd08      	pop	{r3, pc}

0801237c <WM_GetDesktopWindowEx>:
 801237c:	2801      	cmp	r0, #1
 801237e:	bf9a      	itte	ls
 8012380:	4b02      	ldrls	r3, [pc, #8]	; (801238c <WM_GetDesktopWindowEx+0x10>)
 8012382:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8012386:	2000      	movhi	r0, #0
 8012388:	4770      	bx	lr
 801238a:	bf00      	nop
 801238c:	2001b228 	.word	0x2001b228

08012390 <WM_ForEachDesc>:
 8012390:	f002 bc71 	b.w	8014c76 <WM__ForEachDesc>

08012394 <WM__AddCriticalHandle>:
 8012394:	4b02      	ldr	r3, [pc, #8]	; (80123a0 <WM__AddCriticalHandle+0xc>)
 8012396:	681a      	ldr	r2, [r3, #0]
 8012398:	6002      	str	r2, [r0, #0]
 801239a:	6018      	str	r0, [r3, #0]
 801239c:	4770      	bx	lr
 801239e:	bf00      	nop
 80123a0:	2001b25c 	.word	0x2001b25c

080123a4 <WM__RemoveCriticalHandle>:
 80123a4:	4a09      	ldr	r2, [pc, #36]	; (80123cc <WM__RemoveCriticalHandle+0x28>)
 80123a6:	6813      	ldr	r3, [r2, #0]
 80123a8:	b510      	push	{r4, lr}
 80123aa:	4614      	mov	r4, r2
 80123ac:	b16b      	cbz	r3, 80123ca <WM__RemoveCriticalHandle+0x26>
 80123ae:	2200      	movs	r2, #0
 80123b0:	4283      	cmp	r3, r0
 80123b2:	d105      	bne.n	80123c0 <WM__RemoveCriticalHandle+0x1c>
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	b10a      	cbz	r2, 80123bc <WM__RemoveCriticalHandle+0x18>
 80123b8:	6013      	str	r3, [r2, #0]
 80123ba:	bd10      	pop	{r4, pc}
 80123bc:	6023      	str	r3, [r4, #0]
 80123be:	bd10      	pop	{r4, pc}
 80123c0:	6819      	ldr	r1, [r3, #0]
 80123c2:	b111      	cbz	r1, 80123ca <WM__RemoveCriticalHandle+0x26>
 80123c4:	461a      	mov	r2, r3
 80123c6:	460b      	mov	r3, r1
 80123c8:	e7f2      	b.n	80123b0 <WM__RemoveCriticalHandle+0xc>
 80123ca:	bd10      	pop	{r4, pc}
 80123cc:	2001b25c 	.word	0x2001b25c

080123d0 <WM_BringToBottom>:
 80123d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80123d4:	4604      	mov	r4, r0
 80123d6:	b087      	sub	sp, #28
 80123d8:	2800      	cmp	r0, #0
 80123da:	d039      	beq.n	8012450 <WM_BringToBottom+0x80>
 80123dc:	f7fe fefa 	bl	80111d4 <GUI_ALLOC_LockH>
 80123e0:	4603      	mov	r3, r0
 80123e2:	9001      	str	r0, [sp, #4]
 80123e4:	c803      	ldmia	r0, {r0, r1}
 80123e6:	ad04      	add	r5, sp, #16
 80123e8:	e885 0003 	stmia.w	r5, {r0, r1}
 80123ec:	a801      	add	r0, sp, #4
 80123ee:	6a1e      	ldr	r6, [r3, #32]
 80123f0:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
 80123f4:	f7fe fefc 	bl	80111f0 <GUI_ALLOC_UnlockH>
 80123f8:	4620      	mov	r0, r4
 80123fa:	f7ff fc8d 	bl	8011d18 <WM__GetPrevSibling>
 80123fe:	4607      	mov	r7, r0
 8012400:	b330      	cbz	r0, 8012450 <WM_BringToBottom+0x80>
 8012402:	4620      	mov	r0, r4
 8012404:	f7f7 fcf2 	bl	8009dec <WM_GetParent>
 8012408:	f019 0f02 	tst.w	r9, #2
 801240c:	4680      	mov	r8, r0
 801240e:	d004      	beq.n	801241a <WM_BringToBottom+0x4a>
 8012410:	4628      	mov	r0, r5
 8012412:	4641      	mov	r1, r8
 8012414:	4632      	mov	r2, r6
 8012416:	f7f8 f9db 	bl	800a7d0 <WM__InvalidateRectEx>
 801241a:	4620      	mov	r0, r4
 801241c:	f7fe feda 	bl	80111d4 <GUI_ALLOC_LockH>
 8012420:	9001      	str	r0, [sp, #4]
 8012422:	4640      	mov	r0, r8
 8012424:	f7fe fed6 	bl	80111d4 <GUI_ALLOC_LockH>
 8012428:	9003      	str	r0, [sp, #12]
 801242a:	4638      	mov	r0, r7
 801242c:	f7fe fed2 	bl	80111d4 <GUI_ALLOC_LockH>
 8012430:	9b03      	ldr	r3, [sp, #12]
 8012432:	9a01      	ldr	r2, [sp, #4]
 8012434:	69d9      	ldr	r1, [r3, #28]
 8012436:	6206      	str	r6, [r0, #32]
 8012438:	9002      	str	r0, [sp, #8]
 801243a:	6211      	str	r1, [r2, #32]
 801243c:	a801      	add	r0, sp, #4
 801243e:	61dc      	str	r4, [r3, #28]
 8012440:	f7fe fed6 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8012444:	a803      	add	r0, sp, #12
 8012446:	f7fe fed3 	bl	80111f0 <GUI_ALLOC_UnlockH>
 801244a:	a802      	add	r0, sp, #8
 801244c:	f7fe fed0 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8012450:	b007      	add	sp, #28
 8012452:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08012456 <_Convert16>:
 8012456:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801245a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 801245e:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8012462:	4605      	mov	r5, r0
 8012464:	460e      	mov	r6, r1
 8012466:	4690      	mov	r8, r2
 8012468:	461f      	mov	r7, r3
 801246a:	4614      	mov	r4, r2
 801246c:	4689      	mov	r9, r1
 801246e:	f835 0b02 	ldrh.w	r0, [r5], #2
 8012472:	47d8      	blx	fp
 8012474:	47d0      	blx	sl
 8012476:	3c01      	subs	r4, #1
 8012478:	f849 0b04 	str.w	r0, [r9], #4
 801247c:	d1f7      	bne.n	801246e <_Convert16+0x18>
 801247e:	2f1f      	cmp	r7, #31
 8012480:	d806      	bhi.n	8012490 <_Convert16+0x3a>
 8012482:	4630      	mov	r0, r6
 8012484:	4641      	mov	r1, r8
 8012486:	463a      	mov	r2, r7
 8012488:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801248c:	f001 bf06 	b.w	801429c <GUI__CompactPixelIndices>
 8012490:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012494 <_Convert8>:
 8012494:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012498:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 801249c:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 80124a0:	4605      	mov	r5, r0
 80124a2:	460e      	mov	r6, r1
 80124a4:	4690      	mov	r8, r2
 80124a6:	461f      	mov	r7, r3
 80124a8:	4689      	mov	r9, r1
 80124aa:	4604      	mov	r4, r0
 80124ac:	f814 0b01 	ldrb.w	r0, [r4], #1
 80124b0:	47d8      	blx	fp
 80124b2:	47d0      	blx	sl
 80124b4:	1b2b      	subs	r3, r5, r4
 80124b6:	4443      	add	r3, r8
 80124b8:	f849 0b04 	str.w	r0, [r9], #4
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d1f5      	bne.n	80124ac <_Convert8+0x18>
 80124c0:	2f1f      	cmp	r7, #31
 80124c2:	d806      	bhi.n	80124d2 <_Convert8+0x3e>
 80124c4:	4630      	mov	r0, r6
 80124c6:	4641      	mov	r1, r8
 80124c8:	463a      	mov	r2, r7
 80124ca:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124ce:	f001 bee5 	b.w	801429c <GUI__CompactPixelIndices>
 80124d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080124d8 <GUI_MEMDEV__WriteToActiveOpaque>:
 80124d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124dc:	b09d      	sub	sp, #116	; 0x74
 80124de:	4606      	mov	r6, r0
 80124e0:	910f      	str	r1, [sp, #60]	; 0x3c
 80124e2:	920d      	str	r2, [sp, #52]	; 0x34
 80124e4:	2800      	cmp	r0, #0
 80124e6:	f000 8386 	beq.w	8012bf6 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 80124ea:	f7fe fe73 	bl	80111d4 <GUI_ALLOC_LockH>
 80124ee:	ab1c      	add	r3, sp, #112	; 0x70
 80124f0:	6944      	ldr	r4, [r0, #20]
 80124f2:	f843 0d1c 	str.w	r0, [r3, #-28]!
 80124f6:	4618      	mov	r0, r3
 80124f8:	f7fe fe7a 	bl	80111f0 <GUI_ALLOC_UnlockH>
 80124fc:	4630      	mov	r0, r6
 80124fe:	f7f9 febf 	bl	800c280 <GUI_MEMDEV_GetBitsPerPixel>
 8012502:	2808      	cmp	r0, #8
 8012504:	4601      	mov	r1, r0
 8012506:	dd02      	ble.n	801250e <GUI_MEMDEV__WriteToActiveOpaque+0x36>
 8012508:	2c00      	cmp	r4, #0
 801250a:	f000 81c3 	beq.w	8012894 <GUI_MEMDEV__WriteToActiveOpaque+0x3bc>
 801250e:	2201      	movs	r2, #1
 8012510:	f04f 0800 	mov.w	r8, #0
 8012514:	4630      	mov	r0, r6
 8012516:	921b      	str	r2, [sp, #108]	; 0x6c
 8012518:	920b      	str	r2, [sp, #44]	; 0x2c
 801251a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801251e:	f7fe fe59 	bl	80111d4 <GUI_ALLOC_LockH>
 8012522:	6803      	ldr	r3, [r0, #0]
 8012524:	f8df a60c 	ldr.w	sl, [pc, #1548]	; 8012b34 <GUI_MEMDEV__WriteToActiveOpaque+0x65c>
 8012528:	691b      	ldr	r3, [r3, #16]
 801252a:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 801252e:	685b      	ldr	r3, [r3, #4]
 8012530:	930e      	str	r3, [sp, #56]	; 0x38
 8012532:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 8012536:	f8da 3000 	ldr.w	r3, [sl]
 801253a:	f84b 0d14 	str.w	r0, [fp, #-20]!
 801253e:	6904      	ldr	r4, [r0, #16]
 8012540:	6945      	ldr	r5, [r0, #20]
 8012542:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8012546:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 801254a:	7c58      	ldrb	r0, [r3, #17]
 801254c:	9112      	str	r1, [sp, #72]	; 0x48
 801254e:	f7fb f90f 	bl	800d770 <GUI_GetBitsPerPixelEx>
 8012552:	f8da 3000 	ldr.w	r3, [sl]
 8012556:	9010      	str	r0, [sp, #64]	; 0x40
 8012558:	7c58      	ldrb	r0, [r3, #17]
 801255a:	f7fb f927 	bl	800d7ac <GUI_GetpfIndex2ColorEx>
 801255e:	4603      	mov	r3, r0
 8012560:	4658      	mov	r0, fp
 8012562:	9309      	str	r3, [sp, #36]	; 0x24
 8012564:	f7fe fe44 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8012568:	2c08      	cmp	r4, #8
 801256a:	4651      	mov	r1, sl
 801256c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801256e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012570:	d904      	bls.n	801257c <GUI_MEMDEV__WriteToActiveOpaque+0xa4>
 8012572:	2c10      	cmp	r4, #16
 8012574:	bf8c      	ite	hi
 8012576:	2204      	movhi	r2, #4
 8012578:	2202      	movls	r2, #2
 801257a:	e005      	b.n	8012588 <GUI_MEMDEV__WriteToActiveOpaque+0xb0>
 801257c:	2c01      	cmp	r4, #1
 801257e:	d103      	bne.n	8012588 <GUI_MEMDEV__WriteToActiveOpaque+0xb0>
 8012580:	9411      	str	r4, [sp, #68]	; 0x44
 8012582:	f10d 0868 	add.w	r8, sp, #104	; 0x68
 8012586:	e000      	b.n	801258a <GUI_MEMDEV__WriteToActiveOpaque+0xb2>
 8012588:	9211      	str	r2, [sp, #68]	; 0x44
 801258a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801258c:	4298      	cmp	r0, r3
 801258e:	f000 80e2 	beq.w	8012756 <GUI_MEMDEV__WriteToActiveOpaque+0x27e>
 8012592:	680b      	ldr	r3, [r1, #0]
 8012594:	7c58      	ldrb	r0, [r3, #17]
 8012596:	f7fb f919 	bl	800d7cc <GUI_GetpfColor2IndexEx>
 801259a:	9013      	str	r0, [sp, #76]	; 0x4c
 801259c:	00b8      	lsls	r0, r7, #2
 801259e:	f7ff f86d 	bl	801167c <GUI_ALLOC_AllocNoInit>
 80125a2:	900c      	str	r0, [sp, #48]	; 0x30
 80125a4:	2800      	cmp	r0, #0
 80125a6:	f000 8326 	beq.w	8012bf6 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 80125aa:	4630      	mov	r0, r6
 80125ac:	f7f8 ffdc 	bl	800b568 <GUI_MEMDEV_GetDataPtr>
 80125b0:	4606      	mov	r6, r0
 80125b2:	2d00      	cmp	r5, #0
 80125b4:	f000 80be 	beq.w	8012734 <GUI_MEMDEV__WriteToActiveOpaque+0x25c>
 80125b8:	4628      	mov	r0, r5
 80125ba:	f7fe fe0b 	bl	80111d4 <GUI_ALLOC_LockH>
 80125be:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 80125c2:	9018      	str	r0, [sp, #96]	; 0x60
 80125c4:	f04f 0a00 	mov.w	sl, #0
 80125c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80125ca:	4592      	cmp	sl, r2
 80125cc:	f280 80ae 	bge.w	801272c <GUI_MEMDEV__WriteToActiveOpaque+0x254>
 80125d0:	9818      	ldr	r0, [sp, #96]	; 0x60
 80125d2:	2300      	movs	r3, #0
 80125d4:	9319      	str	r3, [sp, #100]	; 0x64
 80125d6:	6883      	ldr	r3, [r0, #8]
 80125d8:	a919      	add	r1, sp, #100	; 0x64
 80125da:	695b      	ldr	r3, [r3, #20]
 80125dc:	4652      	mov	r2, sl
 80125de:	4798      	blx	r3
 80125e0:	42b8      	cmp	r0, r7
 80125e2:	4605      	mov	r5, r0
 80125e4:	d12f      	bne.n	8012646 <GUI_MEMDEV__WriteToActiveOpaque+0x16e>
 80125e6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80125e8:	f7fe fdf4 	bl	80111d4 <GUI_ALLOC_LockH>
 80125ec:	2c08      	cmp	r4, #8
 80125ee:	4601      	mov	r1, r0
 80125f0:	9016      	str	r0, [sp, #88]	; 0x58
 80125f2:	d909      	bls.n	8012608 <GUI_MEMDEV__WriteToActiveOpaque+0x130>
 80125f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80125f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80125f8:	9200      	str	r2, [sp, #0]
 80125fa:	9301      	str	r3, [sp, #4]
 80125fc:	4630      	mov	r0, r6
 80125fe:	463a      	mov	r2, r7
 8012600:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012602:	f7ff ff28 	bl	8012456 <_Convert16>
 8012606:	e008      	b.n	801261a <GUI_MEMDEV__WriteToActiveOpaque+0x142>
 8012608:	980e      	ldr	r0, [sp, #56]	; 0x38
 801260a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801260c:	9000      	str	r0, [sp, #0]
 801260e:	9201      	str	r2, [sp, #4]
 8012610:	4630      	mov	r0, r6
 8012612:	463a      	mov	r2, r7
 8012614:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012616:	f7ff ff3d 	bl	8012494 <_Convert8>
 801261a:	2301      	movs	r3, #1
 801261c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801261e:	9002      	str	r0, [sp, #8]
 8012620:	ad1c      	add	r5, sp, #112	; 0x70
 8012622:	2200      	movs	r2, #0
 8012624:	9300      	str	r3, [sp, #0]
 8012626:	9301      	str	r3, [sp, #4]
 8012628:	9203      	str	r2, [sp, #12]
 801262a:	f855 2d18 	ldr.w	r2, [r5, #-24]!
 801262e:	9204      	str	r2, [sp, #16]
 8012630:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8012632:	f8cd 8014 	str.w	r8, [sp, #20]
 8012636:	4659      	mov	r1, fp
 8012638:	463a      	mov	r2, r7
 801263a:	f7fb fae3 	bl	800dc04 <LCD_DrawBitmap>
 801263e:	4628      	mov	r0, r5
 8012640:	f7fe fdd6 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8012644:	e060      	b.n	8012708 <GUI_MEMDEV__WriteToActiveOpaque+0x230>
 8012646:	2c01      	cmp	r4, #1
 8012648:	d15c      	bne.n	8012704 <GUI_MEMDEV__WriteToActiveOpaque+0x22c>
 801264a:	2d00      	cmp	r5, #0
 801264c:	d05c      	beq.n	8012708 <GUI_MEMDEV__WriteToActiveOpaque+0x230>
 801264e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8012650:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012652:	f8cd 900c 	str.w	r9, [sp, #12]
 8012656:	2208      	movs	r2, #8
 8012658:	fb90 f2f2 	sdiv	r2, r0, r2
 801265c:	4432      	add	r2, r6
 801265e:	2301      	movs	r3, #1
 8012660:	9204      	str	r2, [sp, #16]
 8012662:	f000 0207 	and.w	r2, r0, #7
 8012666:	9300      	str	r3, [sp, #0]
 8012668:	4408      	add	r0, r1
 801266a:	9301      	str	r3, [sp, #4]
 801266c:	9302      	str	r3, [sp, #8]
 801266e:	9206      	str	r2, [sp, #24]
 8012670:	4659      	mov	r1, fp
 8012672:	462a      	mov	r2, r5
 8012674:	f8cd 8014 	str.w	r8, [sp, #20]
 8012678:	f7fb f9e8 	bl	800da4c <LCD__DrawBitmap_1bpp>
 801267c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801267e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8012680:	441d      	add	r5, r3
 8012682:	6883      	ldr	r3, [r0, #8]
 8012684:	9519      	str	r5, [sp, #100]	; 0x64
 8012686:	695b      	ldr	r3, [r3, #20]
 8012688:	a919      	add	r1, sp, #100	; 0x64
 801268a:	4652      	mov	r2, sl
 801268c:	4798      	blx	r3
 801268e:	4605      	mov	r5, r0
 8012690:	e7db      	b.n	801264a <GUI_MEMDEV__WriteToActiveOpaque+0x172>
 8012692:	980c      	ldr	r0, [sp, #48]	; 0x30
 8012694:	f7fe fd9e 	bl	80111d4 <GUI_ALLOC_LockH>
 8012698:	2c08      	cmp	r4, #8
 801269a:	4601      	mov	r1, r0
 801269c:	9016      	str	r0, [sp, #88]	; 0x58
 801269e:	9819      	ldr	r0, [sp, #100]	; 0x64
 80126a0:	d938      	bls.n	8012714 <GUI_MEMDEV__WriteToActiveOpaque+0x23c>
 80126a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80126a4:	9200      	str	r2, [sp, #0]
 80126a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80126a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80126aa:	9301      	str	r3, [sp, #4]
 80126ac:	fb00 6002 	mla	r0, r0, r2, r6
 80126b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80126b2:	462a      	mov	r2, r5
 80126b4:	f7ff fecf 	bl	8012456 <_Convert16>
 80126b8:	2301      	movs	r3, #1
 80126ba:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
 80126be:	9810      	ldr	r0, [sp, #64]	; 0x40
 80126c0:	9300      	str	r3, [sp, #0]
 80126c2:	2200      	movs	r2, #0
 80126c4:	9301      	str	r3, [sp, #4]
 80126c6:	9002      	str	r0, [sp, #8]
 80126c8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80126ca:	9203      	str	r2, [sp, #12]
 80126cc:	9819      	ldr	r0, [sp, #100]	; 0x64
 80126ce:	f85c 2d18 	ldr.w	r2, [ip, #-24]!
 80126d2:	9204      	str	r2, [sp, #16]
 80126d4:	4408      	add	r0, r1
 80126d6:	462a      	mov	r2, r5
 80126d8:	4659      	mov	r1, fp
 80126da:	f8cd 8014 	str.w	r8, [sp, #20]
 80126de:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 80126e2:	f7fb fa8f 	bl	800dc04 <LCD_DrawBitmap>
 80126e6:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 80126ea:	4660      	mov	r0, ip
 80126ec:	f7fe fd80 	bl	80111f0 <GUI_ALLOC_UnlockH>
 80126f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80126f2:	9818      	ldr	r0, [sp, #96]	; 0x60
 80126f4:	441d      	add	r5, r3
 80126f6:	6883      	ldr	r3, [r0, #8]
 80126f8:	9519      	str	r5, [sp, #100]	; 0x64
 80126fa:	695b      	ldr	r3, [r3, #20]
 80126fc:	a919      	add	r1, sp, #100	; 0x64
 80126fe:	4652      	mov	r2, sl
 8012700:	4798      	blx	r3
 8012702:	4605      	mov	r5, r0
 8012704:	2d00      	cmp	r5, #0
 8012706:	d1c4      	bne.n	8012692 <GUI_MEMDEV__WriteToActiveOpaque+0x1ba>
 8012708:	444e      	add	r6, r9
 801270a:	f10a 0a01 	add.w	sl, sl, #1
 801270e:	f10b 0b01 	add.w	fp, fp, #1
 8012712:	e759      	b.n	80125c8 <GUI_MEMDEV__WriteToActiveOpaque+0xf0>
 8012714:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012716:	9300      	str	r3, [sp, #0]
 8012718:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801271a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801271c:	9201      	str	r2, [sp, #4]
 801271e:	fb00 6003 	mla	r0, r0, r3, r6
 8012722:	462a      	mov	r2, r5
 8012724:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012726:	f7ff feb5 	bl	8012494 <_Convert8>
 801272a:	e7c5      	b.n	80126b8 <GUI_MEMDEV__WriteToActiveOpaque+0x1e0>
 801272c:	a818      	add	r0, sp, #96	; 0x60
 801272e:	f7fe fd5f 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8012732:	e00e      	b.n	8012752 <GUI_MEMDEV__WriteToActiveOpaque+0x27a>
 8012734:	2301      	movs	r3, #1
 8012736:	9300      	str	r3, [sp, #0]
 8012738:	9301      	str	r3, [sp, #4]
 801273a:	9004      	str	r0, [sp, #16]
 801273c:	9402      	str	r4, [sp, #8]
 801273e:	f8cd 900c 	str.w	r9, [sp, #12]
 8012742:	f8cd 8014 	str.w	r8, [sp, #20]
 8012746:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8012748:	990d      	ldr	r1, [sp, #52]	; 0x34
 801274a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801274c:	463a      	mov	r2, r7
 801274e:	f7fb fa59 	bl	800dc04 <LCD_DrawBitmap>
 8012752:	980c      	ldr	r0, [sp, #48]	; 0x30
 8012754:	e24d      	b.n	8012bf2 <GUI_MEMDEV__WriteToActiveOpaque+0x71a>
 8012756:	4630      	mov	r0, r6
 8012758:	f7f8 ff06 	bl	800b568 <GUI_MEMDEV_GetDataPtr>
 801275c:	4606      	mov	r6, r0
 801275e:	2d00      	cmp	r5, #0
 8012760:	f000 808a 	beq.w	8012878 <GUI_MEMDEV__WriteToActiveOpaque+0x3a0>
 8012764:	4628      	mov	r0, r5
 8012766:	f7fe fd35 	bl	80111d4 <GUI_ALLOC_LockH>
 801276a:	2500      	movs	r5, #0
 801276c:	9018      	str	r0, [sp, #96]	; 0x60
 801276e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012770:	429d      	cmp	r5, r3
 8012772:	da7d      	bge.n	8012870 <GUI_MEMDEV__WriteToActiveOpaque+0x398>
 8012774:	9818      	ldr	r0, [sp, #96]	; 0x60
 8012776:	2300      	movs	r3, #0
 8012778:	9319      	str	r3, [sp, #100]	; 0x64
 801277a:	6883      	ldr	r3, [r0, #8]
 801277c:	a919      	add	r1, sp, #100	; 0x64
 801277e:	695b      	ldr	r3, [r3, #20]
 8012780:	462a      	mov	r2, r5
 8012782:	4798      	blx	r3
 8012784:	42b8      	cmp	r0, r7
 8012786:	4682      	mov	sl, r0
 8012788:	d124      	bne.n	80127d4 <GUI_MEMDEV__WriteToActiveOpaque+0x2fc>
 801278a:	46aa      	mov	sl, r5
 801278c:	9818      	ldr	r0, [sp, #96]	; 0x60
 801278e:	6883      	ldr	r3, [r0, #8]
 8012790:	f10a 0b01 	add.w	fp, sl, #1
 8012794:	695b      	ldr	r3, [r3, #20]
 8012796:	a919      	add	r1, sp, #100	; 0x64
 8012798:	465a      	mov	r2, fp
 801279a:	4798      	blx	r3
 801279c:	42b8      	cmp	r0, r7
 801279e:	d101      	bne.n	80127a4 <GUI_MEMDEV__WriteToActiveOpaque+0x2cc>
 80127a0:	46da      	mov	sl, fp
 80127a2:	e7f3      	b.n	801278c <GUI_MEMDEV__WriteToActiveOpaque+0x2b4>
 80127a4:	ebc5 0b0a 	rsb	fp, r5, sl
 80127a8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80127aa:	9604      	str	r6, [sp, #16]
 80127ac:	2301      	movs	r3, #1
 80127ae:	f10b 0b01 	add.w	fp, fp, #1
 80127b2:	9300      	str	r3, [sp, #0]
 80127b4:	9301      	str	r3, [sp, #4]
 80127b6:	4429      	add	r1, r5
 80127b8:	9402      	str	r4, [sp, #8]
 80127ba:	f8cd 900c 	str.w	r9, [sp, #12]
 80127be:	f8cd 8014 	str.w	r8, [sp, #20]
 80127c2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80127c4:	463a      	mov	r2, r7
 80127c6:	465b      	mov	r3, fp
 80127c8:	f7fb fa1c 	bl	800dc04 <LCD_DrawBitmap>
 80127cc:	fb09 660b 	mla	r6, r9, fp, r6
 80127d0:	4655      	mov	r5, sl
 80127d2:	e04b      	b.n	801286c <GUI_MEMDEV__WriteToActiveOpaque+0x394>
 80127d4:	2c01      	cmp	r4, #1
 80127d6:	d127      	bne.n	8012828 <GUI_MEMDEV__WriteToActiveOpaque+0x350>
 80127d8:	f1ba 0f00 	cmp.w	sl, #0
 80127dc:	d022      	beq.n	8012824 <GUI_MEMDEV__WriteToActiveOpaque+0x34c>
 80127de:	9819      	ldr	r0, [sp, #100]	; 0x64
 80127e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80127e2:	f8cd 900c 	str.w	r9, [sp, #12]
 80127e6:	2208      	movs	r2, #8
 80127e8:	fb90 f2f2 	sdiv	r2, r0, r2
 80127ec:	4432      	add	r2, r6
 80127ee:	9204      	str	r2, [sp, #16]
 80127f0:	f000 0207 	and.w	r2, r0, #7
 80127f4:	4408      	add	r0, r1
 80127f6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80127f8:	9206      	str	r2, [sp, #24]
 80127fa:	2301      	movs	r3, #1
 80127fc:	4652      	mov	r2, sl
 80127fe:	9300      	str	r3, [sp, #0]
 8012800:	9301      	str	r3, [sp, #4]
 8012802:	9302      	str	r3, [sp, #8]
 8012804:	4429      	add	r1, r5
 8012806:	f8cd 8014 	str.w	r8, [sp, #20]
 801280a:	f7fb f91f 	bl	800da4c <LCD__DrawBitmap_1bpp>
 801280e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012810:	9818      	ldr	r0, [sp, #96]	; 0x60
 8012812:	4453      	add	r3, sl
 8012814:	9319      	str	r3, [sp, #100]	; 0x64
 8012816:	6883      	ldr	r3, [r0, #8]
 8012818:	a919      	add	r1, sp, #100	; 0x64
 801281a:	695b      	ldr	r3, [r3, #20]
 801281c:	462a      	mov	r2, r5
 801281e:	4798      	blx	r3
 8012820:	4682      	mov	sl, r0
 8012822:	e7d9      	b.n	80127d8 <GUI_MEMDEV__WriteToActiveOpaque+0x300>
 8012824:	444e      	add	r6, r9
 8012826:	e021      	b.n	801286c <GUI_MEMDEV__WriteToActiveOpaque+0x394>
 8012828:	f1ba 0f00 	cmp.w	sl, #0
 801282c:	d0fa      	beq.n	8012824 <GUI_MEMDEV__WriteToActiveOpaque+0x34c>
 801282e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8012830:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012832:	9402      	str	r4, [sp, #8]
 8012834:	fb00 6201 	mla	r2, r0, r1, r6
 8012838:	9204      	str	r2, [sp, #16]
 801283a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801283c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801283e:	f8cd 900c 	str.w	r9, [sp, #12]
 8012842:	2301      	movs	r3, #1
 8012844:	4410      	add	r0, r2
 8012846:	9300      	str	r3, [sp, #0]
 8012848:	4652      	mov	r2, sl
 801284a:	9301      	str	r3, [sp, #4]
 801284c:	4429      	add	r1, r5
 801284e:	f8cd 8014 	str.w	r8, [sp, #20]
 8012852:	f7fb f9d7 	bl	800dc04 <LCD_DrawBitmap>
 8012856:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012858:	9818      	ldr	r0, [sp, #96]	; 0x60
 801285a:	4453      	add	r3, sl
 801285c:	9319      	str	r3, [sp, #100]	; 0x64
 801285e:	6883      	ldr	r3, [r0, #8]
 8012860:	a919      	add	r1, sp, #100	; 0x64
 8012862:	695b      	ldr	r3, [r3, #20]
 8012864:	462a      	mov	r2, r5
 8012866:	4798      	blx	r3
 8012868:	4682      	mov	sl, r0
 801286a:	e7dd      	b.n	8012828 <GUI_MEMDEV__WriteToActiveOpaque+0x350>
 801286c:	3501      	adds	r5, #1
 801286e:	e77e      	b.n	801276e <GUI_MEMDEV__WriteToActiveOpaque+0x296>
 8012870:	a818      	add	r0, sp, #96	; 0x60
 8012872:	f7fe fcbd 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8012876:	e1be      	b.n	8012bf6 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 8012878:	2301      	movs	r3, #1
 801287a:	9300      	str	r3, [sp, #0]
 801287c:	9301      	str	r3, [sp, #4]
 801287e:	9004      	str	r0, [sp, #16]
 8012880:	9402      	str	r4, [sp, #8]
 8012882:	f8cd 900c 	str.w	r9, [sp, #12]
 8012886:	f8cd 8014 	str.w	r8, [sp, #20]
 801288a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801288c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801288e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012890:	463a      	mov	r2, r7
 8012892:	e041      	b.n	8012918 <GUI_MEMDEV__WriteToActiveOpaque+0x440>
 8012894:	4630      	mov	r0, r6
 8012896:	910a      	str	r1, [sp, #40]	; 0x28
 8012898:	f7fe fc9c 	bl	80111d4 <GUI_ALLOC_LockH>
 801289c:	4682      	mov	sl, r0
 801289e:	a81c      	add	r0, sp, #112	; 0x70
 80128a0:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 80128a4:	f840 ad10 	str.w	sl, [r0, #-16]!
 80128a8:	f8da 4000 	ldr.w	r4, [sl]
 80128ac:	9210      	str	r2, [sp, #64]	; 0x40
 80128ae:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80128b2:	f8ba 7008 	ldrh.w	r7, [sl, #8]
 80128b6:	4c9e      	ldr	r4, [pc, #632]	; (8012b30 <GUI_MEMDEV__WriteToActiveOpaque+0x658>)
 80128b8:	b213      	sxth	r3, r2
 80128ba:	f8da 200c 	ldr.w	r2, [sl, #12]
 80128be:	920b      	str	r2, [sp, #44]	; 0x2c
 80128c0:	9309      	str	r3, [sp, #36]	; 0x24
 80128c2:	f7fe fc95 	bl	80111f0 <GUI_ALLOC_UnlockH>
 80128c6:	f8d9 0004 	ldr.w	r0, [r9, #4]
 80128ca:	900e      	str	r0, [sp, #56]	; 0x38
 80128cc:	4899      	ldr	r0, [pc, #612]	; (8012b34 <GUI_MEMDEV__WriteToActiveOpaque+0x65c>)
 80128ce:	6800      	ldr	r0, [r0, #0]
 80128d0:	7c40      	ldrb	r0, [r0, #17]
 80128d2:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 80128d6:	6925      	ldr	r5, [r4, #16]
 80128d8:	f8d5 8000 	ldr.w	r8, [r5]
 80128dc:	f7fa ff48 	bl	800d770 <GUI_GetBitsPerPixelEx>
 80128e0:	2808      	cmp	r0, #8
 80128e2:	fa0f fb87 	sxth.w	fp, r7
 80128e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80128e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80128ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128ec:	d904      	bls.n	80128f8 <GUI_MEMDEV__WriteToActiveOpaque+0x420>
 80128ee:	2810      	cmp	r0, #16
 80128f0:	bf8c      	ite	hi
 80128f2:	2404      	movhi	r4, #4
 80128f4:	2402      	movls	r4, #2
 80128f6:	e000      	b.n	80128fa <GUI_MEMDEV__WriteToActiveOpaque+0x422>
 80128f8:	2401      	movs	r4, #1
 80128fa:	45a9      	cmp	r9, r5
 80128fc:	d10f      	bne.n	801291e <GUI_MEMDEV__WriteToActiveOpaque+0x446>
 80128fe:	2001      	movs	r0, #1
 8012900:	9203      	str	r2, [sp, #12]
 8012902:	f10a 0218 	add.w	r2, sl, #24
 8012906:	9000      	str	r0, [sp, #0]
 8012908:	9001      	str	r0, [sp, #4]
 801290a:	9102      	str	r1, [sp, #8]
 801290c:	9204      	str	r2, [sp, #16]
 801290e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8012910:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012912:	2200      	movs	r2, #0
 8012914:	9205      	str	r2, [sp, #20]
 8012916:	465a      	mov	r2, fp
 8012918:	f7fb f974 	bl	800dc04 <LCD_DrawBitmap>
 801291c:	e16b      	b.n	8012bf6 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 801291e:	2920      	cmp	r1, #32
 8012920:	f040 808e 	bne.w	8012a40 <GUI_MEMDEV__WriteToActiveOpaque+0x568>
 8012924:	fb0b f004 	mul.w	r0, fp, r4
 8012928:	f7fe fea8 	bl	801167c <GUI_ALLOC_AllocNoInit>
 801292c:	900e      	str	r0, [sp, #56]	; 0x38
 801292e:	2800      	cmp	r0, #0
 8012930:	f000 8161 	beq.w	8012bf6 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 8012934:	f7fe fc4e 	bl	80111d4 <GUI_ALLOC_LockH>
 8012938:	901a      	str	r0, [sp, #104]	; 0x68
 801293a:	4630      	mov	r0, r6
 801293c:	f7fe fc4a 	bl	80111d4 <GUI_ALLOC_LockH>
 8012940:	9018      	str	r0, [sp, #96]	; 0x60
 8012942:	692b      	ldr	r3, [r5, #16]
 8012944:	f100 0a18 	add.w	sl, r0, #24
 8012948:	ea4f 068b 	mov.w	r6, fp, lsl #2
 801294c:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8012950:	2b00      	cmp	r3, #0
 8012952:	d02f      	beq.n	80129b4 <GUI_MEMDEV__WriteToActiveOpaque+0x4dc>
 8012954:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8012958:	2c02      	cmp	r4, #2
 801295a:	d003      	beq.n	8012964 <GUI_MEMDEV__WriteToActiveOpaque+0x48c>
 801295c:	2c04      	cmp	r4, #4
 801295e:	d001      	beq.n	8012964 <GUI_MEMDEV__WriteToActiveOpaque+0x48c>
 8012960:	2c01      	cmp	r4, #1
 8012962:	d106      	bne.n	8012972 <GUI_MEMDEV__WriteToActiveOpaque+0x49a>
 8012964:	4650      	mov	r0, sl
 8012966:	692f      	ldr	r7, [r5, #16]
 8012968:	991a      	ldr	r1, [sp, #104]	; 0x68
 801296a:	465a      	mov	r2, fp
 801296c:	4623      	mov	r3, r4
 801296e:	47b8      	blx	r7
 8012970:	44b2      	add	sl, r6
 8012972:	2301      	movs	r3, #1
 8012974:	2200      	movs	r2, #0
 8012976:	991a      	ldr	r1, [sp, #104]	; 0x68
 8012978:	9300      	str	r3, [sp, #0]
 801297a:	9301      	str	r3, [sp, #4]
 801297c:	9203      	str	r2, [sp, #12]
 801297e:	9104      	str	r1, [sp, #16]
 8012980:	9205      	str	r2, [sp, #20]
 8012982:	4641      	mov	r1, r8
 8012984:	465a      	mov	r2, fp
 8012986:	f8cd 9008 	str.w	r9, [sp, #8]
 801298a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801298c:	f7fb f93a 	bl	800dc04 <LCD_DrawBitmap>
 8012990:	9910      	ldr	r1, [sp, #64]	; 0x40
 8012992:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012994:	f108 0701 	add.w	r7, r8, #1
 8012998:	fa02 f381 	sxtah	r3, r2, r1
 801299c:	42bb      	cmp	r3, r7
 801299e:	d107      	bne.n	80129b0 <GUI_MEMDEV__WriteToActiveOpaque+0x4d8>
 80129a0:	a818      	add	r0, sp, #96	; 0x60
 80129a2:	f7fe fc25 	bl	80111f0 <GUI_ALLOC_UnlockH>
 80129a6:	a81a      	add	r0, sp, #104	; 0x68
 80129a8:	f7fe fc22 	bl	80111f0 <GUI_ALLOC_UnlockH>
 80129ac:	980e      	ldr	r0, [sp, #56]	; 0x38
 80129ae:	e120      	b.n	8012bf2 <GUI_MEMDEV__WriteToActiveOpaque+0x71a>
 80129b0:	46b8      	mov	r8, r7
 80129b2:	e7d1      	b.n	8012958 <GUI_MEMDEV__WriteToActiveOpaque+0x480>
 80129b4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80129b6:	2c02      	cmp	r4, #2
 80129b8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80129ba:	d00e      	beq.n	80129da <GUI_MEMDEV__WriteToActiveOpaque+0x502>
 80129bc:	2c04      	cmp	r4, #4
 80129be:	d018      	beq.n	80129f2 <GUI_MEMDEV__WriteToActiveOpaque+0x51a>
 80129c0:	2c01      	cmp	r4, #1
 80129c2:	d125      	bne.n	8012a10 <GUI_MEMDEV__WriteToActiveOpaque+0x538>
 80129c4:	2300      	movs	r3, #0
 80129c6:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 80129ca:	9309      	str	r3, [sp, #36]	; 0x24
 80129cc:	47c0      	blx	r8
 80129ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129d0:	54f8      	strb	r0, [r7, r3]
 80129d2:	3301      	adds	r3, #1
 80129d4:	459b      	cmp	fp, r3
 80129d6:	d1f6      	bne.n	80129c6 <GUI_MEMDEV__WriteToActiveOpaque+0x4ee>
 80129d8:	e019      	b.n	8012a0e <GUI_MEMDEV__WriteToActiveOpaque+0x536>
 80129da:	2300      	movs	r3, #0
 80129dc:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 80129e0:	9309      	str	r3, [sp, #36]	; 0x24
 80129e2:	47c0      	blx	r8
 80129e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129e6:	f827 0013 	strh.w	r0, [r7, r3, lsl #1]
 80129ea:	3301      	adds	r3, #1
 80129ec:	459b      	cmp	fp, r3
 80129ee:	d1f5      	bne.n	80129dc <GUI_MEMDEV__WriteToActiveOpaque+0x504>
 80129f0:	e00d      	b.n	8012a0e <GUI_MEMDEV__WriteToActiveOpaque+0x536>
 80129f2:	465a      	mov	r2, fp
 80129f4:	2300      	movs	r3, #0
 80129f6:	f85a 0003 	ldr.w	r0, [sl, r3]
 80129fa:	920b      	str	r2, [sp, #44]	; 0x2c
 80129fc:	9309      	str	r3, [sp, #36]	; 0x24
 80129fe:	47c0      	blx	r8
 8012a00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012a02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a04:	3a01      	subs	r2, #1
 8012a06:	50f8      	str	r0, [r7, r3]
 8012a08:	f103 0304 	add.w	r3, r3, #4
 8012a0c:	d1f3      	bne.n	80129f6 <GUI_MEMDEV__WriteToActiveOpaque+0x51e>
 8012a0e:	44b2      	add	sl, r6
 8012a10:	2301      	movs	r3, #1
 8012a12:	2200      	movs	r2, #0
 8012a14:	991a      	ldr	r1, [sp, #104]	; 0x68
 8012a16:	9300      	str	r3, [sp, #0]
 8012a18:	9301      	str	r3, [sp, #4]
 8012a1a:	9203      	str	r2, [sp, #12]
 8012a1c:	9104      	str	r1, [sp, #16]
 8012a1e:	9205      	str	r2, [sp, #20]
 8012a20:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8012a22:	f8cd 9008 	str.w	r9, [sp, #8]
 8012a26:	4629      	mov	r1, r5
 8012a28:	465a      	mov	r2, fp
 8012a2a:	f7fb f8eb 	bl	800dc04 <LCD_DrawBitmap>
 8012a2e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8012a30:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012a32:	1c6f      	adds	r7, r5, #1
 8012a34:	fa01 f380 	sxtah	r3, r1, r0
 8012a38:	42bb      	cmp	r3, r7
 8012a3a:	d0b1      	beq.n	80129a0 <GUI_MEMDEV__WriteToActiveOpaque+0x4c8>
 8012a3c:	463d      	mov	r5, r7
 8012a3e:	e7ba      	b.n	80129b6 <GUI_MEMDEV__WriteToActiveOpaque+0x4de>
 8012a40:	2910      	cmp	r1, #16
 8012a42:	f040 80d8 	bne.w	8012bf6 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 8012a46:	fa0f fa87 	sxth.w	sl, r7
 8012a4a:	fb0a f004 	mul.w	r0, sl, r4
 8012a4e:	f7fe fe15 	bl	801167c <GUI_ALLOC_AllocNoInit>
 8012a52:	9012      	str	r0, [sp, #72]	; 0x48
 8012a54:	2800      	cmp	r0, #0
 8012a56:	f000 80ce 	beq.w	8012bf6 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 8012a5a:	f7fe fbbb 	bl	80111d4 <GUI_ALLOC_LockH>
 8012a5e:	901a      	str	r0, [sp, #104]	; 0x68
 8012a60:	4630      	mov	r0, r6
 8012a62:	f7fe fbb7 	bl	80111d4 <GUI_ALLOC_LockH>
 8012a66:	9018      	str	r0, [sp, #96]	; 0x60
 8012a68:	692b      	ldr	r3, [r5, #16]
 8012a6a:	f100 0618 	add.w	r6, r0, #24
 8012a6e:	b113      	cbz	r3, 8012a76 <GUI_MEMDEV__WriteToActiveOpaque+0x59e>
 8012a70:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8012a74:	b92b      	cbnz	r3, 8012a82 <GUI_MEMDEV__WriteToActiveOpaque+0x5aa>
 8012a76:	00e2      	lsls	r2, r4, #3
 8012a78:	b23f      	sxth	r7, r7
 8012a7a:	9211      	str	r2, [sp, #68]	; 0x44
 8012a7c:	007f      	lsls	r7, r7, #1
 8012a7e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8012a80:	e088      	b.n	8012b94 <GUI_MEMDEV__WriteToActiveOpaque+0x6bc>
 8012a82:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8012a86:	0080      	lsls	r0, r0, #2
 8012a88:	f7fe fdf8 	bl	801167c <GUI_ALLOC_AllocNoInit>
 8012a8c:	9011      	str	r0, [sp, #68]	; 0x44
 8012a8e:	b118      	cbz	r0, 8012a98 <GUI_MEMDEV__WriteToActiveOpaque+0x5c0>
 8012a90:	f7fe fba0 	bl	80111d4 <GUI_ALLOC_LockH>
 8012a94:	9019      	str	r0, [sp, #100]	; 0x64
 8012a96:	e001      	b.n	8012a9c <GUI_MEMDEV__WriteToActiveOpaque+0x5c4>
 8012a98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012a9a:	9319      	str	r3, [sp, #100]	; 0x64
 8012a9c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	f000 80a0 	beq.w	8012be4 <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 8012aa4:	b23f      	sxth	r7, r7
 8012aa6:	007f      	lsls	r7, r7, #1
 8012aa8:	970e      	str	r7, [sp, #56]	; 0x38
 8012aaa:	00e7      	lsls	r7, r4, #3
 8012aac:	9713      	str	r7, [sp, #76]	; 0x4c
 8012aae:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8012ab0:	970c      	str	r7, [sp, #48]	; 0x30
 8012ab2:	2c02      	cmp	r4, #2
 8012ab4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8012ab8:	d004      	beq.n	8012ac4 <GUI_MEMDEV__WriteToActiveOpaque+0x5ec>
 8012aba:	2c04      	cmp	r4, #4
 8012abc:	d007      	beq.n	8012ace <GUI_MEMDEV__WriteToActiveOpaque+0x5f6>
 8012abe:	2c01      	cmp	r4, #1
 8012ac0:	d114      	bne.n	8012aec <GUI_MEMDEV__WriteToActiveOpaque+0x614>
 8012ac2:	e004      	b.n	8012ace <GUI_MEMDEV__WriteToActiveOpaque+0x5f6>
 8012ac4:	4630      	mov	r0, r6
 8012ac6:	9919      	ldr	r1, [sp, #100]	; 0x64
 8012ac8:	4652      	mov	r2, sl
 8012aca:	4623      	mov	r3, r4
 8012acc:	e003      	b.n	8012ad6 <GUI_MEMDEV__WriteToActiveOpaque+0x5fe>
 8012ace:	9919      	ldr	r1, [sp, #100]	; 0x64
 8012ad0:	4630      	mov	r0, r6
 8012ad2:	4652      	mov	r2, sl
 8012ad4:	2302      	movs	r3, #2
 8012ad6:	f8d9 7014 	ldr.w	r7, [r9, #20]
 8012ada:	47b8      	blx	r7
 8012adc:	692f      	ldr	r7, [r5, #16]
 8012ade:	9819      	ldr	r0, [sp, #100]	; 0x64
 8012ae0:	4641      	mov	r1, r8
 8012ae2:	4652      	mov	r2, sl
 8012ae4:	4623      	mov	r3, r4
 8012ae6:	47b8      	blx	r7
 8012ae8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8012aea:	443e      	add	r6, r7
 8012aec:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8012aee:	991a      	ldr	r1, [sp, #104]	; 0x68
 8012af0:	9104      	str	r1, [sp, #16]
 8012af2:	2301      	movs	r3, #1
 8012af4:	2200      	movs	r2, #0
 8012af6:	f107 0801 	add.w	r8, r7, #1
 8012afa:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8012afc:	9300      	str	r3, [sp, #0]
 8012afe:	9301      	str	r3, [sp, #4]
 8012b00:	9702      	str	r7, [sp, #8]
 8012b02:	9203      	str	r2, [sp, #12]
 8012b04:	9205      	str	r2, [sp, #20]
 8012b06:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8012b08:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012b0a:	465a      	mov	r2, fp
 8012b0c:	f7fb f87a 	bl	800dc04 <LCD_DrawBitmap>
 8012b10:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8012b12:	980d      	ldr	r0, [sp, #52]	; 0x34
 8012b14:	fa00 f387 	sxtah	r3, r0, r7
 8012b18:	4543      	cmp	r3, r8
 8012b1a:	d002      	beq.n	8012b22 <GUI_MEMDEV__WriteToActiveOpaque+0x64a>
 8012b1c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8012b20:	e7c7      	b.n	8012ab2 <GUI_MEMDEV__WriteToActiveOpaque+0x5da>
 8012b22:	a819      	add	r0, sp, #100	; 0x64
 8012b24:	f7fe fb64 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8012b28:	9811      	ldr	r0, [sp, #68]	; 0x44
 8012b2a:	f7fe fb8d 	bl	8011248 <GUI_ALLOC_Free>
 8012b2e:	e059      	b.n	8012be4 <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 8012b30:	2001b2c0 	.word	0x2001b2c0
 8012b34:	20000238 	.word	0x20000238
 8012b38:	2c04      	cmp	r4, #4
 8012b3a:	d041      	beq.n	8012bc0 <GUI_MEMDEV__WriteToActiveOpaque+0x6e8>
 8012b3c:	2c01      	cmp	r4, #1
 8012b3e:	d111      	bne.n	8012b64 <GUI_MEMDEV__WriteToActiveOpaque+0x68c>
 8012b40:	464a      	mov	r2, r9
 8012b42:	4631      	mov	r1, r6
 8012b44:	f831 0b02 	ldrh.w	r0, [r1], #2
 8012b48:	910a      	str	r1, [sp, #40]	; 0x28
 8012b4a:	920b      	str	r2, [sp, #44]	; 0x2c
 8012b4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012b4e:	4798      	blx	r3
 8012b50:	47c0      	blx	r8
 8012b52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012b54:	f802 0b01 	strb.w	r0, [r2], #1
 8012b58:	eb09 000a 	add.w	r0, r9, sl
 8012b5c:	4282      	cmp	r2, r0
 8012b5e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012b60:	d1f0      	bne.n	8012b44 <GUI_MEMDEV__WriteToActiveOpaque+0x66c>
 8012b62:	443e      	add	r6, r7
 8012b64:	2301      	movs	r3, #1
 8012b66:	9811      	ldr	r0, [sp, #68]	; 0x44
 8012b68:	991a      	ldr	r1, [sp, #104]	; 0x68
 8012b6a:	9300      	str	r3, [sp, #0]
 8012b6c:	2200      	movs	r2, #0
 8012b6e:	9301      	str	r3, [sp, #4]
 8012b70:	9002      	str	r0, [sp, #8]
 8012b72:	9203      	str	r2, [sp, #12]
 8012b74:	9104      	str	r1, [sp, #16]
 8012b76:	9205      	str	r2, [sp, #20]
 8012b78:	4629      	mov	r1, r5
 8012b7a:	465a      	mov	r2, fp
 8012b7c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8012b7e:	f7fb f841 	bl	800dc04 <LCD_DrawBitmap>
 8012b82:	9910      	ldr	r1, [sp, #64]	; 0x40
 8012b84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012b86:	f105 0901 	add.w	r9, r5, #1
 8012b8a:	fa02 f381 	sxtah	r3, r2, r1
 8012b8e:	454b      	cmp	r3, r9
 8012b90:	d028      	beq.n	8012be4 <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 8012b92:	464d      	mov	r5, r9
 8012b94:	2c02      	cmp	r4, #2
 8012b96:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 8012b9a:	d1cd      	bne.n	8012b38 <GUI_MEMDEV__WriteToActiveOpaque+0x660>
 8012b9c:	464b      	mov	r3, r9
 8012b9e:	4631      	mov	r1, r6
 8012ba0:	46d9      	mov	r9, fp
 8012ba2:	f831 0b02 	ldrh.w	r0, [r1], #2
 8012ba6:	910a      	str	r1, [sp, #40]	; 0x28
 8012ba8:	9309      	str	r3, [sp, #36]	; 0x24
 8012baa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012bac:	4790      	blx	r2
 8012bae:	47c0      	blx	r8
 8012bb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012bb2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012bb4:	f823 0b02 	strh.w	r0, [r3], #2
 8012bb8:	f1b9 0901 	subs.w	r9, r9, #1
 8012bbc:	d1f1      	bne.n	8012ba2 <GUI_MEMDEV__WriteToActiveOpaque+0x6ca>
 8012bbe:	e7d0      	b.n	8012b62 <GUI_MEMDEV__WriteToActiveOpaque+0x68a>
 8012bc0:	464b      	mov	r3, r9
 8012bc2:	4631      	mov	r1, r6
 8012bc4:	46d9      	mov	r9, fp
 8012bc6:	f831 0b02 	ldrh.w	r0, [r1], #2
 8012bca:	910a      	str	r1, [sp, #40]	; 0x28
 8012bcc:	9309      	str	r3, [sp, #36]	; 0x24
 8012bce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012bd0:	4790      	blx	r2
 8012bd2:	47c0      	blx	r8
 8012bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012bd6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012bd8:	f843 0b04 	str.w	r0, [r3], #4
 8012bdc:	f1b9 0901 	subs.w	r9, r9, #1
 8012be0:	d1f1      	bne.n	8012bc6 <GUI_MEMDEV__WriteToActiveOpaque+0x6ee>
 8012be2:	e7be      	b.n	8012b62 <GUI_MEMDEV__WriteToActiveOpaque+0x68a>
 8012be4:	a818      	add	r0, sp, #96	; 0x60
 8012be6:	f7fe fb03 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8012bea:	a81a      	add	r0, sp, #104	; 0x68
 8012bec:	f7fe fb00 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8012bf0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8012bf2:	f7fe fb29 	bl	8011248 <GUI_ALLOC_Free>
 8012bf6:	b01d      	add	sp, #116	; 0x74
 8012bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012bfc <GUI_MEMDEV__WriteToActiveAlpha>:
 8012bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c00:	b091      	sub	sp, #68	; 0x44
 8012c02:	460e      	mov	r6, r1
 8012c04:	4614      	mov	r4, r2
 8012c06:	900d      	str	r0, [sp, #52]	; 0x34
 8012c08:	f7fe fae4 	bl	80111d4 <GUI_ALLOC_LockH>
 8012c0c:	4602      	mov	r2, r0
 8012c0e:	a810      	add	r0, sp, #64	; 0x40
 8012c10:	6813      	ldr	r3, [r2, #0]
 8012c12:	4d5b      	ldr	r5, [pc, #364]	; (8012d80 <GUI_MEMDEV__WriteToActiveAlpha+0x184>)
 8012c14:	691b      	ldr	r3, [r3, #16]
 8012c16:	f840 2d08 	str.w	r2, [r0, #-8]!
 8012c1a:	685b      	ldr	r3, [r3, #4]
 8012c1c:	f8b2 b008 	ldrh.w	fp, [r2, #8]
 8012c20:	f8b2 900a 	ldrh.w	r9, [r2, #10]
 8012c24:	9309      	str	r3, [sp, #36]	; 0x24
 8012c26:	f7fe fae3 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8012c2a:	682b      	ldr	r3, [r5, #0]
 8012c2c:	4f55      	ldr	r7, [pc, #340]	; (8012d84 <GUI_MEMDEV__WriteToActiveAlpha+0x188>)
 8012c2e:	7c5b      	ldrb	r3, [r3, #17]
 8012c30:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 8012c34:	68c3      	ldr	r3, [r0, #12]
 8012c36:	2108      	movs	r1, #8
 8012c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c3a:	4798      	blx	r3
 8012c3c:	682b      	ldr	r3, [r5, #0]
 8012c3e:	7c5b      	ldrb	r3, [r3, #17]
 8012c40:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8012c44:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8012c48:	2817      	cmp	r0, #23
 8012c4a:	bf88      	it	hi
 8012c4c:	2020      	movhi	r0, #32
 8012c4e:	9008      	str	r0, [sp, #32]
 8012c50:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012c54:	f8d8 2000 	ldr.w	r2, [r8]
 8012c58:	910a      	str	r1, [sp, #40]	; 0x28
 8012c5a:	2000      	movs	r0, #0
 8012c5c:	920b      	str	r2, [sp, #44]	; 0x2c
 8012c5e:	f7fb fd61 	bl	800e724 <GUI__AllocAlphaBuffer>
 8012c62:	2800      	cmp	r0, #0
 8012c64:	f040 8089 	bne.w	8012d7a <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 8012c68:	682a      	ldr	r2, [r5, #0]
 8012c6a:	fa0f f78b 	sxth.w	r7, fp
 8012c6e:	19f5      	adds	r5, r6, r7
 8012c70:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 8012c74:	3d01      	subs	r5, #1
 8012c76:	1aed      	subs	r5, r5, r3
 8012c78:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 8012c7c:	2d00      	cmp	r5, #0
 8012c7e:	bfcc      	ite	gt
 8012c80:	ebc5 0507 	rsbgt	r5, r5, r7
 8012c84:	463d      	movle	r5, r7
 8012c86:	42b3      	cmp	r3, r6
 8012c88:	bfc3      	ittte	gt
 8012c8a:	ebc6 0103 	rsbgt	r1, r6, r3
 8012c8e:	ebc1 0505 	rsbgt	r5, r1, r5
 8012c92:	461e      	movgt	r6, r3
 8012c94:	2100      	movle	r1, #0
 8012c96:	2d00      	cmp	r5, #0
 8012c98:	dd6f      	ble.n	8012d7a <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 8012c9a:	fa0f f389 	sxth.w	r3, r9
 8012c9e:	18e0      	adds	r0, r4, r3
 8012ca0:	f9b2 c00e 	ldrsh.w	ip, [r2, #14]
 8012ca4:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8012ca8:	3801      	subs	r0, #1
 8012caa:	ebcc 0000 	rsb	r0, ip, r0
 8012cae:	2800      	cmp	r0, #0
 8012cb0:	bfc8      	it	gt
 8012cb2:	ebc0 0303 	rsbgt	r3, r0, r3
 8012cb6:	4294      	cmp	r4, r2
 8012cb8:	bfbd      	ittte	lt
 8012cba:	ebc4 0a02 	rsblt	sl, r4, r2
 8012cbe:	ebca 0303 	rsblt	r3, sl, r3
 8012cc2:	4614      	movlt	r4, r2
 8012cc4:	f04f 0a00 	movge.w	sl, #0
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	dd56      	ble.n	8012d7a <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 8012ccc:	fb07 1a0a 	mla	sl, r7, sl, r1
 8012cd0:	18e3      	adds	r3, r4, r3
 8012cd2:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8012cd6:	930c      	str	r3, [sp, #48]	; 0x30
 8012cd8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8012cda:	f7f8 fc45 	bl	800b568 <GUI_MEMDEV_GetDataPtr>
 8012cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ce0:	9300      	str	r3, [sp, #0]
 8012ce2:	ab0f      	add	r3, sp, #60	; 0x3c
 8012ce4:	eb00 020a 	add.w	r2, r0, sl
 8012ce8:	9301      	str	r3, [sp, #4]
 8012cea:	4630      	mov	r0, r6
 8012cec:	4621      	mov	r1, r4
 8012cee:	462b      	mov	r3, r5
 8012cf0:	f7fb fc32 	bl	800e558 <GUI__DoAlphaBlending>
 8012cf4:	4681      	mov	r9, r0
 8012cf6:	2800      	cmp	r0, #0
 8012cf8:	d03f      	beq.n	8012d7a <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 8012cfa:	4b23      	ldr	r3, [pc, #140]	; (8012d88 <GUI_MEMDEV__WriteToActiveAlpha+0x18c>)
 8012cfc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012cfe:	4299      	cmp	r1, r3
 8012d00:	d01e      	beq.n	8012d40 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 8012d02:	4629      	mov	r1, r5
 8012d04:	9a08      	ldr	r2, [sp, #32]
 8012d06:	4643      	mov	r3, r8
 8012d08:	f001 fc52 	bl	80145b0 <GUI__CompactPixelIndicesEx>
 8012d0c:	b9c0      	cbnz	r0, 8012d40 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 8012d0e:	f8d8 c010 	ldr.w	ip, [r8, #16]
 8012d12:	f1bc 0f00 	cmp.w	ip, #0
 8012d16:	d006      	beq.n	8012d26 <GUI_MEMDEV__WriteToActiveAlpha+0x12a>
 8012d18:	4648      	mov	r0, r9
 8012d1a:	4649      	mov	r1, r9
 8012d1c:	fa0f f28b 	sxth.w	r2, fp
 8012d20:	2304      	movs	r3, #4
 8012d22:	47e0      	blx	ip
 8012d24:	e00c      	b.n	8012d40 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 8012d26:	464a      	mov	r2, r9
 8012d28:	463b      	mov	r3, r7
 8012d2a:	6810      	ldr	r0, [r2, #0]
 8012d2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012d2e:	9206      	str	r2, [sp, #24]
 8012d30:	9307      	str	r3, [sp, #28]
 8012d32:	4788      	blx	r1
 8012d34:	9b07      	ldr	r3, [sp, #28]
 8012d36:	9a06      	ldr	r2, [sp, #24]
 8012d38:	3b01      	subs	r3, #1
 8012d3a:	f842 0b04 	str.w	r0, [r2], #4
 8012d3e:	d1f4      	bne.n	8012d2a <GUI_MEMDEV__WriteToActiveAlpha+0x12e>
 8012d40:	9a08      	ldr	r2, [sp, #32]
 8012d42:	9202      	str	r2, [sp, #8]
 8012d44:	2301      	movs	r3, #1
 8012d46:	2200      	movs	r2, #0
 8012d48:	f104 0c01 	add.w	ip, r4, #1
 8012d4c:	9300      	str	r3, [sp, #0]
 8012d4e:	9301      	str	r3, [sp, #4]
 8012d50:	9203      	str	r2, [sp, #12]
 8012d52:	9205      	str	r2, [sp, #20]
 8012d54:	f8cd 9010 	str.w	r9, [sp, #16]
 8012d58:	4630      	mov	r0, r6
 8012d5a:	4621      	mov	r1, r4
 8012d5c:	462a      	mov	r2, r5
 8012d5e:	f8cd c01c 	str.w	ip, [sp, #28]
 8012d62:	f7fa ff4f 	bl	800dc04 <LCD_DrawBitmap>
 8012d66:	2304      	movs	r3, #4
 8012d68:	fb1b aa03 	smlabb	sl, fp, r3, sl
 8012d6c:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8012d70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012d72:	459c      	cmp	ip, r3
 8012d74:	d001      	beq.n	8012d7a <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 8012d76:	4664      	mov	r4, ip
 8012d78:	e7ae      	b.n	8012cd8 <GUI_MEMDEV__WriteToActiveAlpha+0xdc>
 8012d7a:	b011      	add	sp, #68	; 0x44
 8012d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d80:	20000238 	.word	0x20000238
 8012d84:	2001b2c0 	.word	0x2001b2c0
 8012d88:	080117ff 	.word	0x080117ff

08012d8c <GUI_USAGE_BM_AddPixel>:
 8012d8c:	4603      	mov	r3, r0
 8012d8e:	b510      	push	{r4, lr}
 8012d90:	f933 4b14 	ldrsh.w	r4, [r3], #20
 8012d94:	1b09      	subs	r1, r1, r4
 8012d96:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8012d9a:	6900      	ldr	r0, [r0, #16]
 8012d9c:	1b12      	subs	r2, r2, r4
 8012d9e:	fb00 3302 	mla	r3, r0, r2, r3
 8012da2:	10c8      	asrs	r0, r1, #3
 8012da4:	2280      	movs	r2, #128	; 0x80
 8012da6:	f001 0107 	and.w	r1, r1, #7
 8012daa:	fa42 f101 	asr.w	r1, r2, r1
 8012dae:	5c1a      	ldrb	r2, [r3, r0]
 8012db0:	4311      	orrs	r1, r2
 8012db2:	5419      	strb	r1, [r3, r0]
 8012db4:	bd10      	pop	{r4, pc}

08012db6 <GUI_USAGE_BM_GetNextDirty>:
 8012db6:	b570      	push	{r4, r5, r6, lr}
 8012db8:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 8012dbc:	680b      	ldr	r3, [r1, #0]
 8012dbe:	8886      	ldrh	r6, [r0, #4]
 8012dc0:	42a2      	cmp	r2, r4
 8012dc2:	da41      	bge.n	8012e48 <GUI_USAGE_BM_GetNextDirty+0x92>
 8012dc4:	b236      	sxth	r6, r6
 8012dc6:	42b3      	cmp	r3, r6
 8012dc8:	6904      	ldr	r4, [r0, #16]
 8012dca:	da3d      	bge.n	8012e48 <GUI_USAGE_BM_GetNextDirty+0x92>
 8012dcc:	3014      	adds	r0, #20
 8012dce:	fb04 0202 	mla	r2, r4, r2, r0
 8012dd2:	10dd      	asrs	r5, r3, #3
 8012dd4:	1e70      	subs	r0, r6, #1
 8012dd6:	1954      	adds	r4, r2, r5
 8012dd8:	ebc5 00e0 	rsb	r0, r5, r0, asr #3
 8012ddc:	5d55      	ldrb	r5, [r2, r5]
 8012dde:	f003 0207 	and.w	r2, r3, #7
 8012de2:	fa05 f202 	lsl.w	r2, r5, r2
 8012de6:	3401      	adds	r4, #1
 8012de8:	b2d2      	uxtb	r2, r2
 8012dea:	b93a      	cbnz	r2, 8012dfc <GUI_USAGE_BM_GetNextDirty+0x46>
 8012dec:	b368      	cbz	r0, 8012e4a <GUI_USAGE_BM_GetNextDirty+0x94>
 8012dee:	3308      	adds	r3, #8
 8012df0:	f814 2b01 	ldrb.w	r2, [r4], #1
 8012df4:	3801      	subs	r0, #1
 8012df6:	f023 0307 	bic.w	r3, r3, #7
 8012dfa:	e7f6      	b.n	8012dea <GUI_USAGE_BM_GetNextDirty+0x34>
 8012dfc:	0615      	lsls	r5, r2, #24
 8012dfe:	d403      	bmi.n	8012e08 <GUI_USAGE_BM_GetNextDirty+0x52>
 8012e00:	0052      	lsls	r2, r2, #1
 8012e02:	b2d2      	uxtb	r2, r2
 8012e04:	3301      	adds	r3, #1
 8012e06:	e7f9      	b.n	8012dfc <GUI_USAGE_BM_GetNextDirty+0x46>
 8012e08:	2aff      	cmp	r2, #255	; 0xff
 8012e0a:	461d      	mov	r5, r3
 8012e0c:	d005      	beq.n	8012e1a <GUI_USAGE_BM_GetNextDirty+0x64>
 8012e0e:	0656      	lsls	r6, r2, #25
 8012e10:	d504      	bpl.n	8012e1c <GUI_USAGE_BM_GetNextDirty+0x66>
 8012e12:	0052      	lsls	r2, r2, #1
 8012e14:	b2d2      	uxtb	r2, r2
 8012e16:	3301      	adds	r3, #1
 8012e18:	e7f9      	b.n	8012e0e <GUI_USAGE_BM_GetNextDirty+0x58>
 8012e1a:	3307      	adds	r3, #7
 8012e1c:	f003 0207 	and.w	r2, r3, #7
 8012e20:	2a07      	cmp	r2, #7
 8012e22:	d10d      	bne.n	8012e40 <GUI_USAGE_BM_GetNextDirty+0x8a>
 8012e24:	3801      	subs	r0, #1
 8012e26:	d40b      	bmi.n	8012e40 <GUI_USAGE_BM_GetNextDirty+0x8a>
 8012e28:	f814 2b01 	ldrb.w	r2, [r4], #1
 8012e2c:	2aff      	cmp	r2, #255	; 0xff
 8012e2e:	d101      	bne.n	8012e34 <GUI_USAGE_BM_GetNextDirty+0x7e>
 8012e30:	3308      	adds	r3, #8
 8012e32:	e7f7      	b.n	8012e24 <GUI_USAGE_BM_GetNextDirty+0x6e>
 8012e34:	0610      	lsls	r0, r2, #24
 8012e36:	d503      	bpl.n	8012e40 <GUI_USAGE_BM_GetNextDirty+0x8a>
 8012e38:	0052      	lsls	r2, r2, #1
 8012e3a:	b2d2      	uxtb	r2, r2
 8012e3c:	3301      	adds	r3, #1
 8012e3e:	e7f9      	b.n	8012e34 <GUI_USAGE_BM_GetNextDirty+0x7e>
 8012e40:	1b58      	subs	r0, r3, r5
 8012e42:	600d      	str	r5, [r1, #0]
 8012e44:	3001      	adds	r0, #1
 8012e46:	bd70      	pop	{r4, r5, r6, pc}
 8012e48:	2000      	movs	r0, #0
 8012e4a:	bd70      	pop	{r4, r5, r6, pc}

08012e4c <_GUI_USAGE_BM_Delete>:
 8012e4c:	f7fe b9fc 	b.w	8011248 <GUI_ALLOC_Free>

08012e50 <GUI_USAGE_BM_Clear>:
 8012e50:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8012e54:	6902      	ldr	r2, [r0, #16]
 8012e56:	2100      	movs	r1, #0
 8012e58:	3014      	adds	r0, #20
 8012e5a:	435a      	muls	r2, r3
 8012e5c:	f002 bc1d 	b.w	801569a <memset>

08012e60 <GUI_USAGE_BM_AddHLine>:
 8012e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e62:	f9b0 4000 	ldrsh.w	r4, [r0]
 8012e66:	1b09      	subs	r1, r1, r4
 8012e68:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8012e6c:	42a1      	cmp	r1, r4
 8012e6e:	da2f      	bge.n	8012ed0 <GUI_USAGE_BM_AddHLine+0x70>
 8012e70:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 8012e74:	440b      	add	r3, r1
 8012e76:	f100 0414 	add.w	r4, r0, #20
 8012e7a:	3b01      	subs	r3, #1
 8012e7c:	6900      	ldr	r0, [r0, #16]
 8012e7e:	1b52      	subs	r2, r2, r5
 8012e80:	43de      	mvns	r6, r3
 8012e82:	fb00 4202 	mla	r2, r0, r2, r4
 8012e86:	f001 0707 	and.w	r7, r1, #7
 8012e8a:	10cc      	asrs	r4, r1, #3
 8012e8c:	f006 0607 	and.w	r6, r6, #7
 8012e90:	21ff      	movs	r1, #255	; 0xff
 8012e92:	fa41 f707 	asr.w	r7, r1, r7
 8012e96:	fa01 f606 	lsl.w	r6, r1, r6
 8012e9a:	ebd4 03e3 	rsbs	r3, r4, r3, asr #3
 8012e9e:	eb02 0504 	add.w	r5, r2, r4
 8012ea2:	b2ff      	uxtb	r7, r7
 8012ea4:	b2f6      	uxtb	r6, r6
 8012ea6:	5d10      	ldrb	r0, [r2, r4]
 8012ea8:	d103      	bne.n	8012eb2 <GUI_USAGE_BM_AddHLine+0x52>
 8012eaa:	403e      	ands	r6, r7
 8012eac:	4330      	orrs	r0, r6
 8012eae:	5510      	strb	r0, [r2, r4]
 8012eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012eb2:	4338      	orrs	r0, r7
 8012eb4:	5510      	strb	r0, [r2, r4]
 8012eb6:	1e5c      	subs	r4, r3, #1
 8012eb8:	2c00      	cmp	r4, #0
 8012eba:	f105 0501 	add.w	r5, r5, #1
 8012ebe:	dd04      	ble.n	8012eca <GUI_USAGE_BM_AddHLine+0x6a>
 8012ec0:	4628      	mov	r0, r5
 8012ec2:	4622      	mov	r2, r4
 8012ec4:	f002 fbe9 	bl	801569a <memset>
 8012ec8:	4425      	add	r5, r4
 8012eca:	782b      	ldrb	r3, [r5, #0]
 8012ecc:	431e      	orrs	r6, r3
 8012ece:	702e      	strb	r6, [r5, #0]
 8012ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012ed4 <GUI_USAGE_BM_Create>:
 8012ed4:	e92d 4fd3 	stmdb	sp!, {r0, r1, r4, r6, r7, r8, r9, sl, fp, lr}
 8012ed8:	f102 060f 	add.w	r6, r2, #15
 8012edc:	1136      	asrs	r6, r6, #4
 8012ede:	0076      	lsls	r6, r6, #1
 8012ee0:	4682      	mov	sl, r0
 8012ee2:	fb06 f003 	mul.w	r0, r6, r3
 8012ee6:	3014      	adds	r0, #20
 8012ee8:	4689      	mov	r9, r1
 8012eea:	4690      	mov	r8, r2
 8012eec:	461f      	mov	r7, r3
 8012eee:	f7fe fbde 	bl	80116ae <GUI_ALLOC_AllocZero>
 8012ef2:	4683      	mov	fp, r0
 8012ef4:	b198      	cbz	r0, 8012f1e <GUI_USAGE_BM_Create+0x4a>
 8012ef6:	f7fe f96d 	bl	80111d4 <GUI_ALLOC_LockH>
 8012efa:	4604      	mov	r4, r0
 8012efc:	4b0a      	ldr	r3, [pc, #40]	; (8012f28 <GUI_USAGE_BM_Create+0x54>)
 8012efe:	60a3      	str	r3, [r4, #8]
 8012f00:	a802      	add	r0, sp, #8
 8012f02:	2301      	movs	r3, #1
 8012f04:	f840 4d04 	str.w	r4, [r0, #-4]!
 8012f08:	f8a4 8004 	strh.w	r8, [r4, #4]
 8012f0c:	f8a4 a000 	strh.w	sl, [r4]
 8012f10:	f8a4 9002 	strh.w	r9, [r4, #2]
 8012f14:	80e7      	strh	r7, [r4, #6]
 8012f16:	81a3      	strh	r3, [r4, #12]
 8012f18:	6126      	str	r6, [r4, #16]
 8012f1a:	f7fe f969 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8012f1e:	4658      	mov	r0, fp
 8012f20:	b002      	add	sp, #8
 8012f22:	e8bd 8fd0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, sl, fp, pc}
 8012f26:	bf00      	nop
 8012f28:	0801a80c 	.word	0x0801a80c

08012f2c <GUI_USAGE_DecUseCnt>:
 8012f2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012f2e:	4605      	mov	r5, r0
 8012f30:	f7fe f950 	bl	80111d4 <GUI_ALLOC_LockH>
 8012f34:	4602      	mov	r2, r0
 8012f36:	a802      	add	r0, sp, #8
 8012f38:	8994      	ldrh	r4, [r2, #12]
 8012f3a:	f840 2d04 	str.w	r2, [r0, #-4]!
 8012f3e:	3c01      	subs	r4, #1
 8012f40:	b2a4      	uxth	r4, r4
 8012f42:	8194      	strh	r4, [r2, #12]
 8012f44:	f7fe f954 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8012f48:	b914      	cbnz	r4, 8012f50 <GUI_USAGE_DecUseCnt+0x24>
 8012f4a:	4628      	mov	r0, r5
 8012f4c:	f7fe f97c 	bl	8011248 <GUI_ALLOC_Free>
 8012f50:	b003      	add	sp, #12
 8012f52:	bd30      	pop	{r4, r5, pc}

08012f54 <GUI_USAGE_AddRect>:
 8012f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f58:	4605      	mov	r5, r0
 8012f5a:	4688      	mov	r8, r1
 8012f5c:	4617      	mov	r7, r2
 8012f5e:	4699      	mov	r9, r3
 8012f60:	68a8      	ldr	r0, [r5, #8]
 8012f62:	464b      	mov	r3, r9
 8012f64:	6846      	ldr	r6, [r0, #4]
 8012f66:	4641      	mov	r1, r8
 8012f68:	4628      	mov	r0, r5
 8012f6a:	1c54      	adds	r4, r2, #1
 8012f6c:	47b0      	blx	r6
 8012f6e:	9b08      	ldr	r3, [sp, #32]
 8012f70:	443b      	add	r3, r7
 8012f72:	42a3      	cmp	r3, r4
 8012f74:	d001      	beq.n	8012f7a <GUI_USAGE_AddRect+0x26>
 8012f76:	4622      	mov	r2, r4
 8012f78:	e7f2      	b.n	8012f60 <GUI_USAGE_AddRect+0xc>
 8012f7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08012f80 <GUI_MEMDEV_ReduceYSize>:
 8012f80:	b513      	push	{r0, r1, r4, lr}
 8012f82:	460c      	mov	r4, r1
 8012f84:	b918      	cbnz	r0, 8012f8e <GUI_MEMDEV_ReduceYSize+0xe>
 8012f86:	4b08      	ldr	r3, [pc, #32]	; (8012fa8 <GUI_MEMDEV_ReduceYSize+0x28>)
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8012f8c:	b150      	cbz	r0, 8012fa4 <GUI_MEMDEV_ReduceYSize+0x24>
 8012f8e:	f7fe f921 	bl	80111d4 <GUI_ALLOC_LockH>
 8012f92:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8012f96:	9001      	str	r0, [sp, #4]
 8012f98:	429c      	cmp	r4, r3
 8012f9a:	bfb8      	it	lt
 8012f9c:	8144      	strhlt	r4, [r0, #10]
 8012f9e:	a801      	add	r0, sp, #4
 8012fa0:	f7fe f926 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8012fa4:	b002      	add	sp, #8
 8012fa6:	bd10      	pop	{r4, pc}
 8012fa8:	20000238 	.word	0x20000238

08012fac <_GetDevData>:
 8012fac:	4802      	ldr	r0, [pc, #8]	; (8012fb8 <_GetDevData+0xc>)
 8012fae:	2901      	cmp	r1, #1
 8012fb0:	bf18      	it	ne
 8012fb2:	2000      	movne	r0, #0
 8012fb4:	4770      	bx	lr
 8012fb6:	bf00      	nop
 8012fb8:	0801a864 	.word	0x0801a864

08012fbc <_GetDevFunc>:
 8012fbc:	4802      	ldr	r0, [pc, #8]	; (8012fc8 <_GetDevFunc+0xc>)
 8012fbe:	2916      	cmp	r1, #22
 8012fc0:	bf18      	it	ne
 8012fc2:	2000      	movne	r0, #0
 8012fc4:	4770      	bx	lr
 8012fc6:	bf00      	nop
 8012fc8:	080124d9 	.word	0x080124d9

08012fcc <_SetOrg>:
 8012fcc:	6800      	ldr	r0, [r0, #0]
 8012fce:	b508      	push	{r3, lr}
 8012fd0:	b110      	cbz	r0, 8012fd8 <_SetOrg+0xc>
 8012fd2:	68c3      	ldr	r3, [r0, #12]
 8012fd4:	6a1b      	ldr	r3, [r3, #32]
 8012fd6:	4798      	blx	r3
 8012fd8:	bd08      	pop	{r3, pc}

08012fda <_GetDevProp>:
 8012fda:	6800      	ldr	r0, [r0, #0]
 8012fdc:	b508      	push	{r3, lr}
 8012fde:	b118      	cbz	r0, 8012fe8 <_GetDevProp+0xe>
 8012fe0:	68c3      	ldr	r3, [r0, #12]
 8012fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012fe4:	4798      	blx	r3
 8012fe6:	bd08      	pop	{r3, pc}
 8012fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8012fec:	bd08      	pop	{r3, pc}

08012fee <_GetRect>:
 8012fee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012ff0:	6880      	ldr	r0, [r0, #8]
 8012ff2:	460c      	mov	r4, r1
 8012ff4:	f7fe f8ee 	bl	80111d4 <GUI_ALLOC_LockH>
 8012ff8:	4603      	mov	r3, r0
 8012ffa:	a802      	add	r0, sp, #8
 8012ffc:	8899      	ldrh	r1, [r3, #4]
 8012ffe:	88da      	ldrh	r2, [r3, #6]
 8013000:	891d      	ldrh	r5, [r3, #8]
 8013002:	f840 3d04 	str.w	r3, [r0, #-4]!
 8013006:	895b      	ldrh	r3, [r3, #10]
 8013008:	8021      	strh	r1, [r4, #0]
 801300a:	8062      	strh	r2, [r4, #2]
 801300c:	4429      	add	r1, r5
 801300e:	441a      	add	r2, r3
 8013010:	3901      	subs	r1, #1
 8013012:	3a01      	subs	r2, #1
 8013014:	80a1      	strh	r1, [r4, #4]
 8013016:	80e2      	strh	r2, [r4, #6]
 8013018:	f7fe f8ea 	bl	80111f0 <GUI_ALLOC_UnlockH>
 801301c:	b003      	add	sp, #12
 801301e:	bd30      	pop	{r4, r5, pc}

08013020 <_XY2PTR>:
 8013020:	4b0e      	ldr	r3, [pc, #56]	; (801305c <_XY2PTR+0x3c>)
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013026:	4605      	mov	r5, r0
 8013028:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801302a:	460e      	mov	r6, r1
 801302c:	f7fe f8d2 	bl	80111d4 <GUI_ALLOC_LockH>
 8013030:	4603      	mov	r3, r0
 8013032:	a802      	add	r0, sp, #8
 8013034:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 8013038:	f840 3d04 	str.w	r3, [r0, #-4]!
 801303c:	f103 0118 	add.w	r1, r3, #24
 8013040:	1b36      	subs	r6, r6, r4
 8013042:	68dc      	ldr	r4, [r3, #12]
 8013044:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013048:	fb04 1406 	mla	r4, r4, r6, r1
 801304c:	1aed      	subs	r5, r5, r3
 801304e:	f7fe f8cf 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8013052:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8013056:	4620      	mov	r0, r4
 8013058:	b002      	add	sp, #8
 801305a:	bd70      	pop	{r4, r5, r6, pc}
 801305c:	20000238 	.word	0x20000238

08013060 <_GetPixelIndex>:
 8013060:	b508      	push	{r3, lr}
 8013062:	4608      	mov	r0, r1
 8013064:	4611      	mov	r1, r2
 8013066:	f7ff ffdb 	bl	8013020 <_XY2PTR>
 801306a:	8800      	ldrh	r0, [r0, #0]
 801306c:	bd08      	pop	{r3, pc}
	...

08013070 <_XorPixel>:
 8013070:	4b14      	ldr	r3, [pc, #80]	; (80130c4 <_XorPixel+0x54>)
 8013072:	681b      	ldr	r3, [r3, #0]
 8013074:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013076:	4607      	mov	r7, r0
 8013078:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801307a:	4615      	mov	r5, r2
 801307c:	460e      	mov	r6, r1
 801307e:	f7fe f8a9 	bl	80111d4 <GUI_ALLOC_LockH>
 8013082:	4629      	mov	r1, r5
 8013084:	9000      	str	r0, [sp, #0]
 8013086:	4630      	mov	r0, r6
 8013088:	f7ff ffca 	bl	8013020 <_XY2PTR>
 801308c:	693b      	ldr	r3, [r7, #16]
 801308e:	4604      	mov	r4, r0
 8013090:	689b      	ldr	r3, [r3, #8]
 8013092:	4798      	blx	r3
 8013094:	8823      	ldrh	r3, [r4, #0]
 8013096:	4058      	eors	r0, r3
 8013098:	9b00      	ldr	r3, [sp, #0]
 801309a:	8020      	strh	r0, [r4, #0]
 801309c:	6958      	ldr	r0, [r3, #20]
 801309e:	b160      	cbz	r0, 80130ba <_XorPixel+0x4a>
 80130a0:	f7fe f898 	bl	80111d4 <GUI_ALLOC_LockH>
 80130a4:	ac02      	add	r4, sp, #8
 80130a6:	6883      	ldr	r3, [r0, #8]
 80130a8:	f844 0d04 	str.w	r0, [r4, #-4]!
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	4631      	mov	r1, r6
 80130b0:	462a      	mov	r2, r5
 80130b2:	4798      	blx	r3
 80130b4:	4620      	mov	r0, r4
 80130b6:	f7fe f89b 	bl	80111f0 <GUI_ALLOC_UnlockH>
 80130ba:	4668      	mov	r0, sp
 80130bc:	f7fe f898 	bl	80111f0 <GUI_ALLOC_UnlockH>
 80130c0:	b003      	add	sp, #12
 80130c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80130c4:	20000238 	.word	0x20000238

080130c8 <_SetPixelIndex>:
 80130c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80130ca:	461c      	mov	r4, r3
 80130cc:	4b10      	ldr	r3, [pc, #64]	; (8013110 <_SetPixelIndex+0x48>)
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80130d2:	460e      	mov	r6, r1
 80130d4:	4615      	mov	r5, r2
 80130d6:	f7fe f87d 	bl	80111d4 <GUI_ALLOC_LockH>
 80130da:	4629      	mov	r1, r5
 80130dc:	9000      	str	r0, [sp, #0]
 80130de:	4630      	mov	r0, r6
 80130e0:	f7ff ff9e 	bl	8013020 <_XY2PTR>
 80130e4:	9b00      	ldr	r3, [sp, #0]
 80130e6:	8004      	strh	r4, [r0, #0]
 80130e8:	6958      	ldr	r0, [r3, #20]
 80130ea:	b160      	cbz	r0, 8013106 <_SetPixelIndex+0x3e>
 80130ec:	f7fe f872 	bl	80111d4 <GUI_ALLOC_LockH>
 80130f0:	ac02      	add	r4, sp, #8
 80130f2:	6883      	ldr	r3, [r0, #8]
 80130f4:	f844 0d04 	str.w	r0, [r4, #-4]!
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	4631      	mov	r1, r6
 80130fc:	462a      	mov	r2, r5
 80130fe:	4798      	blx	r3
 8013100:	4620      	mov	r0, r4
 8013102:	f7fe f875 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8013106:	4668      	mov	r0, sp
 8013108:	f7fe f872 	bl	80111f0 <GUI_ALLOC_UnlockH>
 801310c:	b002      	add	sp, #8
 801310e:	bd70      	pop	{r4, r5, r6, pc}
 8013110:	20000238 	.word	0x20000238

08013114 <_DrawVLine>:
 8013114:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8013118:	4d2c      	ldr	r5, [pc, #176]	; (80131cc <_DrawVLine+0xb8>)
 801311a:	461e      	mov	r6, r3
 801311c:	682b      	ldr	r3, [r5, #0]
 801311e:	4681      	mov	r9, r0
 8013120:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8013122:	460f      	mov	r7, r1
 8013124:	4614      	mov	r4, r2
 8013126:	f7fe f855 	bl	80111d4 <GUI_ALLOC_LockH>
 801312a:	9000      	str	r0, [sp, #0]
 801312c:	6940      	ldr	r0, [r0, #20]
 801312e:	46aa      	mov	sl, r5
 8013130:	b108      	cbz	r0, 8013136 <_DrawVLine+0x22>
 8013132:	f7fe f84f 	bl	80111d4 <GUI_ALLOC_LockH>
 8013136:	9001      	str	r0, [sp, #4]
 8013138:	4621      	mov	r1, r4
 801313a:	4638      	mov	r0, r7
 801313c:	f7ff ff70 	bl	8013020 <_XY2PTR>
 8013140:	9b00      	ldr	r3, [sp, #0]
 8013142:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8013146:	f8da 3000 	ldr.w	r3, [sl]
 801314a:	7c1a      	ldrb	r2, [r3, #16]
 801314c:	07d2      	lsls	r2, r2, #31
 801314e:	4605      	mov	r5, r0
 8013150:	d51f      	bpl.n	8013192 <_DrawVLine+0x7e>
 8013152:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013156:	689b      	ldr	r3, [r3, #8]
 8013158:	4798      	blx	r3
 801315a:	fa1f f880 	uxth.w	r8, r0
 801315e:	9801      	ldr	r0, [sp, #4]
 8013160:	b120      	cbz	r0, 801316c <_DrawVLine+0x58>
 8013162:	6883      	ldr	r3, [r0, #8]
 8013164:	4639      	mov	r1, r7
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	4622      	mov	r2, r4
 801316a:	4798      	blx	r3
 801316c:	882b      	ldrh	r3, [r5, #0]
 801316e:	ea88 0303 	eor.w	r3, r8, r3
 8013172:	802b      	strh	r3, [r5, #0]
 8013174:	9b00      	ldr	r3, [sp, #0]
 8013176:	3401      	adds	r4, #1
 8013178:	68db      	ldr	r3, [r3, #12]
 801317a:	42b4      	cmp	r4, r6
 801317c:	441d      	add	r5, r3
 801317e:	ddee      	ble.n	801315e <_DrawVLine+0x4a>
 8013180:	4668      	mov	r0, sp
 8013182:	f7fe f835 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8013186:	9b01      	ldr	r3, [sp, #4]
 8013188:	b1eb      	cbz	r3, 80131c6 <_DrawVLine+0xb2>
 801318a:	a801      	add	r0, sp, #4
 801318c:	f7fe f830 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8013190:	e019      	b.n	80131c6 <_DrawVLine+0xb2>
 8013192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013194:	f8d3 9000 	ldr.w	r9, [r3]
 8013198:	9b01      	ldr	r3, [sp, #4]
 801319a:	b163      	cbz	r3, 80131b6 <_DrawVLine+0xa2>
 801319c:	9801      	ldr	r0, [sp, #4]
 801319e:	6883      	ldr	r3, [r0, #8]
 80131a0:	4622      	mov	r2, r4
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	4639      	mov	r1, r7
 80131a6:	3401      	adds	r4, #1
 80131a8:	4798      	blx	r3
 80131aa:	42b4      	cmp	r4, r6
 80131ac:	f8a5 9000 	strh.w	r9, [r5]
 80131b0:	4445      	add	r5, r8
 80131b2:	ddf3      	ble.n	801319c <_DrawVLine+0x88>
 80131b4:	e7e4      	b.n	8013180 <_DrawVLine+0x6c>
 80131b6:	1b34      	subs	r4, r6, r4
 80131b8:	3401      	adds	r4, #1
 80131ba:	3c01      	subs	r4, #1
 80131bc:	f8a5 9000 	strh.w	r9, [r5]
 80131c0:	4445      	add	r5, r8
 80131c2:	d1fa      	bne.n	80131ba <_DrawVLine+0xa6>
 80131c4:	e7dc      	b.n	8013180 <_DrawVLine+0x6c>
 80131c6:	b002      	add	sp, #8
 80131c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131cc:	20000238 	.word	0x20000238

080131d0 <_FillRect>:
 80131d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131d4:	4f2a      	ldr	r7, [pc, #168]	; (8013280 <_FillRect+0xb0>)
 80131d6:	4614      	mov	r4, r2
 80131d8:	683a      	ldr	r2, [r7, #0]
 80131da:	4698      	mov	r8, r3
 80131dc:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80131de:	b087      	sub	sp, #28
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	9302      	str	r3, [sp, #8]
 80131e4:	4682      	mov	sl, r0
 80131e6:	6e10      	ldr	r0, [r2, #96]	; 0x60
 80131e8:	460e      	mov	r6, r1
 80131ea:	f7fd fff3 	bl	80111d4 <GUI_ALLOC_LockH>
 80131ee:	4621      	mov	r1, r4
 80131f0:	9004      	str	r0, [sp, #16]
 80131f2:	4630      	mov	r0, r6
 80131f4:	f7ff ff14 	bl	8013020 <_XY2PTR>
 80131f8:	9a04      	ldr	r2, [sp, #16]
 80131fa:	4605      	mov	r5, r0
 80131fc:	6950      	ldr	r0, [r2, #20]
 80131fe:	68d3      	ldr	r3, [r2, #12]
 8013200:	9303      	str	r3, [sp, #12]
 8013202:	ebc6 0908 	rsb	r9, r6, r8
 8013206:	f109 0801 	add.w	r8, r9, #1
 801320a:	46bb      	mov	fp, r7
 801320c:	b180      	cbz	r0, 8013230 <_FillRect+0x60>
 801320e:	f7fd ffe1 	bl	80111d4 <GUI_ALLOC_LockH>
 8013212:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013214:	af06      	add	r7, sp, #24
 8013216:	1b13      	subs	r3, r2, r4
 8013218:	f847 0d04 	str.w	r0, [r7, #-4]!
 801321c:	3301      	adds	r3, #1
 801321e:	9300      	str	r3, [sp, #0]
 8013220:	4631      	mov	r1, r6
 8013222:	4622      	mov	r2, r4
 8013224:	4643      	mov	r3, r8
 8013226:	f7ff fe95 	bl	8012f54 <GUI_USAGE_AddRect>
 801322a:	4638      	mov	r0, r7
 801322c:	f7fd ffe0 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8013230:	ea4f 0649 	mov.w	r6, r9, lsl #1
 8013234:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013236:	429c      	cmp	r4, r3
 8013238:	dc1c      	bgt.n	8013274 <_FillRect+0xa4>
 801323a:	f8db 3000 	ldr.w	r3, [fp]
 801323e:	7c1b      	ldrb	r3, [r3, #16]
 8013240:	07db      	lsls	r3, r3, #31
 8013242:	d50d      	bpl.n	8013260 <_FillRect+0x90>
 8013244:	f8da 3010 	ldr.w	r3, [sl, #16]
 8013248:	689b      	ldr	r3, [r3, #8]
 801324a:	4798      	blx	r3
 801324c:	19aa      	adds	r2, r5, r6
 801324e:	b280      	uxth	r0, r0
 8013250:	1eab      	subs	r3, r5, #2
 8013252:	8859      	ldrh	r1, [r3, #2]
 8013254:	4041      	eors	r1, r0
 8013256:	f823 1f02 	strh.w	r1, [r3, #2]!
 801325a:	4293      	cmp	r3, r2
 801325c:	d1f9      	bne.n	8013252 <_FillRect+0x82>
 801325e:	e005      	b.n	801326c <_FillRect+0x9c>
 8013260:	9b02      	ldr	r3, [sp, #8]
 8013262:	4628      	mov	r0, r5
 8013264:	b299      	uxth	r1, r3
 8013266:	4642      	mov	r2, r8
 8013268:	f7fa fe9a 	bl	800dfa0 <GUI__memset16>
 801326c:	9a03      	ldr	r2, [sp, #12]
 801326e:	3401      	adds	r4, #1
 8013270:	4415      	add	r5, r2
 8013272:	e7df      	b.n	8013234 <_FillRect+0x64>
 8013274:	a804      	add	r0, sp, #16
 8013276:	f7fd ffbb 	bl	80111f0 <GUI_ALLOC_UnlockH>
 801327a:	b007      	add	sp, #28
 801327c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013280:	20000238 	.word	0x20000238

08013284 <_DrawHLine>:
 8013284:	b507      	push	{r0, r1, r2, lr}
 8013286:	9200      	str	r2, [sp, #0]
 8013288:	f7ff ffa2 	bl	80131d0 <_FillRect>
 801328c:	b003      	add	sp, #12
 801328e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08013294 <_DrawBitmap>:
 8013294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013298:	4c8a      	ldr	r4, [pc, #552]	; (80134c4 <_DrawBitmap+0x230>)
 801329a:	b093      	sub	sp, #76	; 0x4c
 801329c:	469b      	mov	fp, r3
 801329e:	6823      	ldr	r3, [r4, #0]
 80132a0:	900d      	str	r0, [sp, #52]	; 0x34
 80132a2:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80132a4:	9207      	str	r2, [sp, #28]
 80132a6:	460d      	mov	r5, r1
 80132a8:	f8dd a07c 	ldr.w	sl, [sp, #124]	; 0x7c
 80132ac:	f7fd ff92 	bl	80111d4 <GUI_ALLOC_LockH>
 80132b0:	9010      	str	r0, [sp, #64]	; 0x40
 80132b2:	6940      	ldr	r0, [r0, #20]
 80132b4:	b108      	cbz	r0, 80132ba <_DrawBitmap+0x26>
 80132b6:	f7fd ff8d 	bl	80111d4 <GUI_ALLOC_LockH>
 80132ba:	9011      	str	r0, [sp, #68]	; 0x44
 80132bc:	a812      	add	r0, sp, #72	; 0x48
 80132be:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 80132c2:	68db      	ldr	r3, [r3, #12]
 80132c4:	9308      	str	r3, [sp, #32]
 80132c6:	f7fd ff93 	bl	80111f0 <GUI_ALLOC_UnlockH>
 80132ca:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80132cc:	9811      	ldr	r0, [sp, #68]	; 0x44
 80132ce:	442e      	add	r6, r5
 80132d0:	9604      	str	r6, [sp, #16]
 80132d2:	b150      	cbz	r0, 80132ea <_DrawBitmap+0x56>
 80132d4:	6823      	ldr	r3, [r4, #0]
 80132d6:	7c1b      	ldrb	r3, [r3, #16]
 80132d8:	0799      	lsls	r1, r3, #30
 80132da:	d106      	bne.n	80132ea <_DrawBitmap+0x56>
 80132dc:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80132de:	9700      	str	r7, [sp, #0]
 80132e0:	4631      	mov	r1, r6
 80132e2:	9a07      	ldr	r2, [sp, #28]
 80132e4:	465b      	mov	r3, fp
 80132e6:	f7ff fe35 	bl	8012f54 <GUI_USAGE_AddRect>
 80132ea:	9804      	ldr	r0, [sp, #16]
 80132ec:	9907      	ldr	r1, [sp, #28]
 80132ee:	f7ff fe97 	bl	8013020 <_XY2PTR>
 80132f2:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80132f4:	2e10      	cmp	r6, #16
 80132f6:	4604      	mov	r4, r0
 80132f8:	d139      	bne.n	801336e <_DrawBitmap+0xda>
 80132fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80132fc:	b11b      	cbz	r3, 8013306 <_DrawBitmap+0x72>
 80132fe:	ea4f 064b 	mov.w	r6, fp, lsl #1
 8013302:	2500      	movs	r5, #0
 8013304:	e014      	b.n	8013330 <_DrawBitmap+0x9c>
 8013306:	4b70      	ldr	r3, [pc, #448]	; (80134c8 <_DrawBitmap+0x234>)
 8013308:	681d      	ldr	r5, [r3, #0]
 801330a:	2d00      	cmp	r5, #0
 801330c:	d0f7      	beq.n	80132fe <_DrawBitmap+0x6a>
 801330e:	9e08      	ldr	r6, [sp, #32]
 8013310:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8013312:	9600      	str	r6, [sp, #0]
 8013314:	9701      	str	r7, [sp, #4]
 8013316:	4651      	mov	r1, sl
 8013318:	465a      	mov	r2, fp
 801331a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801331c:	47a8      	blx	r5
 801331e:	e345      	b.n	80139ac <_DrawBitmap+0x718>
 8013320:	f1ba 0f00 	cmp.w	sl, #0
 8013324:	d10a      	bne.n	801333c <_DrawBitmap+0xa8>
 8013326:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8013328:	44ba      	add	sl, r7
 801332a:	9f08      	ldr	r7, [sp, #32]
 801332c:	3501      	adds	r5, #1
 801332e:	443c      	add	r4, r7
 8013330:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8013332:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 8013336:	42bd      	cmp	r5, r7
 8013338:	dbf2      	blt.n	8013320 <_DrawBitmap+0x8c>
 801333a:	e013      	b.n	8013364 <_DrawBitmap+0xd0>
 801333c:	2c00      	cmp	r4, #0
 801333e:	d0f2      	beq.n	8013326 <_DrawBitmap+0x92>
 8013340:	4620      	mov	r0, r4
 8013342:	4651      	mov	r1, sl
 8013344:	4632      	mov	r2, r6
 8013346:	f002 f984 	bl	8015652 <memcpy>
 801334a:	f1b8 0f00 	cmp.w	r8, #0
 801334e:	d0ea      	beq.n	8013326 <_DrawBitmap+0x92>
 8013350:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013354:	9a07      	ldr	r2, [sp, #28]
 8013356:	685f      	ldr	r7, [r3, #4]
 8013358:	9904      	ldr	r1, [sp, #16]
 801335a:	4640      	mov	r0, r8
 801335c:	442a      	add	r2, r5
 801335e:	465b      	mov	r3, fp
 8013360:	47b8      	blx	r7
 8013362:	e7e0      	b.n	8013326 <_DrawBitmap+0x92>
 8013364:	f1b8 0f00 	cmp.w	r8, #0
 8013368:	f040 831d 	bne.w	80139a6 <_DrawBitmap+0x712>
 801336c:	e31e      	b.n	80139ac <_DrawBitmap+0x718>
 801336e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8013370:	2e17      	cmp	r6, #23
 8013372:	dd38      	ble.n	80133e6 <_DrawBitmap+0x152>
 8013374:	2600      	movs	r6, #0
 8013376:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8013378:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801337a:	42be      	cmp	r6, r7
 801337c:	f280 809d 	bge.w	80134ba <_DrawBitmap+0x226>
 8013380:	9f07      	ldr	r7, [sp, #28]
 8013382:	4437      	add	r7, r6
 8013384:	f1ba 0f00 	cmp.w	sl, #0
 8013388:	d027      	beq.n	80133da <_DrawBitmap+0x146>
 801338a:	b334      	cbz	r4, 80133da <_DrawBitmap+0x146>
 801338c:	b13d      	cbz	r5, 801339e <_DrawBitmap+0x10a>
 801338e:	68ab      	ldr	r3, [r5, #8]
 8013390:	9904      	ldr	r1, [sp, #16]
 8013392:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8013396:	4628      	mov	r0, r5
 8013398:	463a      	mov	r2, r7
 801339a:	465b      	mov	r3, fp
 801339c:	47e0      	blx	ip
 801339e:	1ea3      	subs	r3, r4, #2
 80133a0:	f1aa 0904 	sub.w	r9, sl, #4
 80133a4:	9303      	str	r3, [sp, #12]
 80133a6:	46d8      	mov	r8, fp
 80133a8:	9b04      	ldr	r3, [sp, #16]
 80133aa:	980d      	ldr	r0, [sp, #52]	; 0x34
 80133ac:	445b      	add	r3, fp
 80133ae:	ebc8 0103 	rsb	r1, r8, r3
 80133b2:	6903      	ldr	r3, [r0, #16]
 80133b4:	f859 0f04 	ldr.w	r0, [r9, #4]!
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	9102      	str	r1, [sp, #8]
 80133bc:	4798      	blx	r3
 80133be:	9b03      	ldr	r3, [sp, #12]
 80133c0:	9902      	ldr	r1, [sp, #8]
 80133c2:	f823 0f02 	strh.w	r0, [r3, #2]!
 80133c6:	9303      	str	r3, [sp, #12]
 80133c8:	b125      	cbz	r5, 80133d4 <_DrawBitmap+0x140>
 80133ca:	68ab      	ldr	r3, [r5, #8]
 80133cc:	4628      	mov	r0, r5
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	463a      	mov	r2, r7
 80133d2:	4798      	blx	r3
 80133d4:	f1b8 0801 	subs.w	r8, r8, #1
 80133d8:	d1e6      	bne.n	80133a8 <_DrawBitmap+0x114>
 80133da:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 80133dc:	44ba      	add	sl, r7
 80133de:	9f08      	ldr	r7, [sp, #32]
 80133e0:	3601      	adds	r6, #1
 80133e2:	443c      	add	r4, r7
 80133e4:	e7c7      	b.n	8013376 <_DrawBitmap+0xe2>
 80133e6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80133e8:	2e08      	cmp	r6, #8
 80133ea:	f100 0402 	add.w	r4, r0, #2
 80133ee:	d16d      	bne.n	80134cc <_DrawBitmap+0x238>
 80133f0:	9e07      	ldr	r6, [sp, #28]
 80133f2:	9f07      	ldr	r7, [sp, #28]
 80133f4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80133f6:	1bf3      	subs	r3, r6, r7
 80133f8:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80133fa:	42bb      	cmp	r3, r7
 80133fc:	f1a4 0002 	sub.w	r0, r4, #2
 8013400:	da5b      	bge.n	80134ba <_DrawBitmap+0x226>
 8013402:	4b30      	ldr	r3, [pc, #192]	; (80134c4 <_DrawBitmap+0x230>)
 8013404:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	7c1b      	ldrb	r3, [r3, #16]
 801340a:	b367      	cbz	r7, 8013466 <_DrawBitmap+0x1d2>
 801340c:	f013 0303 	ands.w	r3, r3, #3
 8013410:	d004      	beq.n	801341c <_DrawBitmap+0x188>
 8013412:	2b02      	cmp	r3, #2
 8013414:	d14b      	bne.n	80134ae <_DrawBitmap+0x21a>
 8013416:	46a0      	mov	r8, r4
 8013418:	9f04      	ldr	r7, [sp, #16]
 801341a:	e01d      	b.n	8013458 <_DrawBitmap+0x1c4>
 801341c:	f81a 2003 	ldrb.w	r2, [sl, r3]
 8013420:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8013422:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8013426:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 801342a:	3301      	adds	r3, #1
 801342c:	455b      	cmp	r3, fp
 801342e:	d1f5      	bne.n	801341c <_DrawBitmap+0x188>
 8013430:	e03d      	b.n	80134ae <_DrawBitmap+0x21a>
 8013432:	9921      	ldr	r1, [sp, #132]	; 0x84
 8013434:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8013438:	f828 3c02 	strh.w	r3, [r8, #-2]
 801343c:	b12d      	cbz	r5, 801344a <_DrawBitmap+0x1b6>
 801343e:	68ab      	ldr	r3, [r5, #8]
 8013440:	4628      	mov	r0, r5
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	4639      	mov	r1, r7
 8013446:	4632      	mov	r2, r6
 8013448:	4798      	blx	r3
 801344a:	9b04      	ldr	r3, [sp, #16]
 801344c:	3701      	adds	r7, #1
 801344e:	445b      	add	r3, fp
 8013450:	42bb      	cmp	r3, r7
 8013452:	f108 0802 	add.w	r8, r8, #2
 8013456:	d02a      	beq.n	80134ae <_DrawBitmap+0x21a>
 8013458:	9804      	ldr	r0, [sp, #16]
 801345a:	ebc0 030a 	rsb	r3, r0, sl
 801345e:	5ddb      	ldrb	r3, [r3, r7]
 8013460:	2b00      	cmp	r3, #0
 8013462:	d0f2      	beq.n	801344a <_DrawBitmap+0x1b6>
 8013464:	e7e5      	b.n	8013432 <_DrawBitmap+0x19e>
 8013466:	f013 0303 	ands.w	r3, r3, #3
 801346a:	d004      	beq.n	8013476 <_DrawBitmap+0x1e2>
 801346c:	2b02      	cmp	r3, #2
 801346e:	d11e      	bne.n	80134ae <_DrawBitmap+0x21a>
 8013470:	46a0      	mov	r8, r4
 8013472:	9f04      	ldr	r7, [sp, #16]
 8013474:	e014      	b.n	80134a0 <_DrawBitmap+0x20c>
 8013476:	4651      	mov	r1, sl
 8013478:	465a      	mov	r2, fp
 801347a:	f002 f8ea 	bl	8015652 <memcpy>
 801347e:	e016      	b.n	80134ae <_DrawBitmap+0x21a>
 8013480:	f828 3c02 	strh.w	r3, [r8, #-2]
 8013484:	b12d      	cbz	r5, 8013492 <_DrawBitmap+0x1fe>
 8013486:	68ab      	ldr	r3, [r5, #8]
 8013488:	4628      	mov	r0, r5
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	4639      	mov	r1, r7
 801348e:	4632      	mov	r2, r6
 8013490:	4798      	blx	r3
 8013492:	9b04      	ldr	r3, [sp, #16]
 8013494:	3701      	adds	r7, #1
 8013496:	445b      	add	r3, fp
 8013498:	42bb      	cmp	r3, r7
 801349a:	f108 0802 	add.w	r8, r8, #2
 801349e:	d006      	beq.n	80134ae <_DrawBitmap+0x21a>
 80134a0:	9a04      	ldr	r2, [sp, #16]
 80134a2:	ebc2 030a 	rsb	r3, r2, sl
 80134a6:	5ddb      	ldrb	r3, [r3, r7]
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d0f2      	beq.n	8013492 <_DrawBitmap+0x1fe>
 80134ac:	e7e8      	b.n	8013480 <_DrawBitmap+0x1ec>
 80134ae:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 80134b0:	44ba      	add	sl, r7
 80134b2:	9f08      	ldr	r7, [sp, #32]
 80134b4:	3601      	adds	r6, #1
 80134b6:	443c      	add	r4, r7
 80134b8:	e79b      	b.n	80133f2 <_DrawBitmap+0x15e>
 80134ba:	2d00      	cmp	r5, #0
 80134bc:	f040 8273 	bne.w	80139a6 <_DrawBitmap+0x712>
 80134c0:	e274      	b.n	80139ac <_DrawBitmap+0x718>
 80134c2:	bf00      	nop
 80134c4:	20000238 	.word	0x20000238
 80134c8:	200196c8 	.word	0x200196c8
 80134cc:	9e21      	ldr	r6, [sp, #132]	; 0x84
 80134ce:	4bab      	ldr	r3, [pc, #684]	; (801377c <_DrawBitmap+0x4e8>)
 80134d0:	9f20      	ldr	r7, [sp, #128]	; 0x80
 80134d2:	9409      	str	r4, [sp, #36]	; 0x24
 80134d4:	2e00      	cmp	r6, #0
 80134d6:	bf08      	it	eq
 80134d8:	461e      	moveq	r6, r3
 80134da:	9621      	str	r6, [sp, #132]	; 0x84
 80134dc:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80134de:	0076      	lsls	r6, r6, #1
 80134e0:	960e      	str	r6, [sp, #56]	; 0x38
 80134e2:	00bf      	lsls	r7, r7, #2
 80134e4:	9e07      	ldr	r6, [sp, #28]
 80134e6:	970f      	str	r7, [sp, #60]	; 0x3c
 80134e8:	9605      	str	r6, [sp, #20]
 80134ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80134ec:	9e05      	ldr	r6, [sp, #20]
 80134ee:	9f07      	ldr	r7, [sp, #28]
 80134f0:	1e9c      	subs	r4, r3, #2
 80134f2:	1bf3      	subs	r3, r6, r7
 80134f4:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80134f6:	42b3      	cmp	r3, r6
 80134f8:	f280 8253 	bge.w	80139a2 <_DrawBitmap+0x70e>
 80134fc:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 80134fe:	2f02      	cmp	r7, #2
 8013500:	f000 80d9 	beq.w	80136b6 <_DrawBitmap+0x422>
 8013504:	2f04      	cmp	r7, #4
 8013506:	f000 8178 	beq.w	80137fa <_DrawBitmap+0x566>
 801350a:	2f01      	cmp	r7, #1
 801350c:	f040 823f 	bne.w	801398e <_DrawBitmap+0x6fa>
 8013510:	f8df 9270 	ldr.w	r9, [pc, #624]	; 8013784 <_DrawBitmap+0x4f0>
 8013514:	f8d9 3000 	ldr.w	r3, [r9]
 8013518:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801351a:	f7fd fe5b 	bl	80111d4 <GUI_ALLOC_LockH>
 801351e:	f89a 3000 	ldrb.w	r3, [sl]
 8013522:	4a97      	ldr	r2, [pc, #604]	; (8013780 <_DrawBitmap+0x4ec>)
 8013524:	9010      	str	r0, [sp, #64]	; 0x40
 8013526:	5cd5      	ldrb	r5, [r2, r3]
 8013528:	f8d9 3000 	ldr.w	r3, [r9]
 801352c:	9820      	ldr	r0, [sp, #128]	; 0x80
 801352e:	7c1b      	ldrb	r3, [r3, #16]
 8013530:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8013532:	f003 0303 	and.w	r3, r3, #3
 8013536:	2b02      	cmp	r3, #2
 8013538:	465e      	mov	r6, fp
 801353a:	f1c0 0808 	rsb	r8, r0, #8
 801353e:	fa45 f500 	asr.w	r5, r5, r0
 8013542:	d022      	beq.n	801358a <_DrawBitmap+0x2f6>
 8013544:	2b03      	cmp	r3, #3
 8013546:	d062      	beq.n	801360e <_DrawBitmap+0x37a>
 8013548:	2b01      	cmp	r3, #1
 801354a:	d060      	beq.n	801360e <_DrawBitmap+0x37a>
 801354c:	4652      	mov	r2, sl
 801354e:	4546      	cmp	r6, r8
 8013550:	bf38      	it	cc
 8013552:	46b0      	movcc	r8, r6
 8013554:	ebc8 0606 	rsb	r6, r8, r6
 8013558:	4643      	mov	r3, r8
 801355a:	4621      	mov	r1, r4
 801355c:	f005 0001 	and.w	r0, r5, #1
 8013560:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8013562:	3b01      	subs	r3, #1
 8013564:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8013568:	f821 0b02 	strh.w	r0, [r1], #2
 801356c:	ea4f 0555 	mov.w	r5, r5, lsr #1
 8013570:	d1f4      	bne.n	801355c <_DrawBitmap+0x2c8>
 8013572:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 8013576:	2e00      	cmp	r6, #0
 8013578:	f000 8099 	beq.w	80136ae <_DrawBitmap+0x41a>
 801357c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8013580:	497f      	ldr	r1, [pc, #508]	; (8013780 <_DrawBitmap+0x4ec>)
 8013582:	f04f 0808 	mov.w	r8, #8
 8013586:	5ccd      	ldrb	r5, [r1, r3]
 8013588:	e7e1      	b.n	801354e <_DrawBitmap+0x2ba>
 801358a:	9821      	ldr	r0, [sp, #132]	; 0x84
 801358c:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8013590:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 8013594:	f8cd a018 	str.w	sl, [sp, #24]
 8013598:	4546      	cmp	r6, r8
 801359a:	bf38      	it	cc
 801359c:	46b0      	movcc	r8, r6
 801359e:	ebc8 0606 	rsb	r6, r8, r6
 80135a2:	b32f      	cbz	r7, 80135f0 <_DrawBitmap+0x35c>
 80135a4:	b91d      	cbnz	r5, 80135ae <_DrawBitmap+0x31a>
 80135a6:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 80135aa:	44c1      	add	r9, r8
 80135ac:	e024      	b.n	80135f8 <_DrawBitmap+0x364>
 80135ae:	07ea      	lsls	r2, r5, #31
 80135b0:	d50b      	bpl.n	80135ca <_DrawBitmap+0x336>
 80135b2:	68bb      	ldr	r3, [r7, #8]
 80135b4:	9a05      	ldr	r2, [sp, #20]
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	f8cd c008 	str.w	ip, [sp, #8]
 80135bc:	4638      	mov	r0, r7
 80135be:	4649      	mov	r1, r9
 80135c0:	4798      	blx	r3
 80135c2:	f8dd c008 	ldr.w	ip, [sp, #8]
 80135c6:	f8a4 c000 	strh.w	ip, [r4]
 80135ca:	f1b8 0801 	subs.w	r8, r8, #1
 80135ce:	f109 0901 	add.w	r9, r9, #1
 80135d2:	f104 0402 	add.w	r4, r4, #2
 80135d6:	d00f      	beq.n	80135f8 <_DrawBitmap+0x364>
 80135d8:	086d      	lsrs	r5, r5, #1
 80135da:	e7e3      	b.n	80135a4 <_DrawBitmap+0x310>
 80135dc:	07eb      	lsls	r3, r5, #31
 80135de:	bf48      	it	mi
 80135e0:	f8a4 c000 	strhmi.w	ip, [r4]
 80135e4:	f1b8 0801 	subs.w	r8, r8, #1
 80135e8:	f104 0402 	add.w	r4, r4, #2
 80135ec:	d004      	beq.n	80135f8 <_DrawBitmap+0x364>
 80135ee:	086d      	lsrs	r5, r5, #1
 80135f0:	2d00      	cmp	r5, #0
 80135f2:	d1f3      	bne.n	80135dc <_DrawBitmap+0x348>
 80135f4:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 80135f8:	2e00      	cmp	r6, #0
 80135fa:	d058      	beq.n	80136ae <_DrawBitmap+0x41a>
 80135fc:	9906      	ldr	r1, [sp, #24]
 80135fe:	4a60      	ldr	r2, [pc, #384]	; (8013780 <_DrawBitmap+0x4ec>)
 8013600:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013604:	9106      	str	r1, [sp, #24]
 8013606:	5cd5      	ldrb	r5, [r2, r3]
 8013608:	f04f 0808 	mov.w	r8, #8
 801360c:	e7c4      	b.n	8013598 <_DrawBitmap+0x304>
 801360e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013610:	6913      	ldr	r3, [r2, #16]
 8013612:	689b      	ldr	r3, [r3, #8]
 8013614:	4798      	blx	r3
 8013616:	9b04      	ldr	r3, [sp, #16]
 8013618:	930b      	str	r3, [sp, #44]	; 0x2c
 801361a:	b280      	uxth	r0, r0
 801361c:	900a      	str	r0, [sp, #40]	; 0x28
 801361e:	f10a 0901 	add.w	r9, sl, #1
 8013622:	4546      	cmp	r6, r8
 8013624:	bf38      	it	cc
 8013626:	46b0      	movcc	r8, r6
 8013628:	ebc8 0606 	rsb	r6, r8, r6
 801362c:	1ca3      	adds	r3, r4, #2
 801362e:	b31f      	cbz	r7, 8013678 <_DrawBitmap+0x3e4>
 8013630:	f8cd 8018 	str.w	r8, [sp, #24]
 8013634:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8013636:	9a06      	ldr	r2, [sp, #24]
 8013638:	4440      	add	r0, r8
 801363a:	900c      	str	r0, [sp, #48]	; 0x30
 801363c:	1a81      	subs	r1, r0, r2
 801363e:	07e8      	lsls	r0, r5, #31
 8013640:	d50d      	bpl.n	801365e <_DrawBitmap+0x3ca>
 8013642:	68ba      	ldr	r2, [r7, #8]
 8013644:	4638      	mov	r0, r7
 8013646:	f8d2 c000 	ldr.w	ip, [r2]
 801364a:	9a05      	ldr	r2, [sp, #20]
 801364c:	9302      	str	r3, [sp, #8]
 801364e:	47e0      	blx	ip
 8013650:	9b02      	ldr	r3, [sp, #8]
 8013652:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013654:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 8013658:	4042      	eors	r2, r0
 801365a:	f823 2c02 	strh.w	r2, [r3, #-2]
 801365e:	9906      	ldr	r1, [sp, #24]
 8013660:	3901      	subs	r1, #1
 8013662:	ea4f 0555 	mov.w	r5, r5, lsr #1
 8013666:	f103 0302 	add.w	r3, r3, #2
 801366a:	9106      	str	r1, [sp, #24]
 801366c:	d1e2      	bne.n	8013634 <_DrawBitmap+0x3a0>
 801366e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013670:	930b      	str	r3, [sp, #44]	; 0x2c
 8013672:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 8013676:	e010      	b.n	801369a <_DrawBitmap+0x406>
 8013678:	4642      	mov	r2, r8
 801367a:	07e9      	lsls	r1, r5, #31
 801367c:	d505      	bpl.n	801368a <_DrawBitmap+0x3f6>
 801367e:	f833 1c02 	ldrh.w	r1, [r3, #-2]
 8013682:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013684:	4041      	eors	r1, r0
 8013686:	f823 1c02 	strh.w	r1, [r3, #-2]
 801368a:	3a01      	subs	r2, #1
 801368c:	ea4f 0555 	mov.w	r5, r5, lsr #1
 8013690:	f103 0302 	add.w	r3, r3, #2
 8013694:	d1f1      	bne.n	801367a <_DrawBitmap+0x3e6>
 8013696:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 801369a:	b146      	cbz	r6, 80136ae <_DrawBitmap+0x41a>
 801369c:	f899 3000 	ldrb.w	r3, [r9]
 80136a0:	4a37      	ldr	r2, [pc, #220]	; (8013780 <_DrawBitmap+0x4ec>)
 80136a2:	f109 0901 	add.w	r9, r9, #1
 80136a6:	5cd5      	ldrb	r5, [r2, r3]
 80136a8:	f04f 0808 	mov.w	r8, #8
 80136ac:	e7b9      	b.n	8013622 <_DrawBitmap+0x38e>
 80136ae:	a810      	add	r0, sp, #64	; 0x40
 80136b0:	f7fd fd9e 	bl	80111f0 <GUI_ALLOC_UnlockH>
 80136b4:	e16b      	b.n	801398e <_DrawBitmap+0x6fa>
 80136b6:	4b33      	ldr	r3, [pc, #204]	; (8013784 <_DrawBitmap+0x4f0>)
 80136b8:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80136be:	7c1b      	ldrb	r3, [r3, #16]
 80136c0:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 80136c4:	f1c6 0504 	rsb	r5, r6, #4
 80136c8:	f89a 6000 	ldrb.w	r6, [sl]
 80136cc:	f003 0303 	and.w	r3, r3, #3
 80136d0:	40be      	lsls	r6, r7
 80136d2:	2b01      	cmp	r3, #1
 80136d4:	b2ed      	uxtb	r5, r5
 80136d6:	b2f6      	uxtb	r6, r6
 80136d8:	d06a      	beq.n	80137b0 <_DrawBitmap+0x51c>
 80136da:	d308      	bcc.n	80136ee <_DrawBitmap+0x45a>
 80136dc:	2b02      	cmp	r3, #2
 80136de:	f040 8156 	bne.w	801398e <_DrawBitmap+0x6fa>
 80136e2:	f8cd a018 	str.w	sl, [sp, #24]
 80136e6:	465f      	mov	r7, fp
 80136e8:	f8dd c010 	ldr.w	ip, [sp, #16]
 80136ec:	e03e      	b.n	801376c <_DrawBitmap+0x4d8>
 80136ee:	4652      	mov	r2, sl
 80136f0:	465b      	mov	r3, fp
 80136f2:	429d      	cmp	r5, r3
 80136f4:	bfc8      	it	gt
 80136f6:	b2dd      	uxtbgt	r5, r3
 80136f8:	1b5b      	subs	r3, r3, r5
 80136fa:	4629      	mov	r1, r5
 80136fc:	4620      	mov	r0, r4
 80136fe:	ea4f 1c96 	mov.w	ip, r6, lsr #6
 8013702:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8013704:	3901      	subs	r1, #1
 8013706:	f857 c02c 	ldr.w	ip, [r7, ip, lsl #2]
 801370a:	f820 cb02 	strh.w	ip, [r0], #2
 801370e:	00b6      	lsls	r6, r6, #2
 8013710:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8013714:	b2f6      	uxtb	r6, r6
 8013716:	d1f2      	bne.n	80136fe <_DrawBitmap+0x46a>
 8013718:	3d01      	subs	r5, #1
 801371a:	b2ed      	uxtb	r5, r5
 801371c:	3501      	adds	r5, #1
 801371e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8013722:	2b00      	cmp	r3, #0
 8013724:	f000 8133 	beq.w	801398e <_DrawBitmap+0x6fa>
 8013728:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 801372c:	2504      	movs	r5, #4
 801372e:	e7e0      	b.n	80136f2 <_DrawBitmap+0x45e>
 8013730:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 8013734:	eb08 010c 	add.w	r1, r8, ip
 8013738:	d126      	bne.n	8013788 <_DrawBitmap+0x4f4>
 801373a:	f108 0801 	add.w	r8, r8, #1
 801373e:	fa5f f388 	uxtb.w	r3, r8
 8013742:	00b6      	lsls	r6, r6, #2
 8013744:	429d      	cmp	r5, r3
 8013746:	b2f6      	uxtb	r6, r6
 8013748:	d1f2      	bne.n	8013730 <_DrawBitmap+0x49c>
 801374a:	3d01      	subs	r5, #1
 801374c:	b2ed      	uxtb	r5, r5
 801374e:	1c6b      	adds	r3, r5, #1
 8013750:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8013754:	f10c 0301 	add.w	r3, ip, #1
 8013758:	eb03 0c05 	add.w	ip, r3, r5
 801375c:	2f00      	cmp	r7, #0
 801375e:	f000 8116 	beq.w	801398e <_DrawBitmap+0x6fa>
 8013762:	9b06      	ldr	r3, [sp, #24]
 8013764:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 8013768:	9306      	str	r3, [sp, #24]
 801376a:	2504      	movs	r5, #4
 801376c:	42bd      	cmp	r5, r7
 801376e:	bfc8      	it	gt
 8013770:	b2fd      	uxtbgt	r5, r7
 8013772:	1b7f      	subs	r7, r7, r5
 8013774:	f04f 0800 	mov.w	r8, #0
 8013778:	e7da      	b.n	8013730 <_DrawBitmap+0x49c>
 801377a:	bf00      	nop
 801377c:	0801a824 	.word	0x0801a824
 8013780:	0801a69c 	.word	0x0801a69c
 8013784:	20000238 	.word	0x20000238
 8013788:	09b3      	lsrs	r3, r6, #6
 801378a:	9821      	ldr	r0, [sp, #132]	; 0x84
 801378c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8013790:	f824 3018 	strh.w	r3, [r4, r8, lsl #1]
 8013794:	f1b9 0f00 	cmp.w	r9, #0
 8013798:	d0cf      	beq.n	801373a <_DrawBitmap+0x4a6>
 801379a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801379e:	9a05      	ldr	r2, [sp, #20]
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	f8cd c008 	str.w	ip, [sp, #8]
 80137a6:	4648      	mov	r0, r9
 80137a8:	4798      	blx	r3
 80137aa:	f8dd c008 	ldr.w	ip, [sp, #8]
 80137ae:	e7c4      	b.n	801373a <_DrawBitmap+0x4a6>
 80137b0:	4651      	mov	r1, sl
 80137b2:	465b      	mov	r3, fp
 80137b4:	429d      	cmp	r5, r3
 80137b6:	bfc8      	it	gt
 80137b8:	b2dd      	uxtbgt	r5, r3
 80137ba:	1b5b      	subs	r3, r3, r5
 80137bc:	1ca2      	adds	r2, r4, #2
 80137be:	4628      	mov	r0, r5
 80137c0:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 80137c4:	d005      	beq.n	80137d2 <_DrawBitmap+0x53e>
 80137c6:	f832 7c02 	ldrh.w	r7, [r2, #-2]
 80137ca:	f087 07ff 	eor.w	r7, r7, #255	; 0xff
 80137ce:	f822 7c02 	strh.w	r7, [r2, #-2]
 80137d2:	3801      	subs	r0, #1
 80137d4:	00b6      	lsls	r6, r6, #2
 80137d6:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 80137da:	b2f6      	uxtb	r6, r6
 80137dc:	f102 0202 	add.w	r2, r2, #2
 80137e0:	d1ee      	bne.n	80137c0 <_DrawBitmap+0x52c>
 80137e2:	3d01      	subs	r5, #1
 80137e4:	b2ed      	uxtb	r5, r5
 80137e6:	3501      	adds	r5, #1
 80137e8:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	f000 80ce 	beq.w	801398e <_DrawBitmap+0x6fa>
 80137f2:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 80137f6:	2504      	movs	r5, #4
 80137f8:	e7dc      	b.n	80137b4 <_DrawBitmap+0x520>
 80137fa:	4a6e      	ldr	r2, [pc, #440]	; (80139b4 <_DrawBitmap+0x720>)
 80137fc:	f89a 3000 	ldrb.w	r3, [sl]
 8013800:	6812      	ldr	r2, [r2, #0]
 8013802:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8013804:	7c12      	ldrb	r2, [r2, #16]
 8013806:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8013808:	f002 0203 	and.w	r2, r2, #3
 801380c:	40bb      	lsls	r3, r7
 801380e:	2a01      	cmp	r2, #1
 8013810:	b2dd      	uxtb	r5, r3
 8013812:	f000 8095 	beq.w	8013940 <_DrawBitmap+0x6ac>
 8013816:	d302      	bcc.n	801381e <_DrawBitmap+0x58a>
 8013818:	2a02      	cmp	r2, #2
 801381a:	d036      	beq.n	801388a <_DrawBitmap+0x5f6>
 801381c:	e0b7      	b.n	801398e <_DrawBitmap+0x6fa>
 801381e:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8013820:	b166      	cbz	r6, 801383c <_DrawBitmap+0x5a8>
 8013822:	092d      	lsrs	r5, r5, #4
 8013824:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8013826:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 801382a:	8023      	strh	r3, [r4, #0]
 801382c:	f10a 0201 	add.w	r2, sl, #1
 8013830:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8013832:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8013836:	f10b 33ff 	add.w	r3, fp, #4294967295
 801383a:	e001      	b.n	8013840 <_DrawBitmap+0x5ac>
 801383c:	465b      	mov	r3, fp
 801383e:	4652      	mov	r2, sl
 8013840:	2b01      	cmp	r3, #1
 8013842:	dd19      	ble.n	8013878 <_DrawBitmap+0x5e4>
 8013844:	1058      	asrs	r0, r3, #1
 8013846:	1d21      	adds	r1, r4, #4
 8013848:	f003 0301 	and.w	r3, r3, #1
 801384c:	eb02 0c00 	add.w	ip, r2, r0
 8013850:	092f      	lsrs	r7, r5, #4
 8013852:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8013854:	f005 050f 	and.w	r5, r5, #15
 8013858:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 801385c:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 8013860:	f821 7c04 	strh.w	r7, [r1, #-4]
 8013864:	f821 5c02 	strh.w	r5, [r1, #-2]
 8013868:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 801386c:	4562      	cmp	r2, ip
 801386e:	f101 0104 	add.w	r1, r1, #4
 8013872:	d1ed      	bne.n	8013850 <_DrawBitmap+0x5bc>
 8013874:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8013878:	2b00      	cmp	r3, #0
 801387a:	f000 8088 	beq.w	801398e <_DrawBitmap+0x6fa>
 801387e:	092d      	lsrs	r5, r5, #4
 8013880:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8013882:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 8013886:	8023      	strh	r3, [r4, #0]
 8013888:	e081      	b.n	801398e <_DrawBitmap+0x6fa>
 801388a:	9f20      	ldr	r7, [sp, #128]	; 0x80
 801388c:	b1c7      	cbz	r7, 80138c0 <_DrawBitmap+0x62c>
 801388e:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8013892:	d00b      	beq.n	80138ac <_DrawBitmap+0x618>
 8013894:	092d      	lsrs	r5, r5, #4
 8013896:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8013898:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 801389c:	8023      	strh	r3, [r4, #0]
 801389e:	b12e      	cbz	r6, 80138ac <_DrawBitmap+0x618>
 80138a0:	68b3      	ldr	r3, [r6, #8]
 80138a2:	9904      	ldr	r1, [sp, #16]
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	9a05      	ldr	r2, [sp, #20]
 80138a8:	4630      	mov	r0, r6
 80138aa:	4798      	blx	r3
 80138ac:	9804      	ldr	r0, [sp, #16]
 80138ae:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80138b0:	f89a 5001 	ldrb.w	r5, [sl, #1]
 80138b4:	1c47      	adds	r7, r0, #1
 80138b6:	f10b 39ff 	add.w	r9, fp, #4294967295
 80138ba:	f10a 0801 	add.w	r8, sl, #1
 80138be:	e00f      	b.n	80138e0 <_DrawBitmap+0x64c>
 80138c0:	46d9      	mov	r9, fp
 80138c2:	46d0      	mov	r8, sl
 80138c4:	9f04      	ldr	r7, [sp, #16]
 80138c6:	e00b      	b.n	80138e0 <_DrawBitmap+0x64c>
 80138c8:	f015 0ff0 	tst.w	r5, #240	; 0xf0
 80138cc:	d10c      	bne.n	80138e8 <_DrawBitmap+0x654>
 80138ce:	f015 050f 	ands.w	r5, r5, #15
 80138d2:	d117      	bne.n	8013904 <_DrawBitmap+0x670>
 80138d4:	f818 5f01 	ldrb.w	r5, [r8, #1]!
 80138d8:	3404      	adds	r4, #4
 80138da:	3702      	adds	r7, #2
 80138dc:	f1a9 0902 	sub.w	r9, r9, #2
 80138e0:	f1b9 0f01 	cmp.w	r9, #1
 80138e4:	dcf0      	bgt.n	80138c8 <_DrawBitmap+0x634>
 80138e6:	e01a      	b.n	801391e <_DrawBitmap+0x68a>
 80138e8:	092b      	lsrs	r3, r5, #4
 80138ea:	9921      	ldr	r1, [sp, #132]	; 0x84
 80138ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80138f0:	8023      	strh	r3, [r4, #0]
 80138f2:	2e00      	cmp	r6, #0
 80138f4:	d0eb      	beq.n	80138ce <_DrawBitmap+0x63a>
 80138f6:	68b3      	ldr	r3, [r6, #8]
 80138f8:	9a05      	ldr	r2, [sp, #20]
 80138fa:	681b      	ldr	r3, [r3, #0]
 80138fc:	4630      	mov	r0, r6
 80138fe:	4639      	mov	r1, r7
 8013900:	4798      	blx	r3
 8013902:	e7e4      	b.n	80138ce <_DrawBitmap+0x63a>
 8013904:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013906:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
 801390a:	8063      	strh	r3, [r4, #2]
 801390c:	2e00      	cmp	r6, #0
 801390e:	d0e1      	beq.n	80138d4 <_DrawBitmap+0x640>
 8013910:	68b3      	ldr	r3, [r6, #8]
 8013912:	9a05      	ldr	r2, [sp, #20]
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	4630      	mov	r0, r6
 8013918:	1c79      	adds	r1, r7, #1
 801391a:	4798      	blx	r3
 801391c:	e7da      	b.n	80138d4 <_DrawBitmap+0x640>
 801391e:	f1b9 0f00 	cmp.w	r9, #0
 8013922:	d034      	beq.n	801398e <_DrawBitmap+0x6fa>
 8013924:	092d      	lsrs	r5, r5, #4
 8013926:	d032      	beq.n	801398e <_DrawBitmap+0x6fa>
 8013928:	9821      	ldr	r0, [sp, #132]	; 0x84
 801392a:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
 801392e:	8023      	strh	r3, [r4, #0]
 8013930:	b36e      	cbz	r6, 801398e <_DrawBitmap+0x6fa>
 8013932:	68b3      	ldr	r3, [r6, #8]
 8013934:	9a05      	ldr	r2, [sp, #20]
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	4630      	mov	r0, r6
 801393a:	4639      	mov	r1, r7
 801393c:	4798      	blx	r3
 801393e:	e026      	b.n	801398e <_DrawBitmap+0x6fa>
 8013940:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8013942:	f1c6 0302 	rsb	r3, r6, #2
 8013946:	b2db      	uxtb	r3, r3
 8013948:	4650      	mov	r0, sl
 801394a:	465a      	mov	r2, fp
 801394c:	4293      	cmp	r3, r2
 801394e:	bfc8      	it	gt
 8013950:	b2d3      	uxtbgt	r3, r2
 8013952:	1ad2      	subs	r2, r2, r3
 8013954:	1ca1      	adds	r1, r4, #2
 8013956:	461e      	mov	r6, r3
 8013958:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 801395c:	d005      	beq.n	801396a <_DrawBitmap+0x6d6>
 801395e:	f831 7c02 	ldrh.w	r7, [r1, #-2]
 8013962:	f087 07ff 	eor.w	r7, r7, #255	; 0xff
 8013966:	f821 7c02 	strh.w	r7, [r1, #-2]
 801396a:	3e01      	subs	r6, #1
 801396c:	012d      	lsls	r5, r5, #4
 801396e:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8013972:	b2ed      	uxtb	r5, r5
 8013974:	f101 0102 	add.w	r1, r1, #2
 8013978:	d1ee      	bne.n	8013958 <_DrawBitmap+0x6c4>
 801397a:	3b01      	subs	r3, #1
 801397c:	b2db      	uxtb	r3, r3
 801397e:	3301      	adds	r3, #1
 8013980:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8013984:	b11a      	cbz	r2, 801398e <_DrawBitmap+0x6fa>
 8013986:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 801398a:	2302      	movs	r3, #2
 801398c:	e7de      	b.n	801394c <_DrawBitmap+0x6b8>
 801398e:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8013990:	9b05      	ldr	r3, [sp, #20]
 8013992:	9e08      	ldr	r6, [sp, #32]
 8013994:	44ba      	add	sl, r7
 8013996:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8013998:	3301      	adds	r3, #1
 801399a:	4437      	add	r7, r6
 801399c:	9305      	str	r3, [sp, #20]
 801399e:	9709      	str	r7, [sp, #36]	; 0x24
 80139a0:	e5a3      	b.n	80134ea <_DrawBitmap+0x256>
 80139a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80139a4:	b113      	cbz	r3, 80139ac <_DrawBitmap+0x718>
 80139a6:	a811      	add	r0, sp, #68	; 0x44
 80139a8:	f7fd fc22 	bl	80111f0 <GUI_ALLOC_UnlockH>
 80139ac:	b013      	add	sp, #76	; 0x4c
 80139ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139b2:	bf00      	nop
 80139b4:	20000238 	.word	0x20000238

080139b8 <LCD_SelectLCD>:
 80139b8:	b510      	push	{r4, lr}
 80139ba:	4b0d      	ldr	r3, [pc, #52]	; (80139f0 <LCD_SelectLCD+0x38>)
 80139bc:	681a      	ldr	r2, [r3, #0]
 80139be:	7c51      	ldrb	r1, [r2, #17]
 80139c0:	4a0c      	ldr	r2, [pc, #48]	; (80139f4 <LCD_SelectLCD+0x3c>)
 80139c2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 80139c6:	461c      	mov	r4, r3
 80139c8:	b140      	cbz	r0, 80139dc <LCD_SelectLCD+0x24>
 80139ca:	68c3      	ldr	r3, [r0, #12]
 80139cc:	b113      	cbz	r3, 80139d4 <LCD_SelectLCD+0x1c>
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	2b04      	cmp	r3, #4
 80139d2:	d001      	beq.n	80139d8 <LCD_SelectLCD+0x20>
 80139d4:	6800      	ldr	r0, [r0, #0]
 80139d6:	e7f7      	b.n	80139c8 <LCD_SelectLCD+0x10>
 80139d8:	f7fc f81e 	bl	800fa18 <GUI_DEVICE_Unlink>
 80139dc:	6823      	ldr	r3, [r4, #0]
 80139de:	2200      	movs	r2, #0
 80139e0:	661a      	str	r2, [r3, #96]	; 0x60
 80139e2:	f103 0208 	add.w	r2, r3, #8
 80139e6:	615a      	str	r2, [r3, #20]
 80139e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80139ec:	f7fa ba16 	b.w	800de1c <LCD_SetClipRectMax>
 80139f0:	20000238 	.word	0x20000238
 80139f4:	2001b2c0 	.word	0x2001b2c0

080139f8 <LCD_ReadRectEx>:
 80139f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139fc:	b087      	sub	sp, #28
 80139fe:	4617      	mov	r7, r2
 8013a00:	9304      	str	r3, [sp, #16]
 8013a02:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013a04:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8013a06:	68da      	ldr	r2, [r3, #12]
 8013a08:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8013a0a:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8013a0e:	4606      	mov	r6, r0
 8013a10:	460d      	mov	r5, r1
 8013a12:	b973      	cbnz	r3, 8013a32 <LCD_ReadRectEx+0x3a>
 8013a14:	4b71      	ldr	r3, [pc, #452]	; (8013bdc <LCD_ReadRectEx+0x1e4>)
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	7c58      	ldrb	r0, [r3, #17]
 8013a1a:	f7f9 fea9 	bl	800d770 <GUI_GetBitsPerPixelEx>
 8013a1e:	2808      	cmp	r0, #8
 8013a20:	4682      	mov	sl, r0
 8013a22:	dd15      	ble.n	8013a50 <LCD_ReadRectEx+0x58>
 8013a24:	2810      	cmp	r0, #16
 8013a26:	bfcc      	ite	gt
 8013a28:	f04f 0904 	movgt.w	r9, #4
 8013a2c:	f04f 0902 	movle.w	r9, #2
 8013a30:	e010      	b.n	8013a54 <LCD_ReadRectEx+0x5c>
 8013a32:	a811      	add	r0, sp, #68	; 0x44
 8013a34:	2101      	movs	r1, #1
 8013a36:	4798      	blx	r3
 8013a38:	4684      	mov	ip, r0
 8013a3a:	2800      	cmp	r0, #0
 8013a3c:	d0ea      	beq.n	8013a14 <LCD_ReadRectEx+0x1c>
 8013a3e:	9b04      	ldr	r3, [sp, #16]
 8013a40:	9811      	ldr	r0, [sp, #68]	; 0x44
 8013a42:	e88d 0018 	stmia.w	sp, {r3, r4}
 8013a46:	4631      	mov	r1, r6
 8013a48:	462a      	mov	r2, r5
 8013a4a:	463b      	mov	r3, r7
 8013a4c:	47e0      	blx	ip
 8013a4e:	e0c1      	b.n	8013bd4 <LCD_ReadRectEx+0x1dc>
 8013a50:	f04f 0901 	mov.w	r9, #1
 8013a54:	f04f 0b00 	mov.w	fp, #0
 8013a58:	9b04      	ldr	r3, [sp, #16]
 8013a5a:	429d      	cmp	r5, r3
 8013a5c:	f300 80ba 	bgt.w	8013bd4 <LCD_ReadRectEx+0x1dc>
 8013a60:	f1b9 0f02 	cmp.w	r9, #2
 8013a64:	d009      	beq.n	8013a7a <LCD_ReadRectEx+0x82>
 8013a66:	f1b9 0f04 	cmp.w	r9, #4
 8013a6a:	d004      	beq.n	8013a76 <LCD_ReadRectEx+0x7e>
 8013a6c:	f1b9 0f01 	cmp.w	r9, #1
 8013a70:	f040 80ae 	bne.w	8013bd0 <LCD_ReadRectEx+0x1d8>
 8013a74:	e003      	b.n	8013a7e <LCD_ReadRectEx+0x86>
 8013a76:	46b4      	mov	ip, r6
 8013a78:	e09b      	b.n	8013bb2 <LCD_ReadRectEx+0x1ba>
 8013a7a:	46b4      	mov	ip, r6
 8013a7c:	e08a      	b.n	8013b94 <LCD_ReadRectEx+0x19c>
 8013a7e:	f10a 32ff 	add.w	r2, sl, #4294967295
 8013a82:	2a07      	cmp	r2, #7
 8013a84:	f200 80a4 	bhi.w	8013bd0 <LCD_ReadRectEx+0x1d8>
 8013a88:	e8df f002 	tbb	[pc, r2]
 8013a8c:	0606080a 	.word	0x0606080a
 8013a90:	04040404 	.word	0x04040404
 8013a94:	46b4      	mov	ip, r6
 8013a96:	e066      	b.n	8013b66 <LCD_ReadRectEx+0x16e>
 8013a98:	46b4      	mov	ip, r6
 8013a9a:	e047      	b.n	8013b2c <LCD_ReadRectEx+0x134>
 8013a9c:	46b4      	mov	ip, r6
 8013a9e:	e022      	b.n	8013ae6 <LCD_ReadRectEx+0xee>
 8013aa0:	46b4      	mov	ip, r6
 8013aa2:	45bc      	cmp	ip, r7
 8013aa4:	f300 8094 	bgt.w	8013bd0 <LCD_ReadRectEx+0x1d8>
 8013aa8:	4661      	mov	r1, ip
 8013aaa:	462a      	mov	r2, r5
 8013aac:	f8cd c00c 	str.w	ip, [sp, #12]
 8013ab0:	9811      	ldr	r0, [sp, #68]	; 0x44
 8013ab2:	47c0      	blx	r8
 8013ab4:	f1cb 0207 	rsb	r2, fp, #7
 8013ab8:	fa00 f202 	lsl.w	r2, r0, r2
 8013abc:	f64f 717f 	movw	r1, #65407	; 0xff7f
 8013ac0:	7820      	ldrb	r0, [r4, #0]
 8013ac2:	fa41 f10b 	asr.w	r1, r1, fp
 8013ac6:	4001      	ands	r1, r0
 8013ac8:	430a      	orrs	r2, r1
 8013aca:	7022      	strb	r2, [r4, #0]
 8013acc:	f10b 0301 	add.w	r3, fp, #1
 8013ad0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8013ad4:	f023 0207 	bic.w	r2, r3, #7
 8013ad8:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 8013adc:	fa43 fb02 	asr.w	fp, r3, r2
 8013ae0:	f10c 0c01 	add.w	ip, ip, #1
 8013ae4:	e7dd      	b.n	8013aa2 <LCD_ReadRectEx+0xaa>
 8013ae6:	45bc      	cmp	ip, r7
 8013ae8:	dc72      	bgt.n	8013bd0 <LCD_ReadRectEx+0x1d8>
 8013aea:	4661      	mov	r1, ip
 8013aec:	462a      	mov	r2, r5
 8013aee:	f8cd c00c 	str.w	ip, [sp, #12]
 8013af2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8013af4:	47c0      	blx	r8
 8013af6:	ea4f 024b 	mov.w	r2, fp, lsl #1
 8013afa:	f1c2 0106 	rsb	r1, r2, #6
 8013afe:	fa00 f101 	lsl.w	r1, r0, r1
 8013b02:	f64f 703f 	movw	r0, #65343	; 0xff3f
 8013b06:	fa40 f202 	asr.w	r2, r0, r2
 8013b0a:	7820      	ldrb	r0, [r4, #0]
 8013b0c:	4002      	ands	r2, r0
 8013b0e:	4311      	orrs	r1, r2
 8013b10:	7021      	strb	r1, [r4, #0]
 8013b12:	f10b 0301 	add.w	r3, fp, #1
 8013b16:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8013b1a:	f023 0203 	bic.w	r2, r3, #3
 8013b1e:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 8013b22:	fa43 fb02 	asr.w	fp, r3, r2
 8013b26:	f10c 0c01 	add.w	ip, ip, #1
 8013b2a:	e7dc      	b.n	8013ae6 <LCD_ReadRectEx+0xee>
 8013b2c:	45bc      	cmp	ip, r7
 8013b2e:	dc4f      	bgt.n	8013bd0 <LCD_ReadRectEx+0x1d8>
 8013b30:	4661      	mov	r1, ip
 8013b32:	462a      	mov	r2, r5
 8013b34:	f8cd c00c 	str.w	ip, [sp, #12]
 8013b38:	9811      	ldr	r0, [sp, #68]	; 0x44
 8013b3a:	47c0      	blx	r8
 8013b3c:	ea4f 028b 	mov.w	r2, fp, lsl #2
 8013b40:	f1c2 0104 	rsb	r1, r2, #4
 8013b44:	fa00 f101 	lsl.w	r1, r0, r1
 8013b48:	200f      	movs	r0, #15
 8013b4a:	fa00 f202 	lsl.w	r2, r0, r2
 8013b4e:	7820      	ldrb	r0, [r4, #0]
 8013b50:	4002      	ands	r2, r0
 8013b52:	4311      	orrs	r1, r2
 8013b54:	7021      	strb	r1, [r4, #0]
 8013b56:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8013b5a:	445c      	add	r4, fp
 8013b5c:	f10c 0c01 	add.w	ip, ip, #1
 8013b60:	f08b 0b01 	eor.w	fp, fp, #1
 8013b64:	e7e2      	b.n	8013b2c <LCD_ReadRectEx+0x134>
 8013b66:	4273      	negs	r3, r6
 8013b68:	1ba2      	subs	r2, r4, r6
 8013b6a:	45bc      	cmp	ip, r7
 8013b6c:	9305      	str	r3, [sp, #20]
 8013b6e:	4462      	add	r2, ip
 8013b70:	dc0e      	bgt.n	8013b90 <LCD_ReadRectEx+0x198>
 8013b72:	4661      	mov	r1, ip
 8013b74:	462a      	mov	r2, r5
 8013b76:	f8cd c00c 	str.w	ip, [sp, #12]
 8013b7a:	9811      	ldr	r0, [sp, #68]	; 0x44
 8013b7c:	47c0      	blx	r8
 8013b7e:	9a05      	ldr	r2, [sp, #20]
 8013b80:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8013b84:	4422      	add	r2, r4
 8013b86:	f802 000c 	strb.w	r0, [r2, ip]
 8013b8a:	f10c 0c01 	add.w	ip, ip, #1
 8013b8e:	e7ea      	b.n	8013b66 <LCD_ReadRectEx+0x16e>
 8013b90:	4614      	mov	r4, r2
 8013b92:	e01d      	b.n	8013bd0 <LCD_ReadRectEx+0x1d8>
 8013b94:	45bc      	cmp	ip, r7
 8013b96:	dc1b      	bgt.n	8013bd0 <LCD_ReadRectEx+0x1d8>
 8013b98:	4661      	mov	r1, ip
 8013b9a:	f8cd c00c 	str.w	ip, [sp, #12]
 8013b9e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8013ba0:	462a      	mov	r2, r5
 8013ba2:	47c0      	blx	r8
 8013ba4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8013ba8:	f824 0b02 	strh.w	r0, [r4], #2
 8013bac:	f10c 0c01 	add.w	ip, ip, #1
 8013bb0:	e7f0      	b.n	8013b94 <LCD_ReadRectEx+0x19c>
 8013bb2:	45bc      	cmp	ip, r7
 8013bb4:	dc0c      	bgt.n	8013bd0 <LCD_ReadRectEx+0x1d8>
 8013bb6:	4661      	mov	r1, ip
 8013bb8:	f8cd c00c 	str.w	ip, [sp, #12]
 8013bbc:	9811      	ldr	r0, [sp, #68]	; 0x44
 8013bbe:	462a      	mov	r2, r5
 8013bc0:	47c0      	blx	r8
 8013bc2:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8013bc6:	f844 0b04 	str.w	r0, [r4], #4
 8013bca:	f10c 0c01 	add.w	ip, ip, #1
 8013bce:	e7f0      	b.n	8013bb2 <LCD_ReadRectEx+0x1ba>
 8013bd0:	3501      	adds	r5, #1
 8013bd2:	e741      	b.n	8013a58 <LCD_ReadRectEx+0x60>
 8013bd4:	b007      	add	sp, #28
 8013bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bda:	bf00      	nop
 8013bdc:	20000238 	.word	0x20000238

08013be0 <GUI_ReadRectEx>:
 8013be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013be2:	4d16      	ldr	r5, [pc, #88]	; (8013c3c <GUI_ReadRectEx+0x5c>)
 8013be4:	9e05      	ldr	r6, [sp, #20]
 8013be6:	682d      	ldr	r5, [r5, #0]
 8013be8:	9c06      	ldr	r4, [sp, #24]
 8013bea:	f9b5 7008 	ldrsh.w	r7, [r5, #8]
 8013bee:	42b8      	cmp	r0, r7
 8013bf0:	bfb8      	it	lt
 8013bf2:	4638      	movlt	r0, r7
 8013bf4:	f9b5 700c 	ldrsh.w	r7, [r5, #12]
 8013bf8:	42ba      	cmp	r2, r7
 8013bfa:	bfa8      	it	ge
 8013bfc:	463a      	movge	r2, r7
 8013bfe:	4282      	cmp	r2, r0
 8013c00:	db1b      	blt.n	8013c3a <GUI_ReadRectEx+0x5a>
 8013c02:	f9b5 700a 	ldrsh.w	r7, [r5, #10]
 8013c06:	f9b5 500e 	ldrsh.w	r5, [r5, #14]
 8013c0a:	42b9      	cmp	r1, r7
 8013c0c:	bfb8      	it	lt
 8013c0e:	4639      	movlt	r1, r7
 8013c10:	42ab      	cmp	r3, r5
 8013c12:	bfa8      	it	ge
 8013c14:	462b      	movge	r3, r5
 8013c16:	428b      	cmp	r3, r1
 8013c18:	db0f      	blt.n	8013c3a <GUI_ReadRectEx+0x5a>
 8013c1a:	68e5      	ldr	r5, [r4, #12]
 8013c1c:	682d      	ldr	r5, [r5, #0]
 8013c1e:	f035 0704 	bics.w	r7, r5, #4
 8013c22:	d105      	bne.n	8013c30 <GUI_ReadRectEx+0x50>
 8013c24:	9605      	str	r6, [sp, #20]
 8013c26:	9406      	str	r4, [sp, #24]
 8013c28:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013c2c:	f7ff bee4 	b.w	80139f8 <LCD_ReadRectEx>
 8013c30:	6825      	ldr	r5, [r4, #0]
 8013c32:	2d00      	cmp	r5, #0
 8013c34:	d0f6      	beq.n	8013c24 <GUI_ReadRectEx+0x44>
 8013c36:	462c      	mov	r4, r5
 8013c38:	e7ef      	b.n	8013c1a <GUI_ReadRectEx+0x3a>
 8013c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c3c:	20000238 	.word	0x20000238

08013c40 <_OnExit>:
 8013c40:	b510      	push	{r4, lr}
 8013c42:	4c03      	ldr	r4, [pc, #12]	; (8013c50 <_OnExit+0x10>)
 8013c44:	6820      	ldr	r0, [r4, #0]
 8013c46:	f7fd fab1 	bl	80111ac <GUI_ALLOC_FreeFixedBlock>
 8013c4a:	2300      	movs	r3, #0
 8013c4c:	6023      	str	r3, [r4, #0]
 8013c4e:	bd10      	pop	{r4, pc}
 8013c50:	2001b3c0 	.word	0x2001b3c0

08013c54 <LCD_InitColors>:
 8013c54:	b538      	push	{r3, r4, r5, lr}
 8013c56:	4d09      	ldr	r5, [pc, #36]	; (8013c7c <LCD_InitColors+0x28>)
 8013c58:	682c      	ldr	r4, [r5, #0]
 8013c5a:	b95c      	cbnz	r4, 8013c74 <LCD_InitColors+0x20>
 8013c5c:	4b08      	ldr	r3, [pc, #32]	; (8013c80 <LCD_InitColors+0x2c>)
 8013c5e:	6818      	ldr	r0, [r3, #0]
 8013c60:	0080      	lsls	r0, r0, #2
 8013c62:	f7fd fc0f 	bl	8011484 <GUI_ALLOC_GetFixedBlock>
 8013c66:	6028      	str	r0, [r5, #0]
 8013c68:	b130      	cbz	r0, 8013c78 <LCD_InitColors+0x24>
 8013c6a:	4806      	ldr	r0, [pc, #24]	; (8013c84 <LCD_InitColors+0x30>)
 8013c6c:	4b06      	ldr	r3, [pc, #24]	; (8013c88 <LCD_InitColors+0x34>)
 8013c6e:	6003      	str	r3, [r0, #0]
 8013c70:	f7fb ffd4 	bl	800fc1c <GUI__RegisterExit>
 8013c74:	2000      	movs	r0, #0
 8013c76:	bd38      	pop	{r3, r4, r5, pc}
 8013c78:	2001      	movs	r0, #1
 8013c7a:	bd38      	pop	{r3, r4, r5, pc}
 8013c7c:	2001b3c0 	.word	0x2001b3c0
 8013c80:	200002e8 	.word	0x200002e8
 8013c84:	200196cc 	.word	0x200196cc
 8013c88:	08013c41 	.word	0x08013c41

08013c8c <LCD_InitLUT>:
 8013c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c90:	f001 f806 	bl	8014ca0 <LCD_GetNumLayers>
 8013c94:	2400      	movs	r4, #0
 8013c96:	4680      	mov	r8, r0
 8013c98:	4544      	cmp	r4, r8
 8013c9a:	da2c      	bge.n	8013cf6 <LCD_InitLUT+0x6a>
 8013c9c:	4620      	mov	r0, r4
 8013c9e:	f7fb fe83 	bl	800f9a8 <GUI_DEVICE__GetpDriver>
 8013ca2:	b330      	cbz	r0, 8013cf2 <LCD_InitLUT+0x66>
 8013ca4:	4e15      	ldr	r6, [pc, #84]	; (8013cfc <LCD_InitLUT+0x70>)
 8013ca6:	6833      	ldr	r3, [r6, #0]
 8013ca8:	4620      	mov	r0, r4
 8013caa:	f893 9011 	ldrb.w	r9, [r3, #17]
 8013cae:	745c      	strb	r4, [r3, #17]
 8013cb0:	f7f9 fd40 	bl	800d734 <LCD_GetBitsPerPixelEx>
 8013cb4:	2808      	cmp	r0, #8
 8013cb6:	dd03      	ble.n	8013cc0 <LCD_InitLUT+0x34>
 8013cb8:	6833      	ldr	r3, [r6, #0]
 8013cba:	f883 9011 	strb.w	r9, [r3, #17]
 8013cbe:	e018      	b.n	8013cf2 <LCD_InitLUT+0x66>
 8013cc0:	4b0f      	ldr	r3, [pc, #60]	; (8013d00 <LCD_InitLUT+0x74>)
 8013cc2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8013cc6:	691a      	ldr	r2, [r3, #16]
 8013cc8:	4b0e      	ldr	r3, [pc, #56]	; (8013d04 <LCD_InitLUT+0x78>)
 8013cca:	429a      	cmp	r2, r3
 8013ccc:	d0f4      	beq.n	8013cb8 <LCD_InitLUT+0x2c>
 8013cce:	4620      	mov	r0, r4
 8013cd0:	f7f9 fd33 	bl	800d73a <LCD_GetNumColorsEx>
 8013cd4:	2500      	movs	r5, #0
 8013cd6:	4682      	mov	sl, r0
 8013cd8:	4555      	cmp	r5, sl
 8013cda:	daed      	bge.n	8013cb8 <LCD_InitLUT+0x2c>
 8013cdc:	b2ef      	uxtb	r7, r5
 8013cde:	4638      	mov	r0, r7
 8013ce0:	f7fa f906 	bl	800def0 <LCD_Index2Color>
 8013ce4:	4639      	mov	r1, r7
 8013ce6:	4602      	mov	r2, r0
 8013ce8:	4620      	mov	r0, r4
 8013cea:	f7f9 fcc7 	bl	800d67c <LCD_SetLUTEntryEx>
 8013cee:	3501      	adds	r5, #1
 8013cf0:	e7f2      	b.n	8013cd8 <LCD_InitLUT+0x4c>
 8013cf2:	3401      	adds	r4, #1
 8013cf4:	e7d0      	b.n	8013c98 <LCD_InitLUT+0xc>
 8013cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013cfa:	bf00      	nop
 8013cfc:	20000238 	.word	0x20000238
 8013d00:	2001b2c0 	.word	0x2001b2c0
 8013d04:	0801d54c 	.word	0x0801d54c

08013d08 <LCD_AA_SetAndMask>:
 8013d08:	4b02      	ldr	r3, [pc, #8]	; (8013d14 <LCD_AA_SetAndMask+0xc>)
 8013d0a:	681a      	ldr	r2, [r3, #0]
 8013d0c:	6018      	str	r0, [r3, #0]
 8013d0e:	4610      	mov	r0, r2
 8013d10:	4770      	bx	lr
 8013d12:	bf00      	nop
 8013d14:	200002ec 	.word	0x200002ec

08013d18 <GUI__strlen>:
 8013d18:	f04f 33ff 	mov.w	r3, #4294967295
 8013d1c:	b118      	cbz	r0, 8013d26 <GUI__strlen+0xe>
 8013d1e:	3301      	adds	r3, #1
 8013d20:	5cc2      	ldrb	r2, [r0, r3]
 8013d22:	2a00      	cmp	r2, #0
 8013d24:	d1fb      	bne.n	8013d1e <GUI__strlen+0x6>
 8013d26:	4618      	mov	r0, r3
 8013d28:	4770      	bx	lr
	...

08013d2c <GUI__strcmp>:
 8013d2c:	b510      	push	{r4, lr}
 8013d2e:	4b09      	ldr	r3, [pc, #36]	; (8013d54 <GUI__strcmp+0x28>)
 8013d30:	2800      	cmp	r0, #0
 8013d32:	bf08      	it	eq
 8013d34:	4618      	moveq	r0, r3
 8013d36:	2900      	cmp	r1, #0
 8013d38:	bf08      	it	eq
 8013d3a:	4619      	moveq	r1, r3
 8013d3c:	2300      	movs	r3, #0
 8013d3e:	5cc4      	ldrb	r4, [r0, r3]
 8013d40:	5cca      	ldrb	r2, [r1, r3]
 8013d42:	42a2      	cmp	r2, r4
 8013d44:	d104      	bne.n	8013d50 <GUI__strcmp+0x24>
 8013d46:	3301      	adds	r3, #1
 8013d48:	2a00      	cmp	r2, #0
 8013d4a:	d1f8      	bne.n	8013d3e <GUI__strcmp+0x12>
 8013d4c:	4610      	mov	r0, r2
 8013d4e:	bd10      	pop	{r4, pc}
 8013d50:	2001      	movs	r0, #1
 8013d52:	bd10      	pop	{r4, pc}
 8013d54:	0801d569 	.word	0x0801d569

08013d58 <GUI__strcmp_hp>:
 8013d58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013d5a:	460d      	mov	r5, r1
 8013d5c:	b160      	cbz	r0, 8013d78 <GUI__strcmp_hp+0x20>
 8013d5e:	f7fd fa39 	bl	80111d4 <GUI_ALLOC_LockH>
 8013d62:	ac02      	add	r4, sp, #8
 8013d64:	4629      	mov	r1, r5
 8013d66:	f844 0d04 	str.w	r0, [r4, #-4]!
 8013d6a:	f7ff ffdf 	bl	8013d2c <GUI__strcmp>
 8013d6e:	4605      	mov	r5, r0
 8013d70:	4620      	mov	r0, r4
 8013d72:	f7fd fa3d 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8013d76:	e000      	b.n	8013d7a <GUI__strcmp_hp+0x22>
 8013d78:	2501      	movs	r5, #1
 8013d7a:	4628      	mov	r0, r5
 8013d7c:	b003      	add	sp, #12
 8013d7e:	bd30      	pop	{r4, r5, pc}

08013d80 <_GetWordWrap>:
 8013d80:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8013d84:	2500      	movs	r5, #0
 8013d86:	9001      	str	r0, [sp, #4]
 8013d88:	468a      	mov	sl, r1
 8013d8a:	4691      	mov	r9, r2
 8013d8c:	46a8      	mov	r8, r5
 8013d8e:	462e      	mov	r6, r5
 8013d90:	462c      	mov	r4, r5
 8013d92:	462f      	mov	r7, r5
 8013d94:	a801      	add	r0, sp, #4
 8013d96:	f7fa fcfb 	bl	800e790 <GUI_UC__GetCharCodeInc>
 8013d9a:	2d00      	cmp	r5, #0
 8013d9c:	bf08      	it	eq
 8013d9e:	4605      	moveq	r5, r0
 8013da0:	b108      	cbz	r0, 8013da6 <_GetWordWrap+0x26>
 8013da2:	280a      	cmp	r0, #10
 8013da4:	d10b      	bne.n	8013dbe <_GetWordWrap+0x3e>
 8013da6:	4626      	mov	r6, r4
 8013da8:	2e00      	cmp	r6, #0
 8013daa:	bf18      	it	ne
 8013dac:	4634      	movne	r4, r6
 8013dae:	f1b9 0f00 	cmp.w	r9, #0
 8013db2:	d016      	beq.n	8013de2 <_GetWordWrap+0x62>
 8013db4:	ebc8 0707 	rsb	r7, r8, r7
 8013db8:	f8c9 7000 	str.w	r7, [r9]
 8013dbc:	e011      	b.n	8013de2 <_GetWordWrap+0x62>
 8013dbe:	2820      	cmp	r0, #32
 8013dc0:	d00d      	beq.n	8013dde <_GetWordWrap+0x5e>
 8013dc2:	2d20      	cmp	r5, #32
 8013dc4:	bf04      	itt	eq
 8013dc6:	4626      	moveq	r6, r4
 8013dc8:	2500      	moveq	r5, #0
 8013dca:	f7fc fa33 	bl	8010234 <GUI_GetCharDistX>
 8013dce:	4407      	add	r7, r0
 8013dd0:	4557      	cmp	r7, sl
 8013dd2:	4680      	mov	r8, r0
 8013dd4:	dd01      	ble.n	8013dda <_GetWordWrap+0x5a>
 8013dd6:	2c00      	cmp	r4, #0
 8013dd8:	d1e6      	bne.n	8013da8 <_GetWordWrap+0x28>
 8013dda:	3401      	adds	r4, #1
 8013ddc:	e7da      	b.n	8013d94 <_GetWordWrap+0x14>
 8013dde:	4626      	mov	r6, r4
 8013de0:	e7f3      	b.n	8013dca <_GetWordWrap+0x4a>
 8013de2:	4620      	mov	r0, r4
 8013de4:	b002      	add	sp, #8
 8013de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013dea <_GetCharWrap>:
 8013dea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013dec:	2400      	movs	r4, #0
 8013dee:	9001      	str	r0, [sp, #4]
 8013df0:	460e      	mov	r6, r1
 8013df2:	4625      	mov	r5, r4
 8013df4:	a801      	add	r0, sp, #4
 8013df6:	f7fa fccb 	bl	800e790 <GUI_UC__GetCharCodeInc>
 8013dfa:	4607      	mov	r7, r0
 8013dfc:	b148      	cbz	r0, 8013e12 <_GetCharWrap+0x28>
 8013dfe:	f7fc fa19 	bl	8010234 <GUI_GetCharDistX>
 8013e02:	4405      	add	r5, r0
 8013e04:	b10c      	cbz	r4, 8013e0a <_GetCharWrap+0x20>
 8013e06:	42b5      	cmp	r5, r6
 8013e08:	dc03      	bgt.n	8013e12 <_GetCharWrap+0x28>
 8013e0a:	2f0a      	cmp	r7, #10
 8013e0c:	d001      	beq.n	8013e12 <_GetCharWrap+0x28>
 8013e0e:	3401      	adds	r4, #1
 8013e10:	e7f0      	b.n	8013df4 <_GetCharWrap+0xa>
 8013e12:	4620      	mov	r0, r4
 8013e14:	b003      	add	sp, #12
 8013e16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013e18 <_WrapGetNumCharsDisp>:
 8013e18:	2a01      	cmp	r2, #1
 8013e1a:	b510      	push	{r4, lr}
 8013e1c:	d005      	beq.n	8013e2a <_WrapGetNumCharsDisp+0x12>
 8013e1e:	2a02      	cmp	r2, #2
 8013e20:	d108      	bne.n	8013e34 <_WrapGetNumCharsDisp+0x1c>
 8013e22:	4b07      	ldr	r3, [pc, #28]	; (8013e40 <_WrapGetNumCharsDisp+0x28>)
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	4798      	blx	r3
 8013e28:	bd10      	pop	{r4, pc}
 8013e2a:	4a06      	ldr	r2, [pc, #24]	; (8013e44 <_WrapGetNumCharsDisp+0x2c>)
 8013e2c:	6814      	ldr	r4, [r2, #0]
 8013e2e:	461a      	mov	r2, r3
 8013e30:	47a0      	blx	r4
 8013e32:	bd10      	pop	{r4, pc}
 8013e34:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8013e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013e3c:	f7fc b928 	b.w	8010090 <GUI__GetLineNumChars>
 8013e40:	200002f0 	.word	0x200002f0
 8013e44:	200002f4 	.word	0x200002f4

08013e48 <GUI__WrapGetNumCharsDisp>:
 8013e48:	2300      	movs	r3, #0
 8013e4a:	f7ff bfe5 	b.w	8013e18 <_WrapGetNumCharsDisp>

08013e4e <GUI__WrapGetNumCharsToNextLine>:
 8013e4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e50:	b085      	sub	sp, #20
 8013e52:	ab03      	add	r3, sp, #12
 8013e54:	4617      	mov	r7, r2
 8013e56:	460e      	mov	r6, r1
 8013e58:	9001      	str	r0, [sp, #4]
 8013e5a:	f7ff ffdd 	bl	8013e18 <_WrapGetNumCharsDisp>
 8013e5e:	9d01      	ldr	r5, [sp, #4]
 8013e60:	4604      	mov	r4, r0
 8013e62:	4621      	mov	r1, r4
 8013e64:	4628      	mov	r0, r5
 8013e66:	f7fa fca7 	bl	800e7b8 <GUI_UC__NumChars2NumBytes>
 8013e6a:	4428      	add	r0, r5
 8013e6c:	ad04      	add	r5, sp, #16
 8013e6e:	f845 0d0c 	str.w	r0, [r5, #-12]!
 8013e72:	4628      	mov	r0, r5
 8013e74:	f7fa fc8c 	bl	800e790 <GUI_UC__GetCharCodeInc>
 8013e78:	280a      	cmp	r0, #10
 8013e7a:	d101      	bne.n	8013e80 <GUI__WrapGetNumCharsToNextLine+0x32>
 8013e7c:	3401      	adds	r4, #1
 8013e7e:	e012      	b.n	8013ea6 <GUI__WrapGetNumCharsToNextLine+0x58>
 8013e80:	2f01      	cmp	r7, #1
 8013e82:	d110      	bne.n	8013ea6 <GUI__WrapGetNumCharsToNextLine+0x58>
 8013e84:	2820      	cmp	r0, #32
 8013e86:	d10e      	bne.n	8013ea6 <GUI__WrapGetNumCharsToNextLine+0x58>
 8013e88:	f7fc f9d4 	bl	8010234 <GUI_GetCharDistX>
 8013e8c:	4607      	mov	r7, r0
 8013e8e:	9b03      	ldr	r3, [sp, #12]
 8013e90:	429e      	cmp	r6, r3
 8013e92:	db08      	blt.n	8013ea6 <GUI__WrapGetNumCharsToNextLine+0x58>
 8013e94:	443b      	add	r3, r7
 8013e96:	4628      	mov	r0, r5
 8013e98:	9303      	str	r3, [sp, #12]
 8013e9a:	f7fa fc79 	bl	800e790 <GUI_UC__GetCharCodeInc>
 8013e9e:	2820      	cmp	r0, #32
 8013ea0:	f104 0401 	add.w	r4, r4, #1
 8013ea4:	d0f3      	beq.n	8013e8e <GUI__WrapGetNumCharsToNextLine+0x40>
 8013ea6:	4620      	mov	r0, r4
 8013ea8:	b005      	add	sp, #20
 8013eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013eac <GUI__WrapGetNumBytesToNextLine>:
 8013eac:	b510      	push	{r4, lr}
 8013eae:	4604      	mov	r4, r0
 8013eb0:	f7ff ffcd 	bl	8013e4e <GUI__WrapGetNumCharsToNextLine>
 8013eb4:	4601      	mov	r1, r0
 8013eb6:	4620      	mov	r0, r4
 8013eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ebc:	f7fa bc7c 	b.w	800e7b8 <GUI_UC__NumChars2NumBytes>

08013ec0 <GUI__Read16>:
 8013ec0:	6803      	ldr	r3, [r0, #0]
 8013ec2:	781a      	ldrb	r2, [r3, #0]
 8013ec4:	7859      	ldrb	r1, [r3, #1]
 8013ec6:	3302      	adds	r3, #2
 8013ec8:	6003      	str	r3, [r0, #0]
 8013eca:	ea42 2001 	orr.w	r0, r2, r1, lsl #8
 8013ece:	4770      	bx	lr

08013ed0 <GUI__Read32>:
 8013ed0:	b510      	push	{r4, lr}
 8013ed2:	6803      	ldr	r3, [r0, #0]
 8013ed4:	789a      	ldrb	r2, [r3, #2]
 8013ed6:	785c      	ldrb	r4, [r3, #1]
 8013ed8:	7819      	ldrb	r1, [r3, #0]
 8013eda:	0412      	lsls	r2, r2, #16
 8013edc:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8013ee0:	430a      	orrs	r2, r1
 8013ee2:	78d9      	ldrb	r1, [r3, #3]
 8013ee4:	3304      	adds	r3, #4
 8013ee6:	6003      	str	r3, [r0, #0]
 8013ee8:	ea42 6001 	orr.w	r0, r2, r1, lsl #24
 8013eec:	bd10      	pop	{r4, pc}

08013eee <GUI__ExpandPixelIndicesEx>:
 8013eee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ef2:	1e0c      	subs	r4, r1, #0
 8013ef4:	4605      	mov	r5, r0
 8013ef6:	f340 80b3 	ble.w	8014060 <GUI__ExpandPixelIndicesEx+0x172>
 8013efa:	2a08      	cmp	r2, #8
 8013efc:	685f      	ldr	r7, [r3, #4]
 8013efe:	dd04      	ble.n	8013f0a <GUI__ExpandPixelIndicesEx+0x1c>
 8013f00:	2a10      	cmp	r2, #16
 8013f02:	f340 8098 	ble.w	8014036 <GUI__ExpandPixelIndicesEx+0x148>
 8013f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f0a:	3a01      	subs	r2, #1
 8013f0c:	2a07      	cmp	r2, #7
 8013f0e:	f200 80a7 	bhi.w	8014060 <GUI__ExpandPixelIndicesEx+0x172>
 8013f12:	e8df f002 	tbb	[pc, r2]
 8013f16:	2d04      	.short	0x2d04
 8013f18:	a5a558a5 	.word	0xa5a558a5
 8013f1c:	83a5      	.short	0x83a5
 8013f1e:	1e66      	subs	r6, r4, #1
 8013f20:	10f2      	asrs	r2, r6, #3
 8013f22:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8013f26:	3b01      	subs	r3, #1
 8013f28:	eb05 0802 	add.w	r8, r5, r2
 8013f2c:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 8013f30:	f006 0607 	and.w	r6, r6, #7
 8013f34:	f815 a002 	ldrb.w	sl, [r5, r2]
 8013f38:	2580      	movs	r5, #128	; 0x80
 8013f3a:	4135      	asrs	r5, r6
 8013f3c:	f108 38ff 	add.w	r8, r8, #4294967295
 8013f40:	b2ed      	uxtb	r5, r5
 8013f42:	f1c6 0307 	rsb	r3, r6, #7
 8013f46:	ea0a 0005 	and.w	r0, sl, r5
 8013f4a:	4118      	asrs	r0, r3
 8013f4c:	47b8      	blx	r7
 8013f4e:	f849 0904 	str.w	r0, [r9], #-4
 8013f52:	b936      	cbnz	r6, 8013f62 <GUI__ExpandPixelIndicesEx+0x74>
 8013f54:	f898 a000 	ldrb.w	sl, [r8]
 8013f58:	2501      	movs	r5, #1
 8013f5a:	f108 38ff 	add.w	r8, r8, #4294967295
 8013f5e:	2607      	movs	r6, #7
 8013f60:	e002      	b.n	8013f68 <GUI__ExpandPixelIndicesEx+0x7a>
 8013f62:	006d      	lsls	r5, r5, #1
 8013f64:	3e01      	subs	r6, #1
 8013f66:	b2ed      	uxtb	r5, r5
 8013f68:	3c01      	subs	r4, #1
 8013f6a:	d1ea      	bne.n	8013f42 <GUI__ExpandPixelIndicesEx+0x54>
 8013f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f70:	1e66      	subs	r6, r4, #1
 8013f72:	10b2      	asrs	r2, r6, #2
 8013f74:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8013f78:	3b01      	subs	r3, #1
 8013f7a:	f006 0603 	and.w	r6, r6, #3
 8013f7e:	eb05 0802 	add.w	r8, r5, r2
 8013f82:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 8013f86:	f815 a002 	ldrb.w	sl, [r5, r2]
 8013f8a:	0073      	lsls	r3, r6, #1
 8013f8c:	25c0      	movs	r5, #192	; 0xc0
 8013f8e:	411d      	asrs	r5, r3
 8013f90:	f108 38ff 	add.w	r8, r8, #4294967295
 8013f94:	b2ed      	uxtb	r5, r5
 8013f96:	0073      	lsls	r3, r6, #1
 8013f98:	f1c3 0306 	rsb	r3, r3, #6
 8013f9c:	ea0a 0005 	and.w	r0, sl, r5
 8013fa0:	4118      	asrs	r0, r3
 8013fa2:	47b8      	blx	r7
 8013fa4:	f849 0904 	str.w	r0, [r9], #-4
 8013fa8:	b936      	cbnz	r6, 8013fb8 <GUI__ExpandPixelIndicesEx+0xca>
 8013faa:	2503      	movs	r5, #3
 8013fac:	f898 a000 	ldrb.w	sl, [r8]
 8013fb0:	462e      	mov	r6, r5
 8013fb2:	f108 38ff 	add.w	r8, r8, #4294967295
 8013fb6:	e002      	b.n	8013fbe <GUI__ExpandPixelIndicesEx+0xd0>
 8013fb8:	00ad      	lsls	r5, r5, #2
 8013fba:	3e01      	subs	r6, #1
 8013fbc:	b2ed      	uxtb	r5, r5
 8013fbe:	3c01      	subs	r4, #1
 8013fc0:	d1e9      	bne.n	8013f96 <GUI__ExpandPixelIndicesEx+0xa8>
 8013fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013fc6:	1e66      	subs	r6, r4, #1
 8013fc8:	1072      	asrs	r2, r6, #1
 8013fca:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8013fce:	3b01      	subs	r3, #1
 8013fd0:	f006 0601 	and.w	r6, r6, #1
 8013fd4:	eb05 0802 	add.w	r8, r5, r2
 8013fd8:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 8013fdc:	f815 a002 	ldrb.w	sl, [r5, r2]
 8013fe0:	00b3      	lsls	r3, r6, #2
 8013fe2:	25f0      	movs	r5, #240	; 0xf0
 8013fe4:	411d      	asrs	r5, r3
 8013fe6:	f108 38ff 	add.w	r8, r8, #4294967295
 8013fea:	b2ed      	uxtb	r5, r5
 8013fec:	00b3      	lsls	r3, r6, #2
 8013fee:	f1c3 0304 	rsb	r3, r3, #4
 8013ff2:	ea0a 0005 	and.w	r0, sl, r5
 8013ff6:	4118      	asrs	r0, r3
 8013ff8:	47b8      	blx	r7
 8013ffa:	f849 0904 	str.w	r0, [r9], #-4
 8013ffe:	b936      	cbnz	r6, 801400e <GUI__ExpandPixelIndicesEx+0x120>
 8014000:	f898 a000 	ldrb.w	sl, [r8]
 8014004:	250f      	movs	r5, #15
 8014006:	f108 38ff 	add.w	r8, r8, #4294967295
 801400a:	2601      	movs	r6, #1
 801400c:	e002      	b.n	8014014 <GUI__ExpandPixelIndicesEx+0x126>
 801400e:	012d      	lsls	r5, r5, #4
 8014010:	b2ed      	uxtb	r5, r5
 8014012:	2600      	movs	r6, #0
 8014014:	3c01      	subs	r4, #1
 8014016:	d1e9      	bne.n	8013fec <GUI__ExpandPixelIndicesEx+0xfe>
 8014018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801401c:	192e      	adds	r6, r5, r4
 801401e:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 8014022:	1b34      	subs	r4, r6, r4
 8014024:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
 8014028:	47b8      	blx	r7
 801402a:	42a6      	cmp	r6, r4
 801402c:	f845 0d04 	str.w	r0, [r5, #-4]!
 8014030:	d1f8      	bne.n	8014024 <GUI__ExpandPixelIndicesEx+0x136>
 8014032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014036:	695e      	ldr	r6, [r3, #20]
 8014038:	b12e      	cbz	r6, 8014046 <GUI__ExpandPixelIndicesEx+0x158>
 801403a:	4629      	mov	r1, r5
 801403c:	4622      	mov	r2, r4
 801403e:	2302      	movs	r3, #2
 8014040:	47b0      	blx	r6
 8014042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014046:	0064      	lsls	r4, r4, #1
 8014048:	4425      	add	r5, r4
 801404a:	192e      	adds	r6, r5, r4
 801404c:	1b2c      	subs	r4, r5, r4
 801404e:	f835 0d02 	ldrh.w	r0, [r5, #-2]!
 8014052:	47b8      	blx	r7
 8014054:	42a5      	cmp	r5, r4
 8014056:	f846 0d04 	str.w	r0, [r6, #-4]!
 801405a:	d1f8      	bne.n	801404e <GUI__ExpandPixelIndicesEx+0x160>
 801405c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08014064 <_GetTwinArcPara>:
 8014064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014068:	fb01 f901 	mul.w	r9, r1, r1
 801406c:	1e47      	subs	r7, r0, #1
 801406e:	4604      	mov	r4, r0
 8014070:	4340      	muls	r0, r0
 8014072:	ebc9 0000 	rsb	r0, r9, r0
 8014076:	460d      	mov	r5, r1
 8014078:	4692      	mov	sl, r2
 801407a:	4698      	mov	r8, r3
 801407c:	9e08      	ldr	r6, [sp, #32]
 801407e:	f000 fe2f 	bl	8014ce0 <GUI__sqrt32>
 8014082:	42bd      	cmp	r5, r7
 8014084:	f8ca 0000 	str.w	r0, [sl]
 8014088:	da10      	bge.n	80140ac <_GetTwinArcPara+0x48>
 801408a:	fb07 f007 	mul.w	r0, r7, r7
 801408e:	ebc9 0000 	rsb	r0, r9, r0
 8014092:	f000 fe25 	bl	8014ce0 <GUI__sqrt32>
 8014096:	3c02      	subs	r4, #2
 8014098:	42a5      	cmp	r5, r4
 801409a:	f8c8 0000 	str.w	r0, [r8]
 801409e:	da03      	bge.n	80140a8 <_GetTwinArcPara+0x44>
 80140a0:	3801      	subs	r0, #1
 80140a2:	6030      	str	r0, [r6, #0]
 80140a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140a8:	2300      	movs	r3, #0
 80140aa:	e002      	b.n	80140b2 <_GetTwinArcPara+0x4e>
 80140ac:	2300      	movs	r3, #0
 80140ae:	f8c8 3000 	str.w	r3, [r8]
 80140b2:	6033      	str	r3, [r6, #0]
 80140b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080140b8 <GUI__DrawTwinArc4>:
 80140b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140bc:	4d76      	ldr	r5, [pc, #472]	; (8014298 <GUI__DrawTwinArc4+0x1e0>)
 80140be:	682d      	ldr	r5, [r5, #0]
 80140c0:	6cee      	ldr	r6, [r5, #76]	; 0x4c
 80140c2:	6d2f      	ldr	r7, [r5, #80]	; 0x50
 80140c4:	b08f      	sub	sp, #60	; 0x3c
 80140c6:	4430      	add	r0, r6
 80140c8:	4439      	add	r1, r7
 80140ca:	9005      	str	r0, [sp, #20]
 80140cc:	4416      	add	r6, r2
 80140ce:	441f      	add	r7, r3
 80140d0:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 80140d4:	a80c      	add	r0, sp, #48	; 0x30
 80140d6:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80140d8:	9106      	str	r1, [sp, #24]
 80140da:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
 80140de:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
 80140e2:	f8ad 7036 	strh.w	r7, [sp, #54]	; 0x36
 80140e6:	f7f6 fe1f 	bl	800ad28 <WM__InitIVRSearch>
 80140ea:	2800      	cmp	r0, #0
 80140ec:	f000 80d0 	beq.w	8014290 <GUI__DrawTwinArc4+0x1d8>
 80140f0:	2c00      	cmp	r4, #0
 80140f2:	dc02      	bgt.n	80140fa <GUI__DrawTwinArc4+0x42>
 80140f4:	f7f6 fd56 	bl	800aba4 <WM__GetNextIVR>
 80140f8:	e7f7      	b.n	80140ea <GUI__DrawTwinArc4+0x32>
 80140fa:	9819      	ldr	r0, [sp, #100]	; 0x64
 80140fc:	f7fb f8a0 	bl	800f240 <GUI_SetColor>
 8014100:	9b06      	ldr	r3, [sp, #24]
 8014102:	4423      	add	r3, r4
 8014104:	9307      	str	r3, [sp, #28]
 8014106:	9b06      	ldr	r3, [sp, #24]
 8014108:	1e65      	subs	r5, r4, #1
 801410a:	f103 0801 	add.w	r8, r3, #1
 801410e:	2d00      	cmp	r5, #0
 8014110:	d037      	beq.n	8014182 <GUI__DrawTwinArc4+0xca>
 8014112:	ab0b      	add	r3, sp, #44	; 0x2c
 8014114:	4629      	mov	r1, r5
 8014116:	9300      	str	r3, [sp, #0]
 8014118:	4620      	mov	r0, r4
 801411a:	aa09      	add	r2, sp, #36	; 0x24
 801411c:	ab0a      	add	r3, sp, #40	; 0x28
 801411e:	f7ff ffa1 	bl	8014064 <_GetTwinArcPara>
 8014122:	9b05      	ldr	r3, [sp, #20]
 8014124:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014126:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014128:	4423      	add	r3, r4
 801412a:	ebc1 0c03 	rsb	ip, r1, r3
 801412e:	ebc4 0b06 	rsb	fp, r4, r6
 8014132:	1a9b      	subs	r3, r3, r2
 8014134:	3b01      	subs	r3, #1
 8014136:	eb0b 0901 	add.w	r9, fp, r1
 801413a:	4493      	add	fp, r2
 801413c:	4660      	mov	r0, ip
 801413e:	461a      	mov	r2, r3
 8014140:	4641      	mov	r1, r8
 8014142:	f10b 0b01 	add.w	fp, fp, #1
 8014146:	9303      	str	r3, [sp, #12]
 8014148:	f8cd c010 	str.w	ip, [sp, #16]
 801414c:	f7f9 fc06 	bl	800d95c <LCD_DrawHLine>
 8014150:	4641      	mov	r1, r8
 8014152:	4658      	mov	r0, fp
 8014154:	464a      	mov	r2, r9
 8014156:	f7f9 fc01 	bl	800d95c <LCD_DrawHLine>
 801415a:	ebc4 0a07 	rsb	sl, r4, r7
 801415e:	f8dd c010 	ldr.w	ip, [sp, #16]
 8014162:	9b03      	ldr	r3, [sp, #12]
 8014164:	44aa      	add	sl, r5
 8014166:	4660      	mov	r0, ip
 8014168:	461a      	mov	r2, r3
 801416a:	4651      	mov	r1, sl
 801416c:	f7f9 fbf6 	bl	800d95c <LCD_DrawHLine>
 8014170:	4658      	mov	r0, fp
 8014172:	4651      	mov	r1, sl
 8014174:	464a      	mov	r2, r9
 8014176:	f7f9 fbf1 	bl	800d95c <LCD_DrawHLine>
 801417a:	3d01      	subs	r5, #1
 801417c:	f108 0801 	add.w	r8, r8, #1
 8014180:	e7c5      	b.n	801410e <GUI__DrawTwinArc4+0x56>
 8014182:	2c01      	cmp	r4, #1
 8014184:	d0b6      	beq.n	80140f4 <GUI__DrawTwinArc4+0x3c>
 8014186:	981a      	ldr	r0, [sp, #104]	; 0x68
 8014188:	f7fb f85a 	bl	800f240 <GUI_SetColor>
 801418c:	9b07      	ldr	r3, [sp, #28]
 801418e:	f1c4 0802 	rsb	r8, r4, #2
 8014192:	1ea5      	subs	r5, r4, #2
 8014194:	4498      	add	r8, r3
 8014196:	2d00      	cmp	r5, #0
 8014198:	d037      	beq.n	801420a <GUI__DrawTwinArc4+0x152>
 801419a:	ab0b      	add	r3, sp, #44	; 0x2c
 801419c:	4629      	mov	r1, r5
 801419e:	9300      	str	r3, [sp, #0]
 80141a0:	4620      	mov	r0, r4
 80141a2:	aa09      	add	r2, sp, #36	; 0x24
 80141a4:	ab0a      	add	r3, sp, #40	; 0x28
 80141a6:	f7ff ff5d 	bl	8014064 <_GetTwinArcPara>
 80141aa:	9b05      	ldr	r3, [sp, #20]
 80141ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 80141ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80141b0:	4423      	add	r3, r4
 80141b2:	ebc1 0c03 	rsb	ip, r1, r3
 80141b6:	ebc4 0b06 	rsb	fp, r4, r6
 80141ba:	1a9b      	subs	r3, r3, r2
 80141bc:	3b01      	subs	r3, #1
 80141be:	eb0b 0901 	add.w	r9, fp, r1
 80141c2:	4493      	add	fp, r2
 80141c4:	4660      	mov	r0, ip
 80141c6:	461a      	mov	r2, r3
 80141c8:	4641      	mov	r1, r8
 80141ca:	f10b 0b01 	add.w	fp, fp, #1
 80141ce:	9303      	str	r3, [sp, #12]
 80141d0:	f8cd c010 	str.w	ip, [sp, #16]
 80141d4:	f7f9 fbc2 	bl	800d95c <LCD_DrawHLine>
 80141d8:	4641      	mov	r1, r8
 80141da:	4658      	mov	r0, fp
 80141dc:	464a      	mov	r2, r9
 80141de:	f7f9 fbbd 	bl	800d95c <LCD_DrawHLine>
 80141e2:	ebc4 0a07 	rsb	sl, r4, r7
 80141e6:	f8dd c010 	ldr.w	ip, [sp, #16]
 80141ea:	9b03      	ldr	r3, [sp, #12]
 80141ec:	44aa      	add	sl, r5
 80141ee:	4660      	mov	r0, ip
 80141f0:	461a      	mov	r2, r3
 80141f2:	4651      	mov	r1, sl
 80141f4:	f7f9 fbb2 	bl	800d95c <LCD_DrawHLine>
 80141f8:	4658      	mov	r0, fp
 80141fa:	4651      	mov	r1, sl
 80141fc:	464a      	mov	r2, r9
 80141fe:	f7f9 fbad 	bl	800d95c <LCD_DrawHLine>
 8014202:	3d01      	subs	r5, #1
 8014204:	f108 0801 	add.w	r8, r8, #1
 8014208:	e7c5      	b.n	8014196 <GUI__DrawTwinArc4+0xde>
 801420a:	2c02      	cmp	r4, #2
 801420c:	f43f af72 	beq.w	80140f4 <GUI__DrawTwinArc4+0x3c>
 8014210:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8014212:	f7fb f815 	bl	800f240 <GUI_SetColor>
 8014216:	9b07      	ldr	r3, [sp, #28]
 8014218:	f1c4 0803 	rsb	r8, r4, #3
 801421c:	1ee5      	subs	r5, r4, #3
 801421e:	4498      	add	r8, r3
 8014220:	2d00      	cmp	r5, #0
 8014222:	f43f af67 	beq.w	80140f4 <GUI__DrawTwinArc4+0x3c>
 8014226:	ab0b      	add	r3, sp, #44	; 0x2c
 8014228:	4629      	mov	r1, r5
 801422a:	9300      	str	r3, [sp, #0]
 801422c:	4620      	mov	r0, r4
 801422e:	aa09      	add	r2, sp, #36	; 0x24
 8014230:	ab0a      	add	r3, sp, #40	; 0x28
 8014232:	f7ff ff17 	bl	8014064 <_GetTwinArcPara>
 8014236:	9b05      	ldr	r3, [sp, #20]
 8014238:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801423a:	4423      	add	r3, r4
 801423c:	ebc2 0c03 	rsb	ip, r2, r3
 8014240:	ebc4 0b06 	rsb	fp, r4, r6
 8014244:	3b01      	subs	r3, #1
 8014246:	eb0b 0902 	add.w	r9, fp, r2
 801424a:	4660      	mov	r0, ip
 801424c:	461a      	mov	r2, r3
 801424e:	4641      	mov	r1, r8
 8014250:	f10b 0b01 	add.w	fp, fp, #1
 8014254:	9303      	str	r3, [sp, #12]
 8014256:	f8cd c010 	str.w	ip, [sp, #16]
 801425a:	f7f9 fb7f 	bl	800d95c <LCD_DrawHLine>
 801425e:	4641      	mov	r1, r8
 8014260:	4658      	mov	r0, fp
 8014262:	464a      	mov	r2, r9
 8014264:	f7f9 fb7a 	bl	800d95c <LCD_DrawHLine>
 8014268:	ebc4 0a07 	rsb	sl, r4, r7
 801426c:	f8dd c010 	ldr.w	ip, [sp, #16]
 8014270:	9b03      	ldr	r3, [sp, #12]
 8014272:	44aa      	add	sl, r5
 8014274:	4660      	mov	r0, ip
 8014276:	461a      	mov	r2, r3
 8014278:	4651      	mov	r1, sl
 801427a:	f7f9 fb6f 	bl	800d95c <LCD_DrawHLine>
 801427e:	4658      	mov	r0, fp
 8014280:	4651      	mov	r1, sl
 8014282:	464a      	mov	r2, r9
 8014284:	f7f9 fb6a 	bl	800d95c <LCD_DrawHLine>
 8014288:	3d01      	subs	r5, #1
 801428a:	f108 0801 	add.w	r8, r8, #1
 801428e:	e7c7      	b.n	8014220 <GUI__DrawTwinArc4+0x168>
 8014290:	b00f      	add	sp, #60	; 0x3c
 8014292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014296:	bf00      	nop
 8014298:	20000238 	.word	0x20000238

0801429c <GUI__CompactPixelIndices>:
 801429c:	2a08      	cmp	r2, #8
 801429e:	b510      	push	{r4, lr}
 80142a0:	dd0e      	ble.n	80142c0 <GUI__CompactPixelIndices+0x24>
 80142a2:	2a10      	cmp	r2, #16
 80142a4:	dc0a      	bgt.n	80142bc <GUI__CompactPixelIndices+0x20>
 80142a6:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80142aa:	4603      	mov	r3, r0
 80142ac:	f850 2b04 	ldr.w	r2, [r0], #4
 80142b0:	f823 2b02 	strh.w	r2, [r3], #2
 80142b4:	428b      	cmp	r3, r1
 80142b6:	d1f9      	bne.n	80142ac <GUI__CompactPixelIndices+0x10>
 80142b8:	2001      	movs	r0, #1
 80142ba:	bd10      	pop	{r4, pc}
 80142bc:	2000      	movs	r0, #0
 80142be:	bd10      	pop	{r4, pc}
 80142c0:	2a02      	cmp	r2, #2
 80142c2:	d06d      	beq.n	80143a0 <GUI__CompactPixelIndices+0x104>
 80142c4:	2a04      	cmp	r2, #4
 80142c6:	d054      	beq.n	8014372 <GUI__CompactPixelIndices+0xd6>
 80142c8:	2a01      	cmp	r2, #1
 80142ca:	f040 8095 	bne.w	80143f8 <GUI__CompactPixelIndices+0x15c>
 80142ce:	4604      	mov	r4, r0
 80142d0:	6803      	ldr	r3, [r0, #0]
 80142d2:	2901      	cmp	r1, #1
 80142d4:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 80142d8:	b2db      	uxtb	r3, r3
 80142da:	d047      	beq.n	801436c <GUI__CompactPixelIndices+0xd0>
 80142dc:	6842      	ldr	r2, [r0, #4]
 80142de:	2902      	cmp	r1, #2
 80142e0:	f002 0201 	and.w	r2, r2, #1
 80142e4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80142e8:	d102      	bne.n	80142f0 <GUI__CompactPixelIndices+0x54>
 80142ea:	f100 0208 	add.w	r2, r0, #8
 80142ee:	e03e      	b.n	801436e <GUI__CompactPixelIndices+0xd2>
 80142f0:	6882      	ldr	r2, [r0, #8]
 80142f2:	2903      	cmp	r1, #3
 80142f4:	f002 0201 	and.w	r2, r2, #1
 80142f8:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80142fc:	d102      	bne.n	8014304 <GUI__CompactPixelIndices+0x68>
 80142fe:	f100 020c 	add.w	r2, r0, #12
 8014302:	e034      	b.n	801436e <GUI__CompactPixelIndices+0xd2>
 8014304:	68c2      	ldr	r2, [r0, #12]
 8014306:	2904      	cmp	r1, #4
 8014308:	f002 0201 	and.w	r2, r2, #1
 801430c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8014310:	d102      	bne.n	8014318 <GUI__CompactPixelIndices+0x7c>
 8014312:	f100 0210 	add.w	r2, r0, #16
 8014316:	e02a      	b.n	801436e <GUI__CompactPixelIndices+0xd2>
 8014318:	6902      	ldr	r2, [r0, #16]
 801431a:	2905      	cmp	r1, #5
 801431c:	f002 0201 	and.w	r2, r2, #1
 8014320:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8014324:	d102      	bne.n	801432c <GUI__CompactPixelIndices+0x90>
 8014326:	f100 0214 	add.w	r2, r0, #20
 801432a:	e020      	b.n	801436e <GUI__CompactPixelIndices+0xd2>
 801432c:	6942      	ldr	r2, [r0, #20]
 801432e:	2906      	cmp	r1, #6
 8014330:	f002 0201 	and.w	r2, r2, #1
 8014334:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8014338:	d102      	bne.n	8014340 <GUI__CompactPixelIndices+0xa4>
 801433a:	f100 0218 	add.w	r2, r0, #24
 801433e:	e016      	b.n	801436e <GUI__CompactPixelIndices+0xd2>
 8014340:	6982      	ldr	r2, [r0, #24]
 8014342:	3907      	subs	r1, #7
 8014344:	f002 0201 	and.w	r2, r2, #1
 8014348:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 801434c:	d102      	bne.n	8014354 <GUI__CompactPixelIndices+0xb8>
 801434e:	f100 021c 	add.w	r2, r0, #28
 8014352:	e005      	b.n	8014360 <GUI__CompactPixelIndices+0xc4>
 8014354:	f100 0220 	add.w	r2, r0, #32
 8014358:	69c0      	ldr	r0, [r0, #28]
 801435a:	f000 0001 	and.w	r0, r0, #1
 801435e:	4303      	orrs	r3, r0
 8014360:	f804 3b01 	strb.w	r3, [r4], #1
 8014364:	2900      	cmp	r1, #0
 8014366:	d0a7      	beq.n	80142b8 <GUI__CompactPixelIndices+0x1c>
 8014368:	4610      	mov	r0, r2
 801436a:	e7b1      	b.n	80142d0 <GUI__CompactPixelIndices+0x34>
 801436c:	1d02      	adds	r2, r0, #4
 801436e:	2100      	movs	r1, #0
 8014370:	e7f6      	b.n	8014360 <GUI__CompactPixelIndices+0xc4>
 8014372:	4602      	mov	r2, r0
 8014374:	6803      	ldr	r3, [r0, #0]
 8014376:	2901      	cmp	r1, #1
 8014378:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801437c:	b2db      	uxtb	r3, r3
 801437e:	d102      	bne.n	8014386 <GUI__CompactPixelIndices+0xea>
 8014380:	1d04      	adds	r4, r0, #4
 8014382:	2100      	movs	r1, #0
 8014384:	e006      	b.n	8014394 <GUI__CompactPixelIndices+0xf8>
 8014386:	f100 0408 	add.w	r4, r0, #8
 801438a:	6840      	ldr	r0, [r0, #4]
 801438c:	f000 000f 	and.w	r0, r0, #15
 8014390:	4303      	orrs	r3, r0
 8014392:	3902      	subs	r1, #2
 8014394:	f802 3b01 	strb.w	r3, [r2], #1
 8014398:	2900      	cmp	r1, #0
 801439a:	d08d      	beq.n	80142b8 <GUI__CompactPixelIndices+0x1c>
 801439c:	4620      	mov	r0, r4
 801439e:	e7e9      	b.n	8014374 <GUI__CompactPixelIndices+0xd8>
 80143a0:	4604      	mov	r4, r0
 80143a2:	6803      	ldr	r3, [r0, #0]
 80143a4:	2901      	cmp	r1, #1
 80143a6:	ea4f 1383 	mov.w	r3, r3, lsl #6
 80143aa:	b2db      	uxtb	r3, r3
 80143ac:	d021      	beq.n	80143f2 <GUI__CompactPixelIndices+0x156>
 80143ae:	6842      	ldr	r2, [r0, #4]
 80143b0:	2902      	cmp	r1, #2
 80143b2:	f002 0203 	and.w	r2, r2, #3
 80143b6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80143ba:	d102      	bne.n	80143c2 <GUI__CompactPixelIndices+0x126>
 80143bc:	f100 0208 	add.w	r2, r0, #8
 80143c0:	e018      	b.n	80143f4 <GUI__CompactPixelIndices+0x158>
 80143c2:	6882      	ldr	r2, [r0, #8]
 80143c4:	2903      	cmp	r1, #3
 80143c6:	f002 0203 	and.w	r2, r2, #3
 80143ca:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 80143ce:	d102      	bne.n	80143d6 <GUI__CompactPixelIndices+0x13a>
 80143d0:	f100 020c 	add.w	r2, r0, #12
 80143d4:	e00e      	b.n	80143f4 <GUI__CompactPixelIndices+0x158>
 80143d6:	f100 0210 	add.w	r2, r0, #16
 80143da:	68c0      	ldr	r0, [r0, #12]
 80143dc:	f000 0003 	and.w	r0, r0, #3
 80143e0:	4303      	orrs	r3, r0
 80143e2:	3904      	subs	r1, #4
 80143e4:	f804 3b01 	strb.w	r3, [r4], #1
 80143e8:	2900      	cmp	r1, #0
 80143ea:	f43f af65 	beq.w	80142b8 <GUI__CompactPixelIndices+0x1c>
 80143ee:	4610      	mov	r0, r2
 80143f0:	e7d7      	b.n	80143a2 <GUI__CompactPixelIndices+0x106>
 80143f2:	1d02      	adds	r2, r0, #4
 80143f4:	2100      	movs	r1, #0
 80143f6:	e7f5      	b.n	80143e4 <GUI__CompactPixelIndices+0x148>
 80143f8:	2300      	movs	r3, #0
 80143fa:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 80143fe:	54c2      	strb	r2, [r0, r3]
 8014400:	3301      	adds	r3, #1
 8014402:	428b      	cmp	r3, r1
 8014404:	d1f9      	bne.n	80143fa <GUI__CompactPixelIndices+0x15e>
 8014406:	e757      	b.n	80142b8 <GUI__CompactPixelIndices+0x1c>

08014408 <GUI__ConvertColor2Index>:
 8014408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801440c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014410:	681e      	ldr	r6, [r3, #0]
 8014412:	f1b8 0f00 	cmp.w	r8, #0
 8014416:	bf08      	it	eq
 8014418:	4680      	moveq	r8, r0
 801441a:	2a08      	cmp	r2, #8
 801441c:	4604      	mov	r4, r0
 801441e:	460d      	mov	r5, r1
 8014420:	dd05      	ble.n	801442e <GUI__ConvertColor2Index+0x26>
 8014422:	2a10      	cmp	r2, #16
 8014424:	f340 80b6 	ble.w	8014594 <GUI__ConvertColor2Index+0x18c>
 8014428:	2000      	movs	r0, #0
 801442a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801442e:	3a01      	subs	r2, #1
 8014430:	2a07      	cmp	r2, #7
 8014432:	f200 80a4 	bhi.w	801457e <GUI__ConvertColor2Index+0x176>
 8014436:	e8df f002 	tbb	[pc, r2]
 801443a:	6111      	.short	0x6111
 801443c:	a2a287a2 	.word	0xa2a287a2
 8014440:	92a2      	.short	0x92a2
 8014442:	69e0      	ldr	r0, [r4, #28]
 8014444:	47b0      	blx	r6
 8014446:	4338      	orrs	r0, r7
 8014448:	f104 0920 	add.w	r9, r4, #32
 801444c:	b2c7      	uxtb	r7, r0
 801444e:	3d08      	subs	r5, #8
 8014450:	f808 7b01 	strb.w	r7, [r8], #1
 8014454:	2d00      	cmp	r5, #0
 8014456:	f000 8092 	beq.w	801457e <GUI__ConvertColor2Index+0x176>
 801445a:	464c      	mov	r4, r9
 801445c:	6820      	ldr	r0, [r4, #0]
 801445e:	47b0      	blx	r6
 8014460:	2d01      	cmp	r5, #1
 8014462:	ea4f 10c0 	mov.w	r0, r0, lsl #7
 8014466:	b2c7      	uxtb	r7, r0
 8014468:	f000 808c 	beq.w	8014584 <GUI__ConvertColor2Index+0x17c>
 801446c:	6860      	ldr	r0, [r4, #4]
 801446e:	47b0      	blx	r6
 8014470:	2d02      	cmp	r5, #2
 8014472:	ea47 1080 	orr.w	r0, r7, r0, lsl #6
 8014476:	b2c7      	uxtb	r7, r0
 8014478:	d102      	bne.n	8014480 <GUI__ConvertColor2Index+0x78>
 801447a:	f104 0908 	add.w	r9, r4, #8
 801447e:	e083      	b.n	8014588 <GUI__ConvertColor2Index+0x180>
 8014480:	68a0      	ldr	r0, [r4, #8]
 8014482:	47b0      	blx	r6
 8014484:	2d03      	cmp	r5, #3
 8014486:	ea47 1040 	orr.w	r0, r7, r0, lsl #5
 801448a:	b2c7      	uxtb	r7, r0
 801448c:	d102      	bne.n	8014494 <GUI__ConvertColor2Index+0x8c>
 801448e:	f104 090c 	add.w	r9, r4, #12
 8014492:	e079      	b.n	8014588 <GUI__ConvertColor2Index+0x180>
 8014494:	68e0      	ldr	r0, [r4, #12]
 8014496:	47b0      	blx	r6
 8014498:	2d04      	cmp	r5, #4
 801449a:	ea47 1000 	orr.w	r0, r7, r0, lsl #4
 801449e:	b2c7      	uxtb	r7, r0
 80144a0:	d102      	bne.n	80144a8 <GUI__ConvertColor2Index+0xa0>
 80144a2:	f104 0910 	add.w	r9, r4, #16
 80144a6:	e06f      	b.n	8014588 <GUI__ConvertColor2Index+0x180>
 80144a8:	6920      	ldr	r0, [r4, #16]
 80144aa:	47b0      	blx	r6
 80144ac:	2d05      	cmp	r5, #5
 80144ae:	ea47 00c0 	orr.w	r0, r7, r0, lsl #3
 80144b2:	b2c7      	uxtb	r7, r0
 80144b4:	d102      	bne.n	80144bc <GUI__ConvertColor2Index+0xb4>
 80144b6:	f104 0914 	add.w	r9, r4, #20
 80144ba:	e065      	b.n	8014588 <GUI__ConvertColor2Index+0x180>
 80144bc:	6960      	ldr	r0, [r4, #20]
 80144be:	47b0      	blx	r6
 80144c0:	2d06      	cmp	r5, #6
 80144c2:	ea47 0080 	orr.w	r0, r7, r0, lsl #2
 80144c6:	b2c7      	uxtb	r7, r0
 80144c8:	d102      	bne.n	80144d0 <GUI__ConvertColor2Index+0xc8>
 80144ca:	f104 0918 	add.w	r9, r4, #24
 80144ce:	e05b      	b.n	8014588 <GUI__ConvertColor2Index+0x180>
 80144d0:	69a0      	ldr	r0, [r4, #24]
 80144d2:	47b0      	blx	r6
 80144d4:	2d07      	cmp	r5, #7
 80144d6:	ea47 0040 	orr.w	r0, r7, r0, lsl #1
 80144da:	b2c7      	uxtb	r7, r0
 80144dc:	d1b1      	bne.n	8014442 <GUI__ConvertColor2Index+0x3a>
 80144de:	f104 091c 	add.w	r9, r4, #28
 80144e2:	e051      	b.n	8014588 <GUI__ConvertColor2Index+0x180>
 80144e4:	68e0      	ldr	r0, [r4, #12]
 80144e6:	47b0      	blx	r6
 80144e8:	4338      	orrs	r0, r7
 80144ea:	f104 0910 	add.w	r9, r4, #16
 80144ee:	b2c7      	uxtb	r7, r0
 80144f0:	3d04      	subs	r5, #4
 80144f2:	f808 7b01 	strb.w	r7, [r8], #1
 80144f6:	2d00      	cmp	r5, #0
 80144f8:	d041      	beq.n	801457e <GUI__ConvertColor2Index+0x176>
 80144fa:	464c      	mov	r4, r9
 80144fc:	6820      	ldr	r0, [r4, #0]
 80144fe:	47b0      	blx	r6
 8014500:	2d01      	cmp	r5, #1
 8014502:	ea4f 1080 	mov.w	r0, r0, lsl #6
 8014506:	b2c7      	uxtb	r7, r0
 8014508:	d040      	beq.n	801458c <GUI__ConvertColor2Index+0x184>
 801450a:	6860      	ldr	r0, [r4, #4]
 801450c:	47b0      	blx	r6
 801450e:	2d02      	cmp	r5, #2
 8014510:	ea47 1000 	orr.w	r0, r7, r0, lsl #4
 8014514:	b2c7      	uxtb	r7, r0
 8014516:	d102      	bne.n	801451e <GUI__ConvertColor2Index+0x116>
 8014518:	f104 0908 	add.w	r9, r4, #8
 801451c:	e038      	b.n	8014590 <GUI__ConvertColor2Index+0x188>
 801451e:	68a0      	ldr	r0, [r4, #8]
 8014520:	47b0      	blx	r6
 8014522:	2d03      	cmp	r5, #3
 8014524:	ea47 0080 	orr.w	r0, r7, r0, lsl #2
 8014528:	b2c7      	uxtb	r7, r0
 801452a:	d1db      	bne.n	80144e4 <GUI__ConvertColor2Index+0xdc>
 801452c:	f104 090c 	add.w	r9, r4, #12
 8014530:	e02e      	b.n	8014590 <GUI__ConvertColor2Index+0x188>
 8014532:	6860      	ldr	r0, [r4, #4]
 8014534:	47b0      	blx	r6
 8014536:	4338      	orrs	r0, r7
 8014538:	f104 0908 	add.w	r9, r4, #8
 801453c:	b2c7      	uxtb	r7, r0
 801453e:	3d02      	subs	r5, #2
 8014540:	f808 7b01 	strb.w	r7, [r8], #1
 8014544:	b1dd      	cbz	r5, 801457e <GUI__ConvertColor2Index+0x176>
 8014546:	464c      	mov	r4, r9
 8014548:	6820      	ldr	r0, [r4, #0]
 801454a:	47b0      	blx	r6
 801454c:	2d01      	cmp	r5, #1
 801454e:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8014552:	b2c7      	uxtb	r7, r0
 8014554:	d1ed      	bne.n	8014532 <GUI__ConvertColor2Index+0x12a>
 8014556:	f104 0904 	add.w	r9, r4, #4
 801455a:	2500      	movs	r5, #0
 801455c:	e7f0      	b.n	8014540 <GUI__ConvertColor2Index+0x138>
 801455e:	691f      	ldr	r7, [r3, #16]
 8014560:	b12f      	cbz	r7, 801456e <GUI__ConvertColor2Index+0x166>
 8014562:	4620      	mov	r0, r4
 8014564:	4641      	mov	r1, r8
 8014566:	462a      	mov	r2, r5
 8014568:	2301      	movs	r3, #1
 801456a:	47b8      	blx	r7
 801456c:	e007      	b.n	801457e <GUI__ConvertColor2Index+0x176>
 801456e:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
 8014572:	47b0      	blx	r6
 8014574:	f808 0007 	strb.w	r0, [r8, r7]
 8014578:	3701      	adds	r7, #1
 801457a:	42bd      	cmp	r5, r7
 801457c:	d1f7      	bne.n	801456e <GUI__ConvertColor2Index+0x166>
 801457e:	2001      	movs	r0, #1
 8014580:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014584:	f104 0904 	add.w	r9, r4, #4
 8014588:	2500      	movs	r5, #0
 801458a:	e761      	b.n	8014450 <GUI__ConvertColor2Index+0x48>
 801458c:	f104 0904 	add.w	r9, r4, #4
 8014590:	2500      	movs	r5, #0
 8014592:	e7ae      	b.n	80144f2 <GUI__ConvertColor2Index+0xea>
 8014594:	691f      	ldr	r7, [r3, #16]
 8014596:	b11f      	cbz	r7, 80145a0 <GUI__ConvertColor2Index+0x198>
 8014598:	4641      	mov	r1, r8
 801459a:	462a      	mov	r2, r5
 801459c:	2302      	movs	r3, #2
 801459e:	e7e4      	b.n	801456a <GUI__ConvertColor2Index+0x162>
 80145a0:	f854 0b04 	ldr.w	r0, [r4], #4
 80145a4:	47b0      	blx	r6
 80145a6:	3d01      	subs	r5, #1
 80145a8:	f828 0b02 	strh.w	r0, [r8], #2
 80145ac:	d1f8      	bne.n	80145a0 <GUI__ConvertColor2Index+0x198>
 80145ae:	e7e6      	b.n	801457e <GUI__ConvertColor2Index+0x176>

080145b0 <GUI__CompactPixelIndicesEx>:
 80145b0:	b513      	push	{r0, r1, r4, lr}
 80145b2:	2400      	movs	r4, #0
 80145b4:	9400      	str	r4, [sp, #0]
 80145b6:	f7ff ff27 	bl	8014408 <GUI__ConvertColor2Index>
 80145ba:	b002      	add	sp, #8
 80145bc:	bd10      	pop	{r4, pc}

080145be <_GetCharCode>:
 80145be:	7800      	ldrb	r0, [r0, #0]
 80145c0:	4770      	bx	lr

080145c2 <_GetCharSize>:
 80145c2:	2001      	movs	r0, #1
 80145c4:	4770      	bx	lr

080145c6 <_CalcSizeOfChar>:
 80145c6:	2001      	movs	r0, #1
 80145c8:	4770      	bx	lr

080145ca <_Encode>:
 80145ca:	7001      	strb	r1, [r0, #0]
 80145cc:	2001      	movs	r0, #1
 80145ce:	4770      	bx	lr

080145d0 <GUI_TOUCH_GetLayer>:
 80145d0:	4b01      	ldr	r3, [pc, #4]	; (80145d8 <GUI_TOUCH_GetLayer+0x8>)
 80145d2:	7a58      	ldrb	r0, [r3, #9]
 80145d4:	4770      	bx	lr
 80145d6:	bf00      	nop
 80145d8:	200196d4 	.word	0x200196d4

080145dc <GUI_SetTextAlign>:
 80145dc:	4b03      	ldr	r3, [pc, #12]	; (80145ec <GUI_SetTextAlign+0x10>)
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 80145e4:	8598      	strh	r0, [r3, #44]	; 0x2c
 80145e6:	4610      	mov	r0, r2
 80145e8:	4770      	bx	lr
 80145ea:	bf00      	nop
 80145ec:	20000238 	.word	0x20000238

080145f0 <GUI_SetOrg>:
 80145f0:	460a      	mov	r2, r1
 80145f2:	4908      	ldr	r1, [pc, #32]	; (8014614 <GUI_SetOrg+0x24>)
 80145f4:	b510      	push	{r4, lr}
 80145f6:	8008      	strh	r0, [r1, #0]
 80145f8:	4907      	ldr	r1, [pc, #28]	; (8014618 <GUI_SetOrg+0x28>)
 80145fa:	800a      	strh	r2, [r1, #0]
 80145fc:	4907      	ldr	r1, [pc, #28]	; (801461c <GUI_SetOrg+0x2c>)
 80145fe:	6809      	ldr	r1, [r1, #0]
 8014600:	4603      	mov	r3, r0
 8014602:	7c48      	ldrb	r0, [r1, #17]
 8014604:	4906      	ldr	r1, [pc, #24]	; (8014620 <GUI_SetOrg+0x30>)
 8014606:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 801460a:	68c1      	ldr	r1, [r0, #12]
 801460c:	6a0c      	ldr	r4, [r1, #32]
 801460e:	4619      	mov	r1, r3
 8014610:	47a0      	blx	r4
 8014612:	bd10      	pop	{r4, pc}
 8014614:	2001b2a8 	.word	0x2001b2a8
 8014618:	2001b29c 	.word	0x2001b29c
 801461c:	20000238 	.word	0x20000238
 8014620:	2001b2c0 	.word	0x2001b2c0

08014624 <GUI_SetLineStyle>:
 8014624:	4b02      	ldr	r3, [pc, #8]	; (8014630 <GUI_SetLineStyle+0xc>)
 8014626:	681b      	ldr	r3, [r3, #0]
 8014628:	7e9a      	ldrb	r2, [r3, #26]
 801462a:	7698      	strb	r0, [r3, #26]
 801462c:	4610      	mov	r0, r2
 801462e:	4770      	bx	lr
 8014630:	20000238 	.word	0x20000238

08014634 <GUI_GetBkColor>:
 8014634:	b508      	push	{r3, lr}
 8014636:	f000 fb43 	bl	8014cc0 <LCD_GetBkColorIndex>
 801463a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801463e:	f7f9 bc57 	b.w	800def0 <LCD_Index2Color>

08014642 <GUI_GetColor>:
 8014642:	b508      	push	{r3, lr}
 8014644:	f000 fb44 	bl	8014cd0 <LCD_GetColorIndex>
 8014648:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801464c:	f7f9 bc50 	b.w	800def0 <LCD_Index2Color>

08014650 <GUI_GetClientRect>:
 8014650:	b108      	cbz	r0, 8014656 <GUI_GetClientRect+0x6>
 8014652:	f7f5 bc45 	b.w	8009ee0 <WM_GetClientRect>
 8014656:	4770      	bx	lr

08014658 <_DrawGradient>:
 8014658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801465c:	b091      	sub	sp, #68	; 0x44
 801465e:	4605      	mov	r5, r0
 8014660:	4689      	mov	r9, r1
 8014662:	981c      	ldr	r0, [sp, #112]	; 0x70
 8014664:	991d      	ldr	r1, [sp, #116]	; 0x74
 8014666:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
 801466a:	9002      	str	r0, [sp, #8]
 801466c:	4614      	mov	r4, r2
 801466e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014670:	9200      	str	r2, [sp, #0]
 8014672:	461e      	mov	r6, r3
 8014674:	9101      	str	r1, [sp, #4]
 8014676:	f7ff ffe4 	bl	8014642 <GUI_GetColor>
 801467a:	9a00      	ldr	r2, [sp, #0]
 801467c:	900b      	str	r0, [sp, #44]	; 0x2c
 801467e:	4542      	cmp	r2, r8
 8014680:	d109      	bne.n	8014696 <_DrawGradient+0x3e>
 8014682:	4610      	mov	r0, r2
 8014684:	f7f9 fc84 	bl	800df90 <LCD_SetColor>
 8014688:	9a01      	ldr	r2, [sp, #4]
 801468a:	b112      	cbz	r2, 8014692 <_DrawGradient+0x3a>
 801468c:	4628      	mov	r0, r5
 801468e:	4649      	mov	r1, r9
 8014690:	e0b5      	b.n	80147fe <_DrawGradient+0x1a6>
 8014692:	4648      	mov	r0, r9
 8014694:	e0b9      	b.n	801480a <_DrawGradient+0x1b2>
 8014696:	fa5f fc82 	uxtb.w	ip, r2
 801469a:	f8cd c018 	str.w	ip, [sp, #24]
 801469e:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 80146a2:	f8cd c01c 	str.w	ip, [sp, #28]
 80146a6:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80146aa:	f8cd c020 	str.w	ip, [sp, #32]
 80146ae:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 80146b2:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 80146b6:	f8dd c018 	ldr.w	ip, [sp, #24]
 80146ba:	fa5f f388 	uxtb.w	r3, r8
 80146be:	ebcc 0303 	rsb	r3, ip, r3
 80146c2:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80146c6:	930d      	str	r3, [sp, #52]	; 0x34
 80146c8:	f3c8 2307 	ubfx	r3, r8, #8, #8
 80146cc:	ebcc 0303 	rsb	r3, ip, r3
 80146d0:	f8dd c020 	ldr.w	ip, [sp, #32]
 80146d4:	930c      	str	r3, [sp, #48]	; 0x30
 80146d6:	f3c8 4307 	ubfx	r3, r8, #16, #8
 80146da:	ebcc 0303 	rsb	r3, ip, r3
 80146de:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 80146e2:	930e      	str	r3, [sp, #56]	; 0x38
 80146e4:	ebcc 6818 	rsb	r8, ip, r8, lsr #24
 80146e8:	ebb6 0709 	subs.w	r7, r6, r9
 80146ec:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 80146f0:	f04f 0800 	mov.w	r8, #0
 80146f4:	bf08      	it	eq
 80146f6:	2701      	moveq	r7, #1
 80146f8:	f109 33ff 	add.w	r3, r9, #4294967295
 80146fc:	f8cd 8010 	str.w	r8, [sp, #16]
 8014700:	f8cd 800c 	str.w	r8, [sp, #12]
 8014704:	f8cd 8014 	str.w	r8, [sp, #20]
 8014708:	f04f 0a01 	mov.w	sl, #1
 801470c:	f103 0b01 	add.w	fp, r3, #1
 8014710:	45b3      	cmp	fp, r6
 8014712:	dc68      	bgt.n	80147e6 <_DrawGradient+0x18e>
 8014714:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8014718:	fb98 f1f7 	sdiv	r1, r8, r7
 801471c:	4461      	add	r1, ip
 801471e:	f8dd c010 	ldr.w	ip, [sp, #16]
 8014722:	fb9c f0f7 	sdiv	r0, ip, r7
 8014726:	f8dd c020 	ldr.w	ip, [sp, #32]
 801472a:	4460      	add	r0, ip
 801472c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8014730:	fb9c fef7 	sdiv	lr, ip, r7
 8014734:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8014738:	b2c0      	uxtb	r0, r0
 801473a:	44e6      	add	lr, ip
 801473c:	f8dd c014 	ldr.w	ip, [sp, #20]
 8014740:	0400      	lsls	r0, r0, #16
 8014742:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 8014746:	fb9c f1f7 	sdiv	r1, ip, r7
 801474a:	f8dd c018 	ldr.w	ip, [sp, #24]
 801474e:	4461      	add	r1, ip
 8014750:	fa5f fe8e 	uxtb.w	lr, lr
 8014754:	b2c9      	uxtb	r1, r1
 8014756:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
 801475a:	4301      	orrs	r1, r0
 801475c:	45cb      	cmp	fp, r9
 801475e:	910a      	str	r1, [sp, #40]	; 0x28
 8014760:	dd26      	ble.n	80147b0 <_DrawGradient+0x158>
 8014762:	4291      	cmp	r1, r2
 8014764:	d102      	bne.n	801476c <_DrawGradient+0x114>
 8014766:	f10a 0a01 	add.w	sl, sl, #1
 801476a:	e021      	b.n	80147b0 <_DrawGradient+0x158>
 801476c:	4610      	mov	r0, r2
 801476e:	9300      	str	r3, [sp, #0]
 8014770:	f7f9 fc0e 	bl	800df90 <LCD_SetColor>
 8014774:	f1ba 0f01 	cmp.w	sl, #1
 8014778:	9b00      	ldr	r3, [sp, #0]
 801477a:	d00f      	beq.n	801479c <_DrawGradient+0x144>
 801477c:	9801      	ldr	r0, [sp, #4]
 801477e:	ebca 010b 	rsb	r1, sl, fp
 8014782:	b110      	cbz	r0, 801478a <_DrawGradient+0x132>
 8014784:	4628      	mov	r0, r5
 8014786:	4622      	mov	r2, r4
 8014788:	e003      	b.n	8014792 <_DrawGradient+0x13a>
 801478a:	4608      	mov	r0, r1
 801478c:	461a      	mov	r2, r3
 801478e:	4629      	mov	r1, r5
 8014790:	4623      	mov	r3, r4
 8014792:	f7f9 f92f 	bl	800d9f4 <LCD_FillRect>
 8014796:	f04f 0a01 	mov.w	sl, #1
 801479a:	e009      	b.n	80147b0 <_DrawGradient+0x158>
 801479c:	9901      	ldr	r1, [sp, #4]
 801479e:	b111      	cbz	r1, 80147a6 <_DrawGradient+0x14e>
 80147a0:	4628      	mov	r0, r5
 80147a2:	4619      	mov	r1, r3
 80147a4:	e001      	b.n	80147aa <_DrawGradient+0x152>
 80147a6:	4618      	mov	r0, r3
 80147a8:	4629      	mov	r1, r5
 80147aa:	4622      	mov	r2, r4
 80147ac:	9b02      	ldr	r3, [sp, #8]
 80147ae:	4798      	blx	r3
 80147b0:	f8dd c014 	ldr.w	ip, [sp, #20]
 80147b4:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 80147b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80147ba:	44f4      	add	ip, lr
 80147bc:	f8cd c014 	str.w	ip, [sp, #20]
 80147c0:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 80147c4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80147c8:	44f4      	add	ip, lr
 80147ca:	f8cd c00c 	str.w	ip, [sp, #12]
 80147ce:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 80147d2:	f8dd c010 	ldr.w	ip, [sp, #16]
 80147d6:	44f4      	add	ip, lr
 80147d8:	f8cd c010 	str.w	ip, [sp, #16]
 80147dc:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 80147e0:	465b      	mov	r3, fp
 80147e2:	44e0      	add	r8, ip
 80147e4:	e792      	b.n	801470c <_DrawGradient+0xb4>
 80147e6:	4610      	mov	r0, r2
 80147e8:	f7f9 fbd2 	bl	800df90 <LCD_SetColor>
 80147ec:	f1ba 0f01 	cmp.w	sl, #1
 80147f0:	d00f      	beq.n	8014812 <_DrawGradient+0x1ba>
 80147f2:	9801      	ldr	r0, [sp, #4]
 80147f4:	ebca 0106 	rsb	r1, sl, r6
 80147f8:	b130      	cbz	r0, 8014808 <_DrawGradient+0x1b0>
 80147fa:	4628      	mov	r0, r5
 80147fc:	3101      	adds	r1, #1
 80147fe:	4622      	mov	r2, r4
 8014800:	4633      	mov	r3, r6
 8014802:	f7f9 f8f7 	bl	800d9f4 <LCD_FillRect>
 8014806:	e00e      	b.n	8014826 <_DrawGradient+0x1ce>
 8014808:	1c48      	adds	r0, r1, #1
 801480a:	4629      	mov	r1, r5
 801480c:	4632      	mov	r2, r6
 801480e:	4623      	mov	r3, r4
 8014810:	e7f7      	b.n	8014802 <_DrawGradient+0x1aa>
 8014812:	9901      	ldr	r1, [sp, #4]
 8014814:	b111      	cbz	r1, 801481c <_DrawGradient+0x1c4>
 8014816:	4628      	mov	r0, r5
 8014818:	4631      	mov	r1, r6
 801481a:	e001      	b.n	8014820 <_DrawGradient+0x1c8>
 801481c:	4630      	mov	r0, r6
 801481e:	4629      	mov	r1, r5
 8014820:	4622      	mov	r2, r4
 8014822:	9b02      	ldr	r3, [sp, #8]
 8014824:	4798      	blx	r3
 8014826:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014828:	b011      	add	sp, #68	; 0x44
 801482a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801482e:	f7f9 bbaf 	b.w	800df90 <LCD_SetColor>
	...

08014834 <GUI_DrawGradientV>:
 8014834:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014838:	4c15      	ldr	r4, [pc, #84]	; (8014890 <GUI_DrawGradientV+0x5c>)
 801483a:	6824      	ldr	r4, [r4, #0]
 801483c:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 801483e:	6d24      	ldr	r4, [r4, #80]	; 0x50
 8014840:	b087      	sub	sp, #28
 8014842:	eb00 0905 	add.w	r9, r0, r5
 8014846:	eb01 0804 	add.w	r8, r1, r4
 801484a:	4415      	add	r5, r2
 801484c:	441c      	add	r4, r3
 801484e:	a804      	add	r0, sp, #16
 8014850:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8014852:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8014854:	f8ad 9010 	strh.w	r9, [sp, #16]
 8014858:	f8ad 5014 	strh.w	r5, [sp, #20]
 801485c:	f8ad 8012 	strh.w	r8, [sp, #18]
 8014860:	f8ad 4016 	strh.w	r4, [sp, #22]
 8014864:	f7f6 fa60 	bl	800ad28 <WM__InitIVRSearch>
 8014868:	b170      	cbz	r0, 8014888 <GUI_DrawGradientV+0x54>
 801486a:	4b0a      	ldr	r3, [pc, #40]	; (8014894 <GUI_DrawGradientV+0x60>)
 801486c:	9302      	str	r3, [sp, #8]
 801486e:	2301      	movs	r3, #1
 8014870:	9303      	str	r3, [sp, #12]
 8014872:	4648      	mov	r0, r9
 8014874:	4641      	mov	r1, r8
 8014876:	462a      	mov	r2, r5
 8014878:	4623      	mov	r3, r4
 801487a:	9700      	str	r7, [sp, #0]
 801487c:	9601      	str	r6, [sp, #4]
 801487e:	f7ff feeb 	bl	8014658 <_DrawGradient>
 8014882:	f7f6 f98f 	bl	800aba4 <WM__GetNextIVR>
 8014886:	e7ef      	b.n	8014868 <GUI_DrawGradientV+0x34>
 8014888:	b007      	add	sp, #28
 801488a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801488e:	bf00      	nop
 8014890:	20000238 	.word	0x20000238
 8014894:	0800d95d 	.word	0x0800d95d

08014898 <GUI__DispStringInRect>:
 8014898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801489c:	b087      	sub	sp, #28
 801489e:	460c      	mov	r4, r1
 80148a0:	9001      	str	r0, [sp, #4]
 80148a2:	4691      	mov	r9, r2
 80148a4:	461d      	mov	r5, r3
 80148a6:	f7fb fcbd 	bl	8010224 <GUI_GetFontDistY>
 80148aa:	9f01      	ldr	r7, [sp, #4]
 80148ac:	4680      	mov	r8, r0
 80148ae:	b124      	cbz	r4, 80148ba <GUI__DispStringInRect+0x22>
 80148b0:	6820      	ldr	r0, [r4, #0]
 80148b2:	6861      	ldr	r1, [r4, #4]
 80148b4:	ab04      	add	r3, sp, #16
 80148b6:	c303      	stmia	r3!, {r0, r1}
 80148b8:	e002      	b.n	80148c0 <GUI__DispStringInRect+0x28>
 80148ba:	a804      	add	r0, sp, #16
 80148bc:	f7ff fec8 	bl	8014650 <GUI_GetClientRect>
 80148c0:	f019 0a0c 	ands.w	sl, r9, #12
 80148c4:	d002      	beq.n	80148cc <GUI__DispStringInRect+0x34>
 80148c6:	462c      	mov	r4, r5
 80148c8:	2600      	movs	r6, #0
 80148ca:	e016      	b.n	80148fa <GUI__DispStringInRect+0x62>
 80148cc:	f9bd 4012 	ldrsh.w	r4, [sp, #18]
 80148d0:	e032      	b.n	8014938 <GUI__DispStringInRect+0xa0>
 80148d2:	4621      	mov	r1, r4
 80148d4:	9801      	ldr	r0, [sp, #4]
 80148d6:	f7fb fbdb 	bl	8010090 <GUI__GetLineNumChars>
 80148da:	f8dd b004 	ldr.w	fp, [sp, #4]
 80148de:	4601      	mov	r1, r0
 80148e0:	1a24      	subs	r4, r4, r0
 80148e2:	4658      	mov	r0, fp
 80148e4:	f7f9 ff68 	bl	800e7b8 <GUI_UC__NumChars2NumBytes>
 80148e8:	eb0b 0300 	add.w	r3, fp, r0
 80148ec:	a806      	add	r0, sp, #24
 80148ee:	3601      	adds	r6, #1
 80148f0:	f840 3d14 	str.w	r3, [r0, #-20]!
 80148f4:	f000 fa07 	bl	8014d06 <GUI__HandleEOLine>
 80148f8:	b908      	cbnz	r0, 80148fe <GUI__DispStringInRect+0x66>
 80148fa:	2c00      	cmp	r4, #0
 80148fc:	d1e9      	bne.n	80148d2 <GUI__DispStringInRect+0x3a>
 80148fe:	f1ba 0f08 	cmp.w	sl, #8
 8014902:	d005      	beq.n	8014910 <GUI__DispStringInRect+0x78>
 8014904:	f1ba 0f0c 	cmp.w	sl, #12
 8014908:	d008      	beq.n	801491c <GUI__DispStringInRect+0x84>
 801490a:	f1ba 0f04 	cmp.w	sl, #4
 801490e:	d112      	bne.n	8014936 <GUI__DispStringInRect+0x9e>
 8014910:	f9bd 4016 	ldrsh.w	r4, [sp, #22]
 8014914:	fb08 4416 	mls	r4, r8, r6, r4
 8014918:	3401      	adds	r4, #1
 801491a:	e00d      	b.n	8014938 <GUI__DispStringInRect+0xa0>
 801491c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8014920:	f9bd 4016 	ldrsh.w	r4, [sp, #22]
 8014924:	1ae4      	subs	r4, r4, r3
 8014926:	3401      	adds	r4, #1
 8014928:	fb08 4416 	mls	r4, r8, r6, r4
 801492c:	2202      	movs	r2, #2
 801492e:	fb94 f4f2 	sdiv	r4, r4, r2
 8014932:	441c      	add	r4, r3
 8014934:	e000      	b.n	8014938 <GUI__DispStringInRect+0xa0>
 8014936:	2400      	movs	r4, #0
 8014938:	9701      	str	r7, [sp, #4]
 801493a:	2600      	movs	r6, #0
 801493c:	2d00      	cmp	r5, #0
 801493e:	d04b      	beq.n	80149d8 <GUI__DispStringInRect+0x140>
 8014940:	4629      	mov	r1, r5
 8014942:	9801      	ldr	r0, [sp, #4]
 8014944:	f7fb fba4 	bl	8010090 <GUI__GetLineNumChars>
 8014948:	4607      	mov	r7, r0
 801494a:	1a2d      	subs	r5, r5, r0
 801494c:	4639      	mov	r1, r7
 801494e:	9801      	ldr	r0, [sp, #4]
 8014950:	f7fb fbcc 	bl	80100ec <GUI__GetLineDistX>
 8014954:	f009 0303 	and.w	r3, r9, #3
 8014958:	2b01      	cmp	r3, #1
 801495a:	d00f      	beq.n	801497c <GUI__DispStringInRect+0xe4>
 801495c:	2b02      	cmp	r3, #2
 801495e:	d003      	beq.n	8014968 <GUI__DispStringInRect+0xd0>
 8014960:	b983      	cbnz	r3, 8014984 <GUI__DispStringInRect+0xec>
 8014962:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
 8014966:	e00d      	b.n	8014984 <GUI__DispStringInRect+0xec>
 8014968:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801496c:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 8014970:	1ab6      	subs	r6, r6, r2
 8014972:	1a36      	subs	r6, r6, r0
 8014974:	fb96 f6f3 	sdiv	r6, r6, r3
 8014978:	4416      	add	r6, r2
 801497a:	e003      	b.n	8014984 <GUI__DispStringInRect+0xec>
 801497c:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 8014980:	1a36      	subs	r6, r6, r0
 8014982:	3601      	adds	r6, #1
 8014984:	4b16      	ldr	r3, [pc, #88]	; (80149e0 <GUI__DispStringInRect+0x148>)
 8014986:	6819      	ldr	r1, [r3, #0]
 8014988:	3801      	subs	r0, #1
 801498a:	b2a3      	uxth	r3, r4
 801498c:	b2b2      	uxth	r2, r6
 801498e:	848b      	strh	r3, [r1, #36]	; 0x24
 8014990:	4430      	add	r0, r6
 8014992:	f8ad 300a 	strh.w	r3, [sp, #10]
 8014996:	f108 33ff 	add.w	r3, r8, #4294967295
 801499a:	4423      	add	r3, r4
 801499c:	844a      	strh	r2, [r1, #34]	; 0x22
 801499e:	f8ad 2008 	strh.w	r2, [sp, #8]
 80149a2:	4639      	mov	r1, r7
 80149a4:	aa02      	add	r2, sp, #8
 80149a6:	f8ad 000c 	strh.w	r0, [sp, #12]
 80149aa:	9801      	ldr	r0, [sp, #4]
 80149ac:	f8ad 300e 	strh.w	r3, [sp, #14]
 80149b0:	f7fb fbcc 	bl	801014c <GUI__DispLine>
 80149b4:	f8dd a004 	ldr.w	sl, [sp, #4]
 80149b8:	4639      	mov	r1, r7
 80149ba:	4650      	mov	r0, sl
 80149bc:	f7f9 fefc 	bl	800e7b8 <GUI_UC__NumChars2NumBytes>
 80149c0:	af06      	add	r7, sp, #24
 80149c2:	4450      	add	r0, sl
 80149c4:	f847 0d14 	str.w	r0, [r7, #-20]!
 80149c8:	f7fb fc2c 	bl	8010224 <GUI_GetFontDistY>
 80149cc:	4404      	add	r4, r0
 80149ce:	4638      	mov	r0, r7
 80149d0:	f000 f999 	bl	8014d06 <GUI__HandleEOLine>
 80149d4:	2800      	cmp	r0, #0
 80149d6:	d0b1      	beq.n	801493c <GUI__DispStringInRect+0xa4>
 80149d8:	b007      	add	sp, #28
 80149da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149de:	bf00      	nop
 80149e0:	20000238 	.word	0x20000238

080149e4 <GUI_DispStringInRectMax>:
 80149e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80149e8:	460c      	mov	r4, r1
 80149ea:	4690      	mov	r8, r2
 80149ec:	461f      	mov	r7, r3
 80149ee:	4606      	mov	r6, r0
 80149f0:	b1c0      	cbz	r0, 8014a24 <GUI_DispStringInRectMax+0x40>
 80149f2:	b169      	cbz	r1, 8014a10 <GUI_DispStringInRectMax+0x2c>
 80149f4:	4608      	mov	r0, r1
 80149f6:	f7f4 ff4f 	bl	8009898 <WM_SetUserClipRect>
 80149fa:	4605      	mov	r5, r0
 80149fc:	b148      	cbz	r0, 8014a12 <GUI_DispStringInRectMax+0x2e>
 80149fe:	4668      	mov	r0, sp
 8014a00:	4621      	mov	r1, r4
 8014a02:	462a      	mov	r2, r5
 8014a04:	f7f9 fbea 	bl	800e1dc <GUI__IntersectRects>
 8014a08:	4668      	mov	r0, sp
 8014a0a:	f7f4 ff45 	bl	8009898 <WM_SetUserClipRect>
 8014a0e:	e000      	b.n	8014a12 <GUI_DispStringInRectMax+0x2e>
 8014a10:	460d      	mov	r5, r1
 8014a12:	4630      	mov	r0, r6
 8014a14:	4621      	mov	r1, r4
 8014a16:	4642      	mov	r2, r8
 8014a18:	463b      	mov	r3, r7
 8014a1a:	f7ff ff3d 	bl	8014898 <GUI__DispStringInRect>
 8014a1e:	4628      	mov	r0, r5
 8014a20:	f7f4 ff3a 	bl	8009898 <WM_SetUserClipRect>
 8014a24:	b002      	add	sp, #8
 8014a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014a2a <GUI_DispStringInRect>:
 8014a2a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8014a2e:	f7ff bfd9 	b.w	80149e4 <GUI_DispStringInRectMax>
	...

08014a34 <GUI_CURSOR_SetPositionEx>:
 8014a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a36:	4606      	mov	r6, r0
 8014a38:	4610      	mov	r0, r2
 8014a3a:	460d      	mov	r5, r1
 8014a3c:	4614      	mov	r4, r2
 8014a3e:	f7fa fc13 	bl	800f268 <GUI_GetCursorLayer>
 8014a42:	4f15      	ldr	r7, [pc, #84]	; (8014a98 <GUI_CURSOR_SetPositionEx+0x64>)
 8014a44:	2314      	movs	r3, #20
 8014a46:	b148      	cbz	r0, 8014a5c <GUI_CURSOR_SetPositionEx+0x28>
 8014a48:	435c      	muls	r4, r3
 8014a4a:	593b      	ldr	r3, [r7, r4]
 8014a4c:	6859      	ldr	r1, [r3, #4]
 8014a4e:	689a      	ldr	r2, [r3, #8]
 8014a50:	1a71      	subs	r1, r6, r1
 8014a52:	1aaa      	subs	r2, r5, r2
 8014a54:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014a58:	f7fa bc30 	b.w	800f2bc <GUI_SetLayerPosEx>
 8014a5c:	fb03 7304 	mla	r3, r3, r4, r7
 8014a60:	f103 0208 	add.w	r2, r3, #8
 8014a64:	689b      	ldr	r3, [r3, #8]
 8014a66:	42b3      	cmp	r3, r6
 8014a68:	d102      	bne.n	8014a70 <GUI_CURSOR_SetPositionEx+0x3c>
 8014a6a:	6853      	ldr	r3, [r2, #4]
 8014a6c:	42ab      	cmp	r3, r5
 8014a6e:	d011      	beq.n	8014a94 <GUI_CURSOR_SetPositionEx+0x60>
 8014a70:	2314      	movs	r3, #20
 8014a72:	4363      	muls	r3, r4
 8014a74:	18fa      	adds	r2, r7, r3
 8014a76:	6910      	ldr	r0, [r2, #16]
 8014a78:	b138      	cbz	r0, 8014a8a <GUI_CURSOR_SetPositionEx+0x56>
 8014a7a:	4a07      	ldr	r2, [pc, #28]	; (8014a98 <GUI_CURSOR_SetPositionEx+0x64>)
 8014a7c:	58d3      	ldr	r3, [r2, r3]
 8014a7e:	6859      	ldr	r1, [r3, #4]
 8014a80:	689a      	ldr	r2, [r3, #8]
 8014a82:	1a71      	subs	r1, r6, r1
 8014a84:	1aaa      	subs	r2, r5, r2
 8014a86:	f000 fa9f 	bl	8014fc8 <GUI_SPRITE_SetPosition>
 8014a8a:	2314      	movs	r3, #20
 8014a8c:	fb03 7404 	mla	r4, r3, r4, r7
 8014a90:	60a6      	str	r6, [r4, #8]
 8014a92:	60e5      	str	r5, [r4, #12]
 8014a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a96:	bf00      	nop
 8014a98:	200196e0 	.word	0x200196e0

08014a9c <GUI_ClearRectEx>:
 8014a9c:	4603      	mov	r3, r0
 8014a9e:	f9b0 0000 	ldrsh.w	r0, [r0]
 8014aa2:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8014aa6:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8014aaa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8014aae:	f7fb b873 	b.w	800fb98 <GUI_ClearRect>
	...

08014ab4 <GUI_DrawRect>:
 8014ab4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014ab8:	4c1e      	ldr	r4, [pc, #120]	; (8014b34 <GUI_DrawRect+0x80>)
 8014aba:	f8d4 e000 	ldr.w	lr, [r4]
 8014abe:	f8de 404c 	ldr.w	r4, [lr, #76]	; 0x4c
 8014ac2:	f8de 6050 	ldr.w	r6, [lr, #80]	; 0x50
 8014ac6:	1905      	adds	r5, r0, r4
 8014ac8:	4414      	add	r4, r2
 8014aca:	f89e 2018 	ldrb.w	r2, [lr, #24]
 8014ace:	3a01      	subs	r2, #1
 8014ad0:	b292      	uxth	r2, r2
 8014ad2:	198f      	adds	r7, r1, r6
 8014ad4:	441e      	add	r6, r3
 8014ad6:	1aab      	subs	r3, r5, r2
 8014ad8:	f8ad 3000 	strh.w	r3, [sp]
 8014adc:	1913      	adds	r3, r2, r4
 8014ade:	f8ad 3004 	strh.w	r3, [sp, #4]
 8014ae2:	4668      	mov	r0, sp
 8014ae4:	1abb      	subs	r3, r7, r2
 8014ae6:	4432      	add	r2, r6
 8014ae8:	f8ad 3002 	strh.w	r3, [sp, #2]
 8014aec:	f8ad 2006 	strh.w	r2, [sp, #6]
 8014af0:	f7f6 f91a 	bl	800ad28 <WM__InitIVRSearch>
 8014af4:	b1d0      	cbz	r0, 8014b2c <GUI_DrawRect+0x78>
 8014af6:	4628      	mov	r0, r5
 8014af8:	4639      	mov	r1, r7
 8014afa:	4622      	mov	r2, r4
 8014afc:	f7f8 ff2e 	bl	800d95c <LCD_DrawHLine>
 8014b00:	f107 0901 	add.w	r9, r7, #1
 8014b04:	4628      	mov	r0, r5
 8014b06:	4631      	mov	r1, r6
 8014b08:	4622      	mov	r2, r4
 8014b0a:	f106 38ff 	add.w	r8, r6, #4294967295
 8014b0e:	f7f8 ff25 	bl	800d95c <LCD_DrawHLine>
 8014b12:	4628      	mov	r0, r5
 8014b14:	4649      	mov	r1, r9
 8014b16:	4642      	mov	r2, r8
 8014b18:	f7f8 ff46 	bl	800d9a8 <LCD_DrawVLine>
 8014b1c:	4620      	mov	r0, r4
 8014b1e:	4649      	mov	r1, r9
 8014b20:	4642      	mov	r2, r8
 8014b22:	f7f8 ff41 	bl	800d9a8 <LCD_DrawVLine>
 8014b26:	f7f6 f83d 	bl	800aba4 <WM__GetNextIVR>
 8014b2a:	e7e3      	b.n	8014af4 <GUI_DrawRect+0x40>
 8014b2c:	b003      	add	sp, #12
 8014b2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014b32:	bf00      	nop
 8014b34:	20000238 	.word	0x20000238

08014b38 <_GetIndexMask_0>:
 8014b38:	b508      	push	{r3, lr}
 8014b3a:	f7f8 fe11 	bl	800d760 <LCD_GetNumColors>
 8014b3e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8014b42:	d010      	beq.n	8014b66 <_GetIndexMask_0+0x2e>
 8014b44:	287f      	cmp	r0, #127	; 0x7f
 8014b46:	d810      	bhi.n	8014b6a <_GetIndexMask_0+0x32>
 8014b48:	283f      	cmp	r0, #63	; 0x3f
 8014b4a:	d810      	bhi.n	8014b6e <_GetIndexMask_0+0x36>
 8014b4c:	281f      	cmp	r0, #31
 8014b4e:	d810      	bhi.n	8014b72 <_GetIndexMask_0+0x3a>
 8014b50:	280f      	cmp	r0, #15
 8014b52:	d810      	bhi.n	8014b76 <_GetIndexMask_0+0x3e>
 8014b54:	2807      	cmp	r0, #7
 8014b56:	d810      	bhi.n	8014b7a <_GetIndexMask_0+0x42>
 8014b58:	2803      	cmp	r0, #3
 8014b5a:	d810      	bhi.n	8014b7e <_GetIndexMask_0+0x46>
 8014b5c:	2801      	cmp	r0, #1
 8014b5e:	bf94      	ite	ls
 8014b60:	2000      	movls	r0, #0
 8014b62:	2001      	movhi	r0, #1
 8014b64:	e00c      	b.n	8014b80 <_GetIndexMask_0+0x48>
 8014b66:	2008      	movs	r0, #8
 8014b68:	e00a      	b.n	8014b80 <_GetIndexMask_0+0x48>
 8014b6a:	2007      	movs	r0, #7
 8014b6c:	e008      	b.n	8014b80 <_GetIndexMask_0+0x48>
 8014b6e:	2006      	movs	r0, #6
 8014b70:	e006      	b.n	8014b80 <_GetIndexMask_0+0x48>
 8014b72:	2005      	movs	r0, #5
 8014b74:	e004      	b.n	8014b80 <_GetIndexMask_0+0x48>
 8014b76:	2004      	movs	r0, #4
 8014b78:	e002      	b.n	8014b80 <_GetIndexMask_0+0x48>
 8014b7a:	2003      	movs	r0, #3
 8014b7c:	e000      	b.n	8014b80 <_GetIndexMask_0+0x48>
 8014b7e:	2002      	movs	r0, #2
 8014b80:	2301      	movs	r3, #1
 8014b82:	fa03 f000 	lsl.w	r0, r3, r0
 8014b86:	3801      	subs	r0, #1
 8014b88:	bd08      	pop	{r3, pc}

08014b8a <_Index2Color_0>:
 8014b8a:	b538      	push	{r3, r4, r5, lr}
 8014b8c:	4604      	mov	r4, r0
 8014b8e:	f7f8 fde7 	bl	800d760 <LCD_GetNumColors>
 8014b92:	4605      	mov	r5, r0
 8014b94:	f7f8 fe02 	bl	800d79c <LCD_GetPalette>
 8014b98:	42ac      	cmp	r4, r5
 8014b9a:	d203      	bcs.n	8014ba4 <_Index2Color_0+0x1a>
 8014b9c:	b118      	cbz	r0, 8014ba6 <_Index2Color_0+0x1c>
 8014b9e:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8014ba2:	bd38      	pop	{r3, r4, r5, pc}
 8014ba4:	2000      	movs	r0, #0
 8014ba6:	bd38      	pop	{r3, r4, r5, pc}

08014ba8 <_Color2Index_0>:
 8014ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014bac:	4681      	mov	r9, r0
 8014bae:	f7f8 fdd7 	bl	800d760 <LCD_GetNumColors>
 8014bb2:	4680      	mov	r8, r0
 8014bb4:	f7f8 fdf2 	bl	800d79c <LCD_GetPalette>
 8014bb8:	4606      	mov	r6, r0
 8014bba:	b1d8      	cbz	r0, 8014bf4 <_Color2Index_0+0x4c>
 8014bbc:	2300      	movs	r3, #0
 8014bbe:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 8014bc2:	4591      	cmp	r9, r2
 8014bc4:	d01a      	beq.n	8014bfc <_Color2Index_0+0x54>
 8014bc6:	3301      	adds	r3, #1
 8014bc8:	4543      	cmp	r3, r8
 8014bca:	dbf8      	blt.n	8014bbe <_Color2Index_0+0x16>
 8014bcc:	2500      	movs	r5, #0
 8014bce:	f06f 477f 	mvn.w	r7, #4278190080	; 0xff000000
 8014bd2:	462c      	mov	r4, r5
 8014bd4:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 8014bd8:	4648      	mov	r0, r9
 8014bda:	f000 fcc8 	bl	801556e <GUI_CalcColorDist>
 8014bde:	42b8      	cmp	r0, r7
 8014be0:	bf38      	it	cc
 8014be2:	4625      	movcc	r5, r4
 8014be4:	f104 0401 	add.w	r4, r4, #1
 8014be8:	bf28      	it	cs
 8014bea:	4638      	movcs	r0, r7
 8014bec:	4544      	cmp	r4, r8
 8014bee:	da02      	bge.n	8014bf6 <_Color2Index_0+0x4e>
 8014bf0:	4607      	mov	r7, r0
 8014bf2:	e7ef      	b.n	8014bd4 <_Color2Index_0+0x2c>
 8014bf4:	4605      	mov	r5, r0
 8014bf6:	4628      	mov	r0, r5
 8014bf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014bfc:	4618      	mov	r0, r3
 8014bfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08014c02 <GUI_DRAW__Draw>:
 8014c02:	e92d 43e3 	stmdb	sp!, {r0, r1, r5, r6, r7, r8, r9, lr}
 8014c06:	4688      	mov	r8, r1
 8014c08:	4617      	mov	r7, r2
 8014c0a:	461e      	mov	r6, r3
 8014c0c:	4681      	mov	r9, r0
 8014c0e:	b170      	cbz	r0, 8014c2e <GUI_DRAW__Draw+0x2c>
 8014c10:	f7fc fae0 	bl	80111d4 <GUI_ALLOC_LockH>
 8014c14:	4605      	mov	r5, r0
 8014c16:	a802      	add	r0, sp, #8
 8014c18:	682b      	ldr	r3, [r5, #0]
 8014c1a:	f840 5d04 	str.w	r5, [r0, #-4]!
 8014c1e:	681d      	ldr	r5, [r3, #0]
 8014c20:	f7fc fae6 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8014c24:	4648      	mov	r0, r9
 8014c26:	4641      	mov	r1, r8
 8014c28:	463a      	mov	r2, r7
 8014c2a:	4633      	mov	r3, r6
 8014c2c:	47a8      	blx	r5
 8014c2e:	b002      	add	sp, #8
 8014c30:	e8bd 83e0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, pc}

08014c34 <WM__SendMessageIfEnabled>:
 8014c34:	b538      	push	{r3, r4, r5, lr}
 8014c36:	4604      	mov	r4, r0
 8014c38:	460d      	mov	r5, r1
 8014c3a:	f7f4 fd97 	bl	800976c <WM__IsEnabled>
 8014c3e:	b128      	cbz	r0, 8014c4c <WM__SendMessageIfEnabled+0x18>
 8014c40:	4620      	mov	r0, r4
 8014c42:	4629      	mov	r1, r5
 8014c44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014c48:	f7fd b848 	b.w	8011cdc <WM__SendMessage>
 8014c4c:	bd38      	pop	{r3, r4, r5, pc}

08014c4e <WM__IsChild>:
 8014c4e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014c50:	460d      	mov	r5, r1
 8014c52:	4604      	mov	r4, r0
 8014c54:	b160      	cbz	r0, 8014c70 <WM__IsChild+0x22>
 8014c56:	f7fc fabd 	bl	80111d4 <GUI_ALLOC_LockH>
 8014c5a:	9001      	str	r0, [sp, #4]
 8014c5c:	b120      	cbz	r0, 8014c68 <WM__IsChild+0x1a>
 8014c5e:	6984      	ldr	r4, [r0, #24]
 8014c60:	1b63      	subs	r3, r4, r5
 8014c62:	425c      	negs	r4, r3
 8014c64:	415c      	adcs	r4, r3
 8014c66:	e000      	b.n	8014c6a <WM__IsChild+0x1c>
 8014c68:	4604      	mov	r4, r0
 8014c6a:	a801      	add	r0, sp, #4
 8014c6c:	f7fc fac0 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8014c70:	4620      	mov	r0, r4
 8014c72:	b003      	add	sp, #12
 8014c74:	bd30      	pop	{r4, r5, pc}

08014c76 <WM__ForEachDesc>:
 8014c76:	b570      	push	{r4, r5, r6, lr}
 8014c78:	460d      	mov	r5, r1
 8014c7a:	4616      	mov	r6, r2
 8014c7c:	f7fc faa0 	bl	80111c0 <GUI_ALLOC_h2p>
 8014c80:	69c4      	ldr	r4, [r0, #28]
 8014c82:	b164      	cbz	r4, 8014c9e <WM__ForEachDesc+0x28>
 8014c84:	4620      	mov	r0, r4
 8014c86:	4631      	mov	r1, r6
 8014c88:	47a8      	blx	r5
 8014c8a:	4620      	mov	r0, r4
 8014c8c:	4629      	mov	r1, r5
 8014c8e:	4632      	mov	r2, r6
 8014c90:	f7ff fff1 	bl	8014c76 <WM__ForEachDesc>
 8014c94:	4620      	mov	r0, r4
 8014c96:	f7fc fa93 	bl	80111c0 <GUI_ALLOC_h2p>
 8014c9a:	6a04      	ldr	r4, [r0, #32]
 8014c9c:	e7f1      	b.n	8014c82 <WM__ForEachDesc+0xc>
 8014c9e:	bd70      	pop	{r4, r5, r6, pc}

08014ca0 <LCD_GetNumLayers>:
 8014ca0:	b510      	push	{r4, lr}
 8014ca2:	2000      	movs	r0, #0
 8014ca4:	f7fa fe80 	bl	800f9a8 <GUI_DEVICE__GetpDriver>
 8014ca8:	1c04      	adds	r4, r0, #0
 8014caa:	f04f 0001 	mov.w	r0, #1
 8014cae:	bf18      	it	ne
 8014cb0:	2401      	movne	r4, #1
 8014cb2:	f7fa fe79 	bl	800f9a8 <GUI_DEVICE__GetpDriver>
 8014cb6:	b100      	cbz	r0, 8014cba <LCD_GetNumLayers+0x1a>
 8014cb8:	3401      	adds	r4, #1
 8014cba:	4620      	mov	r0, r4
 8014cbc:	bd10      	pop	{r4, pc}
	...

08014cc0 <LCD_GetBkColorIndex>:
 8014cc0:	4b02      	ldr	r3, [pc, #8]	; (8014ccc <LCD_GetBkColorIndex+0xc>)
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014cc6:	6818      	ldr	r0, [r3, #0]
 8014cc8:	4770      	bx	lr
 8014cca:	bf00      	nop
 8014ccc:	20000238 	.word	0x20000238

08014cd0 <LCD_GetColorIndex>:
 8014cd0:	4b02      	ldr	r3, [pc, #8]	; (8014cdc <LCD_GetColorIndex+0xc>)
 8014cd2:	681b      	ldr	r3, [r3, #0]
 8014cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014cd6:	6818      	ldr	r0, [r3, #0]
 8014cd8:	4770      	bx	lr
 8014cda:	bf00      	nop
 8014cdc:	20000238 	.word	0x20000238

08014ce0 <GUI__sqrt32>:
 8014ce0:	b510      	push	{r4, lr}
 8014ce2:	2110      	movs	r1, #16
 8014ce4:	2300      	movs	r3, #0
 8014ce6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8014cea:	189c      	adds	r4, r3, r2
 8014cec:	4284      	cmp	r4, r0
 8014cee:	bf9c      	itt	ls
 8014cf0:	18a3      	addls	r3, r4, r2
 8014cf2:	ebc4 0000 	rsbls	r0, r4, r0
 8014cf6:	3901      	subs	r1, #1
 8014cf8:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8014cfc:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8014d00:	d1f3      	bne.n	8014cea <GUI__sqrt32+0xa>
 8014d02:	4618      	mov	r0, r3
 8014d04:	bd10      	pop	{r4, pc}

08014d06 <GUI__HandleEOLine>:
 8014d06:	6803      	ldr	r3, [r0, #0]
 8014d08:	781a      	ldrb	r2, [r3, #0]
 8014d0a:	b122      	cbz	r2, 8014d16 <GUI__HandleEOLine+0x10>
 8014d0c:	2a0a      	cmp	r2, #10
 8014d0e:	d104      	bne.n	8014d1a <GUI__HandleEOLine+0x14>
 8014d10:	3301      	adds	r3, #1
 8014d12:	6003      	str	r3, [r0, #0]
 8014d14:	e001      	b.n	8014d1a <GUI__HandleEOLine+0x14>
 8014d16:	2001      	movs	r0, #1
 8014d18:	4770      	bx	lr
 8014d1a:	2000      	movs	r0, #0
 8014d1c:	4770      	bx	lr

08014d1e <_CreateBuffer>:
 8014d1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d20:	6943      	ldr	r3, [r0, #20]
 8014d22:	4605      	mov	r5, r0
 8014d24:	8818      	ldrh	r0, [r3, #0]
 8014d26:	300d      	adds	r0, #13
 8014d28:	0080      	lsls	r0, r0, #2
 8014d2a:	460e      	mov	r6, r1
 8014d2c:	f7fc fca6 	bl	801167c <GUI_ALLOC_AllocNoInit>
 8014d30:	4607      	mov	r7, r0
 8014d32:	b908      	cbnz	r0, 8014d38 <_CreateBuffer+0x1a>
 8014d34:	2000      	movs	r0, #0
 8014d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d38:	f7fc fa4c 	bl	80111d4 <GUI_ALLOC_LockH>
 8014d3c:	682b      	ldr	r3, [r5, #0]
 8014d3e:	4604      	mov	r4, r0
 8014d40:	6998      	ldr	r0, [r3, #24]
 8014d42:	f7fa fe31 	bl	800f9a8 <GUI_DEVICE__GetpDriver>
 8014d46:	2800      	cmp	r0, #0
 8014d48:	d0f4      	beq.n	8014d34 <_CreateBuffer+0x16>
 8014d4a:	68c3      	ldr	r3, [r0, #12]
 8014d4c:	2108      	movs	r1, #8
 8014d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014d50:	4798      	blx	r3
 8014d52:	2802      	cmp	r0, #2
 8014d54:	dd0b      	ble.n	8014d6e <_CreateBuffer+0x50>
 8014d56:	2804      	cmp	r0, #4
 8014d58:	dd06      	ble.n	8014d68 <_CreateBuffer+0x4a>
 8014d5a:	2808      	cmp	r0, #8
 8014d5c:	dd06      	ble.n	8014d6c <_CreateBuffer+0x4e>
 8014d5e:	2811      	cmp	r0, #17
 8014d60:	bfb4      	ite	lt
 8014d62:	2010      	movlt	r0, #16
 8014d64:	2020      	movge	r0, #32
 8014d66:	e002      	b.n	8014d6e <_CreateBuffer+0x50>
 8014d68:	2004      	movs	r0, #4
 8014d6a:	e000      	b.n	8014d6e <_CreateBuffer+0x50>
 8014d6c:	2008      	movs	r0, #8
 8014d6e:	2808      	cmp	r0, #8
 8014d70:	61a0      	str	r0, [r4, #24]
 8014d72:	dd04      	ble.n	8014d7e <_CreateBuffer+0x60>
 8014d74:	2810      	cmp	r0, #16
 8014d76:	bfcc      	ite	gt
 8014d78:	2304      	movgt	r3, #4
 8014d7a:	2302      	movle	r3, #2
 8014d7c:	e000      	b.n	8014d80 <_CreateBuffer+0x62>
 8014d7e:	2301      	movs	r3, #1
 8014d80:	696a      	ldr	r2, [r5, #20]
 8014d82:	6123      	str	r3, [r4, #16]
 8014d84:	8812      	ldrh	r2, [r2, #0]
 8014d86:	61e2      	str	r2, [r4, #28]
 8014d88:	4353      	muls	r3, r2
 8014d8a:	6163      	str	r3, [r4, #20]
 8014d8c:	f7fc fbcc 	bl	8011528 <GUI_ALLOC_GetMaxSize>
 8014d90:	6963      	ldr	r3, [r4, #20]
 8014d92:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
 8014d96:	4283      	cmp	r3, r0
 8014d98:	f04f 0200 	mov.w	r2, #0
 8014d9c:	bfc8      	it	gt
 8014d9e:	6160      	strgt	r0, [r4, #20]
 8014da0:	2e01      	cmp	r6, #1
 8014da2:	60e2      	str	r2, [r4, #12]
 8014da4:	bf18      	it	ne
 8014da6:	69e2      	ldrne	r2, [r4, #28]
 8014da8:	60a7      	str	r7, [r4, #8]
 8014daa:	bf18      	it	ne
 8014dac:	f102 4280 	addne.w	r2, r2, #1073741824	; 0x40000000
 8014db0:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8014db4:	bf18      	it	ne
 8014db6:	f102 32ff 	addne.w	r2, r2, #4294967295
 8014dba:	6023      	str	r3, [r4, #0]
 8014dbc:	bf18      	it	ne
 8014dbe:	eb03 0382 	addne.w	r3, r3, r2, lsl #2
 8014dc2:	6063      	str	r3, [r4, #4]
 8014dc4:	4620      	mov	r0, r4
 8014dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014dc8 <_GetBkIndex.isra.0>:
 8014dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014dcc:	f9b3 8004 	ldrsh.w	r8, [r3, #4]
 8014dd0:	4540      	cmp	r0, r8
 8014dd2:	4606      	mov	r6, r0
 8014dd4:	460d      	mov	r5, r1
 8014dd6:	4691      	mov	r9, r2
 8014dd8:	461c      	mov	r4, r3
 8014dda:	da04      	bge.n	8014de6 <_GetBkIndex.isra.0+0x1e>
 8014ddc:	f8d9 0000 	ldr.w	r0, [r9]
 8014de0:	bb28      	cbnz	r0, 8014e2e <_GetBkIndex.isra.0+0x66>
 8014de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014de6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8014dea:	4298      	cmp	r0, r3
 8014dec:	dcf6      	bgt.n	8014ddc <_GetBkIndex.isra.0+0x14>
 8014dee:	f9b4 7006 	ldrsh.w	r7, [r4, #6]
 8014df2:	42b9      	cmp	r1, r7
 8014df4:	dbf2      	blt.n	8014ddc <_GetBkIndex.isra.0+0x14>
 8014df6:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8014dfa:	4299      	cmp	r1, r3
 8014dfc:	dcee      	bgt.n	8014ddc <_GetBkIndex.isra.0+0x14>
 8014dfe:	ebc8 0800 	rsb	r8, r8, r0
 8014e02:	1bcf      	subs	r7, r1, r7
 8014e04:	6960      	ldr	r0, [r4, #20]
 8014e06:	4641      	mov	r1, r8
 8014e08:	463a      	mov	r2, r7
 8014e0a:	f000 fba3 	bl	8015554 <GUI_GetBitmapPixelIndex>
 8014e0e:	2800      	cmp	r0, #0
 8014e10:	d0e4      	beq.n	8014ddc <_GetBkIndex.isra.0+0x14>
 8014e12:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8014e16:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8014e1a:	1a8a      	subs	r2, r1, r2
 8014e1c:	fb02 7707 	mla	r7, r2, r7, r7
 8014e20:	f104 0320 	add.w	r3, r4, #32
 8014e24:	44b8      	add	r8, r7
 8014e26:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8014e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014e2e:	68c3      	ldr	r3, [r0, #12]
 8014e30:	4631      	mov	r1, r6
 8014e32:	695b      	ldr	r3, [r3, #20]
 8014e34:	462a      	mov	r2, r5
 8014e36:	4798      	blx	r3
 8014e38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08014e3c <_GetBkIndexAlpha.isra.2>:
 8014e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014e40:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
 8014e44:	42b0      	cmp	r0, r6
 8014e46:	4680      	mov	r8, r0
 8014e48:	460f      	mov	r7, r1
 8014e4a:	4691      	mov	r9, r2
 8014e4c:	461d      	mov	r5, r3
 8014e4e:	db14      	blt.n	8014e7a <_GetBkIndexAlpha.isra.2+0x3e>
 8014e50:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8014e54:	4298      	cmp	r0, r3
 8014e56:	dc10      	bgt.n	8014e7a <_GetBkIndexAlpha.isra.2+0x3e>
 8014e58:	f9b5 4006 	ldrsh.w	r4, [r5, #6]
 8014e5c:	42a1      	cmp	r1, r4
 8014e5e:	db0c      	blt.n	8014e7a <_GetBkIndexAlpha.isra.2+0x3e>
 8014e60:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 8014e64:	4299      	cmp	r1, r3
 8014e66:	dc08      	bgt.n	8014e7a <_GetBkIndexAlpha.isra.2+0x3e>
 8014e68:	1b86      	subs	r6, r0, r6
 8014e6a:	6968      	ldr	r0, [r5, #20]
 8014e6c:	1b0c      	subs	r4, r1, r4
 8014e6e:	b130      	cbz	r0, 8014e7e <_GetBkIndexAlpha.isra.2+0x42>
 8014e70:	4631      	mov	r1, r6
 8014e72:	4622      	mov	r2, r4
 8014e74:	f000 fb6e 	bl	8015554 <GUI_GetBitmapPixelIndex>
 8014e78:	e003      	b.n	8014e82 <_GetBkIndexAlpha.isra.2+0x46>
 8014e7a:	2400      	movs	r4, #0
 8014e7c:	4626      	mov	r6, r4
 8014e7e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8014e82:	0e00      	lsrs	r0, r0, #24
 8014e84:	28ff      	cmp	r0, #255	; 0xff
 8014e86:	d109      	bne.n	8014e9c <_GetBkIndexAlpha.isra.2+0x60>
 8014e88:	f8d9 0000 	ldr.w	r0, [r9]
 8014e8c:	b190      	cbz	r0, 8014eb4 <_GetBkIndexAlpha.isra.2+0x78>
 8014e8e:	68c3      	ldr	r3, [r0, #12]
 8014e90:	4641      	mov	r1, r8
 8014e92:	695b      	ldr	r3, [r3, #20]
 8014e94:	463a      	mov	r2, r7
 8014e96:	4798      	blx	r3
 8014e98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014e9c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8014ea0:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8014ea4:	1a8a      	subs	r2, r1, r2
 8014ea6:	fb02 4404 	mla	r4, r2, r4, r4
 8014eaa:	f105 0320 	add.w	r3, r5, #32
 8014eae:	4426      	add	r6, r4
 8014eb0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014eb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08014eb8 <_GetDeviceRect>:
 8014eb8:	b538      	push	{r3, r4, r5, lr}
 8014eba:	4a0c      	ldr	r2, [pc, #48]	; (8014eec <_GetDeviceRect+0x34>)
 8014ebc:	6983      	ldr	r3, [r0, #24]
 8014ebe:	56d2      	ldrsb	r2, [r2, r3]
 8014ec0:	2a01      	cmp	r2, #1
 8014ec2:	4605      	mov	r5, r0
 8014ec4:	460c      	mov	r4, r1
 8014ec6:	dd0d      	ble.n	8014ee4 <_GetDeviceRect+0x2c>
 8014ec8:	2200      	movs	r2, #0
 8014eca:	804a      	strh	r2, [r1, #2]
 8014ecc:	800a      	strh	r2, [r1, #0]
 8014ece:	4618      	mov	r0, r3
 8014ed0:	f7f8 fc24 	bl	800d71c <LCD_GetXSizeEx>
 8014ed4:	3801      	subs	r0, #1
 8014ed6:	80a0      	strh	r0, [r4, #4]
 8014ed8:	69a8      	ldr	r0, [r5, #24]
 8014eda:	f7f8 fc22 	bl	800d722 <LCD_GetYSizeEx>
 8014ede:	3801      	subs	r0, #1
 8014ee0:	80e0      	strh	r0, [r4, #6]
 8014ee2:	bd38      	pop	{r3, r4, r5, pc}
 8014ee4:	68c3      	ldr	r3, [r0, #12]
 8014ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ee8:	4798      	blx	r3
 8014eea:	bd38      	pop	{r3, r4, r5, pc}
 8014eec:	2001b290 	.word	0x2001b290

08014ef0 <_FlushBuffer.isra.5>:
 8014ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ef2:	460c      	mov	r4, r1
 8014ef4:	68c9      	ldr	r1, [r1, #12]
 8014ef6:	b087      	sub	sp, #28
 8014ef8:	2900      	cmp	r1, #0
 8014efa:	d030      	beq.n	8014f5e <_FlushBuffer.isra.5+0x6e>
 8014efc:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 8014f00:	6822      	ldr	r2, [r4, #0]
 8014f02:	2b01      	cmp	r3, #1
 8014f04:	d103      	bne.n	8014f0e <_FlushBuffer.isra.5+0x1e>
 8014f06:	4615      	mov	r5, r2
 8014f08:	6062      	str	r2, [r4, #4]
 8014f0a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8014f0c:	e009      	b.n	8014f22 <_FlushBuffer.isra.5+0x32>
 8014f0e:	69e3      	ldr	r3, [r4, #28]
 8014f10:	6865      	ldr	r5, [r4, #4]
 8014f12:	6a27      	ldr	r7, [r4, #32]
 8014f14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014f18:	3b01      	subs	r3, #1
 8014f1a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014f1e:	3504      	adds	r5, #4
 8014f20:	6063      	str	r3, [r4, #4]
 8014f22:	6806      	ldr	r6, [r0, #0]
 8014f24:	b1b6      	cbz	r6, 8014f54 <_FlushBuffer.isra.5+0x64>
 8014f26:	69a2      	ldr	r2, [r4, #24]
 8014f28:	4628      	mov	r0, r5
 8014f2a:	f7ff f9b7 	bl	801429c <GUI__CompactPixelIndices>
 8014f2e:	2301      	movs	r3, #1
 8014f30:	68f2      	ldr	r2, [r6, #12]
 8014f32:	9300      	str	r3, [sp, #0]
 8014f34:	69a3      	ldr	r3, [r4, #24]
 8014f36:	9301      	str	r3, [sp, #4]
 8014f38:	9503      	str	r5, [sp, #12]
 8014f3a:	6963      	ldr	r3, [r4, #20]
 8014f3c:	9302      	str	r3, [sp, #8]
 8014f3e:	2500      	movs	r5, #0
 8014f40:	9504      	str	r5, [sp, #16]
 8014f42:	9505      	str	r5, [sp, #20]
 8014f44:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8014f48:	68e3      	ldr	r3, [r4, #12]
 8014f4a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014f4c:	4630      	mov	r0, r6
 8014f4e:	4639      	mov	r1, r7
 8014f50:	47e0      	blx	ip
 8014f52:	e000      	b.n	8014f56 <_FlushBuffer.isra.5+0x66>
 8014f54:	2501      	movs	r5, #1
 8014f56:	2300      	movs	r3, #0
 8014f58:	60e3      	str	r3, [r4, #12]
 8014f5a:	b2e8      	uxtb	r0, r5
 8014f5c:	e000      	b.n	8014f60 <_FlushBuffer.isra.5+0x70>
 8014f5e:	4608      	mov	r0, r1
 8014f60:	b007      	add	sp, #28
 8014f62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014f64 <_SetBkIndexBuffered>:
 8014f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f66:	9c06      	ldr	r4, [sp, #24]
 8014f68:	460d      	mov	r5, r1
 8014f6a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8014f6c:	428d      	cmp	r5, r1
 8014f6e:	4606      	mov	r6, r0
 8014f70:	4617      	mov	r7, r2
 8014f72:	d105      	bne.n	8014f80 <_SetBkIndexBuffered+0x1c>
 8014f74:	f994 2030 	ldrsb.w	r2, [r4, #48]	; 0x30
 8014f78:	6a21      	ldr	r1, [r4, #32]
 8014f7a:	4411      	add	r1, r2
 8014f7c:	4288      	cmp	r0, r1
 8014f7e:	d003      	beq.n	8014f88 <_SetBkIndexBuffered+0x24>
 8014f80:	4618      	mov	r0, r3
 8014f82:	4621      	mov	r1, r4
 8014f84:	f7ff ffb4 	bl	8014ef0 <_FlushBuffer.isra.5>
 8014f88:	6863      	ldr	r3, [r4, #4]
 8014f8a:	601f      	str	r7, [r3, #0]
 8014f8c:	f994 2030 	ldrsb.w	r2, [r4, #48]	; 0x30
 8014f90:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8014f94:	6063      	str	r3, [r4, #4]
 8014f96:	68e3      	ldr	r3, [r4, #12]
 8014f98:	b90b      	cbnz	r3, 8014f9e <_SetBkIndexBuffered+0x3a>
 8014f9a:	62a6      	str	r6, [r4, #40]	; 0x28
 8014f9c:	62e5      	str	r5, [r4, #44]	; 0x2c
 8014f9e:	3301      	adds	r3, #1
 8014fa0:	60e3      	str	r3, [r4, #12]
 8014fa2:	6226      	str	r6, [r4, #32]
 8014fa4:	6265      	str	r5, [r4, #36]	; 0x24
 8014fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014fa8 <_ReleaseBuffer.isra.6>:
 8014fa8:	b513      	push	{r0, r1, r4, lr}
 8014faa:	9101      	str	r1, [sp, #4]
 8014fac:	f7ff ffa0 	bl	8014ef0 <_FlushBuffer.isra.5>
 8014fb0:	a802      	add	r0, sp, #8
 8014fb2:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 8014fb6:	6894      	ldr	r4, [r2, #8]
 8014fb8:	f7fc f91a 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8014fbc:	4620      	mov	r0, r4
 8014fbe:	f7fc f943 	bl	8011248 <GUI_ALLOC_Free>
 8014fc2:	b002      	add	sp, #8
 8014fc4:	bd10      	pop	{r4, pc}
	...

08014fc8 <GUI_SPRITE_SetPosition>:
 8014fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fcc:	b0a7      	sub	sp, #156	; 0x9c
 8014fce:	9116      	str	r1, [sp, #88]	; 0x58
 8014fd0:	9217      	str	r2, [sp, #92]	; 0x5c
 8014fd2:	2800      	cmp	r0, #0
 8014fd4:	f000 8275 	beq.w	80154c2 <GUI_SPRITE_SetPosition+0x4fa>
 8014fd8:	f7fc f8fc 	bl	80111d4 <GUI_ALLOC_LockH>
 8014fdc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014fde:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8014fe2:	6801      	ldr	r1, [r0, #0]
 8014fe4:	9023      	str	r0, [sp, #140]	; 0x8c
 8014fe6:	429a      	cmp	r2, r3
 8014fe8:	9106      	str	r1, [sp, #24]
 8014fea:	d106      	bne.n	8014ffa <GUI_SPRITE_SetPosition+0x32>
 8014fec:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8014ff0:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 8014ff4:	459e      	cmp	lr, r3
 8014ff6:	f000 8239 	beq.w	801546c <GUI_SPRITE_SetPosition+0x4a4>
 8014ffa:	2000      	movs	r0, #0
 8014ffc:	f7f7 f9bc 	bl	800c378 <GUI_MEMDEV_Select>
 8015000:	4ba0      	ldr	r3, [pc, #640]	; (8015284 <GUI_SPRITE_SetPosition+0x2bc>)
 8015002:	9906      	ldr	r1, [sp, #24]
 8015004:	681b      	ldr	r3, [r3, #0]
 8015006:	6989      	ldr	r1, [r1, #24]
 8015008:	7c5a      	ldrb	r2, [r3, #17]
 801500a:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 801500c:	9108      	str	r1, [sp, #32]
 801500e:	4291      	cmp	r1, r2
 8015010:	bf18      	it	ne
 8015012:	7459      	strbne	r1, [r3, #17]
 8015014:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8015018:	9310      	str	r3, [sp, #64]	; 0x40
 801501a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 801501e:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 8015022:	f9b5 6006 	ldrsh.w	r6, [r5, #6]
 8015026:	921a      	str	r2, [sp, #104]	; 0x68
 8015028:	ebce 0303 	rsb	r3, lr, r3
 801502c:	1c59      	adds	r1, r3, #1
 801502e:	9307      	str	r3, [sp, #28]
 8015030:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 8015034:	901f      	str	r0, [sp, #124]	; 0x7c
 8015036:	1b9b      	subs	r3, r3, r6
 8015038:	1c5a      	adds	r2, r3, #1
 801503a:	930e      	str	r3, [sp, #56]	; 0x38
 801503c:	8a2b      	ldrh	r3, [r5, #16]
 801503e:	910d      	str	r1, [sp, #52]	; 0x34
 8015040:	079b      	lsls	r3, r3, #30
 8015042:	921e      	str	r2, [sp, #120]	; 0x78
 8015044:	f140 81f7 	bpl.w	8015436 <GUI_SPRITE_SetPosition+0x46e>
 8015048:	9916      	ldr	r1, [sp, #88]	; 0x58
 801504a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801504c:	696b      	ldr	r3, [r5, #20]
 801504e:	9311      	str	r3, [sp, #68]	; 0x44
 8015050:	ebce 0a01 	rsb	sl, lr, r1
 8015054:	f1ba 0f00 	cmp.w	sl, #0
 8015058:	ebc6 0902 	rsb	r9, r6, r2
 801505c:	dc0c      	bgt.n	8015078 <GUI_SPRITE_SetPosition+0xb0>
 801505e:	9b07      	ldr	r3, [sp, #28]
 8015060:	930a      	str	r3, [sp, #40]	; 0x28
 8015062:	469e      	mov	lr, r3
 8015064:	f04f 32ff 	mov.w	r2, #4294967295
 8015068:	44d6      	add	lr, sl
 801506a:	2100      	movs	r1, #0
 801506c:	f8cd e01c 	str.w	lr, [sp, #28]
 8015070:	911c      	str	r1, [sp, #112]	; 0x70
 8015072:	9214      	str	r2, [sp, #80]	; 0x50
 8015074:	9204      	str	r2, [sp, #16]
 8015076:	e009      	b.n	801508c <GUI_SPRITE_SetPosition+0xc4>
 8015078:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801507a:	f8cd a070 	str.w	sl, [sp, #112]	; 0x70
 801507e:	f04f 0e01 	mov.w	lr, #1
 8015082:	2100      	movs	r1, #0
 8015084:	9314      	str	r3, [sp, #80]	; 0x50
 8015086:	f8cd e010 	str.w	lr, [sp, #16]
 801508a:	910a      	str	r1, [sp, #40]	; 0x28
 801508c:	f1b9 0f00 	cmp.w	r9, #0
 8015090:	dc0c      	bgt.n	80150ac <GUI_SPRITE_SetPosition+0xe4>
 8015092:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8015094:	4622      	mov	r2, r4
 8015096:	f04f 3eff 	mov.w	lr, #4294967295
 801509a:	444a      	add	r2, r9
 801509c:	2300      	movs	r3, #0
 801509e:	920e      	str	r2, [sp, #56]	; 0x38
 80150a0:	931b      	str	r3, [sp, #108]	; 0x6c
 80150a2:	f8cd e054 	str.w	lr, [sp, #84]	; 0x54
 80150a6:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 80150aa:	e006      	b.n	80150ba <GUI_SPRITE_SetPosition+0xf2>
 80150ac:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80150ae:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
 80150b2:	2301      	movs	r3, #1
 80150b4:	9215      	str	r2, [sp, #84]	; 0x54
 80150b6:	9309      	str	r3, [sp, #36]	; 0x24
 80150b8:	2400      	movs	r4, #0
 80150ba:	9806      	ldr	r0, [sp, #24]
 80150bc:	a924      	add	r1, sp, #144	; 0x90
 80150be:	f7ff fefb 	bl	8014eb8 <_GetDeviceRect>
 80150c2:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80150c4:	9904      	ldr	r1, [sp, #16]
 80150c6:	f7ff fe2a 	bl	8014d1e <_CreateBuffer>
 80150ca:	9012      	str	r0, [sp, #72]	; 0x48
 80150cc:	2800      	cmp	r0, #0
 80150ce:	f000 81b2 	beq.w	8015436 <GUI_SPRITE_SetPosition+0x46e>
 80150d2:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80150d4:	9904      	ldr	r1, [sp, #16]
 80150d6:	f7ff fe22 	bl	8014d1e <_CreateBuffer>
 80150da:	9013      	str	r0, [sp, #76]	; 0x4c
 80150dc:	2800      	cmp	r0, #0
 80150de:	f000 81a5 	beq.w	801542c <GUI_SPRITE_SetPosition+0x464>
 80150e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80150e4:	68d8      	ldr	r0, [r3, #12]
 80150e6:	4426      	add	r6, r4
 80150e8:	b990      	cbnz	r0, 8015110 <GUI_SPRITE_SetPosition+0x148>
 80150ea:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 80150ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80150f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80150f2:	9019      	str	r0, [sp, #100]	; 0x64
 80150f4:	ea4f 038e 	mov.w	r3, lr, lsl #2
 80150f8:	434b      	muls	r3, r1
 80150fa:	9321      	str	r3, [sp, #132]	; 0x84
 80150fc:	fb0e 2304 	mla	r3, lr, r4, r2
 8015100:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8015104:	930c      	str	r3, [sp, #48]	; 0x30
 8015106:	9b04      	ldr	r3, [sp, #16]
 8015108:	009b      	lsls	r3, r3, #2
 801510a:	444e      	add	r6, r9
 801510c:	9320      	str	r3, [sp, #128]	; 0x80
 801510e:	e0db      	b.n	80152c8 <GUI_SPRITE_SetPosition+0x300>
 8015110:	f7fc f860 	bl	80111d4 <GUI_ALLOC_LockH>
 8015114:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 8015118:	9909      	ldr	r1, [sp, #36]	; 0x24
 801511a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801511c:	9022      	str	r0, [sp, #136]	; 0x88
 801511e:	ea4f 038e 	mov.w	r3, lr, lsl #2
 8015122:	434b      	muls	r3, r1
 8015124:	9319      	str	r3, [sp, #100]	; 0x64
 8015126:	fb0e 2304 	mla	r3, lr, r4, r2
 801512a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801512e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015130:	9b04      	ldr	r3, [sp, #16]
 8015132:	009b      	lsls	r3, r3, #2
 8015134:	444e      	add	r6, r9
 8015136:	931d      	str	r3, [sp, #116]	; 0x74
 8015138:	9915      	ldr	r1, [sp, #84]	; 0x54
 801513a:	428c      	cmp	r4, r1
 801513c:	f000 809e 	beq.w	801527c <GUI_SPRITE_SetPosition+0x2b4>
 8015140:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 8015144:	4574      	cmp	r4, lr
 8015146:	db05      	blt.n	8015154 <GUI_SPRITE_SetPosition+0x18c>
 8015148:	990e      	ldr	r1, [sp, #56]	; 0x38
 801514a:	428c      	cmp	r4, r1
 801514c:	bfcc      	ite	gt
 801514e:	2300      	movgt	r3, #0
 8015150:	2301      	movle	r3, #1
 8015152:	e000      	b.n	8015156 <GUI_SPRITE_SetPosition+0x18e>
 8015154:	2300      	movs	r3, #0
 8015156:	b2db      	uxtb	r3, r3
 8015158:	9318      	str	r3, [sp, #96]	; 0x60
 801515a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801515c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801515e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015160:	9105      	str	r1, [sp, #20]
 8015162:	ebc9 0206 	rsb	r2, r9, r6
 8015166:	441f      	add	r7, r3
 8015168:	920c      	str	r2, [sp, #48]	; 0x30
 801516a:	4457      	add	r7, sl
 801516c:	461d      	mov	r5, r3
 801516e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8015170:	428d      	cmp	r5, r1
 8015172:	d07a      	beq.n	801526a <GUI_SPRITE_SetPosition+0x2a2>
 8015174:	9811      	ldr	r0, [sp, #68]	; 0x44
 8015176:	4629      	mov	r1, r5
 8015178:	4622      	mov	r2, r4
 801517a:	f000 f9eb 	bl	8015554 <GUI_GetBitmapPixelIndex>
 801517e:	900f      	str	r0, [sp, #60]	; 0x3c
 8015180:	2800      	cmp	r0, #0
 8015182:	d069      	beq.n	8015258 <GUI_SPRITE_SetPosition+0x290>
 8015184:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015186:	4295      	cmp	r5, r2
 8015188:	ebca 0c07 	rsb	ip, sl, r7
 801518c:	db07      	blt.n	801519e <GUI_SPRITE_SetPosition+0x1d6>
 801518e:	9b07      	ldr	r3, [sp, #28]
 8015190:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 8015194:	429d      	cmp	r5, r3
 8015196:	bfc8      	it	gt
 8015198:	f04f 0b00 	movgt.w	fp, #0
 801519c:	e001      	b.n	80151a2 <GUI_SPRITE_SetPosition+0x1da>
 801519e:	f04f 0b00 	mov.w	fp, #0
 80151a2:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 80151a6:	429f      	cmp	r7, r3
 80151a8:	fa5f fb8b 	uxtb.w	fp, fp
 80151ac:	db17      	blt.n	80151de <GUI_SPRITE_SetPosition+0x216>
 80151ae:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 80151b2:	429e      	cmp	r6, r3
 80151b4:	db13      	blt.n	80151de <GUI_SPRITE_SetPosition+0x216>
 80151b6:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 80151ba:	429f      	cmp	r7, r3
 80151bc:	dc0f      	bgt.n	80151de <GUI_SPRITE_SetPosition+0x216>
 80151be:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 80151c2:	429e      	cmp	r6, r3
 80151c4:	dc0b      	bgt.n	80151de <GUI_SPRITE_SetPosition+0x216>
 80151c6:	4638      	mov	r0, r7
 80151c8:	4631      	mov	r1, r6
 80151ca:	9a06      	ldr	r2, [sp, #24]
 80151cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80151ce:	f8cd c00c 	str.w	ip, [sp, #12]
 80151d2:	f7ff fdf9 	bl	8014dc8 <_GetBkIndex.isra.0>
 80151d6:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80151da:	4680      	mov	r8, r0
 80151dc:	e001      	b.n	80151e2 <GUI_SPRITE_SetPosition+0x21a>
 80151de:	f04f 0800 	mov.w	r8, #0
 80151e2:	f1bb 0f00 	cmp.w	fp, #0
 80151e6:	d00d      	beq.n	8015204 <GUI_SPRITE_SetPosition+0x23c>
 80151e8:	ebb5 010a 	subs.w	r1, r5, sl
 80151ec:	d415      	bmi.n	801521a <GUI_SPRITE_SetPosition+0x252>
 80151ee:	ebb4 0209 	subs.w	r2, r4, r9
 80151f2:	d412      	bmi.n	801521a <GUI_SPRITE_SetPosition+0x252>
 80151f4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80151f6:	f8cd c00c 	str.w	ip, [sp, #12]
 80151fa:	f000 f9ab 	bl	8015554 <GUI_GetBitmapPixelIndex>
 80151fe:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8015202:	b950      	cbnz	r0, 801521a <GUI_SPRITE_SetPosition+0x252>
 8015204:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 8015208:	459c      	cmp	ip, r3
 801520a:	db06      	blt.n	801521a <GUI_SPRITE_SetPosition+0x252>
 801520c:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 8015210:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 8015214:	459e      	cmp	lr, r3
 8015216:	f280 812d 	bge.w	8015474 <GUI_SPRITE_SetPosition+0x4ac>
 801521a:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 801521e:	429f      	cmp	r7, r3
 8015220:	db17      	blt.n	8015252 <GUI_SPRITE_SetPosition+0x28a>
 8015222:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 8015226:	429e      	cmp	r6, r3
 8015228:	db13      	blt.n	8015252 <GUI_SPRITE_SetPosition+0x28a>
 801522a:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 801522e:	429f      	cmp	r7, r3
 8015230:	dc0f      	bgt.n	8015252 <GUI_SPRITE_SetPosition+0x28a>
 8015232:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 8015236:	429e      	cmp	r6, r3
 8015238:	dc0b      	bgt.n	8015252 <GUI_SPRITE_SetPosition+0x28a>
 801523a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801523c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801523e:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
 8015242:	9100      	str	r1, [sp, #0]
 8015244:	f853 202e 	ldr.w	r2, [r3, lr, lsl #2]
 8015248:	9b06      	ldr	r3, [sp, #24]
 801524a:	4638      	mov	r0, r7
 801524c:	4631      	mov	r1, r6
 801524e:	f7ff fe89 	bl	8014f64 <_SetBkIndexBuffered>
 8015252:	9905      	ldr	r1, [sp, #20]
 8015254:	f8c1 8020 	str.w	r8, [r1, #32]
 8015258:	9b05      	ldr	r3, [sp, #20]
 801525a:	f8dd e074 	ldr.w	lr, [sp, #116]	; 0x74
 801525e:	9a04      	ldr	r2, [sp, #16]
 8015260:	4473      	add	r3, lr
 8015262:	4415      	add	r5, r2
 8015264:	9305      	str	r3, [sp, #20]
 8015266:	4417      	add	r7, r2
 8015268:	e781      	b.n	801516e <GUI_SPRITE_SetPosition+0x1a6>
 801526a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801526c:	f8dd e064 	ldr.w	lr, [sp, #100]	; 0x64
 8015270:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015272:	4473      	add	r3, lr
 8015274:	4414      	add	r4, r2
 8015276:	930b      	str	r3, [sp, #44]	; 0x2c
 8015278:	4416      	add	r6, r2
 801527a:	e75d      	b.n	8015138 <GUI_SPRITE_SetPosition+0x170>
 801527c:	a822      	add	r0, sp, #136	; 0x88
 801527e:	f7fb ffb7 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8015282:	e0ce      	b.n	8015422 <GUI_SPRITE_SetPosition+0x45a>
 8015284:	20000238 	.word	0x20000238
 8015288:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801528a:	4294      	cmp	r4, r2
 801528c:	db20      	blt.n	80152d0 <GUI_SPRITE_SetPosition+0x308>
 801528e:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 8015292:	4574      	cmp	r4, lr
 8015294:	bfcc      	ite	gt
 8015296:	2300      	movgt	r3, #0
 8015298:	2301      	movle	r3, #1
 801529a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801529c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801529e:	b2db      	uxtb	r3, r3
 80152a0:	931d      	str	r3, [sp, #116]	; 0x74
 80152a2:	ebc9 0106 	rsb	r1, r9, r6
 80152a6:	4417      	add	r7, r2
 80152a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80152aa:	910f      	str	r1, [sp, #60]	; 0x3c
 80152ac:	4457      	add	r7, sl
 80152ae:	9305      	str	r3, [sp, #20]
 80152b0:	4615      	mov	r5, r2
 80152b2:	9914      	ldr	r1, [sp, #80]	; 0x50
 80152b4:	428d      	cmp	r5, r1
 80152b6:	d10d      	bne.n	80152d4 <GUI_SPRITE_SetPosition+0x30c>
 80152b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80152ba:	f8dd e084 	ldr.w	lr, [sp, #132]	; 0x84
 80152be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80152c0:	4473      	add	r3, lr
 80152c2:	4414      	add	r4, r2
 80152c4:	930c      	str	r3, [sp, #48]	; 0x30
 80152c6:	4416      	add	r6, r2
 80152c8:	9915      	ldr	r1, [sp, #84]	; 0x54
 80152ca:	428c      	cmp	r4, r1
 80152cc:	d1dc      	bne.n	8015288 <GUI_SPRITE_SetPosition+0x2c0>
 80152ce:	e0a8      	b.n	8015422 <GUI_SPRITE_SetPosition+0x45a>
 80152d0:	2300      	movs	r3, #0
 80152d2:	e7e2      	b.n	801529a <GUI_SPRITE_SetPosition+0x2d2>
 80152d4:	4629      	mov	r1, r5
 80152d6:	9811      	ldr	r0, [sp, #68]	; 0x44
 80152d8:	4622      	mov	r2, r4
 80152da:	f000 f93b 	bl	8015554 <GUI_GetBitmapPixelIndex>
 80152de:	0e01      	lsrs	r1, r0, #24
 80152e0:	29ff      	cmp	r1, #255	; 0xff
 80152e2:	9018      	str	r0, [sp, #96]	; 0x60
 80152e4:	910b      	str	r1, [sp, #44]	; 0x2c
 80152e6:	f000 8093 	beq.w	8015410 <GUI_SPRITE_SetPosition+0x448>
 80152ea:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80152ec:	4295      	cmp	r5, r2
 80152ee:	ebca 0c07 	rsb	ip, sl, r7
 80152f2:	db07      	blt.n	8015304 <GUI_SPRITE_SetPosition+0x33c>
 80152f4:	9b07      	ldr	r3, [sp, #28]
 80152f6:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 80152fa:	429d      	cmp	r5, r3
 80152fc:	bfc8      	it	gt
 80152fe:	f04f 0b00 	movgt.w	fp, #0
 8015302:	e001      	b.n	8015308 <GUI_SPRITE_SetPosition+0x340>
 8015304:	f04f 0b00 	mov.w	fp, #0
 8015308:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 801530c:	429f      	cmp	r7, r3
 801530e:	fa5f fb8b 	uxtb.w	fp, fp
 8015312:	db22      	blt.n	801535a <GUI_SPRITE_SetPosition+0x392>
 8015314:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 8015318:	429e      	cmp	r6, r3
 801531a:	db1e      	blt.n	801535a <GUI_SPRITE_SetPosition+0x392>
 801531c:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 8015320:	429f      	cmp	r7, r3
 8015322:	dc1a      	bgt.n	801535a <GUI_SPRITE_SetPosition+0x392>
 8015324:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 8015328:	429e      	cmp	r6, r3
 801532a:	dc16      	bgt.n	801535a <GUI_SPRITE_SetPosition+0x392>
 801532c:	4631      	mov	r1, r6
 801532e:	9a06      	ldr	r2, [sp, #24]
 8015330:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015332:	f8cd c00c 	str.w	ip, [sp, #12]
 8015336:	4638      	mov	r0, r7
 8015338:	f7ff fd80 	bl	8014e3c <_GetBkIndexAlpha.isra.2>
 801533c:	f8dd e020 	ldr.w	lr, [sp, #32]
 8015340:	4b61      	ldr	r3, [pc, #388]	; (80154c8 <GUI_SPRITE_SetPosition+0x500>)
 8015342:	f853 302e 	ldr.w	r3, [r3, lr, lsl #2]
 8015346:	691b      	ldr	r3, [r3, #16]
 8015348:	4680      	mov	r8, r0
 801534a:	685b      	ldr	r3, [r3, #4]
 801534c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8015350:	4798      	blx	r3
 8015352:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8015356:	9019      	str	r0, [sp, #100]	; 0x64
 8015358:	e001      	b.n	801535e <GUI_SPRITE_SetPosition+0x396>
 801535a:	f04f 0800 	mov.w	r8, #0
 801535e:	f1bb 0f00 	cmp.w	fp, #0
 8015362:	d00f      	beq.n	8015384 <GUI_SPRITE_SetPosition+0x3bc>
 8015364:	ebb5 010a 	subs.w	r1, r5, sl
 8015368:	d416      	bmi.n	8015398 <GUI_SPRITE_SetPosition+0x3d0>
 801536a:	ebb4 0209 	subs.w	r2, r4, r9
 801536e:	d413      	bmi.n	8015398 <GUI_SPRITE_SetPosition+0x3d0>
 8015370:	9811      	ldr	r0, [sp, #68]	; 0x44
 8015372:	f8cd c00c 	str.w	ip, [sp, #12]
 8015376:	f000 f8ed 	bl	8015554 <GUI_GetBitmapPixelIndex>
 801537a:	0e00      	lsrs	r0, r0, #24
 801537c:	28ff      	cmp	r0, #255	; 0xff
 801537e:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8015382:	d109      	bne.n	8015398 <GUI_SPRITE_SetPosition+0x3d0>
 8015384:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 8015388:	459c      	cmp	ip, r3
 801538a:	db05      	blt.n	8015398 <GUI_SPRITE_SetPosition+0x3d0>
 801538c:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 8015390:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015392:	4299      	cmp	r1, r3
 8015394:	f280 8082 	bge.w	801549c <GUI_SPRITE_SetPosition+0x4d4>
 8015398:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 801539c:	429f      	cmp	r7, r3
 801539e:	db34      	blt.n	801540a <GUI_SPRITE_SetPosition+0x442>
 80153a0:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 80153a4:	429e      	cmp	r6, r3
 80153a6:	db30      	blt.n	801540a <GUI_SPRITE_SetPosition+0x442>
 80153a8:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 80153ac:	429f      	cmp	r7, r3
 80153ae:	dc2c      	bgt.n	801540a <GUI_SPRITE_SetPosition+0x442>
 80153b0:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 80153b4:	429e      	cmp	r6, r3
 80153b6:	dc28      	bgt.n	801540a <GUI_SPRITE_SetPosition+0x442>
 80153b8:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 80153bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80153be:	f8df b108 	ldr.w	fp, [pc, #264]	; 80154c8 <GUI_SPRITE_SetPosition+0x500>
 80153c2:	f02e 407f 	bic.w	r0, lr, #4278190080	; 0xff000000
 80153c6:	b191      	cbz	r1, 80153ee <GUI_SPRITE_SetPosition+0x426>
 80153c8:	9a08      	ldr	r2, [sp, #32]
 80153ca:	f85b 3022 	ldr.w	r3, [fp, r2, lsl #2]
 80153ce:	691b      	ldr	r3, [r3, #16]
 80153d0:	685b      	ldr	r3, [r3, #4]
 80153d2:	4798      	blx	r3
 80153d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80153d6:	9919      	ldr	r1, [sp, #100]	; 0x64
 80153d8:	43da      	mvns	r2, r3
 80153da:	b2d2      	uxtb	r2, r2
 80153dc:	f7f9 f809 	bl	800e3f2 <GUI__MixColors>
 80153e0:	f8dd e020 	ldr.w	lr, [sp, #32]
 80153e4:	f85b 302e 	ldr.w	r3, [fp, lr, lsl #2]
 80153e8:	691b      	ldr	r3, [r3, #16]
 80153ea:	681b      	ldr	r3, [r3, #0]
 80153ec:	e004      	b.n	80153f8 <GUI_SPRITE_SetPosition+0x430>
 80153ee:	9908      	ldr	r1, [sp, #32]
 80153f0:	f85b 3021 	ldr.w	r3, [fp, r1, lsl #2]
 80153f4:	691b      	ldr	r3, [r3, #16]
 80153f6:	685b      	ldr	r3, [r3, #4]
 80153f8:	4798      	blx	r3
 80153fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80153fc:	9300      	str	r3, [sp, #0]
 80153fe:	4602      	mov	r2, r0
 8015400:	4631      	mov	r1, r6
 8015402:	4638      	mov	r0, r7
 8015404:	9b06      	ldr	r3, [sp, #24]
 8015406:	f7ff fdad 	bl	8014f64 <_SetBkIndexBuffered>
 801540a:	9905      	ldr	r1, [sp, #20]
 801540c:	f8c1 8020 	str.w	r8, [r1, #32]
 8015410:	9b05      	ldr	r3, [sp, #20]
 8015412:	f8dd e080 	ldr.w	lr, [sp, #128]	; 0x80
 8015416:	9a04      	ldr	r2, [sp, #16]
 8015418:	4473      	add	r3, lr
 801541a:	4415      	add	r5, r2
 801541c:	9305      	str	r3, [sp, #20]
 801541e:	4417      	add	r7, r2
 8015420:	e747      	b.n	80152b2 <GUI_SPRITE_SetPosition+0x2ea>
 8015422:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015424:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8015426:	6818      	ldr	r0, [r3, #0]
 8015428:	f7ff fdbe 	bl	8014fa8 <_ReleaseBuffer.isra.6>
 801542c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801542e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8015430:	6818      	ldr	r0, [r3, #0]
 8015432:	f7ff fdb9 	bl	8014fa8 <_ReleaseBuffer.isra.6>
 8015436:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015438:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801543a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801543c:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 8015440:	809a      	strh	r2, [r3, #4]
 8015442:	440a      	add	r2, r1
 8015444:	3a01      	subs	r2, #1
 8015446:	f8a3 e006 	strh.w	lr, [r3, #6]
 801544a:	811a      	strh	r2, [r3, #8]
 801544c:	f10e 32ff 	add.w	r2, lr, #4294967295
 8015450:	f8dd e078 	ldr.w	lr, [sp, #120]	; 0x78
 8015454:	9908      	ldr	r1, [sp, #32]
 8015456:	4472      	add	r2, lr
 8015458:	815a      	strh	r2, [r3, #10]
 801545a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801545c:	4291      	cmp	r1, r2
 801545e:	d002      	beq.n	8015466 <GUI_SPRITE_SetPosition+0x49e>
 8015460:	4b1a      	ldr	r3, [pc, #104]	; (80154cc <GUI_SPRITE_SetPosition+0x504>)
 8015462:	681b      	ldr	r3, [r3, #0]
 8015464:	745a      	strb	r2, [r3, #17]
 8015466:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8015468:	f7f6 ff86 	bl	800c378 <GUI_MEMDEV_Select>
 801546c:	a823      	add	r0, sp, #140	; 0x8c
 801546e:	f7fb febf 	bl	80111f0 <GUI_ALLOC_UnlockH>
 8015472:	e026      	b.n	80154c2 <GUI_SPRITE_SetPosition+0x4fa>
 8015474:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 8015478:	459c      	cmp	ip, r3
 801547a:	f73f aece 	bgt.w	801521a <GUI_SPRITE_SetPosition+0x252>
 801547e:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 8015482:	459e      	cmp	lr, r3
 8015484:	f73f aec9 	bgt.w	801521a <GUI_SPRITE_SetPosition+0x252>
 8015488:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801548a:	9b05      	ldr	r3, [sp, #20]
 801548c:	9100      	str	r1, [sp, #0]
 801548e:	6a1a      	ldr	r2, [r3, #32]
 8015490:	9b06      	ldr	r3, [sp, #24]
 8015492:	4660      	mov	r0, ip
 8015494:	4671      	mov	r1, lr
 8015496:	f7ff fd65 	bl	8014f64 <_SetBkIndexBuffered>
 801549a:	e6be      	b.n	801521a <GUI_SPRITE_SetPosition+0x252>
 801549c:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 80154a0:	459c      	cmp	ip, r3
 80154a2:	f73f af79 	bgt.w	8015398 <GUI_SPRITE_SetPosition+0x3d0>
 80154a6:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 80154aa:	4299      	cmp	r1, r3
 80154ac:	f73f af74 	bgt.w	8015398 <GUI_SPRITE_SetPosition+0x3d0>
 80154b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80154b2:	9b05      	ldr	r3, [sp, #20]
 80154b4:	9200      	str	r2, [sp, #0]
 80154b6:	6a1a      	ldr	r2, [r3, #32]
 80154b8:	9b06      	ldr	r3, [sp, #24]
 80154ba:	4660      	mov	r0, ip
 80154bc:	f7ff fd52 	bl	8014f64 <_SetBkIndexBuffered>
 80154c0:	e76a      	b.n	8015398 <GUI_SPRITE_SetPosition+0x3d0>
 80154c2:	b027      	add	sp, #156	; 0x9c
 80154c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154c8:	2001b2c0 	.word	0x2001b2c0
 80154cc:	20000238 	.word	0x20000238

080154d0 <GUI_GetBitmapPixelIndexEx>:
 80154d0:	b510      	push	{r4, lr}
 80154d2:	2804      	cmp	r0, #4
 80154d4:	9c02      	ldr	r4, [sp, #8]
 80154d6:	d025      	beq.n	8015524 <GUI_GetBitmapPixelIndexEx+0x54>
 80154d8:	dc0f      	bgt.n	80154fa <GUI_GetBitmapPixelIndexEx+0x2a>
 80154da:	2801      	cmp	r0, #1
 80154dc:	d017      	beq.n	801550e <GUI_GetBitmapPixelIndexEx+0x3e>
 80154de:	2802      	cmp	r0, #2
 80154e0:	d136      	bne.n	8015550 <GUI_GetBitmapPixelIndexEx+0x80>
 80154e2:	0898      	lsrs	r0, r3, #2
 80154e4:	fb04 2101 	mla	r1, r4, r1, r2
 80154e8:	ea6f 0343 	mvn.w	r3, r3, lsl #1
 80154ec:	5c08      	ldrb	r0, [r1, r0]
 80154ee:	f003 0306 	and.w	r3, r3, #6
 80154f2:	40d8      	lsrs	r0, r3
 80154f4:	f000 0003 	and.w	r0, r0, #3
 80154f8:	bd10      	pop	{r4, pc}
 80154fa:	2810      	cmp	r0, #16
 80154fc:	d01c      	beq.n	8015538 <GUI_GetBitmapPixelIndexEx+0x68>
 80154fe:	2820      	cmp	r0, #32
 8015500:	d020      	beq.n	8015544 <GUI_GetBitmapPixelIndexEx+0x74>
 8015502:	2808      	cmp	r0, #8
 8015504:	d124      	bne.n	8015550 <GUI_GetBitmapPixelIndexEx+0x80>
 8015506:	fb04 2101 	mla	r1, r4, r1, r2
 801550a:	5cc8      	ldrb	r0, [r1, r3]
 801550c:	bd10      	pop	{r4, pc}
 801550e:	08d8      	lsrs	r0, r3, #3
 8015510:	fb04 2101 	mla	r1, r4, r1, r2
 8015514:	43db      	mvns	r3, r3
 8015516:	5c08      	ldrb	r0, [r1, r0]
 8015518:	f003 0307 	and.w	r3, r3, #7
 801551c:	40d8      	lsrs	r0, r3
 801551e:	f000 0001 	and.w	r0, r0, #1
 8015522:	bd10      	pop	{r4, pc}
 8015524:	0858      	lsrs	r0, r3, #1
 8015526:	fb04 2101 	mla	r1, r4, r1, r2
 801552a:	07db      	lsls	r3, r3, #31
 801552c:	5c08      	ldrb	r0, [r1, r0]
 801552e:	bf4c      	ite	mi
 8015530:	f000 000f 	andmi.w	r0, r0, #15
 8015534:	0900      	lsrpl	r0, r0, #4
 8015536:	bd10      	pop	{r4, pc}
 8015538:	1049      	asrs	r1, r1, #1
 801553a:	fb04 3301 	mla	r3, r4, r1, r3
 801553e:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8015542:	bd10      	pop	{r4, pc}
 8015544:	1089      	asrs	r1, r1, #2
 8015546:	fb04 3301 	mla	r3, r4, r1, r3
 801554a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801554e:	bd10      	pop	{r4, pc}
 8015550:	2000      	movs	r0, #0
 8015552:	bd10      	pop	{r4, pc}

08015554 <GUI_GetBitmapPixelIndex>:
 8015554:	b513      	push	{r0, r1, r4, lr}
 8015556:	460b      	mov	r3, r1
 8015558:	4604      	mov	r4, r0
 801555a:	b130      	cbz	r0, 801556a <GUI_GetBitmapPixelIndex+0x16>
 801555c:	88c0      	ldrh	r0, [r0, #6]
 801555e:	88a1      	ldrh	r1, [r4, #4]
 8015560:	9200      	str	r2, [sp, #0]
 8015562:	68a2      	ldr	r2, [r4, #8]
 8015564:	f7ff ffb4 	bl	80154d0 <GUI_GetBitmapPixelIndexEx>
 8015568:	e7ff      	b.n	801556a <GUI_GetBitmapPixelIndex+0x16>
 801556a:	b002      	add	sp, #8
 801556c:	bd10      	pop	{r4, pc}

0801556e <GUI_CalcColorDist>:
 801556e:	b2cb      	uxtb	r3, r1
 8015570:	b2c2      	uxtb	r2, r0
 8015572:	1ad2      	subs	r2, r2, r3
 8015574:	b292      	uxth	r2, r2
 8015576:	b293      	uxth	r3, r2
 8015578:	b530      	push	{r4, r5, lr}
 801557a:	041c      	lsls	r4, r3, #16
 801557c:	bf48      	it	mi
 801557e:	4253      	negmi	r3, r2
 8015580:	f3c1 2507 	ubfx	r5, r1, #8, #8
 8015584:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8015588:	ebc5 0202 	rsb	r2, r5, r2
 801558c:	bf48      	it	mi
 801558e:	b29b      	uxthmi	r3, r3
 8015590:	b292      	uxth	r2, r2
 8015592:	0c09      	lsrs	r1, r1, #16
 8015594:	fb13 f403 	smulbb	r4, r3, r3
 8015598:	ebc1 4110 	rsb	r1, r1, r0, lsr #16
 801559c:	b293      	uxth	r3, r2
 801559e:	041d      	lsls	r5, r3, #16
 80155a0:	b289      	uxth	r1, r1
 80155a2:	b288      	uxth	r0, r1
 80155a4:	bf44      	itt	mi
 80155a6:	4253      	negmi	r3, r2
 80155a8:	b29b      	uxthmi	r3, r3
 80155aa:	0402      	lsls	r2, r0, #16
 80155ac:	bf48      	it	mi
 80155ae:	4248      	negmi	r0, r1
 80155b0:	fb13 4303 	smlabb	r3, r3, r3, r4
 80155b4:	bf48      	it	mi
 80155b6:	b280      	uxthmi	r0, r0
 80155b8:	fb00 3000 	mla	r0, r0, r0, r3
 80155bc:	bd30      	pop	{r4, r5, pc}
	...

080155c0 <__errno>:
 80155c0:	4b01      	ldr	r3, [pc, #4]	; (80155c8 <__errno+0x8>)
 80155c2:	6818      	ldr	r0, [r3, #0]
 80155c4:	4770      	bx	lr
 80155c6:	bf00      	nop
 80155c8:	200002f8 	.word	0x200002f8

080155cc <__libc_init_array>:
 80155cc:	b570      	push	{r4, r5, r6, lr}
 80155ce:	4e0d      	ldr	r6, [pc, #52]	; (8015604 <__libc_init_array+0x38>)
 80155d0:	4c0d      	ldr	r4, [pc, #52]	; (8015608 <__libc_init_array+0x3c>)
 80155d2:	1ba4      	subs	r4, r4, r6
 80155d4:	10a4      	asrs	r4, r4, #2
 80155d6:	2500      	movs	r5, #0
 80155d8:	42a5      	cmp	r5, r4
 80155da:	d109      	bne.n	80155f0 <__libc_init_array+0x24>
 80155dc:	4e0b      	ldr	r6, [pc, #44]	; (801560c <__libc_init_array+0x40>)
 80155de:	4c0c      	ldr	r4, [pc, #48]	; (8015610 <__libc_init_array+0x44>)
 80155e0:	f000 fc4e 	bl	8015e80 <_init>
 80155e4:	1ba4      	subs	r4, r4, r6
 80155e6:	10a4      	asrs	r4, r4, #2
 80155e8:	2500      	movs	r5, #0
 80155ea:	42a5      	cmp	r5, r4
 80155ec:	d105      	bne.n	80155fa <__libc_init_array+0x2e>
 80155ee:	bd70      	pop	{r4, r5, r6, pc}
 80155f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80155f4:	4798      	blx	r3
 80155f6:	3501      	adds	r5, #1
 80155f8:	e7ee      	b.n	80155d8 <__libc_init_array+0xc>
 80155fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80155fe:	4798      	blx	r3
 8015600:	3501      	adds	r5, #1
 8015602:	e7f2      	b.n	80155ea <__libc_init_array+0x1e>
 8015604:	0801d5a0 	.word	0x0801d5a0
 8015608:	0801d5a0 	.word	0x0801d5a0
 801560c:	0801d5a0 	.word	0x0801d5a0
 8015610:	0801d5a4 	.word	0x0801d5a4

08015614 <malloc>:
 8015614:	4b02      	ldr	r3, [pc, #8]	; (8015620 <malloc+0xc>)
 8015616:	4601      	mov	r1, r0
 8015618:	6818      	ldr	r0, [r3, #0]
 801561a:	f000 b895 	b.w	8015748 <_malloc_r>
 801561e:	bf00      	nop
 8015620:	200002f8 	.word	0x200002f8

08015624 <free>:
 8015624:	4b02      	ldr	r3, [pc, #8]	; (8015630 <free+0xc>)
 8015626:	4601      	mov	r1, r0
 8015628:	6818      	ldr	r0, [r3, #0]
 801562a:	f000 b83f 	b.w	80156ac <_free_r>
 801562e:	bf00      	nop
 8015630:	200002f8 	.word	0x200002f8

08015634 <memcmp>:
 8015634:	b530      	push	{r4, r5, lr}
 8015636:	2400      	movs	r4, #0
 8015638:	42a2      	cmp	r2, r4
 801563a:	d101      	bne.n	8015640 <memcmp+0xc>
 801563c:	2000      	movs	r0, #0
 801563e:	e007      	b.n	8015650 <memcmp+0x1c>
 8015640:	5d03      	ldrb	r3, [r0, r4]
 8015642:	3401      	adds	r4, #1
 8015644:	190d      	adds	r5, r1, r4
 8015646:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801564a:	42ab      	cmp	r3, r5
 801564c:	d0f4      	beq.n	8015638 <memcmp+0x4>
 801564e:	1b58      	subs	r0, r3, r5
 8015650:	bd30      	pop	{r4, r5, pc}

08015652 <memcpy>:
 8015652:	b510      	push	{r4, lr}
 8015654:	1e43      	subs	r3, r0, #1
 8015656:	440a      	add	r2, r1
 8015658:	4291      	cmp	r1, r2
 801565a:	d100      	bne.n	801565e <memcpy+0xc>
 801565c:	bd10      	pop	{r4, pc}
 801565e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015662:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015666:	e7f7      	b.n	8015658 <memcpy+0x6>

08015668 <memmove>:
 8015668:	4288      	cmp	r0, r1
 801566a:	b510      	push	{r4, lr}
 801566c:	eb01 0302 	add.w	r3, r1, r2
 8015670:	d807      	bhi.n	8015682 <memmove+0x1a>
 8015672:	1e42      	subs	r2, r0, #1
 8015674:	4299      	cmp	r1, r3
 8015676:	d00a      	beq.n	801568e <memmove+0x26>
 8015678:	f811 4b01 	ldrb.w	r4, [r1], #1
 801567c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8015680:	e7f8      	b.n	8015674 <memmove+0xc>
 8015682:	4283      	cmp	r3, r0
 8015684:	d9f5      	bls.n	8015672 <memmove+0xa>
 8015686:	1881      	adds	r1, r0, r2
 8015688:	1ad2      	subs	r2, r2, r3
 801568a:	42d3      	cmn	r3, r2
 801568c:	d100      	bne.n	8015690 <memmove+0x28>
 801568e:	bd10      	pop	{r4, pc}
 8015690:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015694:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8015698:	e7f7      	b.n	801568a <memmove+0x22>

0801569a <memset>:
 801569a:	4402      	add	r2, r0
 801569c:	4603      	mov	r3, r0
 801569e:	4293      	cmp	r3, r2
 80156a0:	d100      	bne.n	80156a4 <memset+0xa>
 80156a2:	4770      	bx	lr
 80156a4:	f803 1b01 	strb.w	r1, [r3], #1
 80156a8:	e7f9      	b.n	801569e <memset+0x4>
	...

080156ac <_free_r>:
 80156ac:	b538      	push	{r3, r4, r5, lr}
 80156ae:	4605      	mov	r5, r0
 80156b0:	2900      	cmp	r1, #0
 80156b2:	d045      	beq.n	8015740 <_free_r+0x94>
 80156b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80156b8:	1f0c      	subs	r4, r1, #4
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	bfb8      	it	lt
 80156be:	18e4      	addlt	r4, r4, r3
 80156c0:	f000 f8d4 	bl	801586c <__malloc_lock>
 80156c4:	4a1f      	ldr	r2, [pc, #124]	; (8015744 <_free_r+0x98>)
 80156c6:	6813      	ldr	r3, [r2, #0]
 80156c8:	4610      	mov	r0, r2
 80156ca:	b933      	cbnz	r3, 80156da <_free_r+0x2e>
 80156cc:	6063      	str	r3, [r4, #4]
 80156ce:	6014      	str	r4, [r2, #0]
 80156d0:	4628      	mov	r0, r5
 80156d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80156d6:	f000 b8ca 	b.w	801586e <__malloc_unlock>
 80156da:	42a3      	cmp	r3, r4
 80156dc:	d90c      	bls.n	80156f8 <_free_r+0x4c>
 80156de:	6821      	ldr	r1, [r4, #0]
 80156e0:	1862      	adds	r2, r4, r1
 80156e2:	4293      	cmp	r3, r2
 80156e4:	bf04      	itt	eq
 80156e6:	681a      	ldreq	r2, [r3, #0]
 80156e8:	685b      	ldreq	r3, [r3, #4]
 80156ea:	6063      	str	r3, [r4, #4]
 80156ec:	bf04      	itt	eq
 80156ee:	1852      	addeq	r2, r2, r1
 80156f0:	6022      	streq	r2, [r4, #0]
 80156f2:	6004      	str	r4, [r0, #0]
 80156f4:	e7ec      	b.n	80156d0 <_free_r+0x24>
 80156f6:	4613      	mov	r3, r2
 80156f8:	685a      	ldr	r2, [r3, #4]
 80156fa:	b10a      	cbz	r2, 8015700 <_free_r+0x54>
 80156fc:	42a2      	cmp	r2, r4
 80156fe:	d9fa      	bls.n	80156f6 <_free_r+0x4a>
 8015700:	6819      	ldr	r1, [r3, #0]
 8015702:	1858      	adds	r0, r3, r1
 8015704:	42a0      	cmp	r0, r4
 8015706:	d10b      	bne.n	8015720 <_free_r+0x74>
 8015708:	6820      	ldr	r0, [r4, #0]
 801570a:	4401      	add	r1, r0
 801570c:	1858      	adds	r0, r3, r1
 801570e:	4282      	cmp	r2, r0
 8015710:	6019      	str	r1, [r3, #0]
 8015712:	d1dd      	bne.n	80156d0 <_free_r+0x24>
 8015714:	6810      	ldr	r0, [r2, #0]
 8015716:	6852      	ldr	r2, [r2, #4]
 8015718:	605a      	str	r2, [r3, #4]
 801571a:	4401      	add	r1, r0
 801571c:	6019      	str	r1, [r3, #0]
 801571e:	e7d7      	b.n	80156d0 <_free_r+0x24>
 8015720:	d902      	bls.n	8015728 <_free_r+0x7c>
 8015722:	230c      	movs	r3, #12
 8015724:	602b      	str	r3, [r5, #0]
 8015726:	e7d3      	b.n	80156d0 <_free_r+0x24>
 8015728:	6820      	ldr	r0, [r4, #0]
 801572a:	1821      	adds	r1, r4, r0
 801572c:	428a      	cmp	r2, r1
 801572e:	bf04      	itt	eq
 8015730:	6811      	ldreq	r1, [r2, #0]
 8015732:	6852      	ldreq	r2, [r2, #4]
 8015734:	6062      	str	r2, [r4, #4]
 8015736:	bf04      	itt	eq
 8015738:	1809      	addeq	r1, r1, r0
 801573a:	6021      	streq	r1, [r4, #0]
 801573c:	605c      	str	r4, [r3, #4]
 801573e:	e7c7      	b.n	80156d0 <_free_r+0x24>
 8015740:	bd38      	pop	{r3, r4, r5, pc}
 8015742:	bf00      	nop
 8015744:	20019708 	.word	0x20019708

08015748 <_malloc_r>:
 8015748:	b570      	push	{r4, r5, r6, lr}
 801574a:	1ccd      	adds	r5, r1, #3
 801574c:	f025 0503 	bic.w	r5, r5, #3
 8015750:	3508      	adds	r5, #8
 8015752:	2d0c      	cmp	r5, #12
 8015754:	bf38      	it	cc
 8015756:	250c      	movcc	r5, #12
 8015758:	2d00      	cmp	r5, #0
 801575a:	4606      	mov	r6, r0
 801575c:	db01      	blt.n	8015762 <_malloc_r+0x1a>
 801575e:	42a9      	cmp	r1, r5
 8015760:	d903      	bls.n	801576a <_malloc_r+0x22>
 8015762:	230c      	movs	r3, #12
 8015764:	6033      	str	r3, [r6, #0]
 8015766:	2000      	movs	r0, #0
 8015768:	bd70      	pop	{r4, r5, r6, pc}
 801576a:	f000 f87f 	bl	801586c <__malloc_lock>
 801576e:	4a21      	ldr	r2, [pc, #132]	; (80157f4 <_malloc_r+0xac>)
 8015770:	6814      	ldr	r4, [r2, #0]
 8015772:	4621      	mov	r1, r4
 8015774:	b991      	cbnz	r1, 801579c <_malloc_r+0x54>
 8015776:	4c20      	ldr	r4, [pc, #128]	; (80157f8 <_malloc_r+0xb0>)
 8015778:	6823      	ldr	r3, [r4, #0]
 801577a:	b91b      	cbnz	r3, 8015784 <_malloc_r+0x3c>
 801577c:	4630      	mov	r0, r6
 801577e:	f000 f83d 	bl	80157fc <_sbrk_r>
 8015782:	6020      	str	r0, [r4, #0]
 8015784:	4629      	mov	r1, r5
 8015786:	4630      	mov	r0, r6
 8015788:	f000 f838 	bl	80157fc <_sbrk_r>
 801578c:	1c43      	adds	r3, r0, #1
 801578e:	d124      	bne.n	80157da <_malloc_r+0x92>
 8015790:	230c      	movs	r3, #12
 8015792:	6033      	str	r3, [r6, #0]
 8015794:	4630      	mov	r0, r6
 8015796:	f000 f86a 	bl	801586e <__malloc_unlock>
 801579a:	e7e4      	b.n	8015766 <_malloc_r+0x1e>
 801579c:	680b      	ldr	r3, [r1, #0]
 801579e:	1b5b      	subs	r3, r3, r5
 80157a0:	d418      	bmi.n	80157d4 <_malloc_r+0x8c>
 80157a2:	2b0b      	cmp	r3, #11
 80157a4:	d90f      	bls.n	80157c6 <_malloc_r+0x7e>
 80157a6:	600b      	str	r3, [r1, #0]
 80157a8:	50cd      	str	r5, [r1, r3]
 80157aa:	18cc      	adds	r4, r1, r3
 80157ac:	4630      	mov	r0, r6
 80157ae:	f000 f85e 	bl	801586e <__malloc_unlock>
 80157b2:	f104 000b 	add.w	r0, r4, #11
 80157b6:	1d23      	adds	r3, r4, #4
 80157b8:	f020 0007 	bic.w	r0, r0, #7
 80157bc:	1ac3      	subs	r3, r0, r3
 80157be:	d0d3      	beq.n	8015768 <_malloc_r+0x20>
 80157c0:	425a      	negs	r2, r3
 80157c2:	50e2      	str	r2, [r4, r3]
 80157c4:	e7d0      	b.n	8015768 <_malloc_r+0x20>
 80157c6:	428c      	cmp	r4, r1
 80157c8:	684b      	ldr	r3, [r1, #4]
 80157ca:	bf16      	itet	ne
 80157cc:	6063      	strne	r3, [r4, #4]
 80157ce:	6013      	streq	r3, [r2, #0]
 80157d0:	460c      	movne	r4, r1
 80157d2:	e7eb      	b.n	80157ac <_malloc_r+0x64>
 80157d4:	460c      	mov	r4, r1
 80157d6:	6849      	ldr	r1, [r1, #4]
 80157d8:	e7cc      	b.n	8015774 <_malloc_r+0x2c>
 80157da:	1cc4      	adds	r4, r0, #3
 80157dc:	f024 0403 	bic.w	r4, r4, #3
 80157e0:	42a0      	cmp	r0, r4
 80157e2:	d005      	beq.n	80157f0 <_malloc_r+0xa8>
 80157e4:	1a21      	subs	r1, r4, r0
 80157e6:	4630      	mov	r0, r6
 80157e8:	f000 f808 	bl	80157fc <_sbrk_r>
 80157ec:	3001      	adds	r0, #1
 80157ee:	d0cf      	beq.n	8015790 <_malloc_r+0x48>
 80157f0:	6025      	str	r5, [r4, #0]
 80157f2:	e7db      	b.n	80157ac <_malloc_r+0x64>
 80157f4:	20019708 	.word	0x20019708
 80157f8:	2001970c 	.word	0x2001970c

080157fc <_sbrk_r>:
 80157fc:	b538      	push	{r3, r4, r5, lr}
 80157fe:	4c06      	ldr	r4, [pc, #24]	; (8015818 <_sbrk_r+0x1c>)
 8015800:	2300      	movs	r3, #0
 8015802:	4605      	mov	r5, r0
 8015804:	4608      	mov	r0, r1
 8015806:	6023      	str	r3, [r4, #0]
 8015808:	f7f1 ff90 	bl	800772c <_sbrk>
 801580c:	1c43      	adds	r3, r0, #1
 801580e:	d102      	bne.n	8015816 <_sbrk_r+0x1a>
 8015810:	6823      	ldr	r3, [r4, #0]
 8015812:	b103      	cbz	r3, 8015816 <_sbrk_r+0x1a>
 8015814:	602b      	str	r3, [r5, #0]
 8015816:	bd38      	pop	{r3, r4, r5, pc}
 8015818:	2001b3c4 	.word	0x2001b3c4

0801581c <siprintf>:
 801581c:	b40e      	push	{r1, r2, r3}
 801581e:	b500      	push	{lr}
 8015820:	b09c      	sub	sp, #112	; 0x70
 8015822:	ab1d      	add	r3, sp, #116	; 0x74
 8015824:	9002      	str	r0, [sp, #8]
 8015826:	9006      	str	r0, [sp, #24]
 8015828:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801582c:	4809      	ldr	r0, [pc, #36]	; (8015854 <siprintf+0x38>)
 801582e:	9107      	str	r1, [sp, #28]
 8015830:	9104      	str	r1, [sp, #16]
 8015832:	4909      	ldr	r1, [pc, #36]	; (8015858 <siprintf+0x3c>)
 8015834:	f853 2b04 	ldr.w	r2, [r3], #4
 8015838:	9105      	str	r1, [sp, #20]
 801583a:	6800      	ldr	r0, [r0, #0]
 801583c:	9301      	str	r3, [sp, #4]
 801583e:	a902      	add	r1, sp, #8
 8015840:	f000 f870 	bl	8015924 <_svfiprintf_r>
 8015844:	9b02      	ldr	r3, [sp, #8]
 8015846:	2200      	movs	r2, #0
 8015848:	701a      	strb	r2, [r3, #0]
 801584a:	b01c      	add	sp, #112	; 0x70
 801584c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015850:	b003      	add	sp, #12
 8015852:	4770      	bx	lr
 8015854:	200002f8 	.word	0x200002f8
 8015858:	ffff0208 	.word	0xffff0208

0801585c <strcpy>:
 801585c:	4603      	mov	r3, r0
 801585e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015862:	f803 2b01 	strb.w	r2, [r3], #1
 8015866:	2a00      	cmp	r2, #0
 8015868:	d1f9      	bne.n	801585e <strcpy+0x2>
 801586a:	4770      	bx	lr

0801586c <__malloc_lock>:
 801586c:	4770      	bx	lr

0801586e <__malloc_unlock>:
 801586e:	4770      	bx	lr

08015870 <__ssputs_r>:
 8015870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015874:	688e      	ldr	r6, [r1, #8]
 8015876:	429e      	cmp	r6, r3
 8015878:	4682      	mov	sl, r0
 801587a:	460c      	mov	r4, r1
 801587c:	4690      	mov	r8, r2
 801587e:	4699      	mov	r9, r3
 8015880:	d837      	bhi.n	80158f2 <__ssputs_r+0x82>
 8015882:	898a      	ldrh	r2, [r1, #12]
 8015884:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015888:	d031      	beq.n	80158ee <__ssputs_r+0x7e>
 801588a:	6825      	ldr	r5, [r4, #0]
 801588c:	6909      	ldr	r1, [r1, #16]
 801588e:	1a6f      	subs	r7, r5, r1
 8015890:	6965      	ldr	r5, [r4, #20]
 8015892:	2302      	movs	r3, #2
 8015894:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015898:	fb95 f5f3 	sdiv	r5, r5, r3
 801589c:	f109 0301 	add.w	r3, r9, #1
 80158a0:	443b      	add	r3, r7
 80158a2:	429d      	cmp	r5, r3
 80158a4:	bf38      	it	cc
 80158a6:	461d      	movcc	r5, r3
 80158a8:	0553      	lsls	r3, r2, #21
 80158aa:	d530      	bpl.n	801590e <__ssputs_r+0x9e>
 80158ac:	4629      	mov	r1, r5
 80158ae:	f7ff ff4b 	bl	8015748 <_malloc_r>
 80158b2:	4606      	mov	r6, r0
 80158b4:	b950      	cbnz	r0, 80158cc <__ssputs_r+0x5c>
 80158b6:	230c      	movs	r3, #12
 80158b8:	f8ca 3000 	str.w	r3, [sl]
 80158bc:	89a3      	ldrh	r3, [r4, #12]
 80158be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80158c2:	81a3      	strh	r3, [r4, #12]
 80158c4:	f04f 30ff 	mov.w	r0, #4294967295
 80158c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158cc:	463a      	mov	r2, r7
 80158ce:	6921      	ldr	r1, [r4, #16]
 80158d0:	f7ff febf 	bl	8015652 <memcpy>
 80158d4:	89a3      	ldrh	r3, [r4, #12]
 80158d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80158da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80158de:	81a3      	strh	r3, [r4, #12]
 80158e0:	6126      	str	r6, [r4, #16]
 80158e2:	6165      	str	r5, [r4, #20]
 80158e4:	443e      	add	r6, r7
 80158e6:	1bed      	subs	r5, r5, r7
 80158e8:	6026      	str	r6, [r4, #0]
 80158ea:	60a5      	str	r5, [r4, #8]
 80158ec:	464e      	mov	r6, r9
 80158ee:	454e      	cmp	r6, r9
 80158f0:	d900      	bls.n	80158f4 <__ssputs_r+0x84>
 80158f2:	464e      	mov	r6, r9
 80158f4:	4632      	mov	r2, r6
 80158f6:	4641      	mov	r1, r8
 80158f8:	6820      	ldr	r0, [r4, #0]
 80158fa:	f7ff feb5 	bl	8015668 <memmove>
 80158fe:	68a3      	ldr	r3, [r4, #8]
 8015900:	1b9b      	subs	r3, r3, r6
 8015902:	60a3      	str	r3, [r4, #8]
 8015904:	6823      	ldr	r3, [r4, #0]
 8015906:	441e      	add	r6, r3
 8015908:	6026      	str	r6, [r4, #0]
 801590a:	2000      	movs	r0, #0
 801590c:	e7dc      	b.n	80158c8 <__ssputs_r+0x58>
 801590e:	462a      	mov	r2, r5
 8015910:	f000 fa88 	bl	8015e24 <_realloc_r>
 8015914:	4606      	mov	r6, r0
 8015916:	2800      	cmp	r0, #0
 8015918:	d1e2      	bne.n	80158e0 <__ssputs_r+0x70>
 801591a:	6921      	ldr	r1, [r4, #16]
 801591c:	4650      	mov	r0, sl
 801591e:	f7ff fec5 	bl	80156ac <_free_r>
 8015922:	e7c8      	b.n	80158b6 <__ssputs_r+0x46>

08015924 <_svfiprintf_r>:
 8015924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015928:	461d      	mov	r5, r3
 801592a:	898b      	ldrh	r3, [r1, #12]
 801592c:	061f      	lsls	r7, r3, #24
 801592e:	b09d      	sub	sp, #116	; 0x74
 8015930:	4680      	mov	r8, r0
 8015932:	460c      	mov	r4, r1
 8015934:	4616      	mov	r6, r2
 8015936:	d50f      	bpl.n	8015958 <_svfiprintf_r+0x34>
 8015938:	690b      	ldr	r3, [r1, #16]
 801593a:	b96b      	cbnz	r3, 8015958 <_svfiprintf_r+0x34>
 801593c:	2140      	movs	r1, #64	; 0x40
 801593e:	f7ff ff03 	bl	8015748 <_malloc_r>
 8015942:	6020      	str	r0, [r4, #0]
 8015944:	6120      	str	r0, [r4, #16]
 8015946:	b928      	cbnz	r0, 8015954 <_svfiprintf_r+0x30>
 8015948:	230c      	movs	r3, #12
 801594a:	f8c8 3000 	str.w	r3, [r8]
 801594e:	f04f 30ff 	mov.w	r0, #4294967295
 8015952:	e0c8      	b.n	8015ae6 <_svfiprintf_r+0x1c2>
 8015954:	2340      	movs	r3, #64	; 0x40
 8015956:	6163      	str	r3, [r4, #20]
 8015958:	2300      	movs	r3, #0
 801595a:	9309      	str	r3, [sp, #36]	; 0x24
 801595c:	2320      	movs	r3, #32
 801595e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015962:	2330      	movs	r3, #48	; 0x30
 8015964:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015968:	9503      	str	r5, [sp, #12]
 801596a:	f04f 0b01 	mov.w	fp, #1
 801596e:	4637      	mov	r7, r6
 8015970:	463d      	mov	r5, r7
 8015972:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015976:	b10b      	cbz	r3, 801597c <_svfiprintf_r+0x58>
 8015978:	2b25      	cmp	r3, #37	; 0x25
 801597a:	d13e      	bne.n	80159fa <_svfiprintf_r+0xd6>
 801597c:	ebb7 0a06 	subs.w	sl, r7, r6
 8015980:	d00b      	beq.n	801599a <_svfiprintf_r+0x76>
 8015982:	4653      	mov	r3, sl
 8015984:	4632      	mov	r2, r6
 8015986:	4621      	mov	r1, r4
 8015988:	4640      	mov	r0, r8
 801598a:	f7ff ff71 	bl	8015870 <__ssputs_r>
 801598e:	3001      	adds	r0, #1
 8015990:	f000 80a4 	beq.w	8015adc <_svfiprintf_r+0x1b8>
 8015994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015996:	4453      	add	r3, sl
 8015998:	9309      	str	r3, [sp, #36]	; 0x24
 801599a:	783b      	ldrb	r3, [r7, #0]
 801599c:	2b00      	cmp	r3, #0
 801599e:	f000 809d 	beq.w	8015adc <_svfiprintf_r+0x1b8>
 80159a2:	2300      	movs	r3, #0
 80159a4:	f04f 32ff 	mov.w	r2, #4294967295
 80159a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80159ac:	9304      	str	r3, [sp, #16]
 80159ae:	9307      	str	r3, [sp, #28]
 80159b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80159b4:	931a      	str	r3, [sp, #104]	; 0x68
 80159b6:	462f      	mov	r7, r5
 80159b8:	2205      	movs	r2, #5
 80159ba:	f817 1b01 	ldrb.w	r1, [r7], #1
 80159be:	4850      	ldr	r0, [pc, #320]	; (8015b00 <_svfiprintf_r+0x1dc>)
 80159c0:	f7ea fc2e 	bl	8000220 <memchr>
 80159c4:	9b04      	ldr	r3, [sp, #16]
 80159c6:	b9d0      	cbnz	r0, 80159fe <_svfiprintf_r+0xda>
 80159c8:	06d9      	lsls	r1, r3, #27
 80159ca:	bf44      	itt	mi
 80159cc:	2220      	movmi	r2, #32
 80159ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80159d2:	071a      	lsls	r2, r3, #28
 80159d4:	bf44      	itt	mi
 80159d6:	222b      	movmi	r2, #43	; 0x2b
 80159d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80159dc:	782a      	ldrb	r2, [r5, #0]
 80159de:	2a2a      	cmp	r2, #42	; 0x2a
 80159e0:	d015      	beq.n	8015a0e <_svfiprintf_r+0xea>
 80159e2:	9a07      	ldr	r2, [sp, #28]
 80159e4:	462f      	mov	r7, r5
 80159e6:	2000      	movs	r0, #0
 80159e8:	250a      	movs	r5, #10
 80159ea:	4639      	mov	r1, r7
 80159ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80159f0:	3b30      	subs	r3, #48	; 0x30
 80159f2:	2b09      	cmp	r3, #9
 80159f4:	d94d      	bls.n	8015a92 <_svfiprintf_r+0x16e>
 80159f6:	b1b8      	cbz	r0, 8015a28 <_svfiprintf_r+0x104>
 80159f8:	e00f      	b.n	8015a1a <_svfiprintf_r+0xf6>
 80159fa:	462f      	mov	r7, r5
 80159fc:	e7b8      	b.n	8015970 <_svfiprintf_r+0x4c>
 80159fe:	4a40      	ldr	r2, [pc, #256]	; (8015b00 <_svfiprintf_r+0x1dc>)
 8015a00:	1a80      	subs	r0, r0, r2
 8015a02:	fa0b f000 	lsl.w	r0, fp, r0
 8015a06:	4318      	orrs	r0, r3
 8015a08:	9004      	str	r0, [sp, #16]
 8015a0a:	463d      	mov	r5, r7
 8015a0c:	e7d3      	b.n	80159b6 <_svfiprintf_r+0x92>
 8015a0e:	9a03      	ldr	r2, [sp, #12]
 8015a10:	1d11      	adds	r1, r2, #4
 8015a12:	6812      	ldr	r2, [r2, #0]
 8015a14:	9103      	str	r1, [sp, #12]
 8015a16:	2a00      	cmp	r2, #0
 8015a18:	db01      	blt.n	8015a1e <_svfiprintf_r+0xfa>
 8015a1a:	9207      	str	r2, [sp, #28]
 8015a1c:	e004      	b.n	8015a28 <_svfiprintf_r+0x104>
 8015a1e:	4252      	negs	r2, r2
 8015a20:	f043 0302 	orr.w	r3, r3, #2
 8015a24:	9207      	str	r2, [sp, #28]
 8015a26:	9304      	str	r3, [sp, #16]
 8015a28:	783b      	ldrb	r3, [r7, #0]
 8015a2a:	2b2e      	cmp	r3, #46	; 0x2e
 8015a2c:	d10c      	bne.n	8015a48 <_svfiprintf_r+0x124>
 8015a2e:	787b      	ldrb	r3, [r7, #1]
 8015a30:	2b2a      	cmp	r3, #42	; 0x2a
 8015a32:	d133      	bne.n	8015a9c <_svfiprintf_r+0x178>
 8015a34:	9b03      	ldr	r3, [sp, #12]
 8015a36:	1d1a      	adds	r2, r3, #4
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	9203      	str	r2, [sp, #12]
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	bfb8      	it	lt
 8015a40:	f04f 33ff 	movlt.w	r3, #4294967295
 8015a44:	3702      	adds	r7, #2
 8015a46:	9305      	str	r3, [sp, #20]
 8015a48:	4d2e      	ldr	r5, [pc, #184]	; (8015b04 <_svfiprintf_r+0x1e0>)
 8015a4a:	7839      	ldrb	r1, [r7, #0]
 8015a4c:	2203      	movs	r2, #3
 8015a4e:	4628      	mov	r0, r5
 8015a50:	f7ea fbe6 	bl	8000220 <memchr>
 8015a54:	b138      	cbz	r0, 8015a66 <_svfiprintf_r+0x142>
 8015a56:	2340      	movs	r3, #64	; 0x40
 8015a58:	1b40      	subs	r0, r0, r5
 8015a5a:	fa03 f000 	lsl.w	r0, r3, r0
 8015a5e:	9b04      	ldr	r3, [sp, #16]
 8015a60:	4303      	orrs	r3, r0
 8015a62:	3701      	adds	r7, #1
 8015a64:	9304      	str	r3, [sp, #16]
 8015a66:	7839      	ldrb	r1, [r7, #0]
 8015a68:	4827      	ldr	r0, [pc, #156]	; (8015b08 <_svfiprintf_r+0x1e4>)
 8015a6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015a6e:	2206      	movs	r2, #6
 8015a70:	1c7e      	adds	r6, r7, #1
 8015a72:	f7ea fbd5 	bl	8000220 <memchr>
 8015a76:	2800      	cmp	r0, #0
 8015a78:	d038      	beq.n	8015aec <_svfiprintf_r+0x1c8>
 8015a7a:	4b24      	ldr	r3, [pc, #144]	; (8015b0c <_svfiprintf_r+0x1e8>)
 8015a7c:	bb13      	cbnz	r3, 8015ac4 <_svfiprintf_r+0x1a0>
 8015a7e:	9b03      	ldr	r3, [sp, #12]
 8015a80:	3307      	adds	r3, #7
 8015a82:	f023 0307 	bic.w	r3, r3, #7
 8015a86:	3308      	adds	r3, #8
 8015a88:	9303      	str	r3, [sp, #12]
 8015a8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a8c:	444b      	add	r3, r9
 8015a8e:	9309      	str	r3, [sp, #36]	; 0x24
 8015a90:	e76d      	b.n	801596e <_svfiprintf_r+0x4a>
 8015a92:	fb05 3202 	mla	r2, r5, r2, r3
 8015a96:	2001      	movs	r0, #1
 8015a98:	460f      	mov	r7, r1
 8015a9a:	e7a6      	b.n	80159ea <_svfiprintf_r+0xc6>
 8015a9c:	2300      	movs	r3, #0
 8015a9e:	3701      	adds	r7, #1
 8015aa0:	9305      	str	r3, [sp, #20]
 8015aa2:	4619      	mov	r1, r3
 8015aa4:	250a      	movs	r5, #10
 8015aa6:	4638      	mov	r0, r7
 8015aa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015aac:	3a30      	subs	r2, #48	; 0x30
 8015aae:	2a09      	cmp	r2, #9
 8015ab0:	d903      	bls.n	8015aba <_svfiprintf_r+0x196>
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d0c8      	beq.n	8015a48 <_svfiprintf_r+0x124>
 8015ab6:	9105      	str	r1, [sp, #20]
 8015ab8:	e7c6      	b.n	8015a48 <_svfiprintf_r+0x124>
 8015aba:	fb05 2101 	mla	r1, r5, r1, r2
 8015abe:	2301      	movs	r3, #1
 8015ac0:	4607      	mov	r7, r0
 8015ac2:	e7f0      	b.n	8015aa6 <_svfiprintf_r+0x182>
 8015ac4:	ab03      	add	r3, sp, #12
 8015ac6:	9300      	str	r3, [sp, #0]
 8015ac8:	4622      	mov	r2, r4
 8015aca:	4b11      	ldr	r3, [pc, #68]	; (8015b10 <_svfiprintf_r+0x1ec>)
 8015acc:	a904      	add	r1, sp, #16
 8015ace:	4640      	mov	r0, r8
 8015ad0:	f3af 8000 	nop.w
 8015ad4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8015ad8:	4681      	mov	r9, r0
 8015ada:	d1d6      	bne.n	8015a8a <_svfiprintf_r+0x166>
 8015adc:	89a3      	ldrh	r3, [r4, #12]
 8015ade:	065b      	lsls	r3, r3, #25
 8015ae0:	f53f af35 	bmi.w	801594e <_svfiprintf_r+0x2a>
 8015ae4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015ae6:	b01d      	add	sp, #116	; 0x74
 8015ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015aec:	ab03      	add	r3, sp, #12
 8015aee:	9300      	str	r3, [sp, #0]
 8015af0:	4622      	mov	r2, r4
 8015af2:	4b07      	ldr	r3, [pc, #28]	; (8015b10 <_svfiprintf_r+0x1ec>)
 8015af4:	a904      	add	r1, sp, #16
 8015af6:	4640      	mov	r0, r8
 8015af8:	f000 f882 	bl	8015c00 <_printf_i>
 8015afc:	e7ea      	b.n	8015ad4 <_svfiprintf_r+0x1b0>
 8015afe:	bf00      	nop
 8015b00:	0801d564 	.word	0x0801d564
 8015b04:	0801d56a 	.word	0x0801d56a
 8015b08:	0801d56e 	.word	0x0801d56e
 8015b0c:	00000000 	.word	0x00000000
 8015b10:	08015871 	.word	0x08015871

08015b14 <_printf_common>:
 8015b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015b18:	4691      	mov	r9, r2
 8015b1a:	461f      	mov	r7, r3
 8015b1c:	688a      	ldr	r2, [r1, #8]
 8015b1e:	690b      	ldr	r3, [r1, #16]
 8015b20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015b24:	4293      	cmp	r3, r2
 8015b26:	bfb8      	it	lt
 8015b28:	4613      	movlt	r3, r2
 8015b2a:	f8c9 3000 	str.w	r3, [r9]
 8015b2e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015b32:	4606      	mov	r6, r0
 8015b34:	460c      	mov	r4, r1
 8015b36:	b112      	cbz	r2, 8015b3e <_printf_common+0x2a>
 8015b38:	3301      	adds	r3, #1
 8015b3a:	f8c9 3000 	str.w	r3, [r9]
 8015b3e:	6823      	ldr	r3, [r4, #0]
 8015b40:	0699      	lsls	r1, r3, #26
 8015b42:	bf42      	ittt	mi
 8015b44:	f8d9 3000 	ldrmi.w	r3, [r9]
 8015b48:	3302      	addmi	r3, #2
 8015b4a:	f8c9 3000 	strmi.w	r3, [r9]
 8015b4e:	6825      	ldr	r5, [r4, #0]
 8015b50:	f015 0506 	ands.w	r5, r5, #6
 8015b54:	d107      	bne.n	8015b66 <_printf_common+0x52>
 8015b56:	f104 0a19 	add.w	sl, r4, #25
 8015b5a:	68e3      	ldr	r3, [r4, #12]
 8015b5c:	f8d9 2000 	ldr.w	r2, [r9]
 8015b60:	1a9b      	subs	r3, r3, r2
 8015b62:	42ab      	cmp	r3, r5
 8015b64:	dc28      	bgt.n	8015bb8 <_printf_common+0xa4>
 8015b66:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8015b6a:	6822      	ldr	r2, [r4, #0]
 8015b6c:	3300      	adds	r3, #0
 8015b6e:	bf18      	it	ne
 8015b70:	2301      	movne	r3, #1
 8015b72:	0692      	lsls	r2, r2, #26
 8015b74:	d42d      	bmi.n	8015bd2 <_printf_common+0xbe>
 8015b76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015b7a:	4639      	mov	r1, r7
 8015b7c:	4630      	mov	r0, r6
 8015b7e:	47c0      	blx	r8
 8015b80:	3001      	adds	r0, #1
 8015b82:	d020      	beq.n	8015bc6 <_printf_common+0xb2>
 8015b84:	6823      	ldr	r3, [r4, #0]
 8015b86:	68e5      	ldr	r5, [r4, #12]
 8015b88:	f8d9 2000 	ldr.w	r2, [r9]
 8015b8c:	f003 0306 	and.w	r3, r3, #6
 8015b90:	2b04      	cmp	r3, #4
 8015b92:	bf08      	it	eq
 8015b94:	1aad      	subeq	r5, r5, r2
 8015b96:	68a3      	ldr	r3, [r4, #8]
 8015b98:	6922      	ldr	r2, [r4, #16]
 8015b9a:	bf0c      	ite	eq
 8015b9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015ba0:	2500      	movne	r5, #0
 8015ba2:	4293      	cmp	r3, r2
 8015ba4:	bfc4      	itt	gt
 8015ba6:	1a9b      	subgt	r3, r3, r2
 8015ba8:	18ed      	addgt	r5, r5, r3
 8015baa:	f04f 0900 	mov.w	r9, #0
 8015bae:	341a      	adds	r4, #26
 8015bb0:	454d      	cmp	r5, r9
 8015bb2:	d11a      	bne.n	8015bea <_printf_common+0xd6>
 8015bb4:	2000      	movs	r0, #0
 8015bb6:	e008      	b.n	8015bca <_printf_common+0xb6>
 8015bb8:	2301      	movs	r3, #1
 8015bba:	4652      	mov	r2, sl
 8015bbc:	4639      	mov	r1, r7
 8015bbe:	4630      	mov	r0, r6
 8015bc0:	47c0      	blx	r8
 8015bc2:	3001      	adds	r0, #1
 8015bc4:	d103      	bne.n	8015bce <_printf_common+0xba>
 8015bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8015bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015bce:	3501      	adds	r5, #1
 8015bd0:	e7c3      	b.n	8015b5a <_printf_common+0x46>
 8015bd2:	18e1      	adds	r1, r4, r3
 8015bd4:	1c5a      	adds	r2, r3, #1
 8015bd6:	2030      	movs	r0, #48	; 0x30
 8015bd8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015bdc:	4422      	add	r2, r4
 8015bde:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015be2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015be6:	3302      	adds	r3, #2
 8015be8:	e7c5      	b.n	8015b76 <_printf_common+0x62>
 8015bea:	2301      	movs	r3, #1
 8015bec:	4622      	mov	r2, r4
 8015bee:	4639      	mov	r1, r7
 8015bf0:	4630      	mov	r0, r6
 8015bf2:	47c0      	blx	r8
 8015bf4:	3001      	adds	r0, #1
 8015bf6:	d0e6      	beq.n	8015bc6 <_printf_common+0xb2>
 8015bf8:	f109 0901 	add.w	r9, r9, #1
 8015bfc:	e7d8      	b.n	8015bb0 <_printf_common+0x9c>
	...

08015c00 <_printf_i>:
 8015c00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015c04:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8015c08:	460c      	mov	r4, r1
 8015c0a:	7e09      	ldrb	r1, [r1, #24]
 8015c0c:	b085      	sub	sp, #20
 8015c0e:	296e      	cmp	r1, #110	; 0x6e
 8015c10:	4617      	mov	r7, r2
 8015c12:	4606      	mov	r6, r0
 8015c14:	4698      	mov	r8, r3
 8015c16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015c18:	f000 80b3 	beq.w	8015d82 <_printf_i+0x182>
 8015c1c:	d822      	bhi.n	8015c64 <_printf_i+0x64>
 8015c1e:	2963      	cmp	r1, #99	; 0x63
 8015c20:	d036      	beq.n	8015c90 <_printf_i+0x90>
 8015c22:	d80a      	bhi.n	8015c3a <_printf_i+0x3a>
 8015c24:	2900      	cmp	r1, #0
 8015c26:	f000 80b9 	beq.w	8015d9c <_printf_i+0x19c>
 8015c2a:	2958      	cmp	r1, #88	; 0x58
 8015c2c:	f000 8083 	beq.w	8015d36 <_printf_i+0x136>
 8015c30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015c34:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8015c38:	e032      	b.n	8015ca0 <_printf_i+0xa0>
 8015c3a:	2964      	cmp	r1, #100	; 0x64
 8015c3c:	d001      	beq.n	8015c42 <_printf_i+0x42>
 8015c3e:	2969      	cmp	r1, #105	; 0x69
 8015c40:	d1f6      	bne.n	8015c30 <_printf_i+0x30>
 8015c42:	6820      	ldr	r0, [r4, #0]
 8015c44:	6813      	ldr	r3, [r2, #0]
 8015c46:	0605      	lsls	r5, r0, #24
 8015c48:	f103 0104 	add.w	r1, r3, #4
 8015c4c:	d52a      	bpl.n	8015ca4 <_printf_i+0xa4>
 8015c4e:	681b      	ldr	r3, [r3, #0]
 8015c50:	6011      	str	r1, [r2, #0]
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	da03      	bge.n	8015c5e <_printf_i+0x5e>
 8015c56:	222d      	movs	r2, #45	; 0x2d
 8015c58:	425b      	negs	r3, r3
 8015c5a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8015c5e:	486f      	ldr	r0, [pc, #444]	; (8015e1c <_printf_i+0x21c>)
 8015c60:	220a      	movs	r2, #10
 8015c62:	e039      	b.n	8015cd8 <_printf_i+0xd8>
 8015c64:	2973      	cmp	r1, #115	; 0x73
 8015c66:	f000 809d 	beq.w	8015da4 <_printf_i+0x1a4>
 8015c6a:	d808      	bhi.n	8015c7e <_printf_i+0x7e>
 8015c6c:	296f      	cmp	r1, #111	; 0x6f
 8015c6e:	d020      	beq.n	8015cb2 <_printf_i+0xb2>
 8015c70:	2970      	cmp	r1, #112	; 0x70
 8015c72:	d1dd      	bne.n	8015c30 <_printf_i+0x30>
 8015c74:	6823      	ldr	r3, [r4, #0]
 8015c76:	f043 0320 	orr.w	r3, r3, #32
 8015c7a:	6023      	str	r3, [r4, #0]
 8015c7c:	e003      	b.n	8015c86 <_printf_i+0x86>
 8015c7e:	2975      	cmp	r1, #117	; 0x75
 8015c80:	d017      	beq.n	8015cb2 <_printf_i+0xb2>
 8015c82:	2978      	cmp	r1, #120	; 0x78
 8015c84:	d1d4      	bne.n	8015c30 <_printf_i+0x30>
 8015c86:	2378      	movs	r3, #120	; 0x78
 8015c88:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015c8c:	4864      	ldr	r0, [pc, #400]	; (8015e20 <_printf_i+0x220>)
 8015c8e:	e055      	b.n	8015d3c <_printf_i+0x13c>
 8015c90:	6813      	ldr	r3, [r2, #0]
 8015c92:	1d19      	adds	r1, r3, #4
 8015c94:	681b      	ldr	r3, [r3, #0]
 8015c96:	6011      	str	r1, [r2, #0]
 8015c98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015c9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015ca0:	2301      	movs	r3, #1
 8015ca2:	e08c      	b.n	8015dbe <_printf_i+0x1be>
 8015ca4:	681b      	ldr	r3, [r3, #0]
 8015ca6:	6011      	str	r1, [r2, #0]
 8015ca8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015cac:	bf18      	it	ne
 8015cae:	b21b      	sxthne	r3, r3
 8015cb0:	e7cf      	b.n	8015c52 <_printf_i+0x52>
 8015cb2:	6813      	ldr	r3, [r2, #0]
 8015cb4:	6825      	ldr	r5, [r4, #0]
 8015cb6:	1d18      	adds	r0, r3, #4
 8015cb8:	6010      	str	r0, [r2, #0]
 8015cba:	0628      	lsls	r0, r5, #24
 8015cbc:	d501      	bpl.n	8015cc2 <_printf_i+0xc2>
 8015cbe:	681b      	ldr	r3, [r3, #0]
 8015cc0:	e002      	b.n	8015cc8 <_printf_i+0xc8>
 8015cc2:	0668      	lsls	r0, r5, #25
 8015cc4:	d5fb      	bpl.n	8015cbe <_printf_i+0xbe>
 8015cc6:	881b      	ldrh	r3, [r3, #0]
 8015cc8:	4854      	ldr	r0, [pc, #336]	; (8015e1c <_printf_i+0x21c>)
 8015cca:	296f      	cmp	r1, #111	; 0x6f
 8015ccc:	bf14      	ite	ne
 8015cce:	220a      	movne	r2, #10
 8015cd0:	2208      	moveq	r2, #8
 8015cd2:	2100      	movs	r1, #0
 8015cd4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015cd8:	6865      	ldr	r5, [r4, #4]
 8015cda:	60a5      	str	r5, [r4, #8]
 8015cdc:	2d00      	cmp	r5, #0
 8015cde:	f2c0 8095 	blt.w	8015e0c <_printf_i+0x20c>
 8015ce2:	6821      	ldr	r1, [r4, #0]
 8015ce4:	f021 0104 	bic.w	r1, r1, #4
 8015ce8:	6021      	str	r1, [r4, #0]
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d13d      	bne.n	8015d6a <_printf_i+0x16a>
 8015cee:	2d00      	cmp	r5, #0
 8015cf0:	f040 808e 	bne.w	8015e10 <_printf_i+0x210>
 8015cf4:	4665      	mov	r5, ip
 8015cf6:	2a08      	cmp	r2, #8
 8015cf8:	d10b      	bne.n	8015d12 <_printf_i+0x112>
 8015cfa:	6823      	ldr	r3, [r4, #0]
 8015cfc:	07db      	lsls	r3, r3, #31
 8015cfe:	d508      	bpl.n	8015d12 <_printf_i+0x112>
 8015d00:	6923      	ldr	r3, [r4, #16]
 8015d02:	6862      	ldr	r2, [r4, #4]
 8015d04:	429a      	cmp	r2, r3
 8015d06:	bfde      	ittt	le
 8015d08:	2330      	movle	r3, #48	; 0x30
 8015d0a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015d0e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015d12:	ebac 0305 	sub.w	r3, ip, r5
 8015d16:	6123      	str	r3, [r4, #16]
 8015d18:	f8cd 8000 	str.w	r8, [sp]
 8015d1c:	463b      	mov	r3, r7
 8015d1e:	aa03      	add	r2, sp, #12
 8015d20:	4621      	mov	r1, r4
 8015d22:	4630      	mov	r0, r6
 8015d24:	f7ff fef6 	bl	8015b14 <_printf_common>
 8015d28:	3001      	adds	r0, #1
 8015d2a:	d14d      	bne.n	8015dc8 <_printf_i+0x1c8>
 8015d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8015d30:	b005      	add	sp, #20
 8015d32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d36:	4839      	ldr	r0, [pc, #228]	; (8015e1c <_printf_i+0x21c>)
 8015d38:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8015d3c:	6813      	ldr	r3, [r2, #0]
 8015d3e:	6821      	ldr	r1, [r4, #0]
 8015d40:	1d1d      	adds	r5, r3, #4
 8015d42:	681b      	ldr	r3, [r3, #0]
 8015d44:	6015      	str	r5, [r2, #0]
 8015d46:	060a      	lsls	r2, r1, #24
 8015d48:	d50b      	bpl.n	8015d62 <_printf_i+0x162>
 8015d4a:	07ca      	lsls	r2, r1, #31
 8015d4c:	bf44      	itt	mi
 8015d4e:	f041 0120 	orrmi.w	r1, r1, #32
 8015d52:	6021      	strmi	r1, [r4, #0]
 8015d54:	b91b      	cbnz	r3, 8015d5e <_printf_i+0x15e>
 8015d56:	6822      	ldr	r2, [r4, #0]
 8015d58:	f022 0220 	bic.w	r2, r2, #32
 8015d5c:	6022      	str	r2, [r4, #0]
 8015d5e:	2210      	movs	r2, #16
 8015d60:	e7b7      	b.n	8015cd2 <_printf_i+0xd2>
 8015d62:	064d      	lsls	r5, r1, #25
 8015d64:	bf48      	it	mi
 8015d66:	b29b      	uxthmi	r3, r3
 8015d68:	e7ef      	b.n	8015d4a <_printf_i+0x14a>
 8015d6a:	4665      	mov	r5, ip
 8015d6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8015d70:	fb02 3311 	mls	r3, r2, r1, r3
 8015d74:	5cc3      	ldrb	r3, [r0, r3]
 8015d76:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8015d7a:	460b      	mov	r3, r1
 8015d7c:	2900      	cmp	r1, #0
 8015d7e:	d1f5      	bne.n	8015d6c <_printf_i+0x16c>
 8015d80:	e7b9      	b.n	8015cf6 <_printf_i+0xf6>
 8015d82:	6813      	ldr	r3, [r2, #0]
 8015d84:	6825      	ldr	r5, [r4, #0]
 8015d86:	6961      	ldr	r1, [r4, #20]
 8015d88:	1d18      	adds	r0, r3, #4
 8015d8a:	6010      	str	r0, [r2, #0]
 8015d8c:	0628      	lsls	r0, r5, #24
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	d501      	bpl.n	8015d96 <_printf_i+0x196>
 8015d92:	6019      	str	r1, [r3, #0]
 8015d94:	e002      	b.n	8015d9c <_printf_i+0x19c>
 8015d96:	066a      	lsls	r2, r5, #25
 8015d98:	d5fb      	bpl.n	8015d92 <_printf_i+0x192>
 8015d9a:	8019      	strh	r1, [r3, #0]
 8015d9c:	2300      	movs	r3, #0
 8015d9e:	6123      	str	r3, [r4, #16]
 8015da0:	4665      	mov	r5, ip
 8015da2:	e7b9      	b.n	8015d18 <_printf_i+0x118>
 8015da4:	6813      	ldr	r3, [r2, #0]
 8015da6:	1d19      	adds	r1, r3, #4
 8015da8:	6011      	str	r1, [r2, #0]
 8015daa:	681d      	ldr	r5, [r3, #0]
 8015dac:	6862      	ldr	r2, [r4, #4]
 8015dae:	2100      	movs	r1, #0
 8015db0:	4628      	mov	r0, r5
 8015db2:	f7ea fa35 	bl	8000220 <memchr>
 8015db6:	b108      	cbz	r0, 8015dbc <_printf_i+0x1bc>
 8015db8:	1b40      	subs	r0, r0, r5
 8015dba:	6060      	str	r0, [r4, #4]
 8015dbc:	6863      	ldr	r3, [r4, #4]
 8015dbe:	6123      	str	r3, [r4, #16]
 8015dc0:	2300      	movs	r3, #0
 8015dc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015dc6:	e7a7      	b.n	8015d18 <_printf_i+0x118>
 8015dc8:	6923      	ldr	r3, [r4, #16]
 8015dca:	462a      	mov	r2, r5
 8015dcc:	4639      	mov	r1, r7
 8015dce:	4630      	mov	r0, r6
 8015dd0:	47c0      	blx	r8
 8015dd2:	3001      	adds	r0, #1
 8015dd4:	d0aa      	beq.n	8015d2c <_printf_i+0x12c>
 8015dd6:	6823      	ldr	r3, [r4, #0]
 8015dd8:	079b      	lsls	r3, r3, #30
 8015dda:	d413      	bmi.n	8015e04 <_printf_i+0x204>
 8015ddc:	68e0      	ldr	r0, [r4, #12]
 8015dde:	9b03      	ldr	r3, [sp, #12]
 8015de0:	4298      	cmp	r0, r3
 8015de2:	bfb8      	it	lt
 8015de4:	4618      	movlt	r0, r3
 8015de6:	e7a3      	b.n	8015d30 <_printf_i+0x130>
 8015de8:	2301      	movs	r3, #1
 8015dea:	464a      	mov	r2, r9
 8015dec:	4639      	mov	r1, r7
 8015dee:	4630      	mov	r0, r6
 8015df0:	47c0      	blx	r8
 8015df2:	3001      	adds	r0, #1
 8015df4:	d09a      	beq.n	8015d2c <_printf_i+0x12c>
 8015df6:	3501      	adds	r5, #1
 8015df8:	68e3      	ldr	r3, [r4, #12]
 8015dfa:	9a03      	ldr	r2, [sp, #12]
 8015dfc:	1a9b      	subs	r3, r3, r2
 8015dfe:	42ab      	cmp	r3, r5
 8015e00:	dcf2      	bgt.n	8015de8 <_printf_i+0x1e8>
 8015e02:	e7eb      	b.n	8015ddc <_printf_i+0x1dc>
 8015e04:	2500      	movs	r5, #0
 8015e06:	f104 0919 	add.w	r9, r4, #25
 8015e0a:	e7f5      	b.n	8015df8 <_printf_i+0x1f8>
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d1ac      	bne.n	8015d6a <_printf_i+0x16a>
 8015e10:	7803      	ldrb	r3, [r0, #0]
 8015e12:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015e16:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015e1a:	e76c      	b.n	8015cf6 <_printf_i+0xf6>
 8015e1c:	0801d575 	.word	0x0801d575
 8015e20:	0801d586 	.word	0x0801d586

08015e24 <_realloc_r>:
 8015e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e26:	4607      	mov	r7, r0
 8015e28:	4614      	mov	r4, r2
 8015e2a:	460e      	mov	r6, r1
 8015e2c:	b921      	cbnz	r1, 8015e38 <_realloc_r+0x14>
 8015e2e:	4611      	mov	r1, r2
 8015e30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015e34:	f7ff bc88 	b.w	8015748 <_malloc_r>
 8015e38:	b922      	cbnz	r2, 8015e44 <_realloc_r+0x20>
 8015e3a:	f7ff fc37 	bl	80156ac <_free_r>
 8015e3e:	4625      	mov	r5, r4
 8015e40:	4628      	mov	r0, r5
 8015e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e44:	f000 f814 	bl	8015e70 <_malloc_usable_size_r>
 8015e48:	42a0      	cmp	r0, r4
 8015e4a:	d20f      	bcs.n	8015e6c <_realloc_r+0x48>
 8015e4c:	4621      	mov	r1, r4
 8015e4e:	4638      	mov	r0, r7
 8015e50:	f7ff fc7a 	bl	8015748 <_malloc_r>
 8015e54:	4605      	mov	r5, r0
 8015e56:	2800      	cmp	r0, #0
 8015e58:	d0f2      	beq.n	8015e40 <_realloc_r+0x1c>
 8015e5a:	4631      	mov	r1, r6
 8015e5c:	4622      	mov	r2, r4
 8015e5e:	f7ff fbf8 	bl	8015652 <memcpy>
 8015e62:	4631      	mov	r1, r6
 8015e64:	4638      	mov	r0, r7
 8015e66:	f7ff fc21 	bl	80156ac <_free_r>
 8015e6a:	e7e9      	b.n	8015e40 <_realloc_r+0x1c>
 8015e6c:	4635      	mov	r5, r6
 8015e6e:	e7e7      	b.n	8015e40 <_realloc_r+0x1c>

08015e70 <_malloc_usable_size_r>:
 8015e70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015e74:	1f18      	subs	r0, r3, #4
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	bfbc      	itt	lt
 8015e7a:	580b      	ldrlt	r3, [r1, r0]
 8015e7c:	18c0      	addlt	r0, r0, r3
 8015e7e:	4770      	bx	lr

08015e80 <_init>:
 8015e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e82:	bf00      	nop
 8015e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015e86:	bc08      	pop	{r3}
 8015e88:	469e      	mov	lr, r3
 8015e8a:	4770      	bx	lr

08015e8c <_fini>:
 8015e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e8e:	bf00      	nop
 8015e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015e92:	bc08      	pop	{r3}
 8015e94:	469e      	mov	lr, r3
 8015e96:	4770      	bx	lr
